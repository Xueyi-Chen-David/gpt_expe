{"id": 0, "data_id": "csn-106557", "input_stids": [1, 819, 1194, 12608, 32315, 32315, 534, 1861, 49, 85, 4965, 1750, 4709, 32315, 2989, 54, 1861, 49, 85, 12140, 32315, 32315, 632, 7360, 1071, 918, 1746, 1042, 261, 262, 288, 309, 261, 333, 263, 819, 480, 446, 262, 288, 333, 263, 819, 263, 1746, 261, 262, 274, 289, 289, 32315, 1071, 2989, 9682, 12140, 3570, 2544, 2750, 261, 262, 288, 327, 12608, 274, 289, 32315, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 32315, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 14309, 1248, 1919, 2041, 261, 262, 288, 25395, 261, 12608, 262, 274, 289, 2], "score": -0.08917704969644547, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducerShouldNotBeNull", "(", ")", "{", "assertNotNull", "(", "producer", ")", ";", "}", "</s>"]}, {"tids": [1, 333, 263, 12608, 273, 394, 2989, 9682, 12140, 261, 315, 21123, 1114, 315, 262, 274, 2], "score": -0.1502571702003479, "weight": 1, "toks": ["<s>", "this", ".", "producer", "=", "new", "DefaultMQProducer", "(", "\"", "ProducerGroup", "\"", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 12608, 262, 274, 2], "score": -0.1503027230501175, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "producer", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 12608, 262, 274, 2], "score": -0.1672113984823227, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "producer", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 819, 7968, 261, 262, 288, 25395, 261, 819, 262, 274, 289, 2], "score": -0.18021580576896667, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "contextLoads", "(", ")", "{", "assertNotNull", "(", "context", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 632, 7766, 1071, 918, 1842, 12140, 5962, 261, 262, 288, 25395, 261, 12608, 262, 274, 289, 1375, 2], "score": -0.20980563759803772, "weight": 1, "toks": ["<s>", "`", "@", "Test", "public", "void", "testProducerNotNull", "(", ")", "{", "assertNotNull", "(", "producer", ")", ";", "}", "`", "</s>"]}, {"tids": [1, 1815, 18163, 261, 12608, 262, 263, 28800, 261, 262, 274, 2], "score": -0.21830376982688904, "weight": 1, "toks": ["<s>", "assertThat", "(", "producer", ")", ".", "isNotNull", "(", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 12608, 262, 274, 2], "score": -0.21985408663749695, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "producer", ")", ";", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 25395, 261, 12608, 262, 274, 1375, 1375, 1375, 2], "score": -0.229715496301651, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "assertNotNull", "(", "producer", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 5452, 263, 25395, 261, 12608, 262, 274, 2], "score": -0.23572954535484314, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "producer", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 15.270725349716185, "bleu-max": 15.270725349716185, "bleu-min": 8.584809362527968, "bleu-avg": 10.433211391019253, "code-bleu": 2.968515229293003, "code-bleu-max": 2.968515229293003, "code-bleu-min": 2.264890205282774, "code-bleu-avg": 2.4577660667204158, "edit-sim": 22, "edit-sim-max": 23, "edit-sim-min": 21, "edit-sim-avg": 22.1, "rouge-p": 37.5, "rouge-p-max": 42.857142857142854, "rouge-p-min": 30.0, "rouge-p-avg": 34.20238095238095, "rouge-r": 33.33333333333333, "rouge-r-max": 33.33333333333333, "rouge-r-min": 33.33333333333333, "rouge-r-avg": 33.33333333333332, "rouge-f": 35.294117148788935, "rouge-f-max": 37.499999507812504, "rouge-f-min": 31.578946869806096, "rouge-f-avg": 33.63648041000703, "num-seq": 10}, "time": 3.240980625152588, "misc": {}}
{"id": 1, "data_id": "csn-106557", "input_stids": [1, 1194, 12608, 32315, 3238, 918, 1262, 261, 514, 1372, 3330, 262, 288, 1262, 261, 638, 269, 3330, 262, 274, 289, 32315, 534, 1861, 49, 85, 4965, 1750, 4709, 32315, 2989, 54, 1861, 49, 85, 12140, 32315, 12608, 263, 444, 3826, 3332, 2694, 261, 721, 1688, 49, 85, 2297, 263, 3570, 2544, 2750, 3826, 3332, 2694, 261, 262, 262, 274, 32315, 632, 7360, 1071, 918, 1746, 1042, 261, 262, 288, 309, 261, 333, 263, 819, 480, 446, 262, 288, 333, 263, 819, 263, 1746, 261, 262, 274, 289, 289, 32315, 1071, 2989, 9682, 12140, 3570, 2544, 2750, 261, 262, 288, 327, 12608, 274, 289, 32315, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 32315, 1262, 261, 315, 3902, 6, 397, 22130, 67, 1985, 67, 4370, 269, 315, 3902, 6, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 289, 2], "score": -0.06789272278547287, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 289, 2], "score": -0.12021034955978394, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 289, 2], "score": -0.16613639891147614, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2563, 1305, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 289, 2], "score": -0.17115436494350433, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLoadMethod", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 17772, 315, 262, 274, 342, 342, 2672, 279, 2923, 3330, 508, 364, 7769, 289, 2], "score": -0.1975419521331787, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "development", "\"", ")", ";", "/", "/", "Use", "a", "specific", "environment", "name", "for", "testing", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 289, 2], "score": -0.20404905080795288, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 289, 2], "score": -0.20828239619731903, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 289, 2], "score": -0.20919327437877655, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 289, 2], "score": -0.20941047370433807, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 12140, 17701, 261, 262, 288, 1262, 261, 315, 1842, 3491, 315, 262, 274, 289, 2], "score": -0.23545731604099274, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProducerInitialization", "(", ")", "{", "load", "(", "\"", "testEnv", "\"", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 10.267379984261185, "bleu-max": 31.22411714724585, "bleu-min": 10.267379984261185, "bleu-avg": 19.183554212464852, "code-bleu": 2.069987721731068, "code-bleu-max": 26.497664619988235, "code-bleu-min": 2.069987721731068, "code-bleu-avg": 10.740358849380359, "edit-sim": 33, "edit-sim-max": 58, "edit-sim-min": 32, "edit-sim-avg": 45.3, "rouge-p": 42.857142857142854, "rouge-p-max": 50.0, "rouge-p-min": 30.0, "rouge-p-avg": 41.45238095238095, "rouge-r": 33.33333333333333, "rouge-r-max": 55.55555555555556, "rouge-r-min": 33.33333333333333, "rouge-r-avg": 42.222222222222214, "rouge-f": 37.499999507812504, "rouge-f-max": 52.631578448753466, "rouge-f-min": 31.578946869806096, "rouge-f-avg": 41.686016013687706, "num-seq": 10}, "time": 0.9971723556518555, "misc": {}}
{"id": 2, "data_id": "csn-106557", "input_stids": [1, 1194, 12608, 32315, 3238, 918, 1262, 261, 514, 1372, 3330, 262, 288, 1262, 261, 638, 269, 3330, 262, 274, 289, 32315, 534, 1861, 49, 85, 4965, 1750, 4709, 32315, 2989, 54, 1861, 49, 85, 12140, 32315, 32315, 632, 7360, 1071, 918, 1746, 1042, 261, 262, 288, 309, 261, 333, 263, 819, 480, 446, 262, 288, 333, 263, 819, 263, 1746, 261, 262, 274, 289, 289, 32315, 1071, 2989, 9682, 12140, 3570, 2544, 2750, 261, 262, 288, 327, 12608, 274, 289, 32315, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 32315, 1262, 261, 315, 3902, 6, 397, 22130, 67, 1985, 67, 4370, 269, 315, 3902, 6, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 3902, 6, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1262, 1190, 5494, 261, 262, 288, 1262, 261, 315, 2030, 58, 315, 262, 274, 289, 2], "score": -0.06942365318536758, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "loadWithEnvironment", "(", ")", "{", "load", "(", "\"", "DEV", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 7128, 315, 262, 262, 274, 289, 2], "score": -0.14955830574035645, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "Assert", ".", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "STR", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2563, 1305, 261, 262, 288, 1262, 261, 315, 22130, 67, 11986, 315, 262, 274, 289, 2], "score": -0.15650853514671326, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLoadMethod", "(", ")", "{", "load", "(", "\"", "TEST_ENV", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 7128, 315, 262, 262, 274, 289, 2], "score": -0.16418799757957458, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "Assert", ".", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "STR", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 1842, 707, 1375, 805, 54, 1861, 49, 85, 12140, 1375, 1410, 3387, 716, 1347, 326, 819, 353, 4203, 598, 2923, 3330, 1947, 269, 518, 1914, 326, 2665, 3931, 315, 7128, 315, 263, 2], "score": -0.17478860914707184, "weight": 1, "toks": ["<s>", "The", "test", "method", "`", "defaultRocketMqProducer", "`", "should", "ensure", "that", "when", "the", "context", "is", "loaded", "with", "specific", "environment", "settings", ",", "it", "contains", "the", "expected", "bean", "\"", "STR", "\"", ".", "</s>"]}, {"tids": [1, 1021, 3021, 358, 1842, 326, 707, 3613, 1842, 487, 20570, 291, 2357, 487, 3323, 353, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 1375, 1375, 1375, 1220, 3021, 11752, 326, 1842, 269, 326, 3214, 707, 3832, 18432, 263, 2], "score": -0.17673635482788086, "weight": 1, "toks": ["<s>", "The", "statement", "to", "test", "the", "method", "under", "test", "as", "concisely", "as", "possible", "is", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "`", "`", "`", "This", "statement", "triggers", "the", "test", ",", "the", "actual", "method", "being", "tested", ".", "</s>"]}, {"tids": [1, 657, 326, 707, 1375, 805, 54, 1861, 49, 85, 12140, 261, 262, 1375, 269, 326, 2202, 3021, 716, 7434, 326, 707, 3613, 1842, 261, 1375, 1262, 261, 262, 1375, 262, 487, 21043, 7694, 715, 487, 3323, 353, 294, 1375, 1375, 1375, 2252, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 1375, 1375, 1375, 2], "score": -0.18167124688625336, "weight": 1, "toks": ["<s>", "In", "the", "method", "`", "defaultRocketMqProducer", "(", ")", "`", ",", "the", "single", "statement", "that", "tests", "the", "method", "under", "test", "(", "`", "load", "(", ")", "`", ")", "as", "succinctly", "as", "possible", "is", ":", "`", "`", "`", "java", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 289, 2], "score": -0.1862722784280777, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 7128, 315, 262, 262, 274, 289, 2], "score": -0.20882844924926758, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "Assert", ".", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "STR", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 7128, 315, 262, 262, 274, 289, 2], "score": -0.21281835436820984, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "Assert", ".", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "STR", "\"", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 24.46902357535083, "bleu-avg": 49.63975943632043, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 19.390008163406673, "code-bleu-avg": 50.69012537665962, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 45, "edit-sim-avg": 69.6, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 67.77350427350429, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 55.55555555555556, "rouge-r-avg": 75.55555555555557, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 52.631578448753466, "rouge-f-avg": 71.14224906741143, "num-seq": 10}, "time": 1.0706045627593994, "misc": {}}
{"id": 3, "data_id": "csn-106557", "input_stids": [1, 1194, 12608, 32315, 3238, 918, 1262, 261, 514, 1372, 3330, 262, 288, 1262, 261, 638, 269, 3330, 262, 274, 289, 32315, 534, 1861, 49, 85, 4965, 1750, 4709, 32315, 2989, 54, 1861, 49, 85, 12140, 32315, 32315, 632, 7360, 1071, 918, 1746, 1042, 261, 262, 288, 309, 261, 333, 263, 819, 480, 446, 262, 288, 333, 263, 819, 263, 1746, 261, 262, 274, 289, 289, 32315, 1071, 2989, 9682, 12140, 3570, 2544, 2750, 261, 262, 288, 327, 12608, 274, 289, 32315, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 32315, 1262, 261, 315, 3902, 6, 397, 22130, 67, 1985, 67, 4370, 269, 315, 3902, 6, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 3902, 6, 262, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 3902, 6, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 7128, 315, 262, 262, 274, 289, 2], "score": -0.03994728997349739, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "Assert", ".", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "STR", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 7128, 315, 262, 262, 274, 289, 2], "score": -0.13195134699344635, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "Assert", ".", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "STR", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1220, 981, 13016, 12001, 358, 506, 279, 1087, 434, 279, 1842, 667, 5941, 316, 5110, 364, 279, 22751, 300, 2511, 2521, 263, 13743, 269, 518, 353, 7155, 310, 603, 7769, 326, 1794, 14549, 364, 642, 4017, 471, 30632, 534, 1861, 9682, 883, 4810, 13062, 263, 534, 1861, 9682, 353, 279, 16859, 17301, 471, 12833, 4072, 263, 300, 1021, 667, 1375, 534, 1861, 49, 85, 4965, 1750, 4709, 1375, 19816, 87, 716, 333, 1842, 667, 353, 364, 7769, 326, 3656, 300, 1664, 434, 534, 1861, 9682, 4085, 316, 22751, 263, 300, 1021, 1375, 2989, 54, 1861, 49, 85, 12140, 1375, 14606, 358, 506, 326, 667, 3613, 1842, 269, 1492, 10374, 7372, 883, 5431, 358, 534, 1861, 9682, 263, 300, 1375, 1262, 261, 514, 263, 263, 263, 3330, 262, 1375, 353, 279, 3238, 707, 1399, 358, 18711, 326, 7153, 1207, 598, 864, 3330, 1947, 263, 300, 6090, 1375, 632, 7360, 1375, 13999, 326, 707, 1375, 1746, 1042, 261, 262, 1375, 358, 1086, 1839, 1517, 1375, 632, 7766, 1375, 707, 316, 333, 667, 269, 24831, 2703, 854, 9426, 8214, 635, 7647, 326, 2521, 819, 309, 518, 296, 272, 486, 446, 263, 300, 1375, 3570, 2544, 2750, 261, 262, 1375, 707, 353, 279, 7060, 358, 4614, 326, 791, 434, 326, 1375, 2989, 9682, 12140, 1375, 628, 326, 1842, 667, 263, 300, 1021, 1375, 805, 54, 1861, 49, 85, 12140, 261, 262, 1375, 707, 598, 3204, 1375, 632, 7766, 1375, 12001, 358, 506, 326, 3214, 1842, 1625, 1375, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 1375, 13442, 622, 1664, 1947, 261, 10016, 2553, 6810, 1375, 22130, 67, 1985, 67, 4370, 1375, 471, 1375, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 1375, 262, 3832, 4203, 263, 16093, 310, 333, 269, 1915, 854, 2795, 7820, 6728, 309, 326, 2521, 819, 1914, 279, 3931, 4141, 315, 7128, 315, 269, 1492, 12001, 19530, 578, 4825, 506, 279, 6695, 578, 27228, 911, 269, 487, 6728, 364, 326, 1967, 3931, 508, 13605, 3302, 296, 268, 14755, 5865, 3308, 635, 555, 263, 6338, 333, 269, 326, 11239, 1301, 358, 1842, 4102, 8616, 506, 294, 404, 263, 9190, 578, 2911, 326, 3330, 1947, 263, 576, 263, 7903, 326, 7153, 707, 598, 3330, 10459, 263, 890, 263, 5452, 326, 4573, 4636, 358, 3929, 3434, 6885, 269, 4123, 487, 326, 15782, 434, 6826, 15709, 316, 326, 2521, 819, 263, 1220, 7434, 716, 326, 4085, 854, 8783, 17651, 2511, 603, 326, 2112, 3330, 1947, 263, 2], "score": -0.1566626876592636, "weight": 1, "toks": ["<s>", "This", "code", "snippet", "seems", "to", "be", "a", "part", "of", "a", "test", "class", "written", "in", "Java", "for", "a", "Spring", "-", "based", "application", ".", "Here", ",", "it", "is", "focusing", "on", "testing", "the", "component", "responsible", "for", "configuring", "and", "managing", "RocketMQ", "message", "producers", ".", "RocketMQ", "is", "a", "distributed", "messaging", "and", "streaming", "platform", ".", "-", "The", "class", "`", "RocketMqAutoConfigurationTest", "`", "suggests", "that", "this", "test", "class", "is", "for", "testing", "the", "auto", "-", "configuration", "of", "RocketMQ", "components", "in", "Spring", ".", "-", "The", "`", "DefaultRocketMqProducer", "`", "appears", "to", "be", "the", "class", "under", "test", ",", "which", "likely", "handles", "message", "sending", "to", "RocketMQ", ".", "-", "`", "load", "(", "String", ".", ".", ".", "environment", ")", "`", "is", "a", "private", "method", "used", "to", "initiate", "the", "loading", "process", "with", "given", "environment", "settings", ".", "-", "Annotation", "`", "@", "After", "`", "marks", "the", "method", "`", "closeContext", "(", ")", "`", "to", "run", "after", "each", "`", "@", "Test", "`", "method", "in", "this", "class", ",", "ensuring", "resources", "are", "cleaned", "properly", "by", "closing", "the", "application", "context", "if", "it", "'", "s", "not", "null", ".", "-", "`", "getProducer", "(", ")", "`", "method", "is", "a", "getter", "to", "retrieve", "the", "instance", "of", "the", "`", "DefaultMQProducer", "`", "from", "the", "test", "class", ".", "-", "The", "`", "defaultRocketMqProducer", "(", ")", "`", "method", "with", "annotation", "`", "@", "Test", "`", "seems", "to", "be", "the", "actual", "test", "where", "`", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", "`", "hints", "at", "configuration", "settings", "(", "possibly", "defined", "constants", "`", "TEST_NAME_SERVER", "`", "and", "`", "TEST_PRODUCER_GROUP", "`", ")", "being", "loaded", ".", "Following", "this", ",", "there", "are", "two", "assertions", "checking", "if", "the", "application", "context", "contains", "a", "bean", "named", "\"", "STR", "\"", ",", "which", "seems", "redundant", "or", "might", "be", "a", "placeholder", "or", "mistake", ",", "as", "checking", "for", "the", "same", "bean", "name", "twice", "doesn", "'", "t", "typically", "happen", "unless", "by", "error", ".", "From", "this", ",", "the", "critical", "action", "to", "test", "would", "simply", "be", ":", "1", ".", "Initialize", "or", "prepare", "the", "environment", "settings", ".", "2", ".", "Execute", "the", "loading", "method", "with", "environment", "configurations", ".", "3", ".", "Assert", "the", "necessary", "conditions", "to", "verify", "correct", "behavior", ",", "such", "as", "the", "existence", "of", "particular", "beans", "in", "the", "application", "context", ".", "This", "tests", "that", "the", "components", "are", "correctly", "instantiated", "based", "on", "the", "provided", "environment", "settings", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 289, 2], "score": -0.1592664271593094, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "}", "</s>"]}, {"tids": [1, 2073, 326, 6873, 10313, 434, 1375, 2989, 9682, 12140, 1375, 316, 1375, 805, 54, 1861, 49, 85, 12140, 261, 262, 1375, 707, 263, 2], "score": -0.17249348759651184, "weight": 1, "toks": ["<s>", "Check", "the", "successful", "initialization", "of", "`", "DefaultMQProducer", "`", "in", "`", "defaultRocketMqProducer", "(", ")", "`", "method", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 805, 315, 262, 274, 5452, 263, 25395, 261, 3570, 2544, 2750, 261, 262, 262, 274, 289, 2], "score": -0.18145279586315155, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "default", "\"", ")", ";", "Assert", ".", "assertNotNull", "(", "getProducer", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1868, 54, 1861, 49, 85, 12140, 7968, 16147, 715, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 1815, 5510, 261, 819, 263, 1914, 3381, 261, 315, 805, 54, 1861, 49, 85, 12140, 315, 262, 262, 274, 289, 2], "score": -0.1960459202528, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testDefaultRocketMqProducerLoadsCorrectly", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "assertTrue", "(", "context", ".", "containsBean", "(", "\"", "defaultRocketMqProducer", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2563, 5494, 261, 262, 288, 1262, 261, 315, 4461, 315, 262, 274, 289, 2], "score": -0.19921883940696716, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLoadEnvironment", "(", ")", "{", "load", "(", "\"", "dev", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1262, 1375, 707, 23500, 269, 21171, 326, 1375, 805, 54, 1861, 49, 85, 12140, 1375, 707, 358, 866, 364, 2923, 3931, 1257, 3037, 310, 326, 5976, 810, 269, 486, 315, 7128, 315, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 262, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.20478685200214386, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "load", "`", "method", "effectively", ",", "improve", "the", "`", "defaultRocketMqProducer", "`", "method", "to", "check", "for", "specific", "bean", "names", "reflecting", "the", "dynamic", "input", ",", "not", "\"", "STR", "\"", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "Assert", ".", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ")", ")", ";", "Assert", ".", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2563, 5494, 261, 262, 288, 1262, 261, 315, 17772, 315, 262, 274, 289, 2], "score": -0.2150048464536667, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLoadEnvironment", "(", ")", "{", "load", "(", "\"", "development", "\"", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 29.765120357944426, "bleu-max": 65.63226097842613, "bleu-min": 27.511077291164472, "bleu-avg": 35.32753356162669, "code-bleu": 14.865111414112874, "code-bleu-max": 75.0798337304668, "code-bleu-min": 14.865111414112874, "code-bleu-avg": 28.7003734816844, "edit-sim": 47, "edit-sim-max": 94, "edit-sim-min": 45, "edit-sim-avg": 59.2, "rouge-p": 55.55555555555556, "rouge-p-max": 90.0, "rouge-p-min": 46.15384615384615, "rouge-p-avg": 59.1068376068376, "rouge-r": 50.0, "rouge-r-max": 90.0, "rouge-r-min": 50.0, "rouge-r-avg": 64.0, "rouge-f": 52.631578448753466, "rouge-f-max": 89.9999995, "rouge-f-min": 52.17391255198489, "rouge-f-avg": 61.08029906706954, "num-seq": 10}, "time": 1.1293940544128418, "misc": {}}
{"id": 4, "data_id": "csn-106557", "input_stids": [1, 1194, 12608, 32315, 3238, 918, 1262, 261, 514, 1372, 3330, 262, 288, 1262, 261, 638, 269, 3330, 262, 274, 289, 32315, 534, 1861, 49, 85, 4965, 1750, 4709, 2989, 54, 1861, 49, 85, 12140, 32315, 2989, 54, 1861, 49, 85, 12140, 32315, 32315, 632, 7360, 1071, 918, 1746, 1042, 261, 262, 288, 309, 261, 333, 263, 819, 480, 446, 262, 288, 333, 263, 819, 263, 1746, 261, 262, 274, 289, 289, 32315, 1071, 2989, 9682, 12140, 3570, 2544, 2750, 261, 262, 288, 327, 12608, 274, 289, 32315, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 32315, 1262, 261, 315, 3902, 6, 397, 22130, 67, 1985, 67, 4370, 269, 315, 3902, 6, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 3902, 6, 262, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 3902, 6, 262, 262, 274, 2989, 54, 1861, 49, 85, 12140, 805, 54, 1861, 49, 85, 12140, 273, 333, 263, 819, 263, 16485, 261, 2989, 54, 1861, 49, 85, 12140, 263, 667, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 805, 54, 1861, 49, 85, 12140, 315, 262, 262, 274, 289, 2], "score": -0.0770220011472702, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "Assert", ".", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "defaultRocketMqProducer", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 7693, 326, 1375, 1262, 1375, 707, 8783, 11643, 326, 2521, 819, 598, 326, 1269, 3330, 1472, 263, 2], "score": -0.185923770070076, "weight": 1, "toks": ["<s>", "Ensure", "the", "`", "load", "`", "method", "correctly", "initializes", "the", "application", "context", "with", "the", "specified", "environment", "parameters", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 2], "score": -0.19034138321876526, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 2989, 54, 1861, 49, 85, 12140, 315, 262, 262, 274, 289, 2], "score": -0.19113020598888397, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "Assert", ".", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "DefaultRocketMqProducer", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 2989, 54, 1861, 49, 85, 12140, 315, 262, 262, 274, 289, 2], "score": -0.21586716175079346, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "DefaultRocketMqProducer", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 2563, 5494, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 289, 2], "score": -0.23420174419879913, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldLoadEnvironment", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 20536, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 2989, 54, 1861, 49, 85, 12140, 315, 262, 262, 274, 289, 2], "score": -0.25600510835647583, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducerIsValid", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "DefaultRocketMqProducer", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2563, 5494, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 289, 2], "score": -0.2560402750968933, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLoadEnvironment", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 7128, 315, 262, 262, 274, 289, 2], "score": -0.2674291133880615, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "Assert", ".", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "STR", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 805, 54, 1861, 49, 85, 12140, 315, 262, 262, 274, 289, 2], "score": -0.27537021040916443, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "defaultRocketMqProducer", "\"", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 21.581743599541312, "bleu-max": 28.517539529041496, "bleu-min": 17.407765595569785, "bleu-avg": 22.768791434941868, "code-bleu": 3.244348403477263, "code-bleu-max": 28.2717207837242, "code-bleu-min": 2.84732360238412, "code-bleu-avg": 9.003441504961915, "edit-sim": 54, "edit-sim-max": 60, "edit-sim-min": 46, "edit-sim-avg": 54.2, "rouge-p": 66.66666666666666, "rouge-p-max": 66.66666666666666, "rouge-p-min": 44.44444444444444, "rouge-p-avg": 53.88888888888889, "rouge-r": 50.0, "rouge-r-max": 62.5, "rouge-r-min": 50.0, "rouge-r-avg": 52.5, "rouge-f": 57.14285665306124, "rouge-f-max": 57.14285665306124, "rouge-f-min": 47.05882303114187, "rouge-f-avg": 52.66573246449242, "num-seq": 10}, "time": 0.8266549110412598, "misc": {}}
{"id": 5, "data_id": "csn-106557", "input_stids": [1, 1194, 12608, 32315, 1071, 2989, 9682, 12140, 3570, 2544, 2750, 261, 262, 288, 327, 12608, 274, 289, 32315, 534, 1861, 49, 85, 4965, 1750, 4709, 2989, 54, 1861, 49, 85, 12140, 2989, 9682, 12140, 32315, 32315, 32315, 632, 7360, 1071, 918, 1746, 1042, 261, 262, 288, 309, 261, 333, 263, 819, 480, 446, 262, 288, 333, 263, 819, 263, 1746, 261, 262, 274, 289, 289, 32315, 1071, 2989, 9682, 12140, 3570, 2544, 2750, 261, 262, 288, 327, 12608, 274, 289, 32315, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 32315, 1262, 261, 315, 3902, 6, 397, 22130, 67, 1985, 67, 4370, 269, 315, 3902, 6, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 3902, 6, 262, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 3902, 6, 262, 262, 274, 2989, 54, 1861, 49, 85, 12140, 805, 54, 1861, 49, 85, 12140, 273, 333, 263, 819, 263, 16485, 261, 2989, 54, 1861, 49, 85, 12140, 263, 667, 262, 274, 2989, 9682, 12140, 805, 9682, 12140, 273, 805, 54, 1861, 49, 85, 12140, 263, 3570, 2544, 2750, 261, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 12140, 5962, 261, 262, 288, 25395, 261, 805, 54, 1861, 49, 85, 12140, 263, 3570, 2544, 2750, 261, 262, 262, 274, 289, 2], "score": -0.07643559575080872, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProducerNotNull", "(", ")", "{", "assertNotNull", "(", "defaultRocketMqProducer", ".", "getProducer", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 7128, 315, 262, 262, 274, 2989, 54, 1861, 49, 85, 12140, 805, 54, 1861, 49, 85, 12140, 273, 333, 263, 819, 263, 16485, 261, 2989, 54, 1861, 49, 85, 12140, 263, 667, 262, 274, 25395, 261, 805, 54, 1861, 49, 85, 12140, 263, 3570, 2544, 2750, 261, 262, 262, 274, 289, 2], "score": -0.24791838228702545, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "STR", "\"", ")", ")", ";", "DefaultRocketMqProducer", "defaultRocketMqProducer", "=", "this", ".", "context", ".", "getBean", "(", "DefaultRocketMqProducer", ".", "class", ")", ";", "assertNotNull", "(", "defaultRocketMqProducer", ".", "getProducer", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 12140, 261, 262, 288, 2989, 9682, 12140, 12608, 273, 805, 54, 1861, 49, 85, 12140, 263, 3570, 2544, 2750, 261, 262, 274, 25395, 261, 12608, 262, 274, 289, 2], "score": -0.24894873797893524, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProducer", "(", ")", "{", "DefaultMQProducer", "producer", "=", "defaultRocketMqProducer", ".", "getProducer", "(", ")", ";", "assertNotNull", "(", "producer", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 12140, 1356, 8921, 12140, 261, 262, 288, 25395, 261, 805, 54, 1861, 49, 85, 12140, 263, 3570, 2544, 2750, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.26686161756515503, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetProducerReturnsNonNullProducer", "(", ")", "{", "assertNotNull", "(", "defaultRocketMqProducer", ".", "getProducer", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 4709, 261, 262, 288, 25395, 261, 805, 54, 1861, 49, 85, 12140, 263, 3570, 2544, 2750, 261, 262, 262, 274, 289, 2], "score": -0.2697802186012268, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducerTest", "(", ")", "{", "assertNotNull", "(", "defaultRocketMqProducer", ".", "getProducer", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 12140, 261, 262, 288, 25395, 261, 805, 54, 1861, 49, 85, 12140, 263, 3570, 2544, 2750, 261, 262, 262, 274, 289, 2], "score": -0.27075403928756714, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProducer", "(", ")", "{", "assertNotNull", "(", "defaultRocketMqProducer", ".", "getProducer", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 12140, 261, 262, 288, 2989, 9682, 12140, 12608, 273, 805, 54, 1861, 49, 85, 12140, 263, 3570, 2544, 2750, 261, 262, 274, 25395, 261, 12608, 262, 274, 289, 2], "score": -0.27928709983825684, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProducer", "(", ")", "{", "DefaultMQProducer", "producer", "=", "defaultRocketMqProducer", ".", "getProducer", "(", ")", ";", "assertNotNull", "(", "producer", ")", ";", "}", "</s>"]}, {"tids": [1, 5452, 263, 25395, 261, 805, 9682, 12140, 262, 274, 2], "score": -0.28433915972709656, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "defaultMQProducer", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 12140, 261, 262, 288, 2989, 9682, 12140, 12608, 273, 805, 54, 1861, 49, 85, 12140, 263, 3570, 2544, 2750, 261, 262, 274, 25395, 261, 12608, 262, 274, 289, 2], "score": -0.2859136760234833, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProducer", "(", ")", "{", "DefaultMQProducer", "producer", "=", "defaultRocketMqProducer", ".", "getProducer", "(", ")", ";", "assertNotNull", "(", "producer", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 5452, 263, 25395, 261, 805, 9682, 12140, 262, 274, 289, 2], "score": -0.2865484058856964, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "Assert", ".", "assertNotNull", "(", "defaultMQProducer", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 15.16949292283567, "bleu-max": 37.93545827999254, "bleu-min": 15.16949292283567, "bleu-avg": 30.645046899560477, "code-bleu": 3.608492028099472, "code-bleu-max": 30.85455468452194, "code-bleu-min": 3.608492028099472, "code-bleu-avg": 20.823802443408812, "edit-sim": 63, "edit-sim-max": 78, "edit-sim-min": 55, "edit-sim-avg": 64.5, "rouge-p": 83.33333333333334, "rouge-p-max": 87.5, "rouge-p-min": 62.5, "rouge-p-avg": 76.22222222222224, "rouge-r": 55.55555555555556, "rouge-r-max": 77.77777777777779, "rouge-r-min": 55.55555555555556, "rouge-r-avg": 73.33333333333334, "rouge-f": 66.66666618666667, "rouge-f-max": 82.35294067820071, "rouge-f-min": 58.82352891349482, "rouge-f-avg": 74.41004422226528, "num-seq": 10}, "time": 0.8141646385192871, "misc": {}}
{"id": 6, "data_id": "csn-106557", "input_stids": [1, 1194, 12608, 32315, 1071, 2989, 9682, 12140, 3570, 2544, 2750, 261, 262, 288, 327, 12608, 274, 289, 32315, 534, 1861, 49, 85, 4965, 1750, 4709, 2989, 54, 1861, 49, 85, 12140, 2989, 9682, 12140, 32315, 32315, 9129, 6657, 3453, 263, 6296, 261, 262, 263, 3795, 261, 425, 317, 288, 775, 288, 514, 721, 1688, 49, 85, 6657, 273, 425, 263, 3579, 261, 262, 274, 1000, 411, 514, 405, 721, 1688, 49, 85, 3453, 273, 425, 263, 2366, 261, 262, 274, 309, 261, 26777, 263, 2709, 261, 721, 1688, 49, 85, 3453, 262, 262, 288, 18327, 7621, 5869, 263, 9129, 261, 721, 1688, 49, 85, 6657, 269, 315, 3902, 6, 262, 274, 289, 469, 288, 514, 2342, 273, 5778, 263, 1233, 261, 721, 1688, 49, 85, 3453, 269, 315, 3902, 6, 262, 274, 18327, 7621, 5869, 263, 9129, 261, 721, 1688, 49, 85, 6657, 269, 2342, 262, 274, 4145, 263, 1123, 261, 315, 3902, 6, 269, 721, 1688, 49, 85, 6657, 269, 2342, 262, 274, 289, 289, 1044, 261, 26095, 3781, 431, 262, 288, 4145, 263, 555, 261, 315, 3902, 6, 269, 431, 262, 274, 289, 289, 262, 274, 32315, 632, 7360, 1071, 918, 1746, 1042, 261, 262, 288, 309, 261, 333, 263, 819, 480, 446, 262, 288, 333, 263, 819, 263, 1746, 261, 262, 274, 289, 289, 32315, 1071, 2989, 9682, 12140, 3570, 2544, 2750, 261, 262, 288, 327, 12608, 274, 289, 32315, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 32315, 1262, 261, 315, 3902, 6, 397, 22130, 67, 1985, 67, 4370, 269, 315, 3902, 6, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 3902, 6, 262, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 3902, 6, 262, 262, 274, 2989, 54, 1861, 49, 85, 12140, 805, 54, 1861, 49, 85, 12140, 273, 333, 263, 819, 263, 16485, 261, 2989, 54, 1861, 49, 85, 12140, 263, 667, 262, 274, 2989, 9682, 12140, 805, 9682, 12140, 273, 805, 54, 1861, 49, 85, 12140, 263, 3570, 2544, 2750, 261, 262, 274, 5452, 263, 1815, 8867, 261, 805, 9682, 12140, 263, 336, 1557, 4962, 3178, 261, 262, 269, 22130, 67, 1985, 67, 4370, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 1868, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 17365, 294, 24645, 6669, 315, 269, 315, 12608, 1114, 21, 315, 262, 274, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 805, 54, 1861, 49, 85, 12140, 315, 262, 262, 274, 2989, 54, 1861, 49, 85, 12140, 805, 54, 1861, 49, 85, 12140, 273, 333, 263, 819, 263, 16485, 261, 2989, 54, 1861, 49, 85, 12140, 263, 667, 262, 274, 2989, 9682, 12140, 805, 9682, 12140, 273, 805, 54, 1861, 49, 85, 12140, 263, 3570, 2544, 2750, 261, 262, 274, 1815, 8867, 261, 805, 9682, 12140, 263, 336, 1557, 4962, 3178, 261, 262, 269, 315, 17365, 294, 24645, 6669, 315, 262, 274, 289, 2], "score": -0.07290969043970108, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testDefaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "localhost", ":", "9876", "\"", ",", "\"", "producerGroup1", "\"", ")", ";", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "defaultRocketMqProducer", "\"", ")", ")", ";", "DefaultRocketMqProducer", "defaultRocketMqProducer", "=", "this", ".", "context", ".", "getBean", "(", "DefaultRocketMqProducer", ".", "class", ")", ";", "DefaultMQProducer", "defaultMQProducer", "=", "defaultRocketMqProducer", ".", "getProducer", "(", ")", ";", "assertEquals", "(", "defaultMQProducer", ".", "getNamesrvAddr", "(", ")", ",", "\"", "localhost", ":", "9876", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 2], "score": -0.13293389976024628, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 2], "score": -0.13517972826957703, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 2], "score": -0.1490015983581543, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 2], "score": -0.19007016718387604, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 289, 2], "score": -0.21284162998199463, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "}", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 805, 54, 1861, 49, 85, 12140, 263, 3570, 2544, 2750, 261, 262, 263, 336, 1557, 4962, 3178, 261, 262, 269, 22130, 67, 1985, 67, 4370, 262, 274, 2], "score": -0.21564671397209167, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "defaultRocketMqProducer", ".", "getProducer", "(", ")", ".", "getNamesrvAddr", "(", ")", ",", "TEST_NAME_SERVER", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 288, 1262, 261, 315, 7128, 315, 397, 22130, 67, 1985, 67, 4370, 269, 315, 7128, 315, 397, 22130, 67, 8025, 1212, 17479, 654, 67, 8468, 262, 274, 5452, 263, 1815, 5510, 261, 333, 263, 819, 263, 1914, 3381, 261, 315, 7128, 315, 262, 262, 274, 289, 2], "score": -0.2191382646560669, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "{", "load", "(", "\"", "STR", "\"", "+", "TEST_NAME_SERVER", ",", "\"", "STR", "\"", "+", "TEST_PRODUCER_GROUP", ")", ";", "Assert", ".", "assertTrue", "(", "this", ".", "context", ".", "containsBean", "(", "\"", "STR", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 3570, 2544, 2750, 1375, 707, 269, 3387, 716, 1839, 15387, 518, 269, 326, 2106, 1375, 2989, 9682, 12140, 1375, 733, 353, 486, 446, 471, 8214, 4351, 263, 1220, 848, 506, 20186, 2155, 4486, 20570, 291, 2357, 1450, 392, 11240, 716, 4271, 364, 326, 1661, 300, 446, 460, 2106, 635, 326, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 12140, 261, 262, 288, 2989, 54, 1861, 49, 85, 12140, 12608, 1442, 273, 394, 2989, 54, 1861, 49, 85, 12140, 261, 262, 274, 25395, 261, 12608, 1442, 263, 3570, 2544, 2750, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2227052003145218, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "getProducer", "`", "method", ",", "ensure", "that", "after", "invoking", "it", ",", "the", "returned", "`", "DefaultMQProducer", "`", "object", "is", "not", "null", "and", "properly", "configured", ".", "This", "can", "be", "achieved", "most", "concisely", "using", "an", "assertion", "that", "checks", "for", "the", "non", "-", "null", "value", "returned", "by", "the", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetProducer", "(", ")", "{", "DefaultRocketMqProducer", "producerInstance", "=", "new", "DefaultRocketMqProducer", "(", ")", ";", "assertNotNull", "(", "producerInstance", ".", "getProducer", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 805, 54, 1861, 49, 85, 12140, 261, 262, 2], "score": -0.22883771359920502, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "defaultRocketMqProducer", "(", ")", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 78.13821055418785, "bleu-max": 100.0, "bleu-min": 57.1276619451779, "bleu-avg": 78.22333463786806, "code-bleu": 84.07737335566594, "code-bleu-max": 100.0, "code-bleu-min": 68.44269252319512, "code-bleu-avg": 84.10616793685226, "edit-sim": 94, "edit-sim-max": 100, "edit-sim-min": 86, "edit-sim-avg": 93.6, "rouge-p": 88.88888888888889, "rouge-p-max": 100.0, "rouge-p-min": 77.77777777777779, "rouge-p-avg": 88.8888888888889, "rouge-r": 88.88888888888889, "rouge-r-max": 100.0, "rouge-r-min": 77.77777777777779, "rouge-r-avg": 88.8888888888889, "rouge-f": 88.8888883888889, "rouge-f-max": 99.9999995, "rouge-f-min": 77.77777727777779, "rouge-f-avg": 88.88888838888889, "num-seq": 10}, "time": 0.8202595710754395, "misc": {}}
{"id": 7, "data_id": "csn-18461", "input_stids": [1, 19949, 5912, 17117, 3878, 3121, 501, 10331, 5357, 1446, 24115, 29454, 1864, 10707, 26461, 1267, 32315, 32315, 2541, 2613, 691, 4709, 32315, 514, 467, 1482, 32315, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 333, 263, 1842, 2081, 273, 394, 7766, 2081, 261, 262, 274, 333, 263, 18286, 1318, 273, 394, 7766, 20181, 1318, 261, 262, 274, 289, 632, 7360, 1071, 918, 268, 2091, 4164, 261, 262, 288, 333, 263, 18286, 1318, 263, 389, 8507, 261, 262, 274, 289, 32315, 1071, 760, 2306, 394, 7505, 1782, 1064, 261, 467, 1482, 1267, 269, 514, 10707, 269, 514, 6463, 262, 288, 11691, 5064, 273, 394, 11691, 261, 10707, 262, 274, 309, 261, 6463, 422, 446, 262, 288, 327, 394, 7505, 1782, 1064, 261, 1267, 269, 10707, 269, 394, 16180, 261, 394, 1160, 306, 374, 308, 262, 269, 374, 262, 274, 289, 469, 288, 1160, 306, 308, 1731, 274, 775, 288, 12080, 7204, 394, 7204, 273, 12080, 263, 11595, 261, 5064, 263, 29505, 261, 262, 262, 263, 394, 7204, 261, 262, 274, 309, 261, 401, 394, 7204, 263, 848, 5509, 261, 6463, 262, 262, 288, 5064, 273, 5064, 263, 775, 5159, 28, 261, 262, 274, 289, 1731, 273, 6463, 263, 8425, 261, 5064, 263, 29505, 261, 262, 262, 274, 289, 1044, 261, 15367, 425, 262, 288, 23294, 83, 3693, 40, 263, 2018, 263, 613, 261, 4557, 263, 17412, 269, 315, 3902, 6, 269, 425, 262, 274, 1731, 273, 394, 1160, 306, 374, 308, 274, 289, 327, 394, 7505, 1782, 1064, 261, 1267, 269, 5064, 263, 17470, 1864, 261, 262, 269, 394, 16180, 261, 1731, 262, 269, 1731, 263, 769, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2613, 691, 18163, 10501, 2711, 23269, 67, 4510, 261, 262, 1216, 1185, 32315, 2], "topk": [{"tids": [1, 288, 342, 342, 1788, 590, 471, 4356, 326, 1430, 707, 17069, 1062, 2613, 273, 394, 2504, 1305, 261, 262, 274, 2306, 766, 273, 1842, 2081, 263, 12175, 261, 1062, 2613, 262, 274, 342, 342, 5452, 716, 326, 766, 1914, 326, 2665, 876, 1815, 8867, 261, 467, 1482, 263, 16561, 269, 766, 263, 5870, 261, 262, 262, 274, 25395, 261, 766, 263, 4303, 261, 262, 262, 274, 1815, 5510, 261, 766, 263, 4303, 261, 262, 263, 2319, 261, 262, 405, 374, 262, 274, 289, 2], "score": -0.22032776474952698, "weight": 1, "toks": ["<s>", "{", "/", "/", "Create", "request", "and", "invoke", "the", "delete", "method", "HttpMethod", "httpDelete", "=", "new", "DeleteMethod", "(", ")", ";", "Response", "response", "=", "testServer", ".", "serve", "(", "httpDelete", ")", ";", "/", "/", "Assert", "that", "the", "response", "contains", "the", "expected", "output", "assertEquals", "(", "IStatus", ".", "SUCCESS", ",", "response", ".", "getStatus", "(", ")", ")", ";", "assertNotNull", "(", "response", ".", "getData", "(", ")", ")", ";", "assertTrue", "(", "response", ".", "getData", "(", ")", ".", "available", "(", ")", ">", "0", ")", ";", "}", "</s>"]}, {"tids": [1, 333, 263, 1842, 2081, 263, 20089, 2613, 691, 261, 315, 342, 1842, 3293, 315, 269, 315, 2306, 628, 8568, 590, 315, 262, 274, 2], "score": -0.24288572371006012, "weight": 1, "toks": ["<s>", "this", ".", "testServer", ".", "simulateDeleteRequest", "(", "\"", "/", "testEndpoint", "\"", ",", "\"", "Response", "from", "DELETE", "request", "\"", ")", ";", "</s>"]}, {"tids": [1, 288, 1842, 2081, 263, 1221, 2613, 691, 261, 315, 342, 3454, 315, 269, 446, 262, 274, 289, 2], "score": -0.24325472116470337, "weight": 1, "toks": ["<s>", "{", "testServer", ".", "makeDeleteRequest", "(", "\"", "/", "example", "\"", ",", "null", ")", ";", "}", "</s>"]}, {"tids": [1, 288, 342, 342, 10371, 726, 514, 880, 273, 315, 342, 1430, 315, 274, 333, 263, 1842, 2081, 263, 787, 261, 262, 274, 342, 342, 4603, 2306, 766, 273, 333, 263, 1842, 2081, 263, 12175, 261, 394, 2541, 2613, 261, 880, 262, 262, 274, 342, 342, 5452, 1815, 8867, 261, 467, 1482, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 1815, 8867, 261, 315, 977, 342, 7351, 315, 269, 766, 263, 21078, 261, 262, 262, 274, 1815, 5510, 261, 766, 263, 353, 5579, 329, 261, 262, 262, 274, 289, 2], "score": -0.29339343309402466, "weight": 1, "toks": ["<s>", "{", "/", "/", "Arrange", "String", "url", "=", "\"", "/", "delete", "\"", ";", "this", ".", "testServer", ".", "start", "(", ")", ";", "/", "/", "Act", "Response", "response", "=", "this", ".", "testServer", ".", "serve", "(", "new", "HttpDelete", "(", "url", ")", ")", ";", "/", "/", "Assert", "assertEquals", "(", "IStatus", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "assertEquals", "(", "\"", "text", "/", "plain", "\"", ",", "response", ".", "getMimeType", "(", ")", ")", ";", "assertTrue", "(", "response", ".", "isChunked", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 288, 333, 263, 3875, 261, 262, 289, 2], "score": -0.3091259002685547, "weight": 1, "toks": ["<s>", "{", "this", ".", "setup", "(", ")", "}", "</s>"]}, {"tids": [1, 288, 1815, 18163, 261, 766, 263, 5870, 261, 262, 269, 353, 261, 21153, 263, 7791, 67, 6976, 262, 262, 274, 289, 2], "score": -0.31006890535354614, "weight": 1, "toks": ["<s>", "{", "assertThat", "(", "response", ".", "getStatus", "(", ")", ",", "is", "(", "HttpStatus", ".", "OK_200", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 288, 333, 263, 1842, 2081, 263, 787, 261, 23294, 83, 3693, 40, 263, 7460, 14984, 67, 6949, 67, 9503, 269, 629, 262, 274, 514, 880, 273, 315, 1062, 294, 342, 342, 17365, 294, 315, 397, 333, 263, 1842, 2081, 263, 10033, 275, 310, 2617, 261, 262, 274, 19084, 1062, 273, 261, 19084, 262, 394, 1976, 261, 880, 262, 263, 24982, 261, 262, 274, 1062, 263, 12475, 1305, 261, 315, 8568, 315, 262, 274, 1062, 263, 444, 3244, 1447, 261, 638, 262, 274, 24248, 596, 273, 394, 24248, 261, 1062, 263, 22553, 261, 262, 262, 274, 596, 263, 1045, 261, 315, 7766, 501, 315, 262, 274, 596, 263, 1746, 261, 262, 274, 1815, 8867, 261, 19084, 263, 2239, 67, 3141, 269, 1062, 263, 6476, 1085, 261, 262, 262, 274, 289, 2], "score": -0.31460583209991455, "weight": 1, "toks": ["<s>", "{", "this", ".", "testServer", ".", "start", "(", "NanoHTTPD", ".", "SOCKET_READ_TIMEOUT", ",", "false", ")", ";", "String", "url", "=", "\"", "http", ":", "/", "/", "localhost", ":", "\"", "+", "this", ".", "testServer", ".", "getListeningPort", "(", ")", ";", "HttpURLConnection", "http", "=", "(", "HttpURLConnection", ")", "new", "URL", "(", "url", ")", ".", "openConnection", "(", ")", ";", "http", ".", "setRequestMethod", "(", "\"", "DELETE", "\"", ")", ";", "http", ".", "setDoOutput", "(", "true", ")", ";", "OutputStreamWriter", "out", "=", "new", "OutputStreamWriter", "(", "http", ".", "getOutputStream", "(", ")", ")", ";", "out", ".", "write", "(", "\"", "Test", "data", "\"", ")", ";", "out", ".", "close", "(", ")", ";", "assertEquals", "(", "HttpURLConnection", ".", "HTTP_OK", ",", "http", ".", "getResponseCode", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 1842, 2081, 263, 20089, 2613, 691, 261, 315, 342, 1430, 300, 2494, 315, 262, 274, 1375, 1375, 1375, 2], "score": -0.3224761486053467, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "testServer", ".", "simulateDeleteRequest", "(", "\"", "/", "delete", "-", "endpoint", "\"", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 1842, 2613, 691, 18163, 10501, 2711, 23269, 67, 4510, 707, 1410, 18711, 279, 8568, 590, 358, 326, 1438, 471, 1815, 716, 326, 766, 711, 326, 3434, 1267, 471, 1417, 263, 2], "score": -0.3266597390174866, "weight": 1, "toks": ["<s>", "testDeleteRequestThatSendsBackResponseBody_Success", "method", "should", "initiate", "a", "DELETE", "request", "to", "the", "server", "and", "assert", "that", "the", "response", "has", "the", "correct", "status", "and", "body", ".", "</s>"]}, {"tids": [1, 288, 1842, 2081, 263, 787, 261, 262, 274, 289, 2], "score": -0.32688114047050476, "weight": 1, "toks": ["<s>", "{", "testServer", ".", "start", "(", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 9.387774042495224, "bleu-max": 50.48303531666195, "bleu-min": 9.387774042495224, "bleu-avg": 30.686602516651583, "code-bleu": 8.724534079266752, "code-bleu-max": 48.41284149888952, "code-bleu-min": 8.724534079266752, "code-bleu-avg": 29.677162789578016, "edit-sim": 43, "edit-sim-max": 79, "edit-sim-min": 43, "edit-sim-avg": 67.8, "rouge-p": 62.5, "rouge-p-max": 87.5, "rouge-p-min": 61.53846153846154, "rouge-p-avg": 67.88461538461539, "rouge-r": 38.46153846153847, "rouge-r-max": 69.23076923076923, "rouge-r-min": 38.46153846153847, "rouge-r-avg": 58.46153846153845, "rouge-f": 47.6190471473923, "rouge-f-max": 71.99999950079999, "rouge-f-min": 47.6190471473923, "rouge-f-avg": 62.2677317752941, "num-seq": 10}, "time": 0.8753385543823242, "misc": {}}
{"id": 8, "data_id": "csn-18461", "input_stids": [1, 19949, 5912, 17117, 3878, 3121, 501, 10331, 5357, 1446, 24115, 29454, 1864, 10707, 26461, 1267, 32315, 1071, 760, 2306, 394, 7505, 1782, 1064, 261, 467, 1482, 1267, 269, 514, 10707, 269, 514, 6463, 262, 288, 11691, 5064, 273, 394, 11691, 261, 10707, 262, 274, 309, 261, 6463, 422, 446, 262, 288, 327, 394, 7505, 1782, 1064, 261, 1267, 269, 10707, 269, 394, 16180, 261, 394, 1160, 306, 374, 308, 262, 269, 374, 262, 274, 289, 469, 288, 1160, 306, 308, 1731, 274, 775, 288, 12080, 7204, 394, 7204, 273, 12080, 263, 11595, 261, 5064, 263, 29505, 261, 262, 262, 263, 394, 7204, 261, 262, 274, 309, 261, 401, 394, 7204, 263, 848, 5509, 261, 6463, 262, 262, 288, 5064, 273, 5064, 263, 775, 5159, 28, 261, 262, 274, 289, 1731, 273, 6463, 263, 8425, 261, 5064, 263, 29505, 261, 262, 262, 274, 289, 1044, 261, 15367, 425, 262, 288, 23294, 83, 3693, 40, 263, 2018, 263, 613, 261, 4557, 263, 17412, 269, 315, 3902, 6, 269, 425, 262, 274, 1731, 273, 394, 1160, 306, 374, 308, 274, 289, 327, 394, 7505, 1782, 1064, 261, 1267, 269, 5064, 263, 17470, 1864, 261, 262, 269, 394, 16180, 261, 1731, 262, 269, 1731, 263, 769, 262, 274, 289, 289, 32315, 2541, 2613, 691, 4709, 32315, 514, 467, 1482, 32315, 327, 400, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 333, 263, 1842, 2081, 273, 394, 7766, 2081, 261, 262, 274, 333, 263, 18286, 1318, 273, 394, 7766, 20181, 1318, 261, 262, 274, 289, 632, 7360, 1071, 918, 268, 2091, 4164, 261, 262, 288, 333, 263, 18286, 1318, 263, 389, 8507, 261, 262, 274, 289, 32315, 1071, 760, 2306, 394, 7505, 1782, 1064, 261, 467, 1482, 1267, 269, 514, 10707, 269, 514, 6463, 262, 288, 11691, 5064, 273, 394, 11691, 261, 10707, 262, 274, 309, 261, 6463, 422, 446, 262, 288, 327, 394, 7505, 1782, 1064, 261, 1267, 269, 10707, 269, 394, 16180, 261, 394, 1160, 306, 374, 308, 262, 269, 374, 262, 274, 289, 469, 288, 1160, 306, 308, 1731, 274, 775, 288, 12080, 7204, 394, 7204, 273, 12080, 263, 11595, 261, 5064, 263, 29505, 261, 262, 262, 263, 394, 7204, 261, 262, 274, 309, 261, 401, 394, 7204, 263, 848, 5509, 261, 6463, 262, 262, 288, 5064, 273, 5064, 263, 775, 5159, 28, 261, 262, 274, 289, 1731, 273, 6463, 263, 8425, 261, 5064, 263, 29505, 261, 262, 262, 274, 289, 1044, 261, 15367, 425, 262, 288, 23294, 83, 3693, 40, 263, 2018, 263, 613, 261, 4557, 263, 17412, 269, 315, 3902, 6, 269, 425, 262, 274, 1731, 273, 394, 1160, 306, 374, 308, 274, 289, 327, 394, 7505, 1782, 1064, 261, 1267, 269, 5064, 263, 17470, 1864, 261, 262, 269, 394, 16180, 261, 1731, 262, 269, 1731, 263, 769, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2613, 691, 18163, 10501, 2711, 23269, 67, 4510, 261, 262, 1216, 1185, 32315, 333, 263, 1842, 2081, 263, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 1908, 7505, 1782, 1064, 1190, 2041, 1528, 67, 1356, 1921, 1064, 261, 262, 1216, 1185, 288, 2306, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 977, 342, 7351, 315, 269, 446, 262, 274, 1815, 8867, 261, 374, 269, 766, 263, 5154, 1782, 261, 262, 262, 274, 289, 2], "score": -0.21156533062458038, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testNewFixedLengthResponseWithNullText_ReturnsEmptyResponse", "(", ")", "throws", "Exception", "{", "Response", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "text", "/", "plain", "\"", ",", "null", ")", ";", "assertEquals", "(", "0", ",", "response", ".", "getContentLength", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 333, 263, 1842, 2081, 263, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 977, 342, 7351, 315, 269, 315, 11958, 315, 262, 274, 2], "score": -0.2705187201499939, "weight": 1, "toks": ["<s>", "this", ".", "testServer", ".", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "text", "/", "plain", "\"", ",", "\"", "Success", "\"", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1908, 7505, 1782, 1064, 67, 2041, 1528, 261, 262, 288, 2306, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 977, 342, 7351, 315, 269, 446, 262, 274, 25395, 261, 766, 262, 274, 1815, 8867, 261, 2685, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 1815, 8867, 261, 315, 374, 315, 269, 766, 263, 7911, 261, 315, 3697, 300, 11311, 315, 262, 262, 274, 289, 2], "score": -0.2717616558074951, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testNewFixedLengthResponse_NullText", "(", ")", "{", "Response", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "text", "/", "plain", "\"", ",", "null", ")", ";", "assertNotNull", "(", "response", ")", ";", "assertEquals", "(", "Status", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "assertEquals", "(", "\"", "0", "\"", ",", "response", ".", "getHeader", "(", "\"", "Content", "-", "Length", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 333, 263, 1842, 2081, 263, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 977, 342, 7351, 315, 269, 315, 11958, 315, 262, 274, 2], "score": -0.27796006202697754, "weight": 1, "toks": ["<s>", "this", ".", "testServer", ".", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "text", "/", "plain", "\"", ",", "\"", "Success", "\"", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1908, 7505, 1782, 1064, 1190, 2041, 1528, 67, 1356, 1064, 1190, 1921, 2250, 261, 262, 1216, 1185, 288, 2306, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 977, 342, 7351, 315, 269, 446, 262, 274, 1815, 8867, 261, 2685, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 1815, 8867, 261, 315, 977, 342, 7351, 315, 269, 766, 263, 21078, 261, 262, 262, 274, 1815, 8867, 261, 374, 269, 766, 263, 5154, 1782, 261, 262, 262, 274, 289, 2], "score": -0.3115306794643402, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testNewFixedLengthResponseWithNullText_ReturnsResponseWithEmptyBody", "(", ")", "throws", "Exception", "{", "Response", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "text", "/", "plain", "\"", ",", "null", ")", ";", "assertEquals", "(", "Status", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "assertEquals", "(", "\"", "text", "/", "plain", "\"", ",", "response", ".", "getMimeType", "(", ")", ")", ";", "assertEquals", "(", "0", ",", "response", ".", "getContentLength", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1908, 7505, 1782, 426, 575, 67, 2041, 1528, 67, 1356, 1921, 1064, 261, 262, 288, 2306, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 977, 342, 7351, 315, 269, 446, 262, 274, 1815, 8867, 261, 374, 269, 766, 263, 5154, 1782, 261, 262, 262, 274, 289, 2], "score": -0.3124210238456726, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testNewFixedLengthReponse_NullText_ReturnsEmptyResponse", "(", ")", "{", "Response", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "text", "/", "plain", "\"", ",", "null", ")", ";", "assertEquals", "(", "0", ",", "response", ".", "getContentLength", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1908, 7505, 1782, 1064, 1190, 2041, 1528, 261, 262, 288, 2306, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 977, 342, 7351, 315, 269, 446, 262, 274, 25395, 261, 766, 262, 274, 1815, 8867, 261, 2685, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 1815, 8867, 261, 315, 977, 342, 7351, 274, 4856, 273, 6380, 300, 1725, 315, 269, 766, 263, 21078, 261, 262, 262, 274, 1815, 8867, 261, 374, 269, 766, 263, 4303, 261, 262, 263, 2319, 261, 262, 262, 274, 289, 2], "score": -0.33703726530075073, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testNewFixedLengthResponseWithNullText", "(", ")", "{", "Response", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "text", "/", "plain", "\"", ",", "null", ")", ";", "assertNotNull", "(", "response", ")", ";", "assertEquals", "(", "Status", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "assertEquals", "(", "\"", "text", "/", "plain", ";", "charset", "=", "UTF", "-", "8", "\"", ",", "response", ".", "getMimeType", "(", ")", ")", ";", "assertEquals", "(", "0", ",", "response", ".", "getData", "(", ")", ".", "available", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 4705, 5247, 14701, 261, 262, 288, 2306, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 977, 342, 7351, 315, 269, 315, 1962, 521, 23969, 10261, 72, 521, 582, 323, 713, 7069, 315, 262, 274, 289, 2], "score": -0.34720203280448914, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testEncodingFailureHandling", "(", ")", "{", "Response", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "text", "/", "plain", "\"", ",", "\"", "Invalid", "\\", "ud83d", "\\", "ude00Character", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1064, 4705, 5247, 261, 262, 1216, 1185, 288, 2306, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 2057, 342, 618, 315, 269, 315, 977, 315, 262, 274, 1815, 8867, 261, 2685, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.3527171313762665, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testResponseEncodingFailure", "(", ")", "throws", "Exception", "{", "Response", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "invalid", "/", "type", "\"", ",", "\"", "text", "\"", ")", ";", "assertEquals", "(", "Status", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1908, 7505, 1782, 1064, 1190, 2041, 1528, 261, 262, 288, 2306, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 977, 342, 7351, 315, 269, 446, 262, 274, 1815, 8867, 261, 374, 269, 766, 263, 4303, 261, 262, 263, 2319, 261, 262, 262, 274, 289, 2], "score": -0.3635670244693756, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testNewFixedLengthResponseWithNullText", "(", ")", "{", "Response", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "text", "/", "plain", "\"", ",", "null", ")", ";", "assertEquals", "(", "0", ",", "response", ".", "getData", "(", ")", ".", "available", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 17.582151754064054, "bleu-max": 18.55894131106942, "bleu-min": 8.558153335723475, "bleu-avg": 14.88093120334429, "code-bleu": 12.696262440460831, "code-bleu-max": 16.718607951364536, "code-bleu-min": 1.5746172827320688, "code-bleu-avg": 11.665224551774939, "edit-sim": 46, "edit-sim-max": 46, "edit-sim-min": 27, "edit-sim-avg": 41.4, "rouge-p": 62.5, "rouge-p-max": 62.5, "rouge-p-min": 44.44444444444444, "rouge-p-avg": 52.98953823953823, "rouge-r": 45.45454545454545, "rouge-r-max": 45.45454545454545, "rouge-r-min": 27.27272727272727, "rouge-r-avg": 40.90909090909091, "rouge-f": 52.6315784598338, "rouge-f-max": 52.6315784598338, "rouge-f-min": 37.4999995703125, "rouge-f-avg": 45.620281279258606, "num-seq": 10}, "time": 0.6553874015808105, "misc": {}}
{"id": 9, "data_id": "csn-18461", "input_stids": [1, 19949, 5912, 17117, 3878, 3121, 501, 10331, 5357, 1446, 24115, 29454, 1864, 10707, 26461, 1267, 32315, 4750, 11559, 4356, 2081, 261, 514, 590, 262, 288, 16180, 10010, 273, 394, 16180, 261, 590, 263, 8425, 261, 262, 262, 274, 11559, 14956, 273, 394, 11559, 261, 262, 274, 2239, 2157, 1339, 273, 333, 263, 1842, 2081, 263, 752, 2157, 261, 333, 263, 18286, 1318, 269, 10010, 269, 14956, 262, 274, 775, 288, 1339, 263, 1836, 261, 262, 274, 289, 1044, 261, 1860, 425, 262, 288, 2321, 261, 315, 3902, 6, 397, 425, 262, 274, 425, 263, 7973, 261, 262, 274, 289, 327, 14956, 274, 289, 32315, 2541, 2613, 691, 4709, 11559, 32315, 32315, 1525, 4634, 273, 333, 263, 501, 480, 446, 692, 333, 263, 17117, 294, 374, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 333, 263, 1842, 2081, 273, 394, 7766, 2081, 261, 262, 274, 333, 263, 18286, 1318, 273, 394, 7766, 20181, 1318, 261, 262, 274, 289, 632, 7360, 1071, 918, 268, 2091, 4164, 261, 262, 288, 333, 263, 18286, 1318, 263, 389, 8507, 261, 262, 274, 289, 32315, 1071, 760, 2306, 394, 7505, 1782, 1064, 261, 467, 1482, 1267, 269, 514, 10707, 269, 514, 6463, 262, 288, 11691, 5064, 273, 394, 11691, 261, 10707, 262, 274, 309, 261, 6463, 422, 446, 262, 288, 327, 394, 7505, 1782, 1064, 261, 1267, 269, 10707, 269, 394, 16180, 261, 394, 1160, 306, 374, 308, 262, 269, 374, 262, 274, 289, 469, 288, 1160, 306, 308, 1731, 274, 775, 288, 12080, 7204, 394, 7204, 273, 12080, 263, 11595, 261, 5064, 263, 29505, 261, 262, 262, 263, 394, 7204, 261, 262, 274, 309, 261, 401, 394, 7204, 263, 848, 5509, 261, 6463, 262, 262, 288, 5064, 273, 5064, 263, 775, 5159, 28, 261, 262, 274, 289, 1731, 273, 6463, 263, 8425, 261, 5064, 263, 29505, 261, 262, 262, 274, 289, 1044, 261, 15367, 425, 262, 288, 23294, 83, 3693, 40, 263, 2018, 263, 613, 261, 4557, 263, 17412, 269, 315, 3902, 6, 269, 425, 262, 274, 1731, 273, 394, 1160, 306, 374, 308, 274, 289, 327, 394, 7505, 1782, 1064, 261, 1267, 269, 5064, 263, 17470, 1864, 261, 262, 269, 394, 16180, 261, 1731, 262, 269, 1731, 263, 769, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2613, 691, 18163, 10501, 2711, 23269, 67, 4510, 261, 262, 1216, 1185, 32315, 333, 263, 1842, 2081, 263, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 11559, 14956, 273, 4356, 2081, 261, 315, 3902, 6, 397, 31500, 4709, 263, 3699, 397, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 25395, 261, 14956, 262, 274, 2], "score": -0.27344805002212524, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "outputStream", ")", ";", "</s>"]}, {"tids": [1, 3387, 716, 326, 1375, 4356, 2081, 1375, 707, 848, 8783, 1640, 471, 1207, 392, 2239, 8568, 590, 716, 10999, 279, 766, 1417, 263, 2], "score": -0.3059256374835968, "weight": 1, "toks": ["<s>", "ensure", "that", "the", "`", "invokeServer", "`", "method", "can", "correctly", "handle", "and", "process", "an", "HTTP", "DELETE", "request", "that", "expects", "a", "response", "body", ".", "</s>"]}, {"tids": [1, 25395, 261, 14956, 262, 274, 2], "score": -0.31588298082351685, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "outputStream", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 14956, 262, 274, 2], "score": -0.333901047706604, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "outputStream", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 14956, 262, 274, 2], "score": -0.3372988998889923, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "outputStream", ")", ";", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 1815, 8867, 261, 315, 7128, 315, 269, 14956, 263, 1762, 261, 262, 263, 2209, 261, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.3388711214065552, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "assertEquals", "(", "\"", "STR", "\"", ",", "outputStream", ".", "toString", "(", ")", ".", "trim", "(", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2613, 691, 18163, 10501, 2711, 23269, 67, 4510, 261, 262, 1216, 1185, 288, 333, 263, 1842, 2081, 263, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 977, 342, 7351, 315, 269, 315, 11958, 315, 262, 274, 11559, 14956, 273, 4356, 2081, 261, 315, 8568, 342, 1842, 2239, 342, 404, 263, 404, 521, 436, 521, 290, 521, 436, 521, 290, 315, 262, 274, 289, 2], "score": -0.34523966908454895, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testDeleteRequestThatSendsBackResponseBody_Success", "(", ")", "throws", "Exception", "{", "this", ".", "testServer", ".", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "text", "/", "plain", "\"", ",", "\"", "Success", "\"", ")", ";", "ByteArrayOutputStream", "outputStream", "=", "invokeServer", "(", "\"", "DELETE", "/", "test", "HTTP", "/", "1", ".", "1", "\\", "r", "\\", "n", "\\", "r", "\\", "n", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 25395, 261, 14956, 262, 274, 2], "score": -0.349899023771286, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "outputStream", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 14956, 262, 274, 2], "score": -0.3524942398071289, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "outputStream", ")", ";", "</s>"]}, {"tids": [1, 4725, 21249, 326, 707, 1375, 4356, 2081, 261, 514, 590, 262, 1375, 353, 326, 1245, 3613, 1842, 269, 326, 20579, 3323, 1842, 3021, 4102, 506, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 10969, 2081, 261, 262, 288, 25395, 261, 4356, 2081, 261, 315, 7766, 810, 315, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 8616, 11932, 716, 326, 1375, 4356, 2081, 1375, 707, 1135, 279, 1661, 300, 446, 563, 1347, 2112, 598, 279, 5337, 533, 810, 263, 2597, 4271, 326, 2922, 14176, 434, 5057, 279, 590, 471, 12516, 279, 766, 269, 1492, 353, 4075, 379, 329, 358, 506, 22106, 11799, 3470, 326, 707, 6174, 263, 2], "score": -0.35304173827171326, "weight": 1, "toks": ["<s>", "Assuming", "the", "method", "`", "invokeServer", "(", "String", "request", ")", "`", "is", "the", "one", "under", "test", ",", "the", "shortest", "possible", "test", "statement", "would", "be", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testInvokeServer", "(", ")", "{", "assertNotNull", "(", "invokeServer", "(", "\"", "Test", "input", "\"", ")", ")", ";", "}", "`", "`", "`", "This", "test", "simply", "ensures", "that", "the", "`", "invokeServer", "`", "method", "returns", "a", "non", "-", "null", "result", "when", "provided", "with", "a", "basic", "string", "input", ".", "It", "checks", "the", "core", "functionality", "of", "handling", "a", "request", "and", "generating", "a", "response", ",", "which", "is", "presumed", "to", "be", "encapsulated", "within", "the", "method", "itself", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 6.504662491294182, "bleu-max": 6.504662491294182, "bleu-min": 2.1856554617255544, "bleu-avg": 4.9298099702494875, "code-bleu": 0.6010788805431864, "code-bleu-max": 6.684175945226897, "code-bleu-min": 0.34011926130297954, "code-bleu-avg": 2.432792911219649, "edit-sim": 35, "edit-sim-max": 38, "edit-sim-min": 18, "edit-sim-avg": 28.6, "rouge-p": 25.0, "rouge-p-max": 37.5, "rouge-p-min": 16.666666666666664, "rouge-p-avg": 27.200577200577204, "rouge-r": 30.0, "rouge-r-max": 30.0, "rouge-r-min": 10.0, "rouge-r-avg": 25.0, "rouge-f": 27.272726776859507, "rouge-f-max": 33.33333283950618, "rouge-f-min": 12.499999531250019, "rouge-f-avg": 25.765923899811042, "num-seq": 10}, "time": 0.8998723030090332, "misc": {}}
{"id": 10, "data_id": "csn-18461", "input_stids": [1, 19949, 5912, 17117, 3878, 3121, 501, 10331, 5357, 1446, 24115, 29454, 1864, 10707, 26461, 1267, 32315, 4750, 11559, 4356, 2081, 261, 514, 590, 262, 288, 16180, 10010, 273, 394, 16180, 261, 590, 263, 8425, 261, 262, 262, 274, 11559, 14956, 273, 394, 11559, 261, 262, 274, 2239, 2157, 1339, 273, 333, 263, 1842, 2081, 263, 752, 2157, 261, 333, 263, 18286, 1318, 269, 10010, 269, 14956, 262, 274, 775, 288, 1339, 263, 1836, 261, 262, 274, 289, 1044, 261, 1860, 425, 262, 288, 2321, 261, 315, 3902, 6, 397, 425, 262, 274, 425, 263, 7973, 261, 262, 274, 289, 327, 14956, 274, 289, 32315, 2541, 2613, 691, 4709, 11559, 514, 32315, 32315, 1525, 4634, 273, 333, 263, 501, 480, 446, 692, 333, 263, 17117, 294, 374, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 333, 263, 1842, 2081, 273, 394, 7766, 2081, 261, 262, 274, 333, 263, 18286, 1318, 273, 394, 7766, 20181, 1318, 261, 262, 274, 289, 632, 7360, 1071, 918, 268, 2091, 4164, 261, 262, 288, 333, 263, 18286, 1318, 263, 389, 8507, 261, 262, 274, 289, 32315, 1071, 760, 2306, 394, 7505, 1782, 1064, 261, 467, 1482, 1267, 269, 514, 10707, 269, 514, 6463, 262, 288, 11691, 5064, 273, 394, 11691, 261, 10707, 262, 274, 309, 261, 6463, 422, 446, 262, 288, 327, 394, 7505, 1782, 1064, 261, 1267, 269, 10707, 269, 394, 16180, 261, 394, 1160, 306, 374, 308, 262, 269, 374, 262, 274, 289, 469, 288, 1160, 306, 308, 1731, 274, 775, 288, 12080, 7204, 394, 7204, 273, 12080, 263, 11595, 261, 5064, 263, 29505, 261, 262, 262, 263, 394, 7204, 261, 262, 274, 309, 261, 401, 394, 7204, 263, 848, 5509, 261, 6463, 262, 262, 288, 5064, 273, 5064, 263, 775, 5159, 28, 261, 262, 274, 289, 1731, 273, 6463, 263, 8425, 261, 5064, 263, 29505, 261, 262, 262, 274, 289, 1044, 261, 15367, 425, 262, 288, 23294, 83, 3693, 40, 263, 2018, 263, 613, 261, 4557, 263, 17412, 269, 315, 3902, 6, 269, 425, 262, 274, 1731, 273, 394, 1160, 306, 374, 308, 274, 289, 327, 394, 7505, 1782, 1064, 261, 1267, 269, 5064, 263, 17470, 1864, 261, 262, 269, 394, 16180, 261, 1731, 262, 269, 1731, 263, 769, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2613, 691, 18163, 10501, 2711, 23269, 67, 4510, 261, 262, 1216, 1185, 32315, 333, 263, 1842, 2081, 263, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 11559, 14956, 273, 4356, 2081, 261, 315, 3902, 6, 397, 31500, 4709, 263, 3699, 397, 315, 3902, 6, 262, 274, 514, 306, 308, 2665, 273, 288, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 289, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 2613, 691, 18163, 10501, 2711, 23269, 67, 4510, 261, 262, 1216, 1185, 288, 333, 263, 1842, 2081, 263, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 977, 342, 7351, 315, 269, 315, 2306, 5652, 315, 262, 274, 11559, 14956, 273, 4356, 2081, 261, 315, 8568, 342, 1430, 3293, 2239, 342, 404, 263, 404, 521, 436, 521, 290, 2594, 294, 17365, 521, 436, 521, 290, 521, 436, 521, 290, 315, 262, 274, 1815, 8867, 261, 315, 2239, 342, 404, 263, 404, 4044, 7791, 521, 436, 521, 290, 1350, 300, 1412, 294, 977, 342, 7351, 521, 436, 521, 290, 1350, 300, 11311, 294, 5958, 521, 436, 521, 290, 521, 436, 521, 290, 1064, 5652, 315, 269, 14956, 263, 1762, 261, 262, 263, 2209, 261, 262, 262, 274, 289, 2], "score": -0.17624357342720032, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testDeleteRequestThatSendsBackResponseBody_Success", "(", ")", "throws", "Exception", "{", "this", ".", "testServer", ".", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "text", "/", "plain", "\"", ",", "\"", "Response", "Body", "\"", ")", ";", "ByteArrayOutputStream", "outputStream", "=", "invokeServer", "(", "\"", "DELETE", "/", "deleteEndpoint", "HTTP", "/", "1", ".", "1", "\\", "r", "\\", "nHost", ":", "localhost", "\\", "r", "\\", "n", "\\", "r", "\\", "n", "\"", ")", ";", "assertEquals", "(", "\"", "HTTP", "/", "1", ".", "1", "200", "OK", "\\", "r", "\\", "nContent", "-", "Type", ":", "text", "/", "plain", "\\", "r", "\\", "nContent", "-", "Length", ":", "13", "\\", "r", "\\", "n", "\\", "r", "\\", "nResponse", "Body", "\"", ",", "outputStream", ".", "toString", "(", ")", ".", "trim", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2613, 691, 18163, 10501, 2711, 23269, 67, 4510, 261, 262, 1216, 1185, 2], "score": -0.1812518686056137, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testDeleteRequestThatSendsBackResponseBody_Success", "(", ")", "throws", "Exception", "</s>"]}, {"tids": [1, 2974, 3387, 326, 1375, 4356, 2081, 1375, 707, 848, 1640, 279, 8568, 590, 716, 9573, 279, 766, 1473, 8783, 269, 999, 326, 3751, 16745, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 3259, 2613, 691, 261, 262, 1216, 1185, 288, 333, 263, 1842, 2081, 263, 766, 273, 2306, 263, 394, 7505, 1782, 1064, 261, 2685, 263, 7791, 269, 315, 977, 342, 7351, 315, 269, 315, 2504, 6873, 315, 262, 274, 11559, 14956, 273, 4356, 2081, 261, 315, 8568, 342, 1842, 2239, 342, 404, 263, 404, 521, 436, 521, 290, 521, 436, 521, 290, 315, 262, 274, 1815, 5510, 261, 14956, 263, 1762, 261, 262, 263, 1914, 261, 315, 2504, 6873, 315, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.1842188835144043, "weight": 1, "toks": ["<s>", "To", "ensure", "the", "`", "invokeServer", "`", "method", "can", "handle", "a", "DELETE", "request", "that", "sends", "a", "response", "back", "correctly", ",", "use", "the", "following", "minimal", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testHandleDeleteRequest", "(", ")", "throws", "Exception", "{", "this", ".", "testServer", ".", "response", "=", "Response", ".", "newFixedLengthResponse", "(", "Status", ".", "OK", ",", "\"", "text", "/", "plain", "\"", ",", "\"", "Delete", "successful", "\"", ")", ";", "ByteArrayOutputStream", "outputStream", "=", "invokeServer", "(", "\"", "DELETE", "/", "test", "HTTP", "/", "1", ".", "1", "\\", "r", "\\", "n", "\\", "r", "\\", "n", "\"", ")", ";", "assertTrue", "(", "outputStream", ".", "toString", "(", ")", ".", "contains", "(", "\"", "Delete", "successful", "\"", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2613, 691, 18163, 10501, 2711, 23269, 67, 4510, 261, 262, 1216, 1185, 2], "score": -0.19081732630729675, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testDeleteRequestThatSendsBackResponseBody_Success", "(", ")", "throws", "Exception", "</s>"]}, {"tids": [1, 11672, 326, 1842, 707, 11997, 269, 444, 731, 326, 2665, 1438, 766, 358, 1640, 279, 8568, 590, 263, 2], "score": -0.1949222981929779, "weight": 1, "toks": ["<s>", "Before", "the", "test", "method", "executes", ",", "set", "up", "the", "expected", "server", "response", "to", "handle", "a", "DELETE", "request", ".", "</s>"]}, {"tids": [1, 632, 1842, 2613, 691, 18163, 10501, 2711, 23269, 67, 4510, 2], "score": -0.1973409354686737, "weight": 1, "toks": ["<s>", "@", "testDeleteRequestThatSendsBackResponseBody_Success", "</s>"]}, {"tids": [1, 1815, 18163, 261, 14956, 263, 1762, 261, 262, 269, 1914, 780, 261, 315, 7128, 315, 262, 262, 274, 2], "score": -0.22004981338977814, "weight": 1, "toks": ["<s>", "assertThat", "(", "outputStream", ".", "toString", "(", ")", ",", "containsString", "(", "\"", "STR", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 7766, 326, 1438, 766, 358, 392, 2239, 8568, 590, 263, 2], "score": -0.2211066335439682, "weight": 1, "toks": ["<s>", "Test", "the", "server", "response", "to", "an", "HTTP", "DELETE", "request", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2613, 691, 18163, 10501, 2711, 23269, 67, 4510, 261, 262, 1216, 1185, 2], "score": -0.23457325994968414, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testDeleteRequestThatSendsBackResponseBody_Success", "(", ")", "throws", "Exception", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2613, 691, 18163, 10501, 2711, 23269, 67, 4510, 261, 262, 1216, 1185, 2], "score": -0.25122010707855225, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testDeleteRequestThatSendsBackResponseBody_Success", "(", ")", "throws", "Exception", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 9.198981913847797, "bleu-max": 18.219579170624282, "bleu-min": 7.679634266158697, "bleu-avg": 10.6957403935135, "code-bleu": 3.9118270978795797, "code-bleu-max": 4.813189391703548, "code-bleu-min": 3.7672242030514376, "code-bleu-avg": 4.060884080960926, "edit-sim": 44, "edit-sim-max": 57, "edit-sim-min": 40, "edit-sim-avg": 46.4, "rouge-p": 25.0, "rouge-p-max": 50.0, "rouge-p-min": 25.0, "rouge-p-avg": 30.468253968253965, "rouge-r": 57.14285714285714, "rouge-r-max": 57.14285714285714, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 57.142857142857125, "rouge-f": 34.782608272211725, "rouge-f-max": 53.33333283555556, "rouge-f-min": 34.782608272211725, "rouge-f-avg": 39.12309385298052, "num-seq": 10}, "time": 1.0096371173858643, "misc": {}}
{"id": 11, "data_id": "csn-22197", "input_stids": [1, 32315, 32315, 5991, 56, 295, 5929, 5537, 4709, 32315, 1033, 32315, 32315, 32315, 1071, 760, 918, 3929, 261, 1033, 320, 262, 1216, 1185, 288, 1716, 685, 4524, 263, 3929, 261, 320, 397, 315, 3902, 6, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 32315, 2], "topk": [{"tids": [1, 1220, 1842, 707, 269, 1375, 1842, 694, 979, 2840, 1375, 269, 4260, 358, 3929, 716, 3637, 392, 392, 2840, 603, 279, 864, 733, 6330, 487, 2665, 263, 1021, 3796, 4031, 358, 741, 333, 353, 358, 4800, 326, 733, 269, 2230, 326, 3637, 707, 269, 471, 1508, 3929, 326, 12884, 263, 1660, 848, 1842, 518, 635, 294, 404, 263, 380, 380, 21837, 392, 791, 380, 380, 434, 326, 733, 309, 486, 1818, 2522, 263, 576, 263, 380, 380, 13274, 326, 392, 2840, 380, 380, 1450, 326, 707, 716, 4260, 358, 506, 18432, 263, 890, 263, 380, 380, 8553, 310, 716, 326, 392, 2840, 1703, 444, 8214, 380, 380, 1450, 326, 1375, 3929, 1375, 707, 263, 5090, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 5991, 56, 295, 5929, 5537, 6594, 273, 394, 5991, 56, 295, 5929, 5537, 261, 262, 274, 342, 342, 4725, 21249, 333, 353, 326, 3434, 733, 618, 6594, 263, 444, 979, 2840, 261, 315, 399, 295, 5929, 315, 262, 274, 342, 342, 4725, 21249, 326, 707, 358, 1842, 353, 444, 979, 2840, 3929, 261, 6594, 262, 274, 342, 342, 8553, 716, 326, 444, 1674, 9591, 487, 2665, 289, 1375, 1375, 1375, 3609, 294, 1021, 1375, 3929, 1375, 707, 711, 2118, 13940, 358, 11361, 315, 7128, 315, 358, 326, 876, 434, 326, 733, 296, 272, 1762, 707, 1865, 11805, 269, 1492, 4825, 1608, 9271, 25994, 820, 8353, 603, 326, 819, 578, 8433, 263, 2], "score": -0.05118658393621445, "weight": 1, "toks": ["<s>", "This", "test", "method", ",", "`", "testSetAnimal", "`", ",", "needs", "to", "verify", "that", "setting", "an", "animal", "on", "a", "given", "object", "works", "as", "expected", ".", "The", "best", "way", "to", "do", "this", "is", "to", "specify", "the", "object", ",", "apply", "the", "setting", "method", ",", "and", "then", "verify", "the", "outcome", ".", "We", "can", "test", "it", "by", ":", "1", ".", "*", "*", "Creating", "an", "instance", "*", "*", "of", "the", "object", "if", "not", "already", "created", ".", "2", ".", "*", "*", "Setting", "the", "animal", "*", "*", "using", "the", "method", "that", "needs", "to", "be", "tested", ".", "3", ".", "*", "*", "Verifying", "that", "the", "animal", "was", "set", "properly", "*", "*", "using", "the", "`", "verify", "`", "method", ".", "Example", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "MultiTurtlePanel", "panel", "=", "new", "MultiTurtlePanel", "(", ")", ";", "/", "/", "Assuming", "this", "is", "the", "correct", "object", "type", "panel", ".", "setAnimal", "(", "\"", "Turtle", "\"", ")", ";", "/", "/", "Assuming", "the", "method", "to", "test", "is", "setAnimal", "verify", "(", "panel", ")", ";", "/", "/", "Verify", "that", "the", "set", "operation", "performed", "as", "expected", "}", "`", "`", "`", "Note", ":", "The", "`", "verify", "`", "method", "has", "been", "adjusted", "to", "concatenate", "\"", "STR", "\"", "to", "the", "output", "of", "the", "object", "'", "s", "toString", "method", "before", "verification", ",", "which", "might", "need", "further", "refinement", "depending", "on", "the", "context", "or", "requirements", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8097, 1305, 261, 262, 1216, 1185, 288, 3929, 261, 315, 1922, 2840, 315, 262, 274, 289, 2], "score": -0.14540143311023712, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testVerifyMethod", "(", ")", "throws", "Exception", "{", "verify", "(", "\"", "Animal", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 5991, 56, 295, 5929, 5537, 6594, 273, 394, 5991, 56, 295, 5929, 5537, 261, 262, 274, 399, 295, 5929, 2665, 56, 295, 5929, 273, 394, 399, 295, 5929, 261, 262, 274, 6594, 263, 444, 979, 2840, 261, 2665, 56, 295, 5929, 262, 274, 399, 295, 5929, 3214, 56, 295, 5929, 273, 6594, 263, 336, 979, 2840, 261, 262, 274, 1815, 8867, 261, 2665, 56, 295, 5929, 269, 3214, 56, 295, 5929, 262, 274, 289, 2], "score": -0.25678393244743347, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "MultiTurtlePanel", "panel", "=", "new", "MultiTurtlePanel", "(", ")", ";", "Turtle", "expectedTurtle", "=", "new", "Turtle", "(", ")", ";", "panel", ".", "setAnimal", "(", "expectedTurtle", ")", ";", "Turtle", "actualTurtle", "=", "panel", ".", "getAnimal", "(", ")", ";", "assertEquals", "(", "expectedTurtle", ",", "actualTurtle", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 399, 295, 5929, 5537, 6594, 273, 394, 399, 295, 5929, 5537, 261, 262, 274, 6594, 263, 444, 979, 2840, 261, 315, 399, 295, 5929, 315, 262, 274, 3929, 261, 6594, 263, 336, 979, 2840, 261, 262, 262, 274, 289, 2], "score": -0.26787325739860535, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "TurtlePanel", "panel", "=", "new", "TurtlePanel", "(", ")", ";", "panel", ".", "setAnimal", "(", "\"", "Turtle", "\"", ")", ";", "verify", "(", "panel", ".", "getAnimal", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 514, 1842, 979, 2840, 273, 315, 611, 11547, 1403, 73, 315, 274, 3929, 261, 1842, 979, 2840, 262, 274, 289, 2], "score": -0.2705906629562378, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "String", "testAnimal", "=", "\"", "Giraffe", "\"", ";", "verify", "(", "testAnimal", ")", ";", "}", "</s>"]}, {"tids": [1, 1436, 279, 4143, 980, 358, 1842, 326, 1375, 3929, 1375, 707, 598, 392, 1008, 533, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 8097, 1190, 1921, 780, 261, 262, 1216, 1185, 288, 3929, 261, 315, 315, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2900235950946808, "weight": 1, "toks": ["<s>", "Add", "a", "simple", "line", "to", "test", "the", "`", "verify", "`", "method", "with", "an", "empty", "string", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testVerifyWithEmptyString", "(", ")", "throws", "Exception", "{", "verify", "(", "\"", "\"", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1021, 9330, 395, 4031, 358, 1842, 326, 1375, 3929, 1375, 707, 316, 1375, 5991, 56, 295, 5929, 5537, 4709, 1375, 667, 4102, 506, 635, 9588, 279, 533, 358, 518, 316, 326, 1375, 1842, 694, 979, 2840, 1375, 707, 263, 13743, 225, 163, 227, 252, 272, 3661, 1846, 4825, 1045, 716, 1842, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 3929, 261, 315, 7766, 979, 2840, 315, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 5122, 4692, 326, 1375, 3929, 1375, 707, 598, 279, 533, 7158, 315, 7766, 979, 2840, 315, 358, 866, 309, 326, 707, 8311, 815, 315, 7128, 315, 8214, 358, 326, 810, 733, 471, 8488, 518, 487, 2665, 263, 2], "score": -0.34471553564071655, "weight": 1, "toks": ["<s>", "The", "simplest", "way", "to", "test", "the", "`", "verify", "`", "method", "in", "`", "MultiTurtlePanelTest", "`", "class", "would", "be", "by", "passing", "a", "string", "to", "it", "in", "the", "`", "testSetAnimal", "`", "method", ".", "Here", "\u2019", "s", "how", "you", "might", "write", "that", "test", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "verify", "(", "\"", "TestAnimal", "\"", ")", ";", "}", "`", "`", "`", "This", "test", "directly", "uses", "the", "`", "verify", "`", "method", "with", "a", "string", "literal", "\"", "TestAnimal", "\"", "to", "check", "if", "the", "method", "concatenates", "\"", "STR", "\"", "properly", "to", "the", "input", "object", "and", "processes", "it", "as", "expected", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 707, 1375, 444, 979, 2840, 261, 262, 1375, 23500, 471, 20570, 291, 2357, 316, 279, 2836, 1842, 364, 326, 1375, 5991, 56, 295, 5929, 5537, 1375, 667, 269, 1846, 1410, 7155, 603, 3661, 326, 919, 434, 326, 733, 3478, 1839, 326, 707, 745, 471, 3929, 716, 326, 2549, 353, 487, 2665, 263, 13743, 353, 392, 3454, 434, 3661, 1846, 4825, 1045, 333, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 5991, 56, 295, 5929, 5537, 6594, 273, 394, 5991, 56, 295, 5929, 5537, 261, 262, 274, 1922, 2840, 2665, 979, 2840, 273, 394, 1922, 2840, 261, 315, 399, 295, 5929, 315, 262, 274, 6594, 263, 444, 979, 2840, 261, 2665, 979, 2840, 262, 274, 1922, 2840, 3214, 979, 2840, 273, 6594, 263, 336, 979, 2840, 261, 262, 274, 1815, 8867, 261, 315, 1021, 392, 2840, 444, 316, 326, 6594, 1410, 845, 326, 2665, 392, 2840, 263, 315, 269, 2665, 979, 2840, 269, 3214, 979, 2840, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 3414, 392, 791, 434, 1375, 5991, 56, 295, 5929, 5537, 1375, 269, 1678, 392, 1375, 1922, 2840, 1375, 733, 269, 471, 4271, 309, 326, 392, 2840, 10295, 628, 326, 6594, 353, 326, 1967, 487, 326, 1245, 444, 263, 1220, 17504, 11932, 716, 326, 1375, 444, 979, 2840, 261, 262, 1375, 707, 4186, 8783, 316, 392, 25790, 3330, 263, 2], "score": -0.35032564401626587, "weight": 1, "toks": ["<s>", "To", "test", "the", "method", "`", "setAnimal", "(", ")", "`", "effectively", "and", "concisely", "in", "a", "unit", "test", "for", "the", "`", "MultiTurtlePanel", "`", "class", ",", "you", "should", "focus", "on", "how", "the", "state", "of", "the", "object", "changes", "after", "the", "method", "call", "and", "verify", "that", "the", "change", "is", "as", "expected", ".", "Here", "is", "an", "example", "of", "how", "you", "might", "write", "this", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "MultiTurtlePanel", "panel", "=", "new", "MultiTurtlePanel", "(", ")", ";", "Animal", "expectedAnimal", "=", "new", "Animal", "(", "\"", "Turtle", "\"", ")", ";", "panel", ".", "setAnimal", "(", "expectedAnimal", ")", ";", "Animal", "actualAnimal", "=", "panel", ".", "getAnimal", "(", ")", ";", "assertEquals", "(", "\"", "The", "animal", "set", "in", "the", "panel", "should", "match", "the", "expected", "animal", ".", "\"", ",", "expectedAnimal", ",", "actualAnimal", ")", ";", "}", "`", "`", "`", "This", "test", "creates", "an", "instance", "of", "`", "MultiTurtlePanel", "`", ",", "sets", "an", "`", "Animal", "`", "object", ",", "and", "checks", "if", "the", "animal", "retrieved", "from", "the", "panel", "is", "the", "same", "as", "the", "one", "set", ".", "This", "approach", "ensures", "that", "the", "`", "setAnimal", "(", ")", "`", "method", "functions", "correctly", "in", "an", "isolated", "environment", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 5991, 56, 295, 5929, 5537, 6594, 273, 394, 5991, 56, 295, 5929, 5537, 261, 262, 274, 6594, 263, 444, 979, 2840, 261, 315, 399, 295, 5929, 315, 262, 274, 3929, 261, 6594, 263, 336, 979, 2840, 261, 262, 262, 274, 289, 2], "score": -0.3522075414657593, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "MultiTurtlePanel", "panel", "=", "new", "MultiTurtlePanel", "(", ")", ";", "panel", ".", "setAnimal", "(", "\"", "Turtle", "\"", ")", ";", "verify", "(", "panel", ".", "getAnimal", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 13115, 434, 333, 707, 353, 358, 3929, 326, 14176, 434, 1375, 1842, 694, 979, 2840, 261, 262, 1375, 635, 19997, 279, 533, 358, 392, 733, 471, 1450, 1375, 1716, 685, 4524, 263, 3929, 1375, 358, 3929, 326, 1686, 263, 2974, 3387, 326, 707, 353, 23500, 18432, 269, 1846, 4825, 3387, 716, 1375, 1033, 320, 1375, 316, 1375, 3929, 1375, 353, 12256, 4095, 23174, 434, 4121, 1375, 1842, 694, 979, 2840, 261, 262, 1375, 30058, 578, 1135, 263, 2], "score": -0.36809614300727844, "weight": 1, "toks": ["<s>", "The", "purpose", "of", "this", "method", "is", "to", "verify", "the", "functionality", "of", "`", "testSetAnimal", "(", ")", "`", "by", "appending", "a", "string", "to", "an", "object", "and", "using", "`", "Approvals", ".", "verify", "`", "to", "verify", "the", "results", ".", "To", "ensure", "the", "method", "is", "effectively", "tested", ",", "you", "might", "ensure", "that", "`", "Object", "o", "`", "in", "`", "verify", "`", "is", "meaningfully", "representative", "of", "what", "`", "testSetAnimal", "(", ")", "`", "affects", "or", "returns", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 28.606242122742575, "bleu-max": 28.606242122742575, "bleu-min": 19.070828081828378, "bleu-avg": 25.714510181251352, "code-bleu": 19.65074535479063, "code-bleu-max": 19.65074535479063, "code-bleu-min": 5.055550082116467, "code-bleu-avg": 14.871402568799596, "edit-sim": 37, "edit-sim-max": 40, "edit-sim-min": 34, "edit-sim-avg": 36.8, "rouge-p": 42.857142857142854, "rouge-p-max": 50.0, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 41.547619047619044, "rouge-r": 60.0, "rouge-r-max": 60.0, "rouge-r-min": 60.0, "rouge-r-avg": 60.0, "rouge-f": 49.9999995138889, "rouge-f-max": 54.54545404958678, "rouge-f-min": 42.85714239795918, "rouge-f-avg": 48.971028489182615, "num-seq": 10}, "time": 0.60575270652771, "misc": {}}
{"id": 12, "data_id": "csn-22197", "input_stids": [1, 32315, 1071, 760, 918, 6750, 1248, 1414, 2656, 261, 262, 288, 1250, 910, 2656, 67, 1893, 273, 16830, 5494, 263, 353, 1414, 2656, 261, 262, 274, 6750, 8381, 261, 910, 2656, 67, 1893, 262, 274, 289, 32315, 5991, 56, 295, 5929, 5537, 4709, 32315, 1033, 32315, 6750, 8381, 261, 910, 2656, 67, 1893, 262, 274, 32315, 32315, 1071, 760, 918, 3929, 261, 1033, 320, 262, 1216, 1185, 288, 1716, 685, 4524, 263, 3929, 261, 320, 397, 315, 3902, 6, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 32315, 804, 2802, 1989, 263, 6750, 1248, 1414, 2656, 261, 262, 274, 2], "topk": [{"tids": [1, 1021, 1842, 1375, 1842, 694, 979, 2840, 261, 262, 1375, 1410, 1338, 279, 381, 358, 1842, 326, 3637, 434, 392, 392, 2840, 316, 326, 1375, 5991, 56, 295, 5929, 5537, 1375, 667, 269, 2112, 716, 326, 3330, 353, 486, 910, 2656, 263, 2974, 20186, 537, 333, 269, 326, 1842, 1410, 294, 404, 263, 15983, 326, 3330, 353, 486, 910, 2656, 263, 576, 263, 1000, 392, 392, 2840, 603, 326, 1375, 5991, 56, 295, 5929, 5537, 1375, 263, 890, 263, 8553, 326, 3637, 1703, 6873, 263, 13743, 296, 272, 279, 20482, 471, 22397, 1177, 434, 326, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 804, 2802, 1989, 263, 6750, 1248, 1414, 2656, 261, 262, 274, 342, 342, 7693, 326, 3330, 353, 486, 910, 2656, 5991, 56, 295, 5929, 5537, 6594, 273, 394, 5991, 56, 295, 5929, 5537, 261, 262, 274, 1922, 2840, 2665, 979, 2840, 273, 394, 399, 295, 5929, 261, 262, 274, 6594, 263, 444, 979, 2840, 261, 2665, 979, 2840, 262, 274, 1815, 8867, 261, 2665, 979, 2840, 269, 6594, 263, 336, 979, 2840, 261, 262, 262, 274, 342, 342, 5452, 716, 326, 392, 2840, 1703, 444, 8783, 289, 1375, 1375, 1375, 1220, 981, 13016, 6104, 18518, 2001, 4209, 294, 6728, 326, 3330, 269, 3637, 392, 392, 2840, 269, 471, 3929, 310, 326, 2665, 563, 269, 10480, 518, 11448, 471, 20570, 784, 263, 2], "score": -0.060616906732320786, "weight": 1, "toks": ["<s>", "The", "test", "`", "testSetAnimal", "(", ")", "`", "should", "only", "aim", "to", "test", "the", "setting", "of", "an", "animal", "in", "the", "`", "MultiTurtlePanel", "`", "class", ",", "provided", "that", "the", "environment", "is", "not", "headless", ".", "To", "achieve", "this", ",", "the", "test", "should", ":", "1", ".", "Assume", "the", "environment", "is", "not", "headless", ".", "2", ".", "Set", "an", "animal", "on", "the", "`", "MultiTurtlePanel", "`", ".", "3", ".", "Verify", "the", "setting", "was", "successful", ".", "Here", "'", "s", "a", "simplified", "and", "focused", "version", "of", "the", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "JUnitUtils", ".", "assumeNotHeadless", "(", ")", ";", "/", "/", "Ensure", "the", "environment", "is", "not", "headless", "MultiTurtlePanel", "panel", "=", "new", "MultiTurtlePanel", "(", ")", ";", "Animal", "expectedAnimal", "=", "new", "Turtle", "(", ")", ";", "panel", ".", "setAnimal", "(", "expectedAnimal", ")", ";", "assertEquals", "(", "expectedAnimal", ",", "panel", ".", "getAnimal", "(", ")", ")", ";", "/", "/", "Assert", "that", "the", "animal", "was", "set", "correctly", "}", "`", "`", "`", "This", "code", "snippet", "includes", "essential", "actions", ":", "checking", "the", "environment", ",", "setting", "an", "animal", ",", "and", "verifying", "the", "expected", "result", ",", "making", "it", "effective", "and", "concise", ".", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 804, 2802, 1989, 263, 6750, 1248, 1414, 2656, 261, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.21553058922290802, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "JUnitUtils", ".", "assumeNotHeadless", "(", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 804, 2802, 1989, 263, 6750, 1248, 1414, 2656, 261, 262, 274, 289, 2], "score": -0.2671557664871216, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "JUnitUtils", ".", "assumeNotHeadless", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 804, 2802, 1989, 263, 6750, 1248, 1414, 2656, 261, 262, 274, 289, 2], "score": -0.268205463886261, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "JUnitUtils", ".", "assumeNotHeadless", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 380, 380, 7766, 2985, 294, 380, 380, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 804, 2802, 1989, 263, 6750, 1248, 1414, 2656, 261, 262, 274, 342, 342, 3312, 1842, 981, 358, 444, 326, 392, 2840, 471, 3929, 2097, 919, 289, 1375, 1375, 1375, 2], "score": -0.2765328288078308, "weight": 1, "toks": ["<s>", "*", "*", "Test", "Method", ":", "*", "*", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "JUnitUtils", ".", "assumeNotHeadless", "(", ")", ";", "/", "/", "additional", "test", "code", "to", "set", "the", "animal", "and", "verify", "its", "state", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 804, 2802, 1989, 263, 6750, 1248, 1414, 2656, 261, 262, 274, 289, 2], "score": -0.328174352645874, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "JUnitUtils", ".", "assumeNotHeadless", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 1071, 760, 918, 3929, 261, 1033, 320, 262, 1216, 1185, 288, 1716, 685, 4524, 263, 3929, 261, 320, 397, 315, 7128, 315, 262, 274, 289, 2], "score": -0.33523011207580566, "weight": 1, "toks": ["<s>", "public", "static", "void", "verify", "(", "Object", "o", ")", "throws", "Exception", "{", "Approvals", ".", "verify", "(", "o", "+", "\"", "STR", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 8553, 716, 326, 2667, 1706, 3330, 364, 326, 7434, 353, 486, 910, 2656, 1865, 3549, 326, 1842, 716, 29876, 3324, 6484, 4085, 263, 2], "score": -0.3659312129020691, "weight": 1, "toks": ["<s>", "Verify", "that", "the", "graphical", "environment", "for", "the", "tests", "is", "not", "headless", "before", "running", "the", "test", "that", "involves", "UI", "components", ".", "</s>"]}, {"tids": [1, 1220, 3229, 3021, 981, 13016, 29876, 3324, 279, 5110, 1842, 667, 1625, 2667, 1706, 3330, 4271, 471, 733, 11805, 364, 2836, 7769, 854, 9591, 263, 1021, 3354, 7155, 353, 603, 24831, 716, 326, 1842, 3330, 353, 486, 910, 2656, 1865, 3549, 8626, 7434, 269, 1492, 2198, 5390, 2667, 1706, 4085, 716, 4102, 82, 296, 268, 1440, 316, 279, 910, 2656, 1965, 263, 13743, 296, 272, 3661, 1846, 848, 22413, 471, 16499, 326, 498, 4209, 434, 1517, 707, 294, 404, 263, 380, 380, 6750, 1248, 1414, 2656, 261, 262, 380, 380, 294, 300, 380, 380, 14466, 4150, 380, 380, 294, 13074, 309, 326, 783, 3330, 353, 910, 2656, 261, 279, 2619, 3330, 2887, 279, 2562, 269, 16263, 269, 578, 7644, 262, 269, 471, 309, 1427, 269, 518, 24646, 326, 7434, 716, 2583, 279, 2667, 1706, 1560, 263, 300, 380, 380, 18765, 380, 380, 294, 2597, 4692, 1375, 16830, 5494, 263, 353, 1414, 2656, 261, 262, 1375, 358, 866, 364, 279, 910, 2656, 2269, 471, 1375, 6750, 8381, 1375, 358, 2305, 326, 1842, 309, 326, 2269, 353, 638, 263, 576, 263, 380, 380, 3929, 261, 1033, 320, 262, 380, 380, 294, 300, 380, 380, 14466, 4150, 380, 380, 294, 2974, 3929, 326, 876, 578, 919, 434, 392, 733, 716, 353, 2275, 269, 19997, 315, 7128, 315, 358, 2097, 533, 4335, 364, 11805, 13694, 269, 4075, 379, 6906, 1450, 2690, 3846, 434, 23556, 1842, 8257, 263, 300, 380, 380, 18765, 380, 380, 294, 2597, 5530, 1281, 733, 269, 7759, 518, 358, 279, 533, 269, 8144, 315, 7128, 315, 358, 518, 269, 471, 1508, 4692, 392, 3903, 5313, 1375, 1716, 685, 4524, 263, 3929, 261, 262, 1375, 358, 3073, 392, 23556, 1842, 603, 326, 4358, 533, 263, 890, 263, 380, 380, 1842, 694, 979, 2840, 261, 262, 380, 380, 294, 300, 380, 380, 14466, 4150, 380, 380, 294, 4603, 87, 487, 279, 2836, 1842, 364, 279, 707, 4075, 379, 6906, 4141, 1375, 444, 979, 2840, 261, 262, 1375, 316, 279, 667, 269, 13935, 3746, 358, 2667, 1706, 4085, 864, 326, 999, 434, 326, 910, 2656, 866, 263, 300, 380, 380, 18765, 380, 380, 294, 2597, 1122, 4097, 1375, 6750, 1248, 1414, 2656, 261, 262, 1375, 358, 3387, 716, 326, 3330, 848, 2865, 10978, 5295, 269, 1508, 518, 4102, 14755, 444, 731, 4636, 358, 1842, 326, 1375, 444, 979, 2840, 261, 262, 1375, 707, 269, 26347, 5348, 2923, 4209, 854, 486, 6864, 3470, 3433, 13016, 263, 2525, 24412, 2588, 1517, 1087, 269, 326, 3613, 15167, 434, 326, 13914, 14176, 471, 1960, 1031, 21478, 326, 981, 12724, 2424, 264, 263, 971, 1846, 1608, 279, 2923, 1842, 578, 927, 297, 1480, 2973, 4121, 1517, 1087, 434, 333, 981, 1552, 8950, 269, 17721, 1898, 819, 578, 3312, 981, 3377, 506, 28063, 263, 2], "score": -0.3808830976486206, "weight": 1, "toks": ["<s>", "This", "multiple", "statement", "code", "snippet", "involves", "a", "Java", "test", "class", "where", "graphical", "environment", "checks", "and", "object", "verification", "for", "unit", "testing", "are", "performed", ".", "The", "primary", "focus", "is", "on", "ensuring", "that", "the", "test", "environment", "is", "not", "headless", "before", "running", "certain", "tests", ",", "which", "involve", "graphical", "components", "that", "wouldn", "'", "t", "work", "in", "a", "headless", "mode", ".", "Here", "'", "s", "how", "you", "can", "understand", "and", "simplify", "the", "key", "actions", "of", "each", "method", ":", "1", ".", "*", "*", "assumeNotHeadless", "(", ")", "*", "*", ":", "-", "*", "*", "Purpose", "*", "*", ":", "Checks", "if", "the", "current", "environment", "is", "headless", "(", "a", "system", "environment", "without", "a", "display", ",", "keyboard", ",", "or", "mouse", ")", ",", "and", "if", "so", ",", "it", "skips", "the", "tests", "that", "require", "a", "graphical", "interface", ".", "-", "*", "*", "Actions", "*", "*", ":", "It", "uses", "`", "GraphicsEnvironment", ".", "isHeadless", "(", ")", "`", "to", "check", "for", "a", "headless", "condition", "and", "`", "assumeFalse", "`", "to", "ignore", "the", "test", "if", "the", "condition", "is", "true", ".", "2", ".", "*", "*", "verify", "(", "Object", "o", ")", "*", "*", ":", "-", "*", "*", "Purpose", "*", "*", ":", "To", "verify", "the", "output", "or", "state", "of", "an", "object", "that", "is", "passed", ",", "appending", "\"", "STR", "\"", "to", "its", "string", "representation", "for", "verification", "purposes", ",", "presumably", "using", "some", "kind", "of", "approval", "test", "framework", ".", "-", "*", "*", "Actions", "*", "*", ":", "It", "takes", "any", "object", ",", "converts", "it", "to", "a", "string", ",", "appends", "\"", "STR", "\"", "to", "it", ",", "and", "then", "uses", "an", "external", "library", "`", "Approvals", ".", "verify", "(", ")", "`", "to", "perform", "an", "approval", "test", "on", "the", "modified", "string", ".", "3", ".", "*", "*", "testSetAnimal", "(", ")", "*", "*", ":", "-", "*", "*", "Purpose", "*", "*", ":", "Acts", "as", "a", "unit", "test", "for", "a", "method", "presumably", "named", "`", "setAnimal", "(", ")", "`", "in", "a", "class", ",", "potentially", "related", "to", "graphical", "components", "given", "the", "use", "of", "the", "headless", "check", ".", "-", "*", "*", "Actions", "*", "*", ":", "It", "first", "calls", "`", "assumeNotHeadless", "(", ")", "`", "to", "ensure", "that", "the", "environment", "can", "support", "GUI", "operations", ",", "then", "it", "would", "typically", "set", "up", "conditions", "to", "test", "the", "`", "setAnimal", "(", ")", "`", "method", ",", "although", "those", "specific", "actions", "are", "not", "detailed", "within", "your", "snippet", ".", "By", "breaking", "down", "each", "part", ",", "the", "understanding", "of", "the", "overall", "functionality", "and", "goals", "behind", "the", "code", "becomes", "clearer", ".", "If", "you", "need", "a", "specific", "test", "or", "clarification", "about", "what", "each", "part", "of", "this", "code", "does", "exactly", ",", "providing", "more", "context", "or", "additional", "code", "could", "be", "helpful", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 804, 2802, 1989, 263, 6750, 1248, 1414, 2656, 261, 262, 274, 289, 2], "score": -0.38572371006011963, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "JUnitUtils", ".", "assumeNotHeadless", "(", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 42.77630929356224, "bleu-max": 42.77630929356224, "bleu-min": 20.205155046766237, "bleu-avg": 30.406660934820184, "code-bleu": 61.71413818371397, "code-bleu-max": 61.71413818371397, "code-bleu-min": 3.1438483914162414, "code-bleu-avg": 30.913708449776728, "edit-sim": 83, "edit-sim-max": 83, "edit-sim-min": 56, "edit-sim-avg": 68.9, "rouge-p": 85.71428571428571, "rouge-p-max": 85.71428571428571, "rouge-p-min": 50.0, "rouge-p-avg": 66.78571428571429, "rouge-r": 85.71428571428571, "rouge-r-max": 85.71428571428571, "rouge-r-min": 42.857142857142854, "rouge-r-avg": 68.57142857142856, "rouge-f": 85.71428521428571, "rouge-f-max": 85.71428521428571, "rouge-f-min": 46.153845656804734, "rouge-f-avg": 67.51648301774189, "num-seq": 10}, "time": 0.6635715961456299, "misc": {}}
{"id": 13, "data_id": "csn-22197", "input_stids": [1, 32315, 1071, 5991, 56, 295, 5929, 3829, 261, 262, 288, 2240, 261, 315, 3902, 6, 262, 274, 333, 263, 31217, 261, 453, 275, 12570, 263, 8069, 3610, 263, 463, 1313, 3738, 340, 27986, 262, 274, 289, 32315, 5991, 56, 295, 5929, 5537, 4709, 5991, 56, 295, 5929, 3829, 32315, 1033, 32315, 327, 333, 263, 3181, 295, 5929, 15775, 261, 262, 274, 32315, 32315, 1071, 760, 918, 3929, 261, 1033, 320, 262, 1216, 1185, 288, 1716, 685, 4524, 263, 3929, 261, 320, 397, 315, 3902, 6, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 32315, 804, 2802, 1989, 263, 6750, 1248, 1414, 2656, 261, 262, 274, 5991, 56, 295, 5929, 3829, 6594, 273, 394, 5991, 56, 295, 5929, 3829, 261, 262, 274, 2], "topk": [{"tids": [1, 1033, 21295, 273, 6594, 263, 3181, 295, 5929, 15775, 261, 262, 274, 3929, 261, 21295, 262, 274, 2], "score": -0.2124335616827011, "weight": 1, "toks": ["<s>", "Object", "painter", "=", "panel", ".", "getTurtlePainter", "(", ")", ";", "verify", "(", "painter", ")", ";", "</s>"]}, {"tids": [1, 1033, 21295, 273, 6594, 263, 3181, 295, 5929, 15775, 261, 262, 274, 3929, 261, 21295, 262, 274, 2], "score": -0.23313479125499725, "weight": 1, "toks": ["<s>", "Object", "painter", "=", "panel", ".", "getTurtlePainter", "(", ")", ";", "verify", "(", "painter", ")", ";", "</s>"]}, {"tids": [1, 6594, 263, 444, 979, 2840, 261, 394, 399, 295, 5929, 261, 262, 262, 274, 2], "score": -0.3010556995868683, "weight": 1, "toks": ["<s>", "panel", ".", "setAnimal", "(", "new", "Turtle", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1033, 21295, 273, 6594, 263, 3181, 295, 5929, 15775, 261, 262, 274, 3929, 261, 21295, 262, 274, 2], "score": -0.31070080399513245, "weight": 1, "toks": ["<s>", "Object", "painter", "=", "panel", ".", "getTurtlePainter", "(", ")", ";", "verify", "(", "painter", ")", ";", "</s>"]}, {"tids": [1, 1033, 21295, 273, 6594, 263, 3181, 295, 5929, 15775, 261, 262, 274, 3929, 261, 21295, 262, 274, 2], "score": -0.3177478015422821, "weight": 1, "toks": ["<s>", "Object", "painter", "=", "panel", ".", "getTurtlePainter", "(", ")", ";", "verify", "(", "painter", ")", ";", "</s>"]}, {"tids": [1, 1033, 21295, 273, 6594, 263, 3181, 295, 5929, 15775, 261, 262, 274, 3929, 261, 21295, 262, 274, 2], "score": -0.3488083779811859, "weight": 1, "toks": ["<s>", "Object", "painter", "=", "panel", ".", "getTurtlePainter", "(", ")", ";", "verify", "(", "painter", ")", ";", "</s>"]}, {"tids": [1, 1033, 21295, 273, 6594, 263, 3181, 295, 5929, 15775, 261, 262, 274, 3929, 261, 21295, 262, 274, 2], "score": -0.3543753921985626, "weight": 1, "toks": ["<s>", "Object", "painter", "=", "panel", ".", "getTurtlePainter", "(", ")", ";", "verify", "(", "painter", ")", ";", "</s>"]}, {"tids": [1, 1033, 21295, 273, 6594, 263, 3181, 295, 5929, 15775, 261, 262, 274, 2], "score": -0.37607061862945557, "weight": 1, "toks": ["<s>", "Object", "painter", "=", "panel", ".", "getTurtlePainter", "(", ")", ";", "</s>"]}, {"tids": [1, 1033, 268, 295, 5929, 15775, 273, 6594, 263, 3181, 295, 5929, 15775, 261, 262, 274, 3929, 261, 268, 295, 5929, 15775, 262, 274, 2], "score": -0.3773268759250641, "weight": 1, "toks": ["<s>", "Object", "turtlePainter", "=", "panel", ".", "getTurtlePainter", "(", ")", ";", "verify", "(", "turtlePainter", ")", ";", "</s>"]}, {"tids": [1, 5991, 56, 295, 5929, 5537, 21295, 273, 6594, 263, 3181, 295, 5929, 15775, 261, 262, 274, 3929, 261, 21295, 262, 274, 2], "score": -0.3810659348964691, "weight": 1, "toks": ["<s>", "MultiTurtlePanel", "painter", "=", "panel", ".", "getTurtlePainter", "(", ")", ";", "verify", "(", "painter", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 20.960166113993736, "bleu-max": 21.458512371359202, "bleu-min": 18.7087365645173, "bleu-avg": 19.886095327763734, "code-bleu": 10.264056766397163, "code-bleu-max": 10.264056766397163, "code-bleu-min": 3.6271417593134734, "code-bleu-avg": 4.698625412305715, "edit-sim": 56, "edit-sim-max": 58, "edit-sim-min": 46, "edit-sim-avg": 50.5, "rouge-p": 80.0, "rouge-p-max": 80.0, "rouge-p-min": 50.0, "rouge-p-avg": 58.71428571428571, "rouge-r": 57.14285714285714, "rouge-r-max": 57.14285714285714, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 57.142857142857125, "rouge-f": 66.66666618055555, "rouge-f-max": 66.66666618055555, "rouge-f-min": 53.33333283555556, "rouge-f-avg": 57.50915701254509, "num-seq": 10}, "time": 0.6091482639312744, "misc": {}}
{"id": 14, "data_id": "csn-22197", "input_stids": [1, 32315, 1071, 918, 527, 56, 295, 5929, 261, 399, 295, 5929, 268, 295, 5929, 262, 288, 309, 261, 268, 295, 5929, 422, 446, 262, 288, 327, 274, 289, 268, 295, 5929, 263, 444, 3219, 261, 333, 263, 25396, 261, 262, 262, 274, 268, 295, 5929, 263, 444, 5537, 261, 333, 262, 274, 333, 263, 268, 295, 88, 1040, 263, 527, 261, 268, 295, 5929, 262, 274, 2424, 52, 530, 5432, 261, 262, 274, 5068, 52, 530, 5432, 261, 262, 274, 289, 32315, 5991, 56, 295, 5929, 5537, 4709, 5991, 56, 295, 5929, 3829, 32315, 1033, 32315, 327, 333, 263, 3181, 295, 5929, 15775, 261, 262, 274, 32315, 32315, 1071, 760, 918, 3929, 261, 1033, 320, 262, 1216, 1185, 288, 1716, 685, 4524, 263, 3929, 261, 320, 397, 315, 3902, 6, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 32315, 804, 2802, 1989, 263, 6750, 1248, 1414, 2656, 261, 262, 274, 5991, 56, 295, 5929, 3829, 6594, 273, 394, 5991, 56, 295, 5929, 3829, 261, 262, 274, 6594, 263, 527, 56, 295, 5929, 261, 394, 399, 295, 5929, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 5783, 269, 3387, 326, 707, 1375, 527, 56, 295, 5929, 1375, 8214, 7372, 6534, 279, 1375, 399, 295, 5929, 1375, 358, 1375, 5991, 56, 295, 5929, 5537, 1375, 635, 18075, 716, 326, 268, 295, 5929, 353, 3096, 358, 326, 1849, 471, 711, 2097, 2623, 471, 6594, 1790, 444, 8783, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 986, 56, 295, 5929, 261, 262, 288, 5991, 56, 295, 5929, 3829, 6594, 273, 394, 5991, 56, 295, 5929, 3829, 261, 262, 274, 399, 295, 5929, 268, 295, 5929, 273, 394, 399, 295, 5929, 261, 262, 274, 6594, 263, 527, 56, 295, 5929, 261, 268, 295, 5929, 262, 274, 1815, 8867, 261, 6594, 269, 268, 295, 5929, 263, 1689, 30427, 261, 262, 262, 274, 25395, 261, 268, 295, 5929, 263, 25396, 261, 262, 262, 274, 1815, 5510, 261, 6594, 263, 3181, 295, 88, 1040, 261, 262, 263, 1914, 261, 268, 295, 5929, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.11610981076955795, "weight": 1, "toks": ["<s>", "First", ",", "ensure", "the", "method", "`", "addTurtle", "`", "properly", "handles", "adding", "a", "`", "Turtle", "`", "to", "`", "MultiTurtlePanel", "`", "by", "validating", "that", "the", "turtle", "is", "added", "to", "the", "collection", "and", "has", "its", "frame", "and", "panel", "properties", "set", "correctly", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testAddTurtle", "(", ")", "{", "MultiTurtleWindow", "panel", "=", "new", "MultiTurtleWindow", "(", ")", ";", "Turtle", "turtle", "=", "new", "Turtle", "(", ")", ";", "panel", ".", "addTurtle", "(", "turtle", ")", ";", "assertEquals", "(", "panel", ",", "turtle", ".", "getPanel", "(", ")", ")", ";", "assertNotNull", "(", "turtle", ".", "getFrame", "(", ")", ")", ";", "assertTrue", "(", "panel", ".", "getTurtles", "(", ")", ".", "contains", "(", "turtle", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 527, 56, 295, 5929, 1375, 707, 316, 1375, 5991, 56, 295, 5929, 3829, 1375, 269, 326, 3751, 353, 279, 20570, 784, 1842, 648, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 986, 56, 295, 5929, 261, 262, 288, 5991, 56, 295, 5929, 3829, 6594, 273, 394, 5991, 56, 295, 5929, 3829, 261, 262, 274, 399, 295, 5929, 268, 295, 5929, 273, 394, 399, 295, 5929, 261, 262, 274, 6594, 263, 527, 56, 295, 5929, 261, 268, 295, 5929, 262, 274, 342, 342, 8553, 268, 295, 5929, 711, 2118, 3096, 8783, 25395, 261, 268, 295, 5929, 263, 25396, 261, 262, 262, 274, 1815, 8867, 261, 6594, 269, 268, 295, 5929, 263, 1689, 30427, 261, 262, 262, 274, 1815, 5510, 261, 6594, 263, 3181, 295, 88, 1040, 261, 262, 263, 1914, 261, 268, 295, 5929, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 11643, 279, 394, 1375, 5991, 56, 295, 5929, 3829, 1375, 269, 4831, 279, 1375, 399, 295, 5929, 1375, 358, 518, 269, 471, 4271, 716, 326, 268, 295, 5929, 711, 2118, 3096, 8783, 471, 2097, 1790, 854, 444, 487, 2665, 263, 1220, 1842, 13041, 326, 9805, 434, 7060, 2590, 364, 1375, 3181, 295, 88, 1040, 1375, 316, 1375, 5991, 56, 295, 5929, 3829, 1375, 471, 1375, 1689, 30427, 1375, 269, 1375, 25396, 1375, 316, 1375, 399, 295, 5929, 1375, 364, 11805, 263, 17720, 1346, 4825, 506, 3577, 2511, 603, 326, 3214, 2590, 2319, 263, 2], "score": -0.16943766176700592, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "addTurtle", "`", "method", "in", "`", "MultiTurtleWindow", "`", ",", "the", "following", "is", "a", "concise", "test", "case", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testAddTurtle", "(", ")", "{", "MultiTurtleWindow", "panel", "=", "new", "MultiTurtleWindow", "(", ")", ";", "Turtle", "turtle", "=", "new", "Turtle", "(", ")", ";", "panel", ".", "addTurtle", "(", "turtle", ")", ";", "/", "/", "Verify", "turtle", "has", "been", "added", "correctly", "assertNotNull", "(", "turtle", ".", "getFrame", "(", ")", ")", ";", "assertEquals", "(", "panel", ",", "turtle", ".", "getPanel", "(", ")", ")", ";", "assertTrue", "(", "panel", ".", "getTurtles", "(", ")", ".", "contains", "(", "turtle", ")", ")", ";", "}", "`", "`", "`", "This", "test", "initializes", "a", "new", "`", "MultiTurtleWindow", "`", ",", "adds", "a", "`", "Turtle", "`", "to", "it", ",", "and", "checks", "that", "the", "turtle", "has", "been", "added", "correctly", "and", "its", "properties", "are", "set", "as", "expected", ".", "This", "test", "assumes", "the", "presence", "of", "getter", "methods", "for", "`", "getTurtles", "`", "in", "`", "MultiTurtleWindow", "`", "and", "`", "getPanel", "`", ",", "`", "getFrame", "`", "in", "`", "Turtle", "`", "for", "verification", ".", "Adjustments", "might", "be", "needed", "based", "on", "the", "actual", "methods", "available", ".", "</s>"]}, {"tids": [1, 14373, 1375, 3929, 1375, 603, 326, 1300, 434, 268, 295, 88, 1040, 3096, 358, 326, 6594, 1839, 15387, 1375, 527, 56, 295, 5929, 1375, 263, 2], "score": -0.2604990005493164, "weight": 1, "toks": ["<s>", "Invoke", "`", "verify", "`", "on", "the", "number", "of", "turtles", "added", "to", "the", "panel", "after", "invoking", "`", "addTurtle", "`", ".", "</s>"]}, {"tids": [1, 1716, 685, 4524, 263, 3929, 261, 6594, 263, 3181, 295, 5929, 15775, 261, 262, 262, 274, 2], "score": -0.265535444021225, "weight": 1, "toks": ["<s>", "Approvals", ".", "verify", "(", "panel", ".", "getTurtlePainter", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 527, 56, 295, 5929, 1375, 707, 23500, 471, 18172, 1230, 269, 752, 279, 1842, 648, 358, 3387, 279, 1375, 399, 295, 5929, 1375, 733, 353, 3096, 8783, 358, 279, 1375, 5991, 56, 295, 5929, 5537, 1375, 263, 4554, 848, 7155, 603, 3929, 310, 716, 326, 4573, 4889, 16605, 261, 3637, 2623, 471, 6594, 269, 6534, 358, 326, 268, 295, 5929, 666, 269, 471, 326, 1664, 434, 293, 530, 5432, 262, 854, 7120, 487, 2665, 1347, 279, 1661, 300, 446, 1375, 399, 295, 5929, 1375, 353, 3096, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 986, 56, 295, 5929, 261, 262, 288, 5991, 56, 295, 5929, 5537, 6594, 273, 394, 5991, 56, 295, 5929, 5537, 261, 262, 274, 399, 295, 5929, 268, 295, 5929, 273, 394, 399, 295, 5929, 261, 262, 274, 342, 342, 7867, 5030, 309, 4573, 269, 4123, 487, 326, 2623, 8058, 5416, 3219, 273, 5416, 261, 8058, 263, 667, 262, 274, 1347, 261, 6594, 263, 25396, 261, 262, 262, 263, 1508, 990, 261, 5416, 3219, 262, 274, 6594, 263, 527, 56, 295, 5929, 261, 268, 295, 5929, 262, 274, 342, 342, 8553, 268, 295, 5929, 353, 3096, 358, 326, 6594, 8783, 25395, 261, 268, 295, 5929, 263, 25396, 261, 262, 262, 274, 342, 342, 2073, 309, 326, 2623, 353, 444, 1815, 8867, 261, 6594, 269, 268, 295, 5929, 263, 1689, 30427, 261, 262, 262, 274, 342, 342, 7693, 326, 6594, 353, 444, 8783, 1815, 5510, 261, 6594, 263, 3181, 295, 88, 1040, 261, 262, 263, 1914, 261, 268, 295, 5929, 262, 262, 274, 342, 342, 2073, 309, 268, 295, 5929, 353, 3096, 358, 326, 666, 342, 342, 20720, 269, 1846, 848, 2546, 3929, 326, 4889, 16605, 3007, 21295, 1664, 3929, 261, 6594, 262, 263, 2424, 52, 530, 5432, 261, 262, 274, 3929, 261, 6594, 262, 263, 5068, 52, 530, 5432, 261, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 7155, 281, 603, 24831, 716, 1839, 279, 268, 295, 5929, 353, 3096, 294, 404, 263, 1021, 1375, 399, 295, 5929, 1375, 296, 272, 2623, 353, 444, 263, 576, 263, 1021, 1375, 399, 295, 5929, 1375, 296, 272, 6594, 2114, 353, 444, 263, 890, 263, 1021, 268, 295, 5929, 353, 3096, 358, 326, 6594, 296, 272, 666, 434, 268, 295, 88, 1040, 263, 1059, 263, 1021, 293, 530, 5432, 854, 4351, 8783, 263, 971, 1375, 2424, 52, 530, 5432, 261, 262, 1375, 471, 1375, 5068, 52, 530, 5432, 261, 262, 1375, 854, 486, 17997, 5416, 429, 578, 1924, 8424, 261, 578, 2898, 2727, 296, 268, 2198, 5390, 4422, 5286, 649, 4058, 262, 269, 518, 296, 272, 21194, 358, 14088, 2235, 1059, 309, 518, 532, 1780, 815, 326, 2836, 1842, 2887, 6534, 2424, 460, 263, 8080, 269, 3387, 716, 1281, 5416, 329, 2184, 31085, 487, 2665, 4888, 358, 326, 707, 296, 272, 8433, 263, 2], "score": -0.3914465606212616, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "addTurtle", "`", "method", "effectively", "and", "minimally", ",", "create", "a", "test", "case", "to", "ensure", "a", "`", "Turtle", "`", "object", "is", "added", "correctly", "to", "a", "`", "MultiTurtlePanel", "`", ".", "You", "can", "focus", "on", "verifying", "that", "the", "necessary", "side", "effects", "(", "setting", "frame", "and", "panel", ",", "adding", "to", "the", "turtle", "list", ",", "and", "the", "configuration", "of", "painters", ")", "are", "executed", "as", "expected", "when", "a", "non", "-", "null", "`", "Turtle", "`", "is", "added", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testAddTurtle", "(", ")", "{", "MultiTurtlePanel", "panel", "=", "new", "MultiTurtlePanel", "(", ")", ";", "Turtle", "turtle", "=", "new", "Turtle", "(", ")", ";", "/", "/", "Mock", "dependencies", "if", "necessary", ",", "such", "as", "the", "frame", "Frame", "mockFrame", "=", "mock", "(", "Frame", ".", "class", ")", ";", "when", "(", "panel", ".", "getFrame", "(", ")", ")", ".", "thenReturn", "(", "mockFrame", ")", ";", "panel", ".", "addTurtle", "(", "turtle", ")", ";", "/", "/", "Verify", "turtle", "is", "added", "to", "the", "panel", "correctly", "assertNotNull", "(", "turtle", ".", "getFrame", "(", ")", ")", ";", "/", "/", "Check", "if", "the", "frame", "is", "set", "assertEquals", "(", "panel", ",", "turtle", ".", "getPanel", "(", ")", ")", ";", "/", "/", "Ensure", "the", "panel", "is", "set", "correctly", "assertTrue", "(", "panel", ".", "getTurtles", "(", ")", ".", "contains", "(", "turtle", ")", ")", ";", "/", "/", "Check", "if", "turtle", "is", "added", "to", "the", "list", "/", "/", "Optionally", ",", "you", "can", "also", "verify", "the", "side", "effects", "like", "painter", "configuration", "verify", "(", "panel", ")", ".", "clearPainters", "(", ")", ";", "verify", "(", "panel", ")", ".", "configurePainters", "(", ")", ";", "}", "`", "`", "`", "This", "test", "focuses", "on", "ensuring", "that", "after", "a", "turtle", "is", "added", ":", "1", ".", "The", "`", "Turtle", "`", "'", "s", "frame", "is", "set", ".", "2", ".", "The", "`", "Turtle", "`", "'", "s", "panel", "reference", "is", "set", ".", "3", ".", "The", "turtle", "is", "added", "to", "the", "panel", "'", "s", "list", "of", "turtles", ".", "4", ".", "The", "painters", "are", "configured", "correctly", ".", "If", "`", "clearPainters", "(", ")", "`", "and", "`", "configurePainters", "(", ")", "`", "are", "not", "easily", "mockable", "or", "verifiable", "(", "or", "they", "don", "'", "t", "involve", "crucial", "logic", ")", ",", "it", "'", "s", "okay", "to", "omit", "step", "4", "if", "it", "complicates", "the", "unit", "test", "without", "adding", "clear", "value", ".", "Also", ",", "ensure", "that", "any", "mocked", "objects", "behave", "as", "expected", "according", "to", "the", "method", "'", "s", "requirements", ".", "</s>"]}, {"tids": [1, 5452, 716, 326, 268, 295, 5929, 666, 316, 326, 6594, 1914, 326, 10894, 3096, 268, 295, 5929, 263, 2], "score": -0.4115728735923767, "weight": 1, "toks": ["<s>", "Assert", "that", "the", "turtle", "list", "in", "the", "panel", "contains", "the", "newly", "added", "turtle", ".", "</s>"]}, {"tids": [1, 1716, 685, 4524, 263, 3929, 261, 6594, 263, 3181, 295, 5929, 15775, 261, 262, 262, 274, 2], "score": -0.43383410573005676, "weight": 1, "toks": ["<s>", "Approvals", ".", "verify", "(", "panel", ".", "getTurtlePainter", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 8553, 716, 1375, 527, 56, 295, 5929, 1375, 8783, 4831, 279, 1375, 399, 295, 5929, 1375, 791, 358, 392, 791, 434, 1375, 5991, 56, 295, 5929, 3829, 1375, 263, 2], "score": -0.43842384219169617, "weight": 1, "toks": ["<s>", "Verify", "that", "`", "addTurtle", "`", "correctly", "adds", "a", "`", "Turtle", "`", "instance", "to", "an", "instance", "of", "`", "MultiTurtleWindow", "`", ".", "</s>"]}, {"tids": [1, 4554, 848, 3929, 309, 279, 268, 295, 5929, 353, 3096, 4985, 358, 326, 6594, 263, 2], "score": -0.44673776626586914, "weight": 1, "toks": ["<s>", "You", "can", "verify", "if", "a", "turtle", "is", "added", "successfully", "to", "the", "panel", ".", "</s>"]}, {"tids": [1, 2974, 3387, 1375, 527, 56, 295, 5929, 1375, 707, 4186, 8783, 269, 326, 1842, 1410, 3929, 716, 279, 268, 295, 5929, 353, 3096, 358, 326, 6594, 269, 471, 326, 4573, 1790, 261, 2623, 471, 6594, 262, 854, 444, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 986, 56, 295, 5929, 261, 262, 1216, 1185, 288, 5991, 56, 295, 5929, 5537, 6594, 273, 394, 5991, 56, 295, 5929, 5537, 261, 262, 274, 399, 295, 5929, 268, 295, 5929, 273, 394, 399, 295, 5929, 261, 262, 274, 6594, 263, 527, 56, 295, 5929, 261, 268, 295, 5929, 262, 274, 1815, 8867, 261, 6594, 269, 268, 295, 5929, 263, 1689, 30427, 261, 262, 262, 274, 25395, 261, 268, 295, 5929, 263, 25396, 261, 262, 262, 274, 1815, 5510, 261, 6594, 263, 3181, 295, 88, 1040, 261, 262, 263, 1914, 261, 268, 295, 5929, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.4626753032207489, "weight": 1, "toks": ["<s>", "To", "ensure", "`", "addTurtle", "`", "method", "functions", "correctly", ",", "the", "test", "should", "verify", "that", "a", "turtle", "is", "added", "to", "the", "panel", ",", "and", "the", "necessary", "properties", "(", "frame", "and", "panel", ")", "are", "set", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testAddTurtle", "(", ")", "throws", "Exception", "{", "MultiTurtlePanel", "panel", "=", "new", "MultiTurtlePanel", "(", ")", ";", "Turtle", "turtle", "=", "new", "Turtle", "(", ")", ";", "panel", ".", "addTurtle", "(", "turtle", ")", ";", "assertEquals", "(", "panel", ",", "turtle", ".", "getPanel", "(", ")", ")", ";", "assertNotNull", "(", "turtle", ".", "getFrame", "(", ")", ")", ";", "assertTrue", "(", "panel", ".", "getTurtles", "(", ")", ".", "contains", "(", "turtle", ")", ")", ";", "}", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 20.232779753137994, "bleu-max": 37.14297425941499, "bleu-min": 16.052946190434394, "bleu-avg": 23.774153726577346, "code-bleu": 4.186528314230478, "code-bleu-max": 25.067743673893165, "code-bleu-min": 3.1805183213511063, "code-bleu-avg": 9.451686960221489, "edit-sim": 61, "edit-sim-max": 72, "edit-sim-min": 39, "edit-sim-avg": 56.7, "rouge-p": 71.42857142857143, "rouge-p-max": 83.33333333333334, "rouge-p-min": 42.857142857142854, "rouge-p-avg": 63.90873015873016, "rouge-r": 62.5, "rouge-r-max": 62.5, "rouge-r-min": 37.5, "rouge-r-avg": 57.5, "rouge-f": 66.6666661688889, "rouge-f-max": 71.42857093877552, "rouge-f-min": 39.999999502222224, "rouge-f-avg": 60.31302471318675, "num-seq": 10}, "time": 0.603482723236084, "misc": {}}
{"id": 15, "data_id": "csn-22197", "input_stids": [1, 32315, 1071, 3852, 918, 444, 979, 2840, 261, 1922, 11366, 392, 2840, 262, 288, 333, 263, 392, 2840, 273, 392, 2840, 274, 333, 263, 1316, 273, 1262, 979, 2840, 261, 262, 274, 2424, 52, 530, 5432, 261, 262, 274, 5068, 52, 530, 5432, 261, 262, 274, 289, 32315, 5991, 56, 295, 5929, 5537, 4709, 5991, 56, 295, 5929, 3829, 32315, 1033, 32315, 5452, 263, 1815, 5510, 261, 315, 3902, 6, 269, 290, 17614, 263, 353, 11852, 261, 262, 262, 274, 32315, 32315, 1071, 760, 918, 3929, 261, 1033, 320, 262, 1216, 1185, 288, 1716, 685, 4524, 263, 3929, 261, 320, 397, 315, 3902, 6, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 32315, 804, 2802, 1989, 263, 6750, 1248, 1414, 2656, 261, 262, 274, 5991, 56, 295, 5929, 3829, 6594, 273, 394, 5991, 56, 295, 5929, 3829, 261, 262, 274, 6594, 263, 527, 56, 295, 5929, 261, 394, 399, 295, 5929, 261, 262, 262, 274, 6594, 263, 444, 979, 2840, 261, 399, 295, 5929, 263, 1922, 11366, 263, 7784, 383, 785, 56, 295, 5929, 262, 274, 2], "topk": [{"tids": [1, 1324, 274, 3929, 261, 6594, 262, 274, 2], "score": -0.05814207345247269, "weight": 1, "toks": ["<s>", "continue", ";", "verify", "(", "panel", ")", ";", "</s>"]}, {"tids": [1, 1716, 685, 4524, 263, 3929, 261, 6594, 262, 274, 2], "score": -0.35142529010772705, "weight": 1, "toks": ["<s>", "Approvals", ".", "verify", "(", "panel", ")", ";", "</s>"]}, {"tids": [1, 1716, 685, 4524, 263, 3929, 261, 6594, 262, 274, 2], "score": -0.3789317309856415, "weight": 1, "toks": ["<s>", "Approvals", ".", "verify", "(", "panel", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 1815, 5510, 261, 6594, 263, 336, 979, 2840, 261, 262, 273, 273, 399, 295, 5929, 263, 1922, 11366, 263, 7784, 383, 785, 56, 295, 5929, 262, 274, 2], "score": -0.3844870328903198, "weight": 1, "toks": ["<s>", "Assert", ".", "assertTrue", "(", "panel", ".", "getAnimal", "(", ")", "=", "=", "Turtle", ".", "Animals", ".", "ExplodedTurtle", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 399, 295, 5929, 263, 1922, 11366, 263, 7784, 383, 785, 56, 295, 5929, 269, 6594, 263, 336, 979, 2840, 261, 262, 262, 274, 2], "score": -0.41916996240615845, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "Turtle", ".", "Animals", ".", "ExplodedTurtle", ",", "panel", ".", "getAnimal", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 8553, 716, 326, 3434, 1316, 353, 4203, 1347, 326, 392, 2840, 353, 444, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 979, 2840, 261, 262, 1216, 1185, 288, 804, 2802, 1989, 263, 6750, 1248, 1414, 2656, 261, 262, 274, 5991, 56, 295, 5929, 3829, 6594, 273, 394, 5991, 56, 295, 5929, 3829, 261, 262, 274, 6594, 263, 527, 56, 295, 5929, 261, 394, 399, 295, 5929, 261, 262, 262, 274, 6594, 263, 444, 979, 2840, 261, 399, 295, 5929, 263, 1922, 11366, 263, 7784, 383, 785, 56, 295, 5929, 262, 274, 5452, 263, 1815, 8867, 261, 315, 3421, 1410, 845, 326, 392, 2840, 618, 315, 269, 399, 295, 5929, 263, 1922, 11366, 263, 7784, 383, 785, 56, 295, 5929, 263, 10567, 261, 262, 269, 6594, 263, 5175, 2040, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.4246857166290283, "weight": 1, "toks": ["<s>", "Verify", "that", "the", "correct", "image", "is", "loaded", "when", "the", "animal", "is", "set", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetAnimal", "(", ")", "throws", "Exception", "{", "JUnitUtils", ".", "assumeNotHeadless", "(", ")", ";", "MultiTurtleWindow", "panel", "=", "new", "MultiTurtleWindow", "(", ")", ";", "panel", ".", "addTurtle", "(", "new", "Turtle", "(", ")", ")", ";", "panel", ".", "setAnimal", "(", "Turtle", ".", "Animals", ".", "ExplodedTurtle", ")", ";", "Assert", ".", "assertEquals", "(", "\"", "Image", "should", "match", "the", "animal", "type", "\"", ",", "Turtle", ".", "Animals", ".", "ExplodedTurtle", ".", "getImage", "(", ")", ",", "panel", ".", "getCurrentImage", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1716, 685, 4524, 263, 3929, 261, 6594, 263, 336, 979, 2840, 261, 262, 263, 508, 261, 262, 262, 274, 2], "score": -0.47169119119644165, "weight": 1, "toks": ["<s>", "Approvals", ".", "verify", "(", "panel", ".", "getAnimal", "(", ")", ".", "name", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1716, 685, 4524, 263, 3929, 261, 6594, 262, 274, 2], "score": -0.47292739152908325, "weight": 1, "toks": ["<s>", "Approvals", ".", "verify", "(", "panel", ")", ";", "</s>"]}, {"tids": [1, 1716, 685, 4524, 263, 3929, 261, 6594, 262, 274, 2], "score": -0.5018483996391296, "weight": 1, "toks": ["<s>", "Approvals", ".", "verify", "(", "panel", ")", ";", "</s>"]}, {"tids": [1, 1375, 5452, 263, 1815, 5510, 261, 315, 30626, 392, 2840, 353, 444, 315, 269, 6594, 263, 336, 979, 2840, 261, 262, 1276, 7784, 383, 785, 56, 295, 5929, 262, 274, 1375, 2], "score": -0.5567652583122253, "weight": 1, "toks": ["<s>", "`", "Assert", ".", "assertTrue", "(", "\"", "Correct", "animal", "is", "set", "\"", ",", "panel", ".", "getAnimal", "(", ")", "instanceof", "ExplodedTurtle", ")", ";", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 83.6572897136744, "bleu-max": 83.6572897136744, "bleu-min": 22.909907923897862, "bleu-avg": 69.0674489985669, "code-bleu": 87.27378077134809, "code-bleu-max": 87.27378077134809, "code-bleu-min": 9.725123792882064, "code-bleu-avg": 66.45887470745018, "edit-sim": 75, "edit-sim-max": 82, "edit-sim-min": 50, "edit-sim-avg": 72.1, "rouge-p": 83.33333333333334, "rouge-p-max": 83.33333333333334, "rouge-p-min": 44.44444444444444, "rouge-p-avg": 75.2777777777778, "rouge-r": 83.33333333333334, "rouge-r-max": 83.33333333333334, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 81.66666666666669, "rouge-f": 83.33333283333334, "rouge-f-max": 83.33333283333334, "rouge-f-min": 53.33333285333334, "rouge-f-avg": 77.95238045642176, "num-seq": 10}, "time": 0.43480944633483887, "misc": {}}
{"id": 16, "data_id": "csn-24358", "input_stids": [1, 11834, 11493, 32315, 32315, 1624, 373, 10764, 1227, 4709, 32315, 26961, 1064, 32315, 32315, 632, 11672, 1071, 918, 3875, 261, 262, 288, 1004, 273, 1624, 373, 10764, 1227, 263, 7635, 261, 333, 263, 11493, 269, 11834, 262, 274, 289, 32315, 2306, 1482, 5870, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 32315, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 5281, 1138, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 315, 3296, 25634, 1080, 315, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.2617134749889374, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSingleQuery", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "\"", "sampleOTPstring", "\"", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1482, 261, 262, 288, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 315, 3296, 25634, 315, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.29712361097335815, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetStatus", "(", ")", "{", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "\"", "sampleOTP", "\"", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5281, 1138, 1556, 1064, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 315, 3296, 67, 352, 84, 315, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.3095965087413788, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSingleQueryValidResponse", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "\"", "sample_otp", "\"", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 342, 342, 7903, 326, 707, 13605, 598, 326, 1967, 4540, 26961, 1064, 1122, 1064, 273, 1004, 263, 3929, 261, 315, 3296, 25634, 21, 315, 262, 274, 26961, 1064, 2205, 1064, 273, 1004, 263, 3929, 261, 315, 3296, 25634, 21, 315, 262, 274, 342, 342, 5452, 716, 326, 7220, 364, 3937, 6218, 854, 326, 1967, 1815, 8867, 261, 1122, 1064, 263, 5870, 261, 262, 269, 2205, 1064, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.32087671756744385, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "/", "/", "Execute", "the", "method", "twice", "with", "the", "same", "inputs", "VerificationResponse", "firstResponse", "=", "client", ".", "verify", "(", "\"", "sampleOTP1", "\"", ")", ";", "VerificationResponse", "secondResponse", "=", "client", ".", "verify", "(", "\"", "sampleOTP1", "\"", ")", ";", "/", "/", "Assert", "that", "the", "responses", "for", "both", "queries", "are", "the", "same", "assertEquals", "(", "firstResponse", ".", "getStatus", "(", ")", ",", "secondResponse", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1482, 261, 262, 288, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.3414175808429718, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetStatus", "(", ")", "{", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1482, 261, 262, 288, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 315, 3296, 25634, 315, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.3599602282047272, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetStatus", "(", ")", "{", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "\"", "sampleOTP", "\"", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1941, 1227, 261, 262, 1216, 1185, 288, 1624, 373, 10764, 1227, 1004, 273, 1624, 373, 10764, 1227, 263, 7635, 261, 300, 404, 269, 315, 2057, 653, 315, 262, 274, 1815, 21845, 261, 1624, 373, 10764, 13483, 503, 263, 667, 269, 261, 262, 300, 405, 1004, 263, 3929, 261, 315, 3296, 25634, 315, 262, 262, 274, 289, 2], "score": -0.3767814040184021, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testInvalidClient", "(", ")", "throws", "Exception", "{", "YubicoClient", "client", "=", "YubicoClient", ".", "getClient", "(", "-", "1", ",", "\"", "invalidKey", "\"", ")", ";", "assertThrows", "(", "YubicoVerificationException", ".", "class", ",", "(", ")", "-", ">", "client", ".", "verify", "(", "\"", "sampleOTP", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 315, 531, 11130, 315, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.3782269358634949, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "\"", "OTP", "\"", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1482, 261, 262, 288, 2306, 1482, 1267, 273, 1004, 263, 5870, 261, 262, 274, 25395, 261, 1267, 262, 274, 289, 2], "score": -0.3840005695819855, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetStatus", "(", ")", "{", "ResponseStatus", "status", "=", "client", ".", "getStatus", "(", ")", ";", "assertNotNull", "(", "status", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 26961, 1064, 766, 21, 273, 1004, 263, 3929, 261, 315, 28625, 21, 315, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 7791, 269, 766, 21, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.388784795999527, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "VerificationResponse", "response1", "=", "client", ".", "verify", "(", "\"", "otp1", "\"", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "OK", ",", "response1", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 5.877626059939229, "bleu-max": 14.490695731499715, "bleu-min": 5.877626059939229, "bleu-avg": 7.71292417644568, "code-bleu": 1.8689258010088738, "code-bleu-max": 14.962171711469319, "code-bleu-min": 1.8689258010088738, "code-bleu-avg": 4.478819296734151, "edit-sim": 25, "edit-sim-max": 38, "edit-sim-min": 23, "edit-sim-avg": 25.8, "rouge-p": 16.666666666666664, "rouge-p-max": 33.33333333333333, "rouge-p-min": 16.666666666666664, "rouge-p-avg": 19.318181818181813, "rouge-r": 40.0, "rouge-r-max": 60.0, "rouge-r-min": 40.0, "rouge-r-avg": 42.0, "rouge-f": 23.529411349480974, "rouge-f-max": 42.85714239795918, "rouge-f-min": 23.529411349480974, "rouge-f-avg": 26.333225171049644, "num-seq": 10}, "time": 0.8944492340087891, "misc": {}}
{"id": 17, "data_id": "csn-24358", "input_stids": [1, 11834, 11493, 32315, 32315, 1624, 373, 10764, 1227, 4709, 514, 32315, 26961, 1064, 32315, 590, 863, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 32315, 632, 11672, 1071, 918, 3875, 261, 262, 288, 1004, 273, 1624, 373, 10764, 1227, 263, 7635, 261, 333, 263, 11493, 269, 11834, 262, 274, 289, 32315, 2306, 1482, 5870, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 32315, 514, 28625, 273, 315, 3902, 6, 274, 2], "topk": [{"tids": [1, 632, 11672, 1071, 918, 3875, 261, 262, 288, 1004, 273, 1624, 373, 10764, 1227, 263, 7635, 261, 333, 263, 11493, 269, 11834, 262, 274, 289, 2], "score": -0.27195674180984497, "weight": 1, "toks": ["<s>", "@", "Before", "public", "void", "setup", "(", ")", "{", "client", "=", "YubicoClient", ".", "getClient", "(", "this", ".", "clientId", ",", "apiKey", ")", ";", "}", "</s>"]}, {"tids": [1, 8553, 716, 2795, 3775, 531, 11130, 6218, 327, 11071, 7220, 263, 2], "score": -0.3380884826183319, "weight": 1, "toks": ["<s>", "Verify", "that", "two", "different", "OTP", "queries", "return", "consistent", "responses", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 289, 2], "score": -0.3948427736759186, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 2], "score": -0.4044800102710724, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "</s>"]}, {"tids": [1, 7693, 326, 1624, 373, 10764, 1227, 353, 6454, 8783, 471, 848, 1640, 3229, 11805, 6218, 263, 2], "score": -0.43645182251930237, "weight": 1, "toks": ["<s>", "Ensure", "the", "YubicoClient", "is", "initialized", "correctly", "and", "can", "handle", "multiple", "verification", "queries", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.49426767230033875, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 289, 2], "score": -0.5060029029846191, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 13483, 1064, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 276, 952, 952, 7358, 278, 75, 332, 71, 2196, 79, 71, 3368, 31646, 23623, 495, 696, 2137, 637, 785, 71, 2242, 25031, 78, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 25395, 261, 766, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.5075052976608276, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testVerificationResponse", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "ccccccbetgulcbekcngdjlgibuffgugdedcflvnj", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertNotNull", "(", "response", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 289, 1375, 2], "score": -0.5103761553764343, "weight": 1, "toks": ["<s>", "`", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "}", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 289, 2], "score": -0.5234016180038452, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 10.511935884582806, "bleu-max": 69.99271023161167, "bleu-min": 10.511935884582806, "bleu-avg": 41.332176917480034, "code-bleu": 7.465100611425638, "code-bleu-max": 82.90185032381231, "code-bleu-min": 3.8976161810833023, "code-bleu-avg": 37.809162332260335, "edit-sim": 30, "edit-sim-max": 96, "edit-sim-min": 30, "edit-sim-avg": 69.9, "rouge-p": 40.0, "rouge-p-max": 88.88888888888889, "rouge-p-min": 40.0, "rouge-p-avg": 69.45202020202021, "rouge-r": 22.22222222222222, "rouge-r-max": 88.88888888888889, "rouge-r-min": 22.22222222222222, "rouge-r-avg": 68.88888888888889, "rouge-f": 28.571428112244902, "rouge-f-max": 88.8888883888889, "rouge-f-min": 28.571428112244902, "rouge-f-avg": 68.0410826122429, "num-seq": 10}, "time": 0.6733770370483398, "misc": {}}
{"id": 18, "data_id": "csn-24358", "input_stids": [1, 11834, 11493, 32315, 1071, 8770, 26961, 1064, 3929, 261, 514, 28625, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 274, 32315, 1624, 373, 10764, 1227, 4709, 514, 26961, 1064, 32315, 26961, 1064, 32315, 327, 315, 3902, 6, 397, 766, 274, 32315, 632, 11672, 1071, 918, 3875, 261, 262, 288, 1004, 273, 1624, 373, 10764, 1227, 263, 7635, 261, 333, 263, 11493, 269, 11834, 262, 274, 289, 32315, 2306, 1482, 5870, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 32315, 514, 28625, 273, 315, 3902, 6, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 2], "topk": [{"tids": [1, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 315, 7128, 315, 262, 274, 2], "score": -0.12226170301437378, "weight": 1, "toks": ["<s>", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 8282, 503, 1290, 1941, 25634, 261, 262, 288, 514, 2057, 51, 6834, 273, 315, 10071, 67, 25634, 315, 274, 1815, 21845, 261, 1624, 373, 10764, 13483, 503, 263, 667, 269, 261, 262, 300, 405, 1004, 263, 3929, 261, 2057, 51, 6834, 262, 262, 274, 289, 2], "score": -0.1333700269460678, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldThrowExceptionForInvalidOTP", "(", ")", "{", "String", "invalidOtp", "=", "\"", "INVALID_OTP", "\"", ";", "assertThrows", "(", "YubicoVerificationException", ".", "class", ",", "(", ")", "-", ">", "client", ".", "verify", "(", "invalidOtp", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8097, 25634, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 25395, 261, 766, 262, 274, 289, 2], "score": -0.15178051590919495, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testVerifyOTP", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertNotNull", "(", "response", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8097, 51, 6834, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 289, 2], "score": -0.17953383922576904, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testVerifyOtp", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "}", "</s>"]}, {"tids": [1, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 2], "score": -0.23446369171142578, "weight": 1, "toks": ["<s>", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 25395, 261, 766, 262, 274, 2], "score": -0.24007964134216309, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "response", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 766, 262, 274, 2], "score": -0.28234273195266724, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "response", ")", ";", "</s>"]}, {"tids": [1, 25935, 603, 326, 2112, 819, 269, 1846, 2026, 2545, 279, 20570, 784, 1842, 981, 13016, 716, 4692, 326, 3875, 471, 2590, 2112, 263, 13743, 296, 272, 392, 3454, 434, 3661, 1846, 3377, 3695, 518, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 8097, 51, 6834, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 315, 13219, 1064, 315, 269, 766, 263, 5870, 261, 262, 263, 508, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.28452062606811523, "weight": 1, "toks": ["<s>", "Based", "on", "the", "provided", "context", ",", "you", "may", "want", "a", "concise", "test", "code", "snippet", "that", "uses", "the", "setup", "and", "methods", "provided", ".", "Here", "'", "s", "an", "example", "of", "how", "you", "could", "structure", "it", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testVerifyOtp", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "\"", "ExpectedResponse", "\"", ",", "response", ".", "getStatus", "(", ")", ".", "name", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 25395, 261, 766, 262, 274, 2], "score": -0.2893551290035248, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "response", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 766, 262, 274, 2], "score": -0.29192519187927246, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "response", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 78.13821055418785, "bleu-max": 78.13821055418785, "bleu-min": 37.84481137591871, "bleu-avg": 54.84964298804685, "code-bleu": 84.07737335566594, "code-bleu-max": 84.07737335566594, "code-bleu-min": 37.76413333511625, "code-bleu-avg": 54.69985653658942, "edit-sim": 91, "edit-sim-max": 91, "edit-sim-min": 62, "edit-sim-avg": 75.0, "rouge-p": 88.88888888888889, "rouge-p-max": 88.88888888888889, "rouge-p-min": 60.0, "rouge-p-avg": 77.0, "rouge-r": 88.88888888888889, "rouge-r-max": 88.88888888888889, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 81.11111111111111, "rouge-f": 88.8888883888889, "rouge-f-max": 88.8888883888889, "rouge-f-min": 63.15789423822715, "rouge-f-avg": 78.94736792174515, "num-seq": 10}, "time": 0.8100504875183105, "misc": {}}
{"id": 19, "data_id": "csn-24358", "input_stids": [1, 11834, 11493, 32315, 2306, 1482, 5870, 261, 262, 274, 32315, 1624, 373, 10764, 1227, 4709, 514, 26961, 1064, 32315, 32315, 327, 315, 3902, 6, 397, 766, 274, 32315, 632, 11672, 1071, 918, 3875, 261, 262, 288, 1004, 273, 1624, 373, 10764, 1227, 263, 7635, 261, 333, 263, 11493, 269, 11834, 262, 274, 289, 32315, 2306, 1482, 5870, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 32315, 514, 28625, 273, 315, 3902, 6, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 263, 5870, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.17928430438041687, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1064, 1482, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.27673962712287903, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testResponseStatus", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1482, 261, 262, 288, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.29945147037506104, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetStatus", "(", ")", "{", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1556, 25634, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 15093, 25634, 12936, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.3108125627040863, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testValidOTP", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "VALIDOTP123", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5281, 1138, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 15093, 67, 25634, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 7791, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.3177195191383362, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSingleQuery", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "VALID_OTP", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "OK", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.3505978584289551, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 26481, 329, 51, 6834, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.3867743909358978, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testReplayedOtp", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.4358222186565399, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.43673941493034363, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.5043260455131531, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 16.463248243504296, "bleu-max": 19.26485944699838, "bleu-min": 11.822491766244644, "bleu-avg": 16.37245880762818, "code-bleu": 2.5120791077376454, "code-bleu-max": 3.1587722480773954, "code-bleu-min": 2.157962503628362, "code-bleu-avg": 2.593692701944392, "edit-sim": 45, "edit-sim-max": 51, "edit-sim-min": 42, "edit-sim-avg": 46.5, "rouge-p": 37.5, "rouge-p-max": 50.0, "rouge-p-min": 30.0, "rouge-p-avg": 40.08333333333333, "rouge-r": 33.33333333333333, "rouge-r-max": 44.44444444444444, "rouge-r-min": 33.33333333333333, "rouge-r-avg": 35.55555555555555, "rouge-f": 35.294117148788935, "rouge-f-max": 47.05882303114187, "rouge-f-min": 31.578946869806096, "rouge-f-avg": 37.550051102936784, "num-seq": 10}, "time": 0.9714198112487793, "misc": {}}
{"id": 20, "data_id": "csn-24358", "input_stids": [1, 11834, 11493, 32315, 1071, 8770, 26961, 1064, 3929, 261, 514, 28625, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 274, 32315, 1624, 373, 10764, 1227, 4709, 514, 26961, 1064, 26961, 1064, 32315, 32315, 327, 315, 3902, 6, 397, 766, 274, 32315, 632, 11672, 1071, 918, 3875, 261, 262, 288, 1004, 273, 1624, 373, 10764, 1227, 263, 7635, 261, 333, 263, 11493, 269, 11834, 262, 274, 289, 32315, 2306, 1482, 5870, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 32315, 514, 28625, 273, 315, 3902, 6, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 263, 5870, 261, 262, 262, 274, 26961, 1064, 766, 22, 273, 1004, 263, 3929, 261, 28625, 262, 274, 2], "topk": [{"tids": [1, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 22, 263, 5870, 261, 262, 262, 274, 2], "score": -0.016183698549866676, "weight": 1, "toks": ["<s>", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response2", ".", "getStatus", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 22, 263, 5870, 261, 262, 262, 274, 2], "score": -0.2159869521856308, "weight": 1, "toks": ["<s>", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response2", ".", "getStatus", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 22, 263, 5870, 261, 262, 262, 274, 2], "score": -0.2208404392004013, "weight": 1, "toks": ["<s>", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response2", ".", "getStatus", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 22, 263, 5870, 261, 262, 262, 274, 2], "score": -0.2403617948293686, "weight": 1, "toks": ["<s>", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response2", ".", "getStatus", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 22, 263, 5870, 261, 262, 262, 274, 2], "score": -0.2587571144104004, "weight": 1, "toks": ["<s>", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response2", ".", "getStatus", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11710, 9592, 261, 262, 1216, 1624, 373, 10764, 13483, 503, 269, 1624, 373, 10764, 4354, 5247, 288, 514, 28625, 273, 315, 7128, 315, 274, 26961, 1064, 766, 273, 1004, 263, 3929, 261, 28625, 262, 274, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 263, 5870, 261, 262, 262, 274, 289, 2], "score": -0.2667679488658905, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testTwoQueries", "(", ")", "throws", "YubicoVerificationException", ",", "YubicoValidationFailure", "{", "String", "otp", "=", "\"", "STR", "\"", ";", "VerificationResponse", "response", "=", "client", ".", "verify", "(", "otp", ")", ";", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response", ".", "getStatus", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 22, 263, 5870, 261, 262, 262, 274, 2], "score": -0.26866602897644043, "weight": 1, "toks": ["<s>", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response2", ".", "getStatus", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 22, 263, 5870, 261, 262, 262, 274, 2], "score": -0.27310842275619507, "weight": 1, "toks": ["<s>", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response2", ".", "getStatus", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 22, 263, 5870, 261, 262, 262, 274, 2], "score": -0.28252601623535156, "weight": 1, "toks": ["<s>", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response2", ".", "getStatus", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2306, 1482, 263, 2438, 52, 7868, 2056, 67, 25634, 269, 766, 22, 263, 5870, 261, 262, 262, 274, 2], "score": -0.31189584732055664, "weight": 1, "toks": ["<s>", "assertEquals", "(", "ResponseStatus", ".", "REPLAYED_OTP", ",", "response2", ".", "getStatus", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 49.32059688459376, "bleu-avg": 76.63950153653701, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 43.30419013865769, "code-bleu-avg": 79.00729493432921, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 61, "edit-sim-avg": 91.4, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 77.77777777777779, "rouge-p-avg": 88.75000000000001, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 77.77777777777779, "rouge-r-avg": 87.7777777777778, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 77.77777727777779, "rouge-f-avg": 88.23529361782008, "num-seq": 10}, "time": 1.008430004119873, "misc": {}}
{"id": 21, "data_id": "csn-24908", "input_stids": [1, 32315, 32315, 9621, 4029, 4709, 32315, 32315, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 514, 5728, 548, 273, 315, 3902, 6, 274, 514, 25903, 273, 315, 3902, 6, 274, 5728, 4029, 273, 394, 9621, 4029, 261, 5728, 548, 269, 25903, 262, 274, 25395, 261, 5728, 4029, 262, 274, 11596, 293, 273, 394, 11596, 261, 262, 274, 293, 263, 14324, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 5728, 4029, 263, 444, 4029, 261, 293, 262, 274, 289, 632, 7360, 1071, 918, 268, 2091, 4164, 261, 262, 1216, 1185, 288, 5728, 4029, 273, 446, 274, 289, 32315, 1071, 11596, 28042, 261, 262, 288, 327, 333, 263, 3042, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 967, 4029, 261, 262, 32315, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 967, 4029, 261, 262, 288, 11596, 2665, 273, 394, 11596, 261, 262, 274, 2665, 263, 14324, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 1815, 8867, 261, 2665, 269, 5728, 4029, 263, 28042, 261, 262, 262, 274, 289, 2], "score": -0.20961511135101318, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProfile", "(", ")", "{", "JsonObject", "expected", "=", "new", "JsonObject", "(", ")", ";", "expected", ".", "addProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "assertEquals", "(", "expected", ",", "activityProfile", ".", "getProfile", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 288, 25395, 261, 5728, 4029, 263, 28042, 261, 262, 262, 274, 289, 2], "score": -0.21344541013240814, "weight": 1, "toks": ["<s>", "{", "assertNotNull", "(", "activityProfile", ".", "getProfile", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 25395, 261, 5728, 4029, 263, 28042, 261, 262, 262, 274, 2], "score": -0.2222408503293991, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "activityProfile", ".", "getProfile", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 5728, 4029, 263, 28042, 261, 262, 262, 274, 2], "score": -0.23241642117500305, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "activityProfile", ".", "getProfile", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 5728, 4029, 263, 28042, 261, 262, 262, 274, 2], "score": -0.26165592670440674, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "activityProfile", ".", "getProfile", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 5728, 4029, 263, 28042, 261, 262, 262, 274, 2], "score": -0.3003602623939514, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "activityProfile", ".", "getProfile", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 4029, 261, 262, 288, 11596, 3214, 4029, 273, 5728, 4029, 263, 28042, 261, 262, 274, 25395, 261, 3214, 4029, 262, 274, 1815, 8867, 261, 315, 7128, 315, 269, 3214, 4029, 263, 336, 261, 315, 7128, 315, 262, 263, 24630, 261, 262, 262, 274, 289, 2], "score": -0.30208224058151245, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProfile", "(", ")", "{", "JsonObject", "actualProfile", "=", "activityProfile", ".", "getProfile", "(", ")", ";", "assertNotNull", "(", "actualProfile", ")", ";", "assertEquals", "(", "\"", "STR", "\"", ",", "actualProfile", ".", "get", "(", "\"", "STR", "\"", ")", ".", "getAsString", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 4029, 261, 262, 288, 11596, 563, 273, 5728, 4029, 263, 28042, 261, 262, 274, 25395, 261, 563, 262, 274, 1815, 8867, 261, 315, 7128, 315, 269, 563, 263, 336, 261, 315, 7128, 315, 262, 263, 24630, 261, 262, 262, 274, 289, 2], "score": -0.3050425052642822, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProfile", "(", ")", "{", "JsonObject", "result", "=", "activityProfile", ".", "getProfile", "(", ")", ";", "assertNotNull", "(", "result", ")", ";", "assertEquals", "(", "\"", "STR", "\"", ",", "result", ".", "get", "(", "\"", "STR", "\"", ")", ".", "getAsString", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 288, 5728, 4029, 263, 444, 4029, 261, 394, 11596, 261, 262, 262, 274, 1815, 8867, 261, 394, 11596, 261, 262, 269, 5728, 4029, 263, 28042, 261, 262, 262, 274, 289, 2], "score": -0.3056557774543762, "weight": 1, "toks": ["<s>", "{", "activityProfile", ".", "setProfile", "(", "new", "JsonObject", "(", ")", ")", ";", "assertEquals", "(", "new", "JsonObject", "(", ")", ",", "activityProfile", ".", "getProfile", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 25395, 261, 5728, 4029, 263, 28042, 261, 262, 262, 274, 2], "score": -0.31890031695365906, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "activityProfile", ".", "getProfile", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 13.083737883508872, "bleu-max": 74.76743906106103, "bleu-min": 7.454480401697921, "bleu-avg": 23.685812622087237, "code-bleu": 7.864831728043309, "code-bleu-max": 85.5621305873661, "code-bleu-min": 7.296930887809691, "code-bleu-avg": 24.49334124297125, "edit-sim": 46, "edit-sim-max": 91, "edit-sim-min": 27, "edit-sim-avg": 48.7, "rouge-p": 33.33333333333333, "rouge-p-max": 85.71428571428571, "rouge-p-min": 27.27272727272727, "rouge-p-avg": 42.6103896103896, "rouge-r": 42.857142857142854, "rouge-r-max": 85.71428571428571, "rouge-r-min": 42.857142857142854, "rouge-r-avg": 51.42857142857142, "rouge-f": 37.499999507812504, "rouge-f-max": 85.71428521428571, "rouge-f-min": 33.33333285802469, "rouge-f-avg": 46.207982704585554, "num-seq": 10}, "time": 1.2452096939086914, "misc": {}}
{"id": 22, "data_id": "csn-24908", "input_stids": [1, 32315, 32315, 9621, 4029, 4709, 11596, 32315, 32315, 327, 1081, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 514, 5728, 548, 273, 315, 3902, 6, 274, 514, 25903, 273, 315, 3902, 6, 274, 5728, 4029, 273, 394, 9621, 4029, 261, 5728, 548, 269, 25903, 262, 274, 25395, 261, 5728, 4029, 262, 274, 11596, 293, 273, 394, 11596, 261, 262, 274, 293, 263, 14324, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 5728, 4029, 263, 444, 4029, 261, 293, 262, 274, 289, 632, 7360, 1071, 918, 268, 2091, 4164, 261, 262, 1216, 1185, 288, 5728, 4029, 273, 446, 274, 289, 32315, 1071, 11596, 28042, 261, 262, 288, 327, 333, 263, 3042, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 967, 4029, 261, 262, 32315, 11596, 2665, 273, 394, 11596, 261, 262, 274, 2], "topk": [{"tids": [1, 2665, 263, 14324, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 2], "score": -0.12839415669441223, "weight": 1, "toks": ["<s>", "expected", ".", "addProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 2665, 263, 14324, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 2], "score": -0.20950475335121155, "weight": 1, "toks": ["<s>", "expected", ".", "addProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 2665, 263, 14324, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 2], "score": -0.29472288489341736, "weight": 1, "toks": ["<s>", "expected", ".", "addProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 2665, 263, 14324, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 2], "score": -0.3292987644672394, "weight": 1, "toks": ["<s>", "expected", ".", "addProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 2665, 263, 14324, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 2], "score": -0.3310755789279938, "weight": 1, "toks": ["<s>", "expected", ".", "addProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 2665, 263, 14324, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 2], "score": -0.3375047743320465, "weight": 1, "toks": ["<s>", "expected", ".", "addProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 2665, 263, 14324, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 2], "score": -0.3376637399196625, "weight": 1, "toks": ["<s>", "expected", ".", "addProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 2665, 263, 14324, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 411, 5478, 405, 1815, 8867, 261, 2665, 269, 5728, 4029, 263, 28042, 261, 262, 262, 274, 2], "score": -0.350001722574234, "weight": 1, "toks": ["<s>", "expected", ".", "addProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "<", "sep", ">", "assertEquals", "(", "expected", ",", "activityProfile", ".", "getProfile", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2665, 263, 14324, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 1815, 8867, 261, 2665, 269, 5728, 4029, 263, 28042, 261, 262, 262, 274, 2], "score": -0.385044127702713, "weight": 1, "toks": ["<s>", "expected", ".", "addProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "assertEquals", "(", "expected", ",", "activityProfile", ".", "getProfile", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2665, 263, 14324, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 2], "score": -0.415029913187027, "weight": 1, "toks": ["<s>", "expected", ".", "addProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 18.219579170624282, "bleu-avg": 51.287080150492535, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 3.973478580634313, "code-bleu-avg": 37.84583547621095, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 38, "edit-sim-avg": 73.7, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 42.857142857142854, "rouge-p-avg": 76.8452380952381, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 42.857142857142854, "rouge-r-avg": 81.42857142857142, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 42.857142357142855, "rouge-f-avg": 78.91575041715788, "num-seq": 10}, "time": 0.5784168243408203, "misc": {}}
{"id": 23, "data_id": "csn-24908", "input_stids": [1, 32315, 32315, 9621, 4029, 4709, 11596, 32315, 32315, 1081, 263, 14324, 261, 315, 3902, 6, 269, 333, 263, 6056, 22, 262, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 514, 5728, 548, 273, 315, 3902, 6, 274, 514, 25903, 273, 315, 3902, 6, 274, 5728, 4029, 273, 394, 9621, 4029, 261, 5728, 548, 269, 25903, 262, 274, 25395, 261, 5728, 4029, 262, 274, 11596, 293, 273, 394, 11596, 261, 262, 274, 293, 263, 14324, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 5728, 4029, 263, 444, 4029, 261, 293, 262, 274, 289, 632, 7360, 1071, 918, 268, 2091, 4164, 261, 262, 1216, 1185, 288, 5728, 4029, 273, 446, 274, 289, 32315, 1071, 11596, 28042, 261, 262, 288, 327, 333, 263, 3042, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 967, 4029, 261, 262, 32315, 11596, 2665, 273, 394, 11596, 261, 262, 274, 2665, 263, 14324, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 11596, 3214, 273, 5728, 4029, 263, 28042, 261, 262, 274, 2], "score": -0.054072897881269455, "weight": 1, "toks": ["<s>", "JsonObject", "actual", "=", "activityProfile", ".", "getProfile", "(", ")", ";", "</s>"]}, {"tids": [1, 11596, 3214, 273, 5728, 4029, 263, 28042, 261, 262, 274, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.15192413330078125, "weight": 1, "toks": ["<s>", "JsonObject", "actual", "=", "activityProfile", ".", "getProfile", "(", ")", ";", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 11596, 3214, 273, 5728, 4029, 263, 28042, 261, 262, 274, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.29759681224823, "weight": 1, "toks": ["<s>", "JsonObject", "actual", "=", "activityProfile", ".", "getProfile", "(", ")", ";", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 11596, 3214, 273, 5728, 4029, 263, 28042, 261, 262, 274, 2], "score": -0.298929363489151, "weight": 1, "toks": ["<s>", "JsonObject", "actual", "=", "activityProfile", ".", "getProfile", "(", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 5728, 4029, 263, 28042, 261, 262, 262, 274, 2], "score": -0.3155677318572998, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "activityProfile", ".", "getProfile", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 11596, 3214, 273, 5728, 4029, 263, 28042, 261, 262, 274, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.3518258035182953, "weight": 1, "toks": ["<s>", "JsonObject", "actual", "=", "activityProfile", ".", "getProfile", "(", ")", ";", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 11596, 3214, 273, 5728, 4029, 263, 28042, 261, 262, 274, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.3726842999458313, "weight": 1, "toks": ["<s>", "JsonObject", "actual", "=", "activityProfile", ".", "getProfile", "(", ")", ";", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 5728, 4029, 263, 28042, 261, 262, 262, 274, 2], "score": -0.387887179851532, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "activityProfile", ".", "getProfile", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 4029, 261, 262, 288, 11596, 3214, 273, 5728, 4029, 263, 28042, 261, 262, 274, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 289, 2], "score": -0.39998459815979004, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProfile", "(", ")", "{", "JsonObject", "actual", "=", "activityProfile", ".", "getProfile", "(", ")", ";", "assertEquals", "(", "expected", ",", "actual", ")", ";", "}", "</s>"]}, {"tids": [1, 11596, 3214, 273, 5728, 4029, 263, 28042, 261, 262, 274, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.4416241943836212, "weight": 1, "toks": ["<s>", "JsonObject", "actual", "=", "activityProfile", ".", "getProfile", "(", ")", ";", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 23.884125437220508, "bleu-max": 44.62867229627022, "bleu-min": 16.463248243504296, "bleu-avg": 24.145380698223185, "code-bleu": 3.8582022049628795, "code-bleu-max": 32.05527378659401, "code-bleu-min": 3.0153626802038844, "code-bleu-avg": 21.699871670149285, "edit-sim": 68, "edit-sim-max": 74, "edit-sim-min": 35, "edit-sim-avg": 59.1, "rouge-p": 66.66666666666666, "rouge-p-max": 66.66666666666666, "rouge-p-min": 40.0, "rouge-p-avg": 52.9069264069264, "rouge-r": 50.0, "rouge-r-max": 75.0, "rouge-r-min": 37.5, "rouge-r-avg": 57.5, "rouge-f": 57.14285665306124, "rouge-f-max": 63.157894249307475, "rouge-f-min": 39.999999502222224, "rouge-f-avg": 54.67386554233017, "num-seq": 10}, "time": 0.7805342674255371, "misc": {}}
{"id": 24, "data_id": "csn-24908", "input_stids": [1, 32315, 1071, 11596, 28042, 261, 262, 288, 327, 333, 263, 3042, 274, 289, 32315, 9621, 4029, 4709, 11596, 11596, 32315, 32315, 327, 1081, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 514, 5728, 548, 273, 315, 3902, 6, 274, 514, 25903, 273, 315, 3902, 6, 274, 5728, 4029, 273, 394, 9621, 4029, 261, 5728, 548, 269, 25903, 262, 274, 25395, 261, 5728, 4029, 262, 274, 11596, 293, 273, 394, 11596, 261, 262, 274, 293, 263, 14324, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 5728, 4029, 263, 444, 4029, 261, 293, 262, 274, 289, 632, 7360, 1071, 918, 268, 2091, 4164, 261, 262, 1216, 1185, 288, 5728, 4029, 273, 446, 274, 289, 32315, 1071, 11596, 28042, 261, 262, 288, 327, 333, 263, 3042, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 967, 4029, 261, 262, 32315, 11596, 2665, 273, 394, 11596, 261, 262, 274, 2665, 263, 14324, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 11596, 3214, 273, 5728, 4029, 263, 28042, 261, 262, 274, 2], "topk": [{"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.0330304317176342, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.34335973858833313, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.36756783723831177, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.371417373418808, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.38936489820480347, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.42421263456344604, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.4361463785171509, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.44076254963874817, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.4569226801395416, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.47160854935646057, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 35.7456728849784, "bleu-max": 100.0, "bleu-min": 10.363232116621422, "bleu-avg": 31.05993295001837, "code-bleu": 15.38053651213864, "code-bleu-max": 100.0, "code-bleu-min": 5.468266159894889, "code-bleu-avg": 19.953728153061647, "edit-sim": 68, "edit-sim-max": 100, "edit-sim-min": 42, "edit-sim-avg": 61.1, "rouge-p": 57.14285714285714, "rouge-p-max": 100.0, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 54.38492063492064, "rouge-r": 80.0, "rouge-r-max": 100.0, "rouge-r-min": 60.0, "rouge-r-avg": 78.0, "rouge-f": 66.66666618055555, "rouge-f-max": 99.9999995, "rouge-f-min": 42.85714239795918, "rouge-f-avg": 63.58974311145058, "num-seq": 10}, "time": 0.8210849761962891, "misc": {}}
{"id": 25, "data_id": "csn-24908", "input_stids": [1, 32315, 1071, 11596, 28042, 261, 262, 288, 327, 333, 263, 3042, 274, 289, 32315, 9621, 4029, 4709, 11596, 11596, 32315, 32315, 327, 819, 263, 7673, 261, 1163, 269, 7352, 262, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 514, 5728, 548, 273, 315, 3902, 6, 274, 514, 25903, 273, 315, 3902, 6, 274, 5728, 4029, 273, 394, 9621, 4029, 261, 5728, 548, 269, 25903, 262, 274, 25395, 261, 5728, 4029, 262, 274, 11596, 293, 273, 394, 11596, 261, 262, 274, 293, 263, 14324, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 5728, 4029, 263, 444, 4029, 261, 293, 262, 274, 289, 632, 7360, 1071, 918, 268, 2091, 4164, 261, 262, 1216, 1185, 288, 5728, 4029, 273, 446, 274, 289, 32315, 1071, 11596, 28042, 261, 262, 288, 327, 333, 263, 3042, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 967, 4029, 261, 262, 32315, 11596, 2665, 273, 394, 11596, 261, 262, 274, 2665, 263, 14324, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 11596, 3214, 273, 5728, 4029, 263, 28042, 261, 262, 274, 25395, 261, 3214, 262, 274, 2], "topk": [{"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.03378944844007492, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.2723865509033203, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.2867492735385895, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.3057865500450134, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.36882999539375305, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.3779788911342621, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.39369869232177734, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.42399606108665466, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 2], "score": -0.4286617040634155, "weight": 1, "toks": ["<s>", "assertEquals", "(", "expected", ",", "actual", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 4029, 261, 262, 288, 11596, 2665, 273, 394, 11596, 261, 262, 274, 2665, 263, 14324, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 5728, 4029, 263, 444, 4029, 261, 2665, 262, 274, 11596, 3214, 273, 5728, 4029, 263, 28042, 261, 262, 274, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 289, 2], "score": -0.4361450970172882, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProfile", "(", ")", "{", "JsonObject", "expected", "=", "new", "JsonObject", "(", ")", ";", "expected", ".", "addProperty", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "activityProfile", ".", "setProfile", "(", "expected", ")", ";", "JsonObject", "actual", "=", "activityProfile", ".", "getProfile", "(", ")", ";", "assertEquals", "(", "expected", ",", "actual", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 13.350914949085238, "bleu-avg": 34.96523281967151, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 5.562169980793463, "code-bleu-avg": 26.366226210764893, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 62, "edit-sim-avg": 74.8, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 60.0, "rouge-p-avg": 77.64285714285714, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 71.42857142857143, "rouge-r-avg": 94.28571428571428, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 70.58823480968859, "rouge-f-avg": 84.85364096326626, "num-seq": 10}, "time": 1.0560431480407715, "misc": {}}
{"id": 26, "data_id": "csn-26465", "input_stids": [1, 1566, 19210, 613, 733, 1138, 1386, 21804, 5731, 3866, 32315, 32315, 5982, 19085, 5164, 4709, 32315, 32315, 32315, 632, 11672, 1071, 918, 3875, 4709, 261, 262, 1216, 1185, 288, 333, 263, 6659, 273, 394, 5982, 19085, 5164, 261, 262, 274, 333, 263, 5416, 1499, 19210, 273, 7867, 11250, 263, 5416, 261, 3601, 19210, 263, 667, 262, 274, 333, 263, 5416, 921, 1138, 1386, 21804, 273, 7867, 11250, 263, 5416, 261, 1033, 1138, 1386, 21804, 263, 667, 262, 274, 333, 263, 5416, 3328, 273, 7867, 11250, 263, 5416, 261, 4242, 263, 667, 262, 274, 333, 263, 5416, 1862, 1952, 273, 7867, 11250, 263, 5416, 261, 16622, 4497, 4664, 429, 1862, 1952, 263, 667, 262, 274, 333, 263, 2952, 1259, 4710, 273, 394, 10688, 411, 405, 261, 262, 274, 333, 263, 2952, 1259, 11664, 273, 7867, 11250, 263, 5416, 261, 7766, 797, 11664, 263, 667, 262, 274, 333, 263, 2952, 1259, 4710, 263, 527, 261, 333, 263, 2952, 1259, 11664, 262, 274, 333, 263, 5416, 921, 1138, 966, 11664, 273, 7867, 11250, 263, 5416, 261, 1033, 1138, 966, 263, 667, 262, 274, 333, 263, 12282, 11664, 273, 7867, 11250, 263, 5416, 261, 21013, 263, 667, 262, 274, 333, 263, 1566, 1557, 11664, 273, 394, 6847, 411, 405, 261, 5647, 263, 8528, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 262, 274, 333, 263, 1566, 694, 5432, 11664, 273, 394, 4317, 411, 405, 261, 262, 274, 333, 263, 843, 1499, 863, 273, 394, 4317, 411, 405, 261, 262, 274, 333, 263, 563, 1499, 863, 273, 394, 4317, 411, 405, 261, 262, 274, 333, 263, 1566, 694, 5432, 11664, 263, 1378, 261, 315, 3902, 6, 269, 7766, 797, 11664, 263, 667, 263, 6272, 261, 315, 3902, 6, 269, 514, 263, 667, 262, 262, 274, 333, 263, 1566, 694, 5432, 11664, 263, 1378, 261, 315, 3902, 6, 269, 7766, 797, 11664, 263, 667, 263, 6272, 261, 315, 3902, 6, 269, 509, 263, 667, 262, 262, 274, 333, 263, 843, 1499, 863, 263, 1378, 261, 333, 263, 12282, 11664, 269, 5647, 263, 8528, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 262, 274, 333, 263, 563, 1499, 863, 263, 1378, 261, 333, 263, 12282, 11664, 269, 5647, 263, 8528, 261, 394, 3601, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 269, 394, 3601, 261, 315, 3902, 6, 269, 4648, 262, 262, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 1386, 21804, 263, 2911, 921, 1138, 261, 333, 263, 2952, 1259, 11664, 262, 262, 263, 1508, 990, 261, 333, 263, 5416, 921, 1138, 966, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 8571, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 2952, 1259, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 6455, 461, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 12282, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 4061, 1557, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 1566, 1557, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 4061, 694, 5432, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 1566, 694, 5432, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 1862, 1952, 263, 2581, 1138, 2498, 261, 333, 263, 752, 1499, 863, 6286, 261, 333, 263, 843, 1499, 863, 262, 262, 262, 263, 1508, 990, 261, 333, 263, 563, 1499, 863, 262, 274, 289, 32315, 1071, 4242, 9189, 261, 262, 288, 327, 613, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 1216, 1185, 32315, 2], "topk": [{"tids": [1, 5452, 263, 1815, 8867, 261, 6659, 263, 9189, 261, 262, 269, 5416, 3328, 262, 274, 2], "score": -0.1954091340303421, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "processor", ".", "getLog", "(", ")", ",", "mockLogger", ")", ";", "</s>"]}, {"tids": [1, 1220, 1842, 3875, 707, 11643, 279, 1375, 5982, 19085, 5164, 1375, 471, 2097, 5030, 269, 3637, 731, 15895, 471, 642, 4017, 3675, 6885, 358, 20089, 1566, 10380, 471, 23936, 364, 279, 2581, 7672, 1207, 316, 279, 28845, 3330, 263, 2], "score": -0.2045855075120926, "weight": 1, "toks": ["<s>", "This", "test", "setup", "method", "initializes", "a", "`", "BatchPollProcessor", "`", "and", "its", "dependencies", ",", "setting", "up", "mocks", "and", "configuring", "their", "behavior", "to", "simulate", "attribute", "injection", "and", "querying", "for", "a", "batch", "poll", "process", "in", "a", "JMX", "environment", ".", "</s>"]}, {"tids": [1, 7766, 10313, 364, 1375, 5982, 19085, 5164, 4709, 1375, 1410, 866, 326, 3875, 1664, 471, 5416, 26305, 263, 2], "score": -0.21324151754379272, "weight": 1, "toks": ["<s>", "Test", "initialization", "for", "`", "BatchPollProcessorTest", "`", "should", "check", "the", "setup", "configuration", "and", "mock", "expectations", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 288, 4242, 2665, 273, 7867, 11250, 263, 5416, 261, 4242, 263, 667, 262, 274, 6659, 263, 444, 1343, 261, 2665, 262, 274, 4242, 3214, 273, 6659, 263, 9189, 261, 262, 274, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 289, 2], "score": -0.21808375418186188, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetSetLog", "(", ")", "{", "Logger", "expected", "=", "Mockito", ".", "mock", "(", "Logger", ".", "class", ")", ";", "processor", ".", "setLog", "(", "expected", ")", ";", "Logger", "actual", "=", "processor", ".", "getLog", "(", ")", ";", "assertEquals", "(", "expected", ",", "actual", ")", ";", "}", "</s>"]}, {"tids": [1, 5452, 263, 25395, 261, 6659, 263, 9189, 261, 262, 262, 274, 2], "score": -0.21946977078914642, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "processor", ".", "getLog", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1021, 707, 3613, 1842, 353, 1375, 9189, 261, 262, 1375, 269, 1492, 8616, 1135, 326, 1375, 613, 1375, 791, 263, 2], "score": -0.2239437997341156, "weight": 1, "toks": ["<s>", "The", "method", "under", "test", "is", "`", "getLog", "(", ")", "`", ",", "which", "simply", "returns", "the", "`", "log", "`", "instance", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 4497, 19085, 5164, 17701, 261, 262, 288, 5982, 19085, 5164, 6659, 273, 394, 5982, 19085, 5164, 261, 262, 274, 25395, 261, 6659, 262, 274, 289, 2], "score": -0.22664020955562592, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testBatchPollProcessorInitialization", "(", ")", "{", "BatchPollProcessor", "processor", "=", "new", "BatchPollProcessor", "(", ")", ";", "assertNotNull", "(", "processor", ")", ";", "}", "</s>"]}, {"tids": [1, 7766, 326, 1375, 9189, 1375, 707, 635, 24831, 518, 1135, 326, 3434, 1194, 791, 1347, 2566, 263, 2], "score": -0.23699426651000977, "weight": 1, "toks": ["<s>", "Test", "the", "`", "getLog", "`", "method", "by", "ensuring", "it", "returns", "the", "correct", "logger", "instance", "when", "called", ".", "</s>"]}, {"tids": [1, 1021, 1024, 3021, 1410, 506, 294, 1375, 6659, 263, 444, 1343, 261, 5416, 3328, 262, 274, 1375, 2], "score": -0.23927798867225647, "weight": 1, "toks": ["<s>", "The", "next", "statement", "should", "be", ":", "`", "processor", ".", "setLog", "(", "mockLogger", ")", ";", "`", "</s>"]}, {"tids": [1, 632, 7360, 1071, 918, 268, 2091, 4164, 261, 262, 288, 333, 263, 6659, 273, 446, 274, 333, 263, 5416, 1499, 19210, 273, 446, 274, 333, 263, 5416, 921, 1138, 1386, 21804, 273, 446, 274, 333, 263, 5416, 3328, 273, 446, 274, 333, 263, 5416, 1862, 1952, 273, 446, 274, 333, 263, 2952, 1259, 4710, 263, 2424, 261, 262, 274, 289, 2], "score": -0.24254940450191498, "weight": 1, "toks": ["<s>", "@", "After", "public", "void", "tearDown", "(", ")", "{", "this", ".", "processor", "=", "null", ";", "this", ".", "mockAttributeInjector", "=", "null", ";", "this", ".", "mockObjectQueryPreparer", "=", "null", ";", "this", ".", "mockLogger", "=", "null", ";", "this", ".", "mockAccessConnection", "=", "null", ";", "this", ".", "polledObjects", ".", "clear", "(", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 5.884644133406024, "bleu-max": 61.30028299967284, "bleu-min": 5.884644133406024, "bleu-avg": 18.877810922744438, "code-bleu": 11.472978974961185, "code-bleu-max": 61.87017840660054, "code-bleu-min": 10.76024887504533, "code-bleu-avg": 21.897401473076815, "edit-sim": 21, "edit-sim-max": 78, "edit-sim-min": 21, "edit-sim-avg": 37.8, "rouge-p": 22.22222222222222, "rouge-p-max": 75.0, "rouge-p-min": 21.052631578947366, "rouge-p-avg": 35.14447884416924, "rouge-r": 57.14285714285714, "rouge-r-max": 85.71428571428571, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 62.85714285714285, "rouge-f": 31.999999596800006, "rouge-f-max": 79.99999950222222, "rouge-f-min": 30.76923037573965, "rouge-f-avg": 43.87837191472999, "num-seq": 10}, "time": 3.0859811305999756, "misc": {}}
{"id": 27, "data_id": "csn-26465", "input_stids": [1, 1566, 19210, 613, 733, 1138, 1386, 21804, 5731, 3866, 32315, 1071, 4242, 9189, 261, 262, 288, 327, 613, 274, 289, 32315, 5982, 19085, 5164, 4709, 32315, 32315, 32315, 632, 11672, 1071, 918, 3875, 4709, 261, 262, 1216, 1185, 288, 333, 263, 6659, 273, 394, 5982, 19085, 5164, 261, 262, 274, 333, 263, 5416, 1499, 19210, 273, 7867, 11250, 263, 5416, 261, 3601, 19210, 263, 667, 262, 274, 333, 263, 5416, 921, 1138, 1386, 21804, 273, 7867, 11250, 263, 5416, 261, 1033, 1138, 1386, 21804, 263, 667, 262, 274, 333, 263, 5416, 3328, 273, 7867, 11250, 263, 5416, 261, 4242, 263, 667, 262, 274, 333, 263, 5416, 1862, 1952, 273, 7867, 11250, 263, 5416, 261, 16622, 4497, 4664, 429, 1862, 1952, 263, 667, 262, 274, 333, 263, 2952, 1259, 4710, 273, 394, 10688, 411, 405, 261, 262, 274, 333, 263, 2952, 1259, 11664, 273, 7867, 11250, 263, 5416, 261, 7766, 797, 11664, 263, 667, 262, 274, 333, 263, 2952, 1259, 4710, 263, 527, 261, 333, 263, 2952, 1259, 11664, 262, 274, 333, 263, 5416, 921, 1138, 966, 11664, 273, 7867, 11250, 263, 5416, 261, 1033, 1138, 966, 263, 667, 262, 274, 333, 263, 12282, 11664, 273, 7867, 11250, 263, 5416, 261, 21013, 263, 667, 262, 274, 333, 263, 1566, 1557, 11664, 273, 394, 6847, 411, 405, 261, 5647, 263, 8528, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 262, 274, 333, 263, 1566, 694, 5432, 11664, 273, 394, 4317, 411, 405, 261, 262, 274, 333, 263, 843, 1499, 863, 273, 394, 4317, 411, 405, 261, 262, 274, 333, 263, 563, 1499, 863, 273, 394, 4317, 411, 405, 261, 262, 274, 333, 263, 1566, 694, 5432, 11664, 263, 1378, 261, 315, 3902, 6, 269, 7766, 797, 11664, 263, 667, 263, 6272, 261, 315, 3902, 6, 269, 514, 263, 667, 262, 262, 274, 333, 263, 1566, 694, 5432, 11664, 263, 1378, 261, 315, 3902, 6, 269, 7766, 797, 11664, 263, 667, 263, 6272, 261, 315, 3902, 6, 269, 509, 263, 667, 262, 262, 274, 333, 263, 843, 1499, 863, 263, 1378, 261, 333, 263, 12282, 11664, 269, 5647, 263, 8528, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 262, 274, 333, 263, 563, 1499, 863, 263, 1378, 261, 333, 263, 12282, 11664, 269, 5647, 263, 8528, 261, 394, 3601, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 269, 394, 3601, 261, 315, 3902, 6, 269, 4648, 262, 262, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 1386, 21804, 263, 2911, 921, 1138, 261, 333, 263, 2952, 1259, 11664, 262, 262, 263, 1508, 990, 261, 333, 263, 5416, 921, 1138, 966, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 8571, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 2952, 1259, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 6455, 461, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 12282, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 4061, 1557, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 1566, 1557, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 4061, 694, 5432, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 1566, 694, 5432, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 1862, 1952, 263, 2581, 1138, 2498, 261, 333, 263, 752, 1499, 863, 6286, 261, 333, 263, 843, 1499, 863, 262, 262, 262, 263, 1508, 990, 261, 333, 263, 563, 1499, 863, 262, 274, 289, 32315, 1071, 4242, 9189, 261, 262, 288, 327, 613, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 1216, 1185, 32315, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 1216, 1185, 288, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 289, 2], "score": -0.10256264358758926, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetSetLog", "(", ")", "throws", "Exception", "{", "assertNotNull", "(", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 333, 263, 6659, 263, 444, 1343, 261, 333, 263, 5416, 3328, 262, 274, 1375, 2], "score": -0.11724749207496643, "weight": 1, "toks": ["<s>", "`", "this", ".", "processor", ".", "setLog", "(", "this", ".", "mockLogger", ")", ";", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1343, 261, 262, 1216, 1185, 288, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 289, 2], "score": -0.17722703516483307, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetLog", "(", ")", "throws", "Exception", "{", "assertNotNull", "(", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 1216, 1185, 288, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 289, 2], "score": -0.1986747682094574, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetSetLog", "(", ")", "throws", "Exception", "{", "assertNotNull", "(", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 1216, 1185, 288, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 289, 2], "score": -0.24625350534915924, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetSetLog", "(", ")", "throws", "Exception", "{", "assertNotNull", "(", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 1216, 1185, 288, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 289, 2], "score": -0.2709442377090454, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetSetLog", "(", ")", "throws", "Exception", "{", "assertNotNull", "(", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 7766, 326, 1375, 9189, 261, 262, 1375, 707, 358, 3387, 518, 8783, 9023, 326, 1375, 4242, 1375, 791, 628, 326, 1375, 5982, 19085, 5164, 1375, 263, 2], "score": -0.2794876992702484, "weight": 1, "toks": ["<s>", "Test", "the", "`", "getLog", "(", ")", "`", "method", "to", "ensure", "it", "correctly", "retrieves", "the", "`", "Logger", "`", "instance", "from", "the", "`", "BatchPollProcessor", "`", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 1216, 1185, 288, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 289, 2], "score": -0.3504168391227722, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetSetLog", "(", ")", "throws", "Exception", "{", "assertNotNull", "(", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 1216, 1185, 288, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 289, 2], "score": -0.3550116717815399, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetSetLog", "(", ")", "throws", "Exception", "{", "assertNotNull", "(", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 7365, 261, 262, 288, 25395, 261, 6659, 262, 274, 289, 2], "score": -0.35762855410575867, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetup", "(", ")", "{", "assertNotNull", "(", "processor", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 57.97576517394312, "bleu-max": 57.97576517394312, "bleu-min": 18.10350139260997, "bleu-avg": 38.5188056590582, "code-bleu": 59.71702374058013, "code-bleu-max": 59.71702374058013, "code-bleu-min": 15.96432817043548, "code-bleu-avg": 39.576843117181575, "edit-sim": 83, "edit-sim-max": 83, "edit-sim-min": 42, "edit-sim-avg": 60.5, "rouge-p": 87.5, "rouge-p-max": 87.5, "rouge-p-min": 40.0, "rouge-p-avg": 61.05555555555556, "rouge-r": 77.77777777777779, "rouge-r-max": 77.77777777777779, "rouge-r-min": 44.44444444444444, "rouge-r-avg": 62.22222222222223, "rouge-f": 82.35294067820071, "rouge-f-max": 82.35294067820071, "rouge-f-min": 42.10526265927979, "rouge-f-avg": 61.499827502553046, "num-seq": 10}, "time": 1.3273906707763672, "misc": {}}
{"id": 28, "data_id": "csn-26465", "input_stids": [1, 1566, 19210, 613, 733, 1138, 1386, 21804, 5731, 3866, 32315, 1071, 4242, 9189, 261, 262, 288, 327, 613, 274, 289, 32315, 5982, 19085, 5164, 4709, 32315, 32315, 32315, 632, 11672, 1071, 918, 3875, 4709, 261, 262, 1216, 1185, 288, 333, 263, 6659, 273, 394, 5982, 19085, 5164, 261, 262, 274, 333, 263, 5416, 1499, 19210, 273, 7867, 11250, 263, 5416, 261, 3601, 19210, 263, 667, 262, 274, 333, 263, 5416, 921, 1138, 1386, 21804, 273, 7867, 11250, 263, 5416, 261, 1033, 1138, 1386, 21804, 263, 667, 262, 274, 333, 263, 5416, 3328, 273, 7867, 11250, 263, 5416, 261, 4242, 263, 667, 262, 274, 333, 263, 5416, 1862, 1952, 273, 7867, 11250, 263, 5416, 261, 16622, 4497, 4664, 429, 1862, 1952, 263, 667, 262, 274, 333, 263, 2952, 1259, 4710, 273, 394, 10688, 411, 405, 261, 262, 274, 333, 263, 2952, 1259, 11664, 273, 7867, 11250, 263, 5416, 261, 7766, 797, 11664, 263, 667, 262, 274, 333, 263, 2952, 1259, 4710, 263, 527, 261, 333, 263, 2952, 1259, 11664, 262, 274, 333, 263, 5416, 921, 1138, 966, 11664, 273, 7867, 11250, 263, 5416, 261, 1033, 1138, 966, 263, 667, 262, 274, 333, 263, 12282, 11664, 273, 7867, 11250, 263, 5416, 261, 21013, 263, 667, 262, 274, 333, 263, 1566, 1557, 11664, 273, 394, 6847, 411, 405, 261, 5647, 263, 8528, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 262, 274, 333, 263, 1566, 694, 5432, 11664, 273, 394, 4317, 411, 405, 261, 262, 274, 333, 263, 843, 1499, 863, 273, 394, 4317, 411, 405, 261, 262, 274, 333, 263, 563, 1499, 863, 273, 394, 4317, 411, 405, 261, 262, 274, 333, 263, 1566, 694, 5432, 11664, 263, 1378, 261, 315, 3902, 6, 269, 7766, 797, 11664, 263, 667, 263, 6272, 261, 315, 3902, 6, 269, 514, 263, 667, 262, 262, 274, 333, 263, 1566, 694, 5432, 11664, 263, 1378, 261, 315, 3902, 6, 269, 7766, 797, 11664, 263, 667, 263, 6272, 261, 315, 3902, 6, 269, 509, 263, 667, 262, 262, 274, 333, 263, 843, 1499, 863, 263, 1378, 261, 333, 263, 12282, 11664, 269, 5647, 263, 8528, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 262, 274, 333, 263, 563, 1499, 863, 263, 1378, 261, 333, 263, 12282, 11664, 269, 5647, 263, 8528, 261, 394, 3601, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 269, 394, 3601, 261, 315, 3902, 6, 269, 4648, 262, 262, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 1386, 21804, 263, 2911, 921, 1138, 261, 333, 263, 2952, 1259, 11664, 262, 262, 263, 1508, 990, 261, 333, 263, 5416, 921, 1138, 966, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 8571, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 2952, 1259, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 6455, 461, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 12282, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 4061, 1557, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 1566, 1557, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 4061, 694, 5432, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 1566, 694, 5432, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 1862, 1952, 263, 2581, 1138, 2498, 261, 333, 263, 752, 1499, 863, 6286, 261, 333, 263, 843, 1499, 863, 262, 262, 262, 263, 1508, 990, 261, 333, 263, 563, 1499, 863, 262, 274, 289, 32315, 1071, 4242, 9189, 261, 262, 288, 327, 613, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 1216, 1185, 32315, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 1815, 1248, 8650, 261, 333, 263, 5416, 3328, 269, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 7693, 716, 326, 1194, 2106, 635, 1375, 6659, 263, 9189, 261, 262, 1375, 353, 486, 446, 471, 353, 486, 326, 1967, 487, 1375, 5416, 3328, 1375, 263, 2], "score": -0.2496732622385025, "weight": 1, "toks": ["<s>", "Ensure", "that", "the", "logger", "returned", "by", "`", "processor", ".", "getLog", "(", ")", "`", "is", "not", "null", "and", "is", "not", "the", "same", "as", "`", "mockLogger", "`", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 9189, 1375, 707, 23500, 269, 326, 1842, 3377, 506, 20482, 2588, 358, 326, 3751, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1343, 261, 262, 288, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2956497073173523, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "getLog", "`", "method", "effectively", ",", "the", "test", "could", "be", "simplified", "down", "to", "the", "following", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetLog", "(", ")", "{", "assertNotNull", "(", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 657, 326, 864, 1842, 648, 269, 326, 707, 1375, 9189, 261, 262, 1375, 353, 3832, 18432, 358, 3387, 716, 518, 1135, 279, 1661, 300, 446, 4242, 733, 471, 716, 326, 2106, 4242, 353, 486, 326, 1967, 791, 487, 1375, 5416, 3328, 1375, 263, 1220, 1842, 2195, 481, 959, 716, 1375, 9189, 261, 262, 1375, 1552, 486, 8616, 327, 326, 5416, 329, 4242, 733, 1496, 353, 10374, 5785, 279, 4242, 791, 716, 353, 12963, 2522, 578, 7016, 3470, 326, 1375, 5982, 19085, 5164, 1375, 667, 263, 1021, 498, 7820, 1399, 316, 326, 1842, 854, 1375, 25395, 1375, 358, 866, 364, 1661, 300, 446, 2967, 269, 471, 1375, 1815, 1248, 8650, 1375, 358, 3929, 716, 326, 3884, 854, 486, 326, 1967, 269, 24831, 716, 326, 707, 3613, 1842, 12433, 6606, 487, 2665, 263, 2], "score": -0.3074437379837036, "weight": 1, "toks": ["<s>", "In", "the", "given", "test", "case", ",", "the", "method", "`", "getLog", "(", ")", "`", "is", "being", "tested", "to", "ensure", "that", "it", "returns", "a", "non", "-", "null", "Logger", "object", "and", "that", "the", "returned", "Logger", "is", "not", "the", "same", "instance", "as", "`", "mockLogger", "`", ".", "This", "test", "confirms", "that", "`", "getLog", "(", ")", "`", "does", "not", "simply", "return", "the", "mocked", "Logger", "object", "but", "is", "likely", "returning", "a", "Logger", "instance", "that", "is", "internally", "created", "or", "managed", "within", "the", "`", "BatchPollProcessor", "`", "class", ".", "The", "key", "assertions", "used", "in", "the", "test", "are", "`", "assertNotNull", "`", "to", "check", "for", "non", "-", "nullability", ",", "and", "`", "assertNotSame", "`", "to", "verify", "that", "the", "instances", "are", "not", "the", "same", ",", "ensuring", "that", "the", "method", "under", "test", "behaves", "as", "expected", ".", "</s>"]}, {"tids": [1, 1021, 1375, 9189, 1375, 707, 3613, 1842, 1410, 506, 8572, 324, 17802, 715, 18432, 635, 2537, 6728, 326, 327, 460, 434, 326, 707, 358, 3387, 518, 8121, 326, 2665, 4242, 791, 263, 1021, 9330, 395, 471, 4486, 2657, 1842, 4102, 506, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1343, 261, 262, 288, 25395, 261, 6659, 263, 9189, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.33405518531799316, "weight": 1, "toks": ["<s>", "The", "`", "getLog", "`", "method", "under", "test", "should", "be", "very", "briefly", "tested", "by", "just", "checking", "the", "return", "value", "of", "the", "method", "to", "ensure", "it", "provides", "the", "expected", "Logger", "instance", ".", "The", "simplest", "and", "most", "direct", "test", "would", "be", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetLog", "(", ")", "{", "assertNotNull", "(", "processor", ".", "getLog", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 1216, 1185, 288, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 1815, 1248, 8650, 261, 333, 263, 5416, 3328, 269, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 289, 2], "score": -0.34529244899749756, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetSetLog", "(", ")", "throws", "Exception", "{", "assertNotNull", "(", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "assertNotSame", "(", "this", ".", "mockLogger", ",", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 9189, 261, 262, 1375, 707, 316, 3433, 2836, 1842, 269, 3433, 1842, 648, 1410, 1815, 716, 326, 1375, 9189, 261, 262, 1375, 707, 8214, 1135, 326, 2665, 1194, 733, 716, 1703, 10016, 444, 25795, 316, 3433, 2619, 263, 7897, 1375, 9189, 261, 262, 1375, 1135, 326, 1375, 613, 1375, 733, 269, 3433, 1842, 1410, 3387, 333, 733, 353, 8783, 10295, 263, 1021, 864, 981, 13016, 269, 14025, 269, 3302, 225, 163, 227, 252, 268, 2405, 3661, 578, 1625, 1375, 613, 1375, 353, 6454, 578, 444, 316, 326, 1375, 5982, 19085, 5164, 1375, 667, 269, 1492, 326, 1375, 9189, 261, 262, 1375, 707, 353, 18405, 358, 4614, 628, 263, 12848, 4643, 715, 269, 279, 2657, 471, 20570, 784, 1842, 364, 1375, 9189, 261, 262, 1375, 4102, 506, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1343, 261, 262, 1216, 1185, 288, 4242, 2665, 3328, 273, 7867, 11250, 263, 5416, 261, 4242, 263, 667, 262, 274, 6659, 263, 444, 1343, 261, 2665, 3328, 262, 274, 342, 342, 4725, 21249, 1915, 296, 272, 279, 7794, 707, 316, 3433, 667, 4242, 3214, 3328, 273, 6659, 263, 9189, 261, 262, 274, 1815, 8650, 261, 2665, 3328, 269, 3214, 3328, 269, 315, 1021, 10295, 1194, 1410, 506, 326, 1967, 487, 326, 1245, 444, 263, 315, 262, 274, 289, 1375, 1375, 1375, 657, 333, 28350, 278, 1706, 1842, 269, 732, 294, 404, 263, 15983, 1915, 296, 272, 279, 4031, 358, 444, 326, 1194, 261, 1375, 444, 1343, 261, 262, 1375, 262, 316, 3433, 1375, 5982, 19085, 5164, 1375, 263, 576, 263, 1000, 326, 1194, 1450, 279, 5416, 329, 1375, 4242, 1375, 263, 890, 263, 10708, 326, 1194, 1450, 1375, 9189, 261, 262, 1375, 263, 1059, 263, 5452, 716, 326, 444, 471, 10295, 18244, 854, 326, 1967, 269, 24831, 326, 1375, 9189, 261, 262, 1375, 12433, 6606, 487, 2665, 263, 4344, 3071, 3433, 1375, 5982, 19085, 5164, 1375, 667, 8121, 1791, 28757, 358, 444, 471, 336, 326, 1194, 364, 333, 1842, 358, 506, 923, 263, 971, 326, 1194, 353, 1338, 444, 12963, 471, 486, 16265, 3970, 279, 7794, 269, 1846, 4825, 1608, 279, 3775, 17504, 358, 1551, 594, 716, 1375, 9189, 261, 262, 1375, 8121, 326, 3434, 1194, 269, 13935, 29876, 6282, 5463, 578, 279, 3775, 646, 434, 919, 11805, 263, 2], "score": -0.35570693016052246, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "getLog", "(", ")", "`", "method", "in", "your", "unit", "test", ",", "your", "test", "case", "should", "assert", "that", "the", "`", "getLog", "(", ")", "`", "method", "properly", "returns", "the", "expected", "logger", "object", "that", "was", "possibly", "set", "elsewhere", "in", "your", "system", ".", "Since", "`", "getLog", "(", ")", "`", "returns", "the", "`", "log", "`", "object", ",", "your", "test", "should", "ensure", "this", "object", "is", "correctly", "retrieved", ".", "The", "given", "code", "snippet", ",", "however", ",", "doesn", "\u2019", "t", "show", "how", "or", "where", "`", "log", "`", "is", "initialized", "or", "set", "in", "the", "`", "BatchPollProcessor", "`", "class", ",", "which", "the", "`", "getLog", "(", ")", "`", "method", "is", "supposed", "to", "retrieve", "from", ".", "Accordingly", ",", "a", "direct", "and", "concise", "test", "for", "`", "getLog", "(", ")", "`", "would", "be", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetLog", "(", ")", "throws", "Exception", "{", "Logger", "expectedLogger", "=", "Mockito", ".", "mock", "(", "Logger", ".", "class", ")", ";", "processor", ".", "setLog", "(", "expectedLogger", ")", ";", "/", "/", "Assuming", "there", "'", "s", "a", "setter", "method", "in", "your", "class", "Logger", "actualLogger", "=", "processor", ".", "getLog", "(", ")", ";", "assertSame", "(", "expectedLogger", ",", "actualLogger", ",", "\"", "The", "retrieved", "logger", "should", "be", "the", "same", "as", "the", "one", "set", ".", "\"", ")", ";", "}", "`", "`", "`", "In", "this", "hypothetical", "test", ",", "we", ":", "1", ".", "Assume", "there", "'", "s", "a", "way", "to", "set", "the", "logger", "(", "`", "setLog", "(", ")", "`", ")", "in", "your", "`", "BatchPollProcessor", "`", ".", "2", ".", "Set", "the", "logger", "using", "a", "mocked", "`", "Logger", "`", ".", "3", ".", "Retrieve", "the", "logger", "using", "`", "getLog", "(", ")", "`", ".", "4", ".", "Assert", "that", "the", "set", "and", "retrieved", "loggers", "are", "the", "same", ",", "ensuring", "the", "`", "getLog", "(", ")", "`", "behaves", "as", "expected", ".", "Make", "sure", "your", "`", "BatchPollProcessor", "`", "class", "provides", "mechanisms", "to", "set", "and", "get", "the", "logger", "for", "this", "test", "to", "be", "valid", ".", "If", "the", "logger", "is", "only", "set", "internally", "and", "not", "exposed", "via", "a", "setter", ",", "you", "might", "need", "a", "different", "approach", "to", "assure", "that", "`", "getLog", "(", ")", "`", "provides", "the", "correct", "logger", ",", "potentially", "involving", "reflection", "or", "a", "different", "form", "of", "state", "verification", ".", "</s>"]}, {"tids": [1, 2974, 18662, 715, 1842, 326, 1375, 9189, 261, 262, 1375, 707, 316, 333, 819, 269, 1846, 848, 999, 326, 3751, 1842, 3021, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1343, 261, 262, 288, 1815, 8867, 261, 333, 263, 5416, 3328, 269, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 4271, 716, 326, 1375, 9189, 261, 262, 1375, 707, 434, 326, 1375, 6659, 1375, 733, 8783, 1135, 326, 1375, 5416, 3328, 1375, 791, 716, 1703, 444, 731, 316, 326, 1375, 3875, 4709, 261, 262, 1375, 707, 269, 24831, 326, 7060, 353, 8783, 8249, 263, 2], "score": -0.3719489276409149, "weight": 1, "toks": ["<s>", "To", "sufficiently", "test", "the", "`", "getLog", "(", ")", "`", "method", "in", "this", "context", ",", "you", "can", "use", "the", "following", "test", "statement", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetLog", "(", ")", "{", "assertEquals", "(", "this", ".", "mockLogger", ",", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "}", "`", "`", "`", "This", "test", "checks", "that", "the", "`", "getLog", "(", ")", "`", "method", "of", "the", "`", "processor", "`", "object", "correctly", "returns", "the", "`", "mockLogger", "`", "instance", "that", "was", "set", "up", "in", "the", "`", "setupTest", "(", ")", "`", "method", ",", "ensuring", "the", "getter", "is", "correctly", "implemented", ".", "</s>"]}, {"tids": [1, 7693, 326, 1375, 9189, 1375, 707, 8783, 9023, 279, 1661, 300, 446, 791, 434, 1375, 4242, 1375, 471, 716, 518, 353, 3775, 628, 326, 5416, 329, 1375, 4242, 1375, 791, 1399, 316, 3875, 263, 2], "score": -0.3934613764286041, "weight": 1, "toks": ["<s>", "Ensure", "the", "`", "getLog", "`", "method", "correctly", "retrieves", "a", "non", "-", "null", "instance", "of", "`", "Logger", "`", "and", "that", "it", "is", "different", "from", "the", "mocked", "`", "Logger", "`", "instance", "used", "in", "setup", ".", "</s>"]}, {"tids": [1, 657, 326, 1375, 1842, 967, 694, 1343, 1375, 707, 269, 1846, 854, 24831, 716, 1375, 9189, 261, 262, 1375, 707, 628, 1375, 5982, 19085, 5164, 1375, 667, 4985, 1135, 279, 1194, 791, 471, 716, 518, 1552, 486, 327, 326, 1967, 5416, 1194, 2522, 4982, 326, 3875, 263, 1220, 4271, 3937, 326, 1661, 300, 446, 560, 434, 326, 2106, 460, 471, 2097, 316, 5817, 802, 628, 326, 5416, 3875, 269, 1492, 353, 9368, 364, 6932, 310, 716, 1375, 9189, 261, 262, 1375, 8121, 279, 8783, 6454, 1375, 4242, 1375, 733, 269, 486, 13947, 23209, 72, 635, 3903, 5416, 6885, 263, 2], "score": -0.3945940136909485, "weight": 1, "toks": ["<s>", "In", "the", "`", "testGetSetLog", "`", "method", ",", "you", "are", "ensuring", "that", "`", "getLog", "(", ")", "`", "method", "from", "`", "BatchPollProcessor", "`", "class", "successfully", "returns", "a", "logger", "instance", "and", "that", "it", "does", "not", "return", "the", "same", "mock", "logger", "created", "during", "the", "setup", ".", "This", "checks", "both", "the", "non", "-", "nullity", "of", "the", "returned", "value", "and", "its", "independence", "from", "the", "mock", "setup", ",", "which", "is", "relevant", "for", "confirming", "that", "`", "getLog", "(", ")", "`", "provides", "a", "correctly", "initialized", "`", "Logger", "`", "object", ",", "not", "influenced", "by", "external", "mock", "behavior", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 1216, 1185, 288, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 1815, 1248, 8650, 261, 333, 263, 5416, 3328, 269, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 289, 2], "score": -0.4029332995414734, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetSetLog", "(", ")", "throws", "Exception", "{", "assertNotNull", "(", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "assertNotSame", "(", "this", ".", "mockLogger", ",", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 56.44511462708408, "bleu-max": 56.44511462708408, "bleu-min": 17.702247095833158, "bleu-avg": 27.1753098231641, "code-bleu": 45.45458013491267, "code-bleu-max": 45.45458013491267, "code-bleu-min": 25.149943275527058, "code-bleu-avg": 29.542755348925272, "edit-sim": 75, "edit-sim-max": 77, "edit-sim-min": 43, "edit-sim-avg": 53.4, "rouge-p": 85.71428571428571, "rouge-p-max": 85.71428571428571, "rouge-p-min": 38.46153846153847, "rouge-p-avg": 49.259074259074254, "rouge-r": 85.71428571428571, "rouge-r-max": 85.71428571428571, "rouge-r-min": 71.42857142857143, "rouge-r-avg": 74.28571428571429, "rouge-f": 85.71428521428571, "rouge-f-max": 85.71428521428571, "rouge-f-min": 49.99999954500001, "rouge-f-avg": 58.62044770701747, "num-seq": 10}, "time": 1.1168060302734375, "misc": {}}
{"id": 29, "data_id": "csn-26465", "input_stids": [1, 1566, 19210, 733, 1138, 1386, 21804, 5731, 3866, 32315, 1071, 918, 444, 1343, 261, 4242, 613, 262, 288, 333, 263, 613, 273, 613, 274, 289, 32315, 5982, 19085, 5164, 4709, 32315, 32315, 32315, 632, 11672, 1071, 918, 3875, 4709, 261, 262, 1216, 1185, 288, 333, 263, 6659, 273, 394, 5982, 19085, 5164, 261, 262, 274, 333, 263, 5416, 1499, 19210, 273, 7867, 11250, 263, 5416, 261, 3601, 19210, 263, 667, 262, 274, 333, 263, 5416, 921, 1138, 1386, 21804, 273, 7867, 11250, 263, 5416, 261, 1033, 1138, 1386, 21804, 263, 667, 262, 274, 333, 263, 5416, 3328, 273, 7867, 11250, 263, 5416, 261, 4242, 263, 667, 262, 274, 333, 263, 5416, 1862, 1952, 273, 7867, 11250, 263, 5416, 261, 16622, 4497, 4664, 429, 1862, 1952, 263, 667, 262, 274, 333, 263, 2952, 1259, 4710, 273, 394, 10688, 411, 405, 261, 262, 274, 333, 263, 2952, 1259, 11664, 273, 7867, 11250, 263, 5416, 261, 7766, 797, 11664, 263, 667, 262, 274, 333, 263, 2952, 1259, 4710, 263, 527, 261, 333, 263, 2952, 1259, 11664, 262, 274, 333, 263, 5416, 921, 1138, 966, 11664, 273, 7867, 11250, 263, 5416, 261, 1033, 1138, 966, 263, 667, 262, 274, 333, 263, 12282, 11664, 273, 7867, 11250, 263, 5416, 261, 21013, 263, 667, 262, 274, 333, 263, 1566, 1557, 11664, 273, 394, 6847, 411, 405, 261, 5647, 263, 8528, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 262, 274, 333, 263, 1566, 694, 5432, 11664, 273, 394, 4317, 411, 405, 261, 262, 274, 333, 263, 843, 1499, 863, 273, 394, 4317, 411, 405, 261, 262, 274, 333, 263, 563, 1499, 863, 273, 394, 4317, 411, 405, 261, 262, 274, 333, 263, 1566, 694, 5432, 11664, 263, 1378, 261, 315, 3902, 6, 269, 7766, 797, 11664, 263, 667, 263, 6272, 261, 315, 3902, 6, 269, 514, 263, 667, 262, 262, 274, 333, 263, 1566, 694, 5432, 11664, 263, 1378, 261, 315, 3902, 6, 269, 7766, 797, 11664, 263, 667, 263, 6272, 261, 315, 3902, 6, 269, 509, 263, 667, 262, 262, 274, 333, 263, 843, 1499, 863, 263, 1378, 261, 333, 263, 12282, 11664, 269, 5647, 263, 8528, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 262, 274, 333, 263, 563, 1499, 863, 263, 1378, 261, 333, 263, 12282, 11664, 269, 5647, 263, 8528, 261, 394, 3601, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 269, 394, 3601, 261, 315, 3902, 6, 269, 4648, 262, 262, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 1386, 21804, 263, 2911, 921, 1138, 261, 333, 263, 2952, 1259, 11664, 262, 262, 263, 1508, 990, 261, 333, 263, 5416, 921, 1138, 966, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 8571, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 2952, 1259, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 6455, 461, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 12282, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 4061, 1557, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 1566, 1557, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 921, 1138, 966, 11664, 263, 4061, 694, 5432, 261, 262, 262, 263, 1508, 990, 261, 333, 263, 1566, 694, 5432, 11664, 262, 274, 7867, 11250, 263, 1347, 261, 333, 263, 5416, 1862, 1952, 263, 2581, 1138, 2498, 261, 333, 263, 752, 1499, 863, 6286, 261, 333, 263, 843, 1499, 863, 262, 262, 262, 263, 1508, 990, 261, 333, 263, 563, 1499, 863, 262, 274, 289, 32315, 1071, 4242, 9189, 261, 262, 288, 327, 613, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 967, 694, 1343, 261, 262, 1216, 1185, 32315, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 1815, 1248, 8650, 261, 333, 263, 5416, 3328, 269, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 333, 263, 6659, 263, 444, 1343, 261, 333, 263, 5416, 3328, 262, 274, 2], "topk": [{"tids": [1, 1375, 333, 263, 6659, 263, 444, 1343, 261, 333, 263, 5416, 3328, 262, 274, 1375, 2], "score": -0.0255905631929636, "weight": 1, "toks": ["<s>", "`", "this", ".", "processor", ".", "setLog", "(", "this", ".", "mockLogger", ")", ";", "`", "</s>"]}, {"tids": [1, 1021, 1842, 364, 326, 707, 1375, 444, 1343, 1375, 848, 506, 283, 3493, 7653, 358, 7155, 3704, 2357, 603, 3637, 471, 17146, 326, 1194, 269, 24831, 716, 1839, 3637, 269, 326, 10295, 1194, 353, 326, 1967, 487, 326, 1245, 444, 263, 13743, 353, 326, 25994, 329, 471, 20570, 784, 17504, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 1343, 261, 262, 288, 6659, 263, 444, 1343, 261, 5416, 3328, 262, 274, 1815, 8650, 261, 5416, 3328, 269, 6659, 263, 9189, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.10635218769311905, "weight": 1, "toks": ["<s>", "The", "test", "for", "the", "method", "`", "setLog", "`", "can", "be", "refactored", "to", "focus", "solely", "on", "setting", "and", "retrieving", "the", "logger", ",", "ensuring", "that", "after", "setting", ",", "the", "retrieved", "logger", "is", "the", "same", "as", "the", "one", "set", ".", "Here", "is", "the", "refined", "and", "concise", "approach", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetLog", "(", ")", "{", "processor", ".", "setLog", "(", "mockLogger", ")", ";", "assertSame", "(", "mockLogger", ",", "processor", ".", "getLog", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 8553, 716, 1375, 444, 1343, 1375, 8783, 22698, 326, 2112, 1194, 358, 326, 6659, 263, 2], "score": -0.2102663218975067, "weight": 1, "toks": ["<s>", "Verify", "that", "`", "setLog", "`", "correctly", "assigns", "the", "provided", "logger", "to", "the", "processor", ".", "</s>"]}, {"tids": [1, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 2], "score": -0.22725851833820343, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 333, 263, 5416, 3328, 269, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 2], "score": -0.2344018667936325, "weight": 1, "toks": ["<s>", "assertEquals", "(", "this", ".", "mockLogger", ",", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8650, 261, 333, 263, 5416, 3328, 269, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 2], "score": -0.3183269202709198, "weight": 1, "toks": ["<s>", "assertSame", "(", "this", ".", "mockLogger", ",", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1021, 1842, 4271, 326, 14176, 434, 8742, 471, 3637, 279, 1194, 316, 326, 6659, 263, 2], "score": -0.36237892508506775, "weight": 1, "toks": ["<s>", "The", "test", "checks", "the", "functionality", "of", "getting", "and", "setting", "a", "logger", "in", "the", "processor", ".", "</s>"]}, {"tids": [1, 1815, 8650, 261, 333, 263, 5416, 3328, 269, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 2], "score": -0.3655005097389221, "weight": 1, "toks": ["<s>", "assertSame", "(", "this", ".", "mockLogger", ",", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8650, 261, 333, 263, 5416, 3328, 269, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 2], "score": -0.3790157735347748, "weight": 1, "toks": ["<s>", "assertSame", "(", "this", ".", "mockLogger", ",", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 333, 263, 6659, 263, 9189, 261, 262, 262, 274, 2], "score": -0.37939903140068054, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "this", ".", "processor", ".", "getLog", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 28.870480794683097, "bleu-avg": 61.79035310774018, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 27.583712747384098, "code-bleu-avg": 59.420313748019566, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 59, "edit-sim-avg": 78.2, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 54.54545454545454, "rouge-p-avg": 78.80772005772006, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 55.55555555555556, "rouge-r-avg": 76.66666666666666, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 58.82352891349482, "rouge-f-avg": 77.36953854637319, "num-seq": 10}, "time": 0.8907971382141113, "misc": {}}
{"id": 30, "data_id": "csn-30606", "input_stids": [1, 32315, 32315, 9757, 4709, 32315, 868, 6286, 32315, 32315, 32315, 1250, 7849, 861, 261, 262, 274, 32315, 632, 7766, 1071, 918, 7849, 861, 261, 262, 1216, 1185, 32315, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 1185, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 20889, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 20889, 21820, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.21797072887420654, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "Exception", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "Hello", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "Hello", "World", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 8431, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 8431, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.23815985023975372, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "foo", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "foo", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 13743, 296, 272, 279, 4143, 1842, 707, 358, 3929, 326, 14176, 434, 326, 1375, 7849, 861, 261, 262, 1375, 707, 628, 3433, 1375, 868, 6286, 1375, 667, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 6869, 861, 1685, 261, 262, 288, 514, 810, 273, 315, 19439, 9117, 315, 274, 514, 1936, 273, 315, 19439, 315, 274, 6830, 7743, 3234, 273, 6830, 263, 4074, 261, 1936, 262, 274, 9757, 4546, 273, 7743, 3234, 263, 4546, 261, 810, 262, 274, 1815, 5510, 261, 315, 1021, 1936, 1410, 845, 326, 8435, 434, 326, 810, 533, 263, 315, 269, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.23829548060894012, "weight": 1, "toks": ["<s>", "Here", "'", "s", "a", "simple", "test", "method", "to", "verify", "the", "functionality", "of", "the", "`", "lookingAt", "(", ")", "`", "method", "from", "your", "`", "ReMatcher", "`", "class", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testLookingAtMatchesAtStart", "(", ")", "{", "String", "input", "=", "\"", "hello", "world", "\"", ";", "String", "pattern", "=", "\"", "hello", "\"", ";", "Pattern", "compiledPattern", "=", "Pattern", ".", "compile", "(", "pattern", ")", ";", "Matcher", "matcher", "=", "compiledPattern", ".", "matcher", "(", "input", ")", ";", "assertTrue", "(", "\"", "The", "pattern", "should", "match", "the", "beginning", "of", "the", "input", "string", ".", "\"", ",", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 19439, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 19439, 9117, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.2504488527774811, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "hello", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "hello", "world", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 7849, 861, 67, 14309, 990, 5510, 67, 9434, 3234, 6869, 861, 1685, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 1842, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 1842, 780, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.2769996225833893, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "lookingAt_ShouldReturnTrue_WhenPatternMatchesAtStart", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "test", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "testString", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 20889, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 20889, 21820, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.279193639755249, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "Hello", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "Hello", "World", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 7849, 861, 261, 262, 1375, 707, 316, 326, 1375, 868, 6286, 1375, 667, 23500, 269, 1846, 848, 2348, 279, 20570, 784, 471, 2657, 2836, 1842, 1450, 804, 2802, 263, 13743, 296, 272, 392, 3454, 294, 1375, 1375, 1375, 2252, 1930, 760, 2358, 263, 525, 4873, 263, 5452, 263, 1815, 5510, 274, 1930, 760, 2358, 263, 525, 4873, 263, 5452, 263, 1815, 8381, 274, 1930, 2358, 263, 525, 4873, 263, 7766, 274, 1071, 667, 9757, 4709, 288, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 1185, 288, 868, 6286, 4546, 273, 394, 868, 6286, 261, 315, 20889, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 315, 20889, 21820, 315, 262, 262, 274, 342, 342, 13219, 358, 506, 638, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 315, 21820, 20889, 315, 262, 262, 274, 342, 342, 13219, 358, 506, 629, 289, 289, 1375, 1375, 1375, 1220, 1842, 7636, 4271, 309, 326, 1375, 7849, 861, 261, 262, 1375, 707, 8783, 25283, 1347, 326, 533, 17874, 598, 326, 1269, 1936, 263, 2597, 4271, 3937, 279, 6895, 471, 279, 6092, 10766, 358, 3387, 326, 707, 296, 272, 14176, 263, 2], "score": -0.2812875807285309, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "lookingAt", "(", ")", "`", "method", "in", "the", "`", "ReMatcher", "`", "class", "effectively", ",", "you", "can", "implement", "a", "concise", "and", "direct", "unit", "test", "using", "JUnit", ".", "Here", "'", "s", "an", "example", ":", "`", "`", "`", "java", "import", "static", "org", ".", "junit", ".", "Assert", ".", "assertTrue", ";", "import", "static", "org", ".", "junit", ".", "Assert", ".", "assertFalse", ";", "import", "org", ".", "junit", ".", "Test", ";", "public", "class", "MatcherTest", "{", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "Exception", "{", "ReMatcher", "matcher", "=", "new", "ReMatcher", "(", "\"", "Hello", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", "\"", "Hello", "World", "\"", ")", ")", ";", "/", "/", "Expected", "to", "be", "true", "assertFalse", "(", "matcher", ".", "lookingAt", "(", "\"", "World", "Hello", "\"", ")", ")", ";", "/", "/", "Expected", "to", "be", "false", "}", "}", "`", "`", "`", "This", "test", "immediately", "checks", "if", "the", "`", "lookingAt", "(", ")", "`", "method", "correctly", "identifies", "when", "the", "string", "begins", "with", "the", "specified", "pattern", ".", "It", "checks", "both", "a", "positive", "and", "a", "negative", "scenario", "to", "ensure", "the", "method", "'", "s", "functionality", ".", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 19439, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 19439, 9117, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3042804002761841, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "hello", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "hello", "world", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 1842, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 1842, 12936, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.30540457367897034, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "test", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "test123", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 1842, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 1842, 12936, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.3203018307685852, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "test", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "test123", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 14.596089552869312, "bleu-max": 23.26654168459006, "bleu-min": 10.232960327926804, "bleu-avg": 16.62066863658803, "code-bleu": 9.96429656494682, "code-bleu-max": 41.292996928940035, "code-bleu-min": 2.7134941920645845, "code-bleu-avg": 20.39488997228498, "edit-sim": 39, "edit-sim-max": 58, "edit-sim-min": 39, "edit-sim-avg": 48.4, "rouge-p": 36.36363636363637, "rouge-p-max": 50.0, "rouge-p-min": 35.714285714285715, "rouge-p-avg": 41.28354978354979, "rouge-r": 44.44444444444444, "rouge-r-max": 55.55555555555556, "rouge-r-min": 44.44444444444444, "rouge-r-avg": 50.0, "rouge-f": 39.999999505, "rouge-f-max": 49.99999950500001, "rouge-f-min": 39.999999505, "rouge-f-avg": 45.02613902428681, "num-seq": 10}, "time": 0.9476940631866455, "misc": {}}
{"id": 31, "data_id": "csn-30606", "input_stids": [1, 32315, 1071, 760, 868, 3234, 4074, 261, 514, 1936, 269, 6830, 5094, 1372, 2943, 262, 1216, 15078, 503, 288, 28347, 411, 6830, 5094, 405, 2982, 694, 273, 28347, 263, 6555, 951, 261, 6830, 5094, 263, 667, 262, 274, 5737, 263, 5428, 261, 2982, 694, 269, 2943, 262, 274, 327, 12972, 263, 4074, 261, 1936, 269, 2982, 694, 262, 274, 289, 32315, 9757, 4709, 868, 3234, 32315, 868, 6286, 32315, 2082, 263, 1172, 5357, 261, 2332, 263, 393, 262, 274, 32315, 32315, 1250, 7849, 861, 261, 262, 274, 32315, 632, 7766, 1071, 918, 7849, 861, 261, 262, 1216, 1185, 32315, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 3454, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.14923834800720215, "weight": 1, "toks": ["<s>", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "example", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 15078, 503, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 3454, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.1567261666059494, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "RegexException", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "example", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 9469, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.19265837967395782, "weight": 1, "toks": ["<s>", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STRING", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 15078, 503, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 12936, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.2297796756029129, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "RegexException", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR123", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 1185, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 3454, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2676983177661896, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "Exception", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "example", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 7849, 861, 4709, 261, 262, 1216, 1185, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 289, 2], "score": -0.2678980231285095, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "lookingAtTest", "(", ")", "throws", "Exception", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 1185, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 3454, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.28233468532562256, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "Exception", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "example", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 1185, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 3454, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2985866963863373, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "Exception", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "example", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 10485, 315, 262, 274, 2], "score": -0.2986016869544983, "weight": 1, "toks": ["<s>", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "START", "\"", ")", ";", "</s>"]}, {"tids": [1, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 12936, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.30183544754981995, "weight": 1, "toks": ["<s>", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR123", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 27.65355515845788, "bleu-avg": 45.009408110427145, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 30.143087744514297, "code-bleu-avg": 45.74184168054862, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 55, "edit-sim-avg": 68.1, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 53.333333333333336, "rouge-p-avg": 64.31060606060606, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 75.0, "rouge-r-avg": 81.25, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 63.157894249307475, "rouge-f-avg": 71.10125809334629, "num-seq": 10}, "time": 0.9866642951965332, "misc": {}}
{"id": 32, "data_id": "csn-30606", "input_stids": [1, 32315, 868, 6286, 4546, 261, 9710, 501, 269, 3889, 5094, 1372, 2943, 262, 274, 32315, 9757, 4709, 868, 3234, 868, 6286, 32315, 868, 6286, 32315, 32315, 32315, 1250, 7849, 861, 261, 262, 274, 32315, 632, 7766, 1071, 918, 7849, 861, 261, 262, 1216, 1185, 32315, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 3902, 6, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.036107707768678665, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.14813803136348724, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.18916605412960052, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.20144972205162048, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.2689052224159241, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.27033981680870056, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.2833631634712219, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.30760616064071655, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.30940890312194824, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3306143879890442, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 35.35533905932737, "bleu-avg": 57.72265457275607, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 41.21624737863156, "code-bleu-avg": 58.69639404873222, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 72, "edit-sim-avg": 81.8, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 64.30555555555556, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 83.33333333333334, "rouge-r-avg": 86.66666666666669, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 62.499999531250005, "rouge-f-avg": 73.21428523057652, "num-seq": 10}, "time": 0.8595786094665527, "misc": {}}
{"id": 33, "data_id": "csn-30606", "input_stids": [1, 32315, 1250, 7849, 861, 261, 262, 274, 32315, 9757, 4709, 868, 3234, 868, 6286, 32315, 32315, 509, 306, 308, 645, 9295, 273, 394, 509, 306, 404, 308, 274, 32315, 32315, 1250, 7849, 861, 261, 262, 274, 32315, 632, 7766, 1071, 918, 7849, 861, 261, 262, 1216, 1185, 32315, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 3902, 6, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 3902, 6, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 1185, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.1830139309167862, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "Exception", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 6869, 2244, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 7128, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.24448172748088837, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAtMatchesPrefix", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.25041383504867554, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 1185, 288, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.3097153604030609, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "Exception", "{", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.34211039543151855, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.3644033372402191, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.3719708025455475, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.3767975866794586, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.38224557042121887, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.3850151300430298, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 18.360281349467964, "bleu-max": 28.315063509282908, "bleu-min": 18.360281349467964, "bleu-avg": 21.980595021547494, "code-bleu": 4.52481374711517, "code-bleu-max": 10.385384293514633, "code-bleu-min": 4.020483573605179, "code-bleu-avg": 5.280267429115993, "edit-sim": 53, "edit-sim-max": 60, "edit-sim-min": 48, "edit-sim-avg": 54.1, "rouge-p": 55.55555555555556, "rouge-p-max": 75.0, "rouge-p-min": 37.5, "rouge-p-avg": 60.99206349206348, "rouge-r": 62.5, "rouge-r-max": 75.0, "rouge-r-min": 37.5, "rouge-r-avg": 57.5, "rouge-f": 58.82352891349482, "rouge-f-max": 74.9999995, "rouge-f-min": 37.4999995, "rouge-f-avg": 58.79971939175768, "num-seq": 10}, "time": 0.6404004096984863, "misc": {}}
{"id": 34, "data_id": "csn-30606", "input_stids": [1, 32315, 868, 6286, 3020, 261, 509, 787, 269, 509, 679, 262, 274, 32315, 9757, 4709, 868, 3234, 868, 6286, 32315, 32315, 509, 306, 308, 645, 9295, 273, 394, 509, 306, 404, 308, 274, 32315, 32315, 1250, 7849, 861, 261, 262, 274, 32315, 632, 7766, 1071, 918, 7849, 861, 261, 262, 1216, 1185, 32315, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 3902, 6, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 3902, 6, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 2], "topk": [{"tids": [1, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.06424397975206375, "weight": 1, "toks": ["<s>", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.08720269054174423, "weight": 1, "toks": ["<s>", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.3430930972099304, "weight": 1, "toks": ["<s>", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.4034770727157593, "weight": 1, "toks": ["<s>", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.44233229756355286, "weight": 1, "toks": ["<s>", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.4661239683628082, "weight": 1, "toks": ["<s>", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.49864470958709717, "weight": 1, "toks": ["<s>", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.5127478241920471, "weight": 1, "toks": ["<s>", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.5154464840888977, "weight": 1, "toks": ["<s>", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.5255836248397827, "weight": 1, "toks": ["<s>", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 24.384183193426086, "bleu-avg": 46.65706610550832, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 9.254654699181481, "code-bleu-avg": 38.52815300481332, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 70, "edit-sim-avg": 80.0, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 44.44444444444444, "rouge-p-avg": 58.25396825396827, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 73.33333333333331, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 53.33333285333334, "rouge-f-avg": 64.50183101318859, "num-seq": 10}, "time": 0.6977920532226562, "misc": {}}
{"id": 35, "data_id": "csn-30606", "input_stids": [1, 32315, 1250, 7849, 861, 261, 262, 274, 32315, 9757, 4709, 868, 3234, 868, 6286, 32315, 32315, 509, 306, 308, 645, 9295, 273, 394, 509, 306, 404, 308, 274, 32315, 32315, 1250, 7849, 861, 261, 262, 274, 32315, 632, 7766, 1071, 918, 7849, 861, 261, 262, 1216, 1185, 32315, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 3902, 6, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 3902, 6, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 1305, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.2578601837158203, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAtMethod", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "region", "(", "2", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 1185, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 7128, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3555224537849426, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "Exception", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "region", "(", "2", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 13743, 296, 272, 326, 913, 316, 279, 2424, 264, 740, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 1185, 288, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 1375, 1375, 1375, 657, 326, 707, 1375, 1842, 9794, 310, 861, 1375, 269, 732, 854, 4979, 279, 1936, 1375, 7128, 1375, 471, 6728, 309, 518, 14606, 622, 326, 787, 434, 326, 533, 315, 7128, 315, 263, 1021, 1375, 4546, 263, 7849, 861, 261, 262, 1375, 707, 1135, 1375, 638, 1375, 309, 269, 471, 1338, 309, 269, 326, 8435, 434, 326, 3020, 1885, 326, 1936, 263, 7360, 3637, 279, 394, 3020, 628, 770, 576, 358, 2371, 269, 1375, 4546, 263, 7849, 861, 261, 262, 1375, 353, 18432, 3382, 471, 2665, 358, 327, 1375, 629, 1375, 3241, 326, 787, 434, 326, 394, 3020, 1552, 486, 845, 326, 1936, 315, 7128, 315, 263, 2], "score": -0.36129599809646606, "weight": 1, "toks": ["<s>", "Here", "'", "s", "the", "content", "in", "a", "clearer", "format", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "Exception", "{", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "region", "(", "2", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "`", "`", "`", "In", "the", "method", "`", "testLookingAt", "`", ",", "we", "are", "creating", "a", "pattern", "`", "STR", "`", "and", "checking", "if", "it", "appears", "at", "the", "start", "of", "the", "string", "\"", "STR", "\"", ".", "The", "`", "matcher", ".", "lookingAt", "(", ")", "`", "method", "returns", "`", "true", "`", "if", ",", "and", "only", "if", ",", "the", "beginning", "of", "the", "region", "matches", "the", "pattern", ".", "After", "setting", "a", "new", "region", "from", "index", "2", "to", "7", ",", "`", "matcher", ".", "lookingAt", "(", ")", "`", "is", "tested", "again", "and", "expected", "to", "return", "`", "false", "`", "since", "the", "start", "of", "the", "new", "region", "does", "not", "match", "the", "pattern", "\"", "STR", "\"", ".", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 1185, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 7128, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.37183383107185364, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "Exception", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "region", "(", "2", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 4435, 2060, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.4049556851387024, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAtInitialMatch", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.41414874792099, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 7128, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.4260697364807129, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "region", "(", "2", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.4394053816795349, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 7128, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.443467378616333, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "region", "(", "2", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 1305, 261, 262, 1216, 1185, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.4500216543674469, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAtMethod", "(", ")", "throws", "Exception", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 19.729406277958837, "bleu-max": 23.9802967618271, "bleu-min": 19.729406277958837, "bleu-avg": 22.279940568279798, "code-bleu": 6.112651140787299, "code-bleu-max": 6.112651140787299, "code-bleu-min": 6.009586134711259, "code-bleu-avg": 6.0508121371416745, "edit-sim": 48, "edit-sim-max": 69, "edit-sim-min": 48, "edit-sim-avg": 60.6, "rouge-p": 55.55555555555556, "rouge-p-max": 55.55555555555556, "rouge-p-min": 50.0, "rouge-p-avg": 52.222222222222214, "rouge-r": 83.33333333333334, "rouge-r-max": 83.33333333333334, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 73.33333333333333, "rouge-f": 66.66666618666667, "rouge-f-max": 66.66666618666667, "rouge-f-min": 57.14285665306124, "rouge-f-avg": 60.95238046650341, "num-seq": 10}, "time": 0.7021186351776123, "misc": {}}
{"id": 36, "data_id": "csn-30606", "input_stids": [1, 32315, 868, 6286, 2715, 261, 9710, 394, 4021, 262, 274, 32315, 9757, 4709, 868, 3234, 868, 6286, 32315, 32315, 509, 306, 308, 645, 9295, 273, 394, 509, 306, 404, 308, 274, 32315, 32315, 1250, 7849, 861, 261, 262, 274, 32315, 632, 7766, 1071, 918, 7849, 861, 261, 262, 1216, 1185, 32315, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 3902, 6, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 3902, 6, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 2715, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.09415579587221146, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.1201004907488823, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.2995648980140686, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.40571340918540955, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.4179917275905609, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.4967573583126068, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.5182932019233704, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.5272799134254456, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.5422986745834351, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.5466868281364441, "weight": 1, "toks": ["<s>", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 87.73826753016615, "bleu-max": 100.0, "bleu-min": 23.884125437220508, "bleu-avg": 38.06961295949734, "code-bleu": 90.88933475803003, "code-bleu-max": 100.0, "code-bleu-min": 5.0554904489422645, "code-bleu-avg": 24.40195302579607, "edit-sim": 91, "edit-sim-max": 100, "edit-sim-min": 53, "edit-sim-avg": 67.4, "rouge-p": 83.33333333333334, "rouge-p-max": 100.0, "rouge-p-min": 44.44444444444444, "rouge-p-avg": 58.333333333333336, "rouge-r": 83.33333333333334, "rouge-r-max": 100.0, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 71.66666666666664, "rouge-f": 83.33333283333334, "rouge-f-max": 99.9999995, "rouge-f-min": 53.33333285333334, "rouge-f-avg": 63.857142367224505, "num-seq": 10}, "time": 0.6677839756011963, "misc": {}}
{"id": 37, "data_id": "csn-30606", "input_stids": [1, 32315, 1250, 7849, 861, 261, 262, 274, 32315, 9757, 4709, 868, 3234, 868, 6286, 32315, 32315, 509, 306, 308, 645, 9295, 273, 394, 509, 306, 404, 308, 274, 32315, 32315, 1250, 7849, 861, 261, 262, 274, 32315, 632, 7766, 1071, 918, 7849, 861, 261, 262, 1216, 1185, 32315, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 3902, 6, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 3902, 6, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 2715, 261, 315, 3902, 6, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.11085426807403564, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 7128, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.22901520133018494, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 1216, 1185, 288, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.246918186545372, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "throws", "Exception", "{", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.3748995363712311, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.3991312086582184, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.42372816801071167, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 7128, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.42415666580200195, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 7128, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.46610328555107117, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 6830, 1936, 273, 6830, 263, 4074, 261, 315, 7128, 315, 262, 274, 9757, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.4791521430015564, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.49138587713241577, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 23.884125437220508, "bleu-max": 46.38596139522901, "bleu-min": 18.360281349467964, "bleu-avg": 25.76252246081924, "code-bleu": 5.144269606617172, "code-bleu-max": 57.926264882229376, "code-bleu-min": 4.52481374711517, "code-bleu-avg": 15.449365720292372, "edit-sim": 69, "edit-sim-max": 93, "edit-sim-min": 53, "edit-sim-avg": 65.1, "rouge-p": 66.66666666666666, "rouge-p-max": 80.0, "rouge-p-min": 55.55555555555556, "rouge-p-avg": 65.22222222222221, "rouge-r": 50.0, "rouge-r-max": 75.0, "rouge-r-min": 50.0, "rouge-r-avg": 62.5, "rouge-f": 57.14285665306124, "rouge-f-max": 74.9999995, "rouge-f-min": 57.14285665306124, "rouge-f-avg": 63.170652382103825, "num-seq": 10}, "time": 0.735607385635376, "misc": {}}
{"id": 38, "data_id": "csn-30606", "input_stids": [1, 32315, 868, 6286, 3020, 261, 509, 787, 269, 509, 679, 262, 274, 32315, 9757, 4709, 868, 3234, 868, 6286, 32315, 32315, 509, 306, 308, 645, 9295, 273, 394, 509, 306, 404, 308, 274, 32315, 32315, 1250, 7849, 861, 261, 262, 274, 32315, 632, 7766, 1071, 918, 7849, 861, 261, 262, 1216, 1185, 32315, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 3902, 6, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 3902, 6, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 2715, 261, 315, 3902, 6, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 1059, 269, 1666, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 1190, 5165, 19985, 261, 262, 288, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.037786368280649185, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAtWithRegionAdjustment", "(", ")", "{", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "region", "(", "2", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5165, 12477, 1398, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 9469, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 404, 269, 1666, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.08755090832710266, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testRegionEffectOnLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STRING", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "region", "(", "1", ",", "6", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 1190, 5165, 19985, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 2715, 261, 315, 7128, 315, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.535204291343689, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAtWithRegionAdjustment", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "region", "(", "2", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "reset", "(", "\"", "STR", "\"", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 6286, 9794, 310, 861, 7173, 5165, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.5551284551620483, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testMatcherLookingAtChangesRegion", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "region", "(", "2", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.6135933995246887, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "region", "(", "2", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.6154477000236511, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "matcher", ".", "region", "(", "2", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 868, 3234, 1936, 273, 670, 87, 266, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 2], "score": -0.641403317451477, "weight": 1, "toks": ["<s>", "RePattern", "pattern", "=", "HsrePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 16803, 716, 326, 1375, 868, 6286, 1375, 791, 296, 272, 3020, 353, 444, 358, 4295, 716, 854, 8220, 434, 326, 533, 315, 7128, 315, 1839, 326, 2715, 261, 4295, 1059, 358, 1666, 316, 326, 1142, 7592, 262, 269, 1158, 845, 364, 315, 7128, 315, 848, 506, 1392, 3470, 716, 3020, 269, 20356, 1375, 7849, 861, 261, 262, 1375, 1410, 327, 1375, 629, 1375, 263, 2], "score": -0.6451882123947144, "weight": 1, "toks": ["<s>", "Given", "that", "the", "`", "ReMatcher", "`", "instance", "'", "s", "region", "is", "set", "to", "indices", "that", "are", "outside", "of", "the", "string", "\"", "STR", "\"", "after", "the", "reset", "(", "indices", "4", "to", "6", "in", "the", "last", "instruction", ")", ",", "no", "match", "for", "\"", "STR", "\"", "can", "be", "found", "within", "that", "region", ",", "hence", "`", "lookingAt", "(", ")", "`", "should", "return", "`", "false", "`", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5165, 12477, 1398, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 7128, 315, 262, 274, 4546, 263, 3020, 261, 576, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 289, 2], "score": -0.7069106101989746, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testRegionEffectOnLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STR", "\"", ")", ";", "matcher", ".", "region", "(", "2", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 6286, 5165, 12477, 1398, 9794, 310, 861, 261, 262, 288, 868, 3234, 1936, 273, 868, 3234, 263, 4074, 261, 315, 7128, 315, 262, 274, 868, 6286, 4546, 273, 1936, 263, 4546, 261, 315, 9469, 315, 262, 274, 1815, 5510, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 342, 342, 21608, 315, 7128, 315, 622, 326, 8435, 4546, 263, 3020, 261, 404, 269, 2371, 262, 274, 1815, 8381, 261, 4546, 263, 7849, 861, 261, 262, 262, 274, 342, 342, 2631, 315, 7128, 315, 622, 1754, 404, 289, 2], "score": -0.7235283851623535, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testMatcherRegionEffectOnLookingAt", "(", ")", "{", "RePattern", "pattern", "=", "RePattern", ".", "compile", "(", "\"", "STR", "\"", ")", ";", "ReMatcher", "matcher", "=", "pattern", ".", "matcher", "(", "\"", "STRING", "\"", ")", ";", "assertTrue", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "/", "/", "Matches", "\"", "STR", "\"", "at", "the", "beginning", "matcher", ".", "region", "(", "1", ",", "7", ")", ";", "assertFalse", "(", "matcher", ".", "lookingAt", "(", ")", ")", ";", "/", "/", "No", "\"", "STR", "\"", "at", "position", "1", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 87.73826753016615, "bleu-max": 100.0, "bleu-min": 23.884125437220508, "bleu-avg": 57.59284589345881, "code-bleu": 90.88933475803003, "code-bleu-max": 100.0, "code-bleu-min": 5.144269606617172, "code-bleu-avg": 49.08932226417174, "edit-sim": 91, "edit-sim-max": 100, "edit-sim-min": 54, "edit-sim-avg": 80.7, "rouge-p": 83.33333333333334, "rouge-p-max": 100.0, "rouge-p-min": 44.44444444444444, "rouge-p-avg": 68.98809523809524, "rouge-r": 83.33333333333334, "rouge-r-max": 100.0, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 81.66666666666666, "rouge-f": 83.33333283333334, "rouge-f-max": 99.9999995, "rouge-f-min": 53.33333285333334, "rouge-f-avg": 74.27838778672495, "num-seq": 10}, "time": 0.562084436416626, "misc": {}}
{"id": 39, "data_id": "csn-4603", "input_stids": [1, 8586, 3481, 32315, 32315, 19072, 7100, 4709, 32315, 6912, 32315, 32315, 632, 11672, 1071, 918, 3875, 2678, 38, 4397, 261, 262, 288, 18330, 273, 394, 6756, 83, 416, 2678, 38, 4397, 261, 262, 274, 3875, 2678, 38, 4397, 261, 18330, 262, 274, 289, 632, 7360, 1071, 918, 6686, 38, 4397, 261, 262, 288, 309, 261, 18330, 480, 446, 262, 288, 18330, 263, 6686, 261, 262, 274, 289, 876, 273, 446, 274, 289, 32315, 1071, 6912, 261, 262, 288, 3481, 273, 394, 4317, 411, 405, 261, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 32315, 2], "topk": [{"tids": [1, 632, 272, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 289, 2], "score": -0.2817244231700897, "weight": 1, "toks": ["<s>", "@", "s", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "}", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1842, 18487, 1676, 24795, 1375, 707, 23500, 269, 3387, 716, 326, 810, 501, 3142, 17099, 279, 14628, 4191, 720, 24795, 471, 3929, 2856, 4259, 720, 24795, 854, 8783, 2707, 471, 3096, 358, 326, 1375, 6912, 1375, 733, 487, 2665, 263, 2], "score": -0.28198540210723877, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "testSitemapSubdocuments", "`", "method", "effectively", ",", "ensure", "that", "the", "input", "data", "simulates", "a", "sitemap", "containing", "subdocuments", "and", "verify", "whether", "these", "subdocuments", "are", "correctly", "parsed", "and", "added", "to", "the", "`", "Metadata", "`", "object", "as", "expected", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 342, 342, 20471, 1842, 981, 2674, 289, 2], "score": -0.28360477089881897, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "/", "/", "Your", "test", "code", "here", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 2], "score": -0.28473126888275146, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 342, 342, 4725, 21249, 14628, 720, 24795, 854, 10584, 316, 2690, 646, 716, 326, 2082, 1410, 1640, 514, 1842, 4870, 273, 315, 411, 1729, 405, 411, 1417, 405, 411, 14628, 405, 10548, 348, 8848, 3697, 411, 342, 14628, 405, 411, 342, 1417, 405, 411, 342, 1729, 405, 315, 274, 18330, 263, 2911, 261, 394, 4317, 411, 405, 261, 262, 269, 446, 269, 394, 3633, 7134, 261, 876, 262, 262, 274, 18330, 263, 1836, 261, 394, 7257, 2828, 261, 1842, 4870, 262, 262, 274, 342, 342, 9587, 11799, 3193, 4191, 3982, 501, 25395, 261, 876, 263, 336, 1514, 11541, 261, 262, 263, 963, 261, 262, 405, 374, 262, 274, 342, 342, 2073, 309, 1281, 876, 1703, 14929, 289, 2], "score": -0.2867928147315979, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "/", "/", "Assuming", "sitemap", "subdocuments", "are", "represented", "in", "some", "form", "that", "the", "parser", "should", "handle", "String", "testHTML", "=", "\"", "<", "html", ">", "<", "body", ">", "<", "sitemap", ">", "Some", "Sitemap", "Content", "<", "/", "sitemap", ">", "<", "/", "body", ">", "<", "/", "html", ">", "\"", ";", "bolt", ".", "prepare", "(", "new", "HashMap", "<", ">", "(", ")", ",", "null", ",", "new", "OutputCollector", "(", "output", ")", ")", ";", "bolt", ".", "execute", "(", "new", "TupleImpl", "(", "testHTML", ")", ")", ";", "/", "/", "Simulated", "tuple", "containing", "HTML", "data", "assertNotNull", "(", "output", ".", "getEmitted", "(", ")", ".", "size", "(", ")", ">", "0", ")", ";", "/", "/", "Check", "if", "any", "output", "was", "produced", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 342, 342, 10371, 726, 3875, 2678, 38, 4397, 261, 262, 274, 342, 342, 4603, 6912, 3481, 273, 18330, 263, 1109, 261, 315, 14628, 880, 315, 262, 274, 342, 342, 5452, 25395, 261, 3481, 262, 274, 289, 2], "score": -0.28996697068214417, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "/", "/", "Arrange", "setupParserBolt", "(", ")", ";", "/", "/", "Act", "Metadata", "md", "=", "bolt", ".", "parse", "(", "\"", "sitemap", "url", "\"", ")", ";", "/", "/", "Assert", "assertNotNull", "(", "md", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 289, 2], "score": -0.2920844852924347, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11826, 7100, 261, 262, 1216, 1860, 2], "score": -0.2936551868915558, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testDuplicateLinks", "(", ")", "throws", "IOException", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 342, 342, 7766, 4471, 289, 2], "score": -0.2979776859283447, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "/", "/", "Test", "implementation", "}", "</s>"]}, {"tids": [1, 1788, 279, 14628, 1668, 471, 3929, 716, 720, 24795, 854, 8783, 2707, 263, 2], "score": -0.3023819029331207, "weight": 1, "toks": ["<s>", "Create", "a", "sitemap", "document", "and", "verify", "that", "subdocuments", "are", "correctly", "parsed", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 5.877626059939229, "bleu-max": 7.327911704673225, "bleu-min": 3.473163773526334, "bleu-avg": 4.982257104511477, "code-bleu": 26.017754514395648, "code-bleu-max": 26.088166277080504, "code-bleu-min": 25.90409107612664, "code-bleu-avg": 25.975472690222283, "edit-sim": 18, "edit-sim-max": 20, "edit-sim-min": 12, "edit-sim-avg": 15.3, "rouge-p": 33.33333333333333, "rouge-p-max": 33.33333333333333, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 33.33333333333332, "rouge-r": 25.0, "rouge-r-max": 25.0, "rouge-r-min": 25.0, "rouge-r-avg": 25.0, "rouge-f": 28.57142808163266, "rouge-f-max": 28.57142808163266, "rouge-f-min": 28.57142808163266, "rouge-f-avg": 28.571428081632668, "num-seq": 10}, "time": 2.3223001956939697, "misc": {}}
{"id": 40, "data_id": "csn-4603", "input_stids": [1, 8586, 3481, 32315, 32315, 19072, 7100, 4709, 4317, 32315, 6912, 32315, 642, 263, 1378, 261, 5245, 263, 20814, 7022, 67, 7038, 24635, 269, 3590, 2309, 262, 274, 32315, 632, 11672, 1071, 918, 3875, 2678, 38, 4397, 261, 262, 288, 18330, 273, 394, 6756, 83, 416, 2678, 38, 4397, 261, 262, 274, 3875, 2678, 38, 4397, 261, 18330, 262, 274, 289, 632, 7360, 1071, 918, 6686, 38, 4397, 261, 262, 288, 309, 261, 18330, 480, 446, 262, 288, 18330, 263, 6686, 261, 262, 274, 289, 876, 273, 446, 274, 289, 32315, 1071, 6912, 261, 262, 288, 3481, 273, 394, 4317, 411, 405, 261, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 32315, 1635, 642, 273, 394, 4317, 261, 262, 274, 2], "topk": [{"tids": [1, 2974, 23500, 1842, 326, 1375, 6756, 83, 416, 2678, 38, 4397, 1375, 667, 296, 272, 7123, 358, 1640, 5811, 4592, 269, 1846, 848, 999, 326, 1375, 1842, 18487, 1676, 24795, 1375, 707, 263, 7693, 716, 333, 707, 11643, 279, 394, 791, 434, 1375, 6756, 83, 416, 2678, 38, 4397, 1375, 269, 25718, 4573, 1472, 269, 471, 4271, 309, 326, 5811, 1674, 487, 25264, 3470, 1375, 6756, 83, 416, 2678, 38, 4397, 1375, 8783, 7372, 14628, 720, 24795, 263, 13743, 225, 163, 227, 252, 272, 279, 20570, 784, 471, 22397, 17504, 364, 3637, 731, 326, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 6756, 83, 416, 2678, 38, 4397, 18330, 273, 394, 6756, 83, 416, 2678, 38, 4397, 261, 262, 274, 3875, 2678, 38, 4397, 261, 18330, 262, 274, 342, 342, 4725, 21249, 3875, 2678, 38, 4397, 25718, 18330, 279, 323, 372, 5173, 364, 326, 1842, 18330, 263, 1836, 261, 262, 274, 342, 342, 7867, 578, 20089, 810, 1931, 364, 4588, 342, 342, 5452, 6317, 358, 3929, 3434, 5811, 434, 14628, 720, 24795, 289, 1375, 1375, 1375, 2], "score": -0.23775792121887207, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "JSoupParserBolt", "`", "class", "'", "s", "ability", "to", "handle", "parsing", "tasks", ",", "you", "can", "use", "the", "`", "testSitemapSubdocuments", "`", "method", ".", "Ensure", "that", "this", "method", "initializes", "a", "new", "instance", "of", "`", "JSoupParserBolt", "`", ",", "configures", "necessary", "parameters", ",", "and", "checks", "if", "the", "parsing", "operation", "as", "designated", "within", "`", "JSoupParserBolt", "`", "correctly", "handles", "sitemap", "subdocuments", ".", "Here", "\u2019", "s", "a", "concise", "and", "focused", "approach", "for", "setting", "up", "the", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "JSoupParserBolt", "bolt", "=", "new", "JSoupParserBolt", "(", ")", ";", "setupParserBolt", "(", "bolt", ")", ";", "/", "/", "Assuming", "setupParserBolt", "configures", "bolt", "adequately", "for", "the", "test", "bolt", ".", "execute", "(", ")", ";", "/", "/", "Mock", "or", "simulate", "input", "required", "for", "execution", "/", "/", "Assert", "statements", "to", "verify", "correct", "parsing", "of", "sitemap", "subdocuments", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1021, 707, 3613, 1842, 1410, 506, 1375, 1842, 18487, 1676, 24795, 1375, 269, 1492, 848, 506, 18432, 635, 1815, 310, 9368, 6729, 2511, 603, 4351, 4540, 471, 17651, 2184, 364, 279, 3982, 5811, 10766, 1450, 1375, 6756, 83, 416, 2678, 38, 4397, 1375, 263, 1220, 1842, 1410, 3929, 309, 326, 5811, 7372, 14628, 720, 24795, 8783, 263, 2], "score": -0.2626611888408661, "weight": 1, "toks": ["<s>", "The", "method", "under", "test", "should", "be", "`", "testSitemapSubdocuments", "`", ",", "which", "can", "be", "tested", "by", "asserting", "relevant", "outputs", "based", "on", "configured", "inputs", "and", "instantiated", "objects", "for", "a", "HTML", "parsing", "scenario", "using", "`", "JSoupParserBolt", "`", ".", "This", "test", "should", "verify", "if", "the", "parsing", "handles", "sitemap", "subdocuments", "correctly", ".", "</s>"]}, {"tids": [1, 13743, 353, 279, 21043, 7694, 3021, 358, 1842, 326, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 25395, 261, 18330, 263, 1109, 261, 348, 8848, 4709, 1304, 263, 1262, 8504, 18487, 261, 262, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.31815749406814575, "weight": 1, "toks": ["<s>", "Here", "is", "a", "succinct", "statement", "to", "test", "the", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "assertNotNull", "(", "bolt", ".", "parse", "(", "SitemapTestUtil", ".", "loadSampleSitemap", "(", ")", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 7766, 326, 1375, 6686, 38, 4397, 1375, 707, 635, 15387, 518, 471, 1508, 6728, 309, 326, 2703, 316, 1375, 18330, 1375, 854, 21419, 15976, 471, 444, 358, 446, 263, 2], "score": -0.3259885609149933, "weight": 1, "toks": ["<s>", "Test", "the", "`", "cleanupBolt", "`", "method", "by", "invoking", "it", "and", "then", "checking", "if", "the", "resources", "in", "`", "bolt", "`", "are", "appropriately", "released", "and", "set", "to", "null", ".", "</s>"]}, {"tids": [1, 1021, 3021, 1410, 1836, 326, 18330, 296, 272, 6686, 707, 358, 3387, 518, 296, 272, 5960, 487, 2665, 263, 2], "score": -0.34865668416023254, "weight": 1, "toks": ["<s>", "The", "statement", "should", "execute", "the", "bolt", "'", "s", "cleanup", "method", "to", "ensure", "it", "'", "s", "working", "as", "expected", ".", "</s>"]}, {"tids": [1, 1021, 980, 434, 981, 716, 1410, 506, 18432, 316, 20570, 784, 21296, 294, 1375, 1375, 1375, 2252, 1071, 6912, 261, 262, 288, 3481, 273, 394, 4317, 411, 405, 261, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3644246757030487, "weight": 1, "toks": ["<s>", "The", "line", "of", "code", "that", "should", "be", "tested", "in", "concise", "manner", ":", "`", "`", "`", "java", "public", "Metadata", "(", ")", "{", "md", "=", "new", "HashMap", "<", ">", "(", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 7693, 326, 3590, 1965, 353, 444, 8783, 316, 326, 1664, 852, 1865, 7769, 263, 2], "score": -0.36621522903442383, "weight": 1, "toks": ["<s>", "Ensure", "the", "partition", "mode", "is", "set", "correctly", "in", "the", "configuration", "map", "before", "testing", ".", "</s>"]}, {"tids": [1, 1635, 642, 273, 394, 4317, 261, 262, 274, 2], "score": -0.36965352296829224, "weight": 1, "toks": ["<s>", "Map", "config", "=", "new", "HashMap", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 3875, 2678, 38, 4397, 261, 262, 274, 289, 2], "score": -0.39438027143478394, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "setupParserBolt", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 642, 263, 1378, 261, 5245, 263, 20814, 7022, 67, 7038, 67, 8388, 67, 1985, 269, 3590, 2309, 262, 274, 1375, 2], "score": -0.39625367522239685, "weight": 1, "toks": ["<s>", "`", "config", ".", "put", "(", "Constants", ".", "PARTITION_MODE_PARAM_NAME", ",", "partitionMode", ")", ";", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 31.14868126327937, "bleu-avg": 43.56733875858231, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 20.263495382624065, "code-bleu-avg": 31.63220502676193, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 41, "edit-sim-avg": 52.9, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 60.0, "rouge-p-avg": 68.88888888888889, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 85.71428571428571, "rouge-r-avg": 89.99999999999997, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 70.58823480968859, "rouge-f-avg": 77.79411715796931, "num-seq": 10}, "time": 0.728024959564209, "misc": {}}
{"id": 41, "data_id": "csn-4603", "input_stids": [1, 8586, 3481, 32315, 32315, 19072, 7100, 4709, 4317, 32315, 6912, 32315, 327, 1976, 5422, 263, 1008, 1785, 5422, 274, 32315, 632, 11672, 1071, 918, 3875, 2678, 38, 4397, 261, 262, 288, 18330, 273, 394, 6756, 83, 416, 2678, 38, 4397, 261, 262, 274, 3875, 2678, 38, 4397, 261, 18330, 262, 274, 289, 632, 7360, 1071, 918, 6686, 38, 4397, 261, 262, 288, 309, 261, 18330, 480, 446, 262, 288, 18330, 263, 6686, 261, 262, 274, 289, 876, 273, 446, 274, 289, 32315, 1071, 6912, 261, 262, 288, 3481, 273, 394, 4317, 411, 405, 261, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 32315, 1635, 642, 273, 394, 4317, 261, 262, 274, 642, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 1788, 279, 16745, 1664, 364, 7769, 326, 14628, 720, 24795, 5811, 263, 2], "score": -0.08782496303319931, "weight": 1, "toks": ["<s>", "Create", "a", "minimal", "configuration", "for", "testing", "the", "sitemap", "subdocuments", "parsing", ".", "</s>"]}, {"tids": [1, 1788, 279, 4143, 1842, 10766, 364, 1375, 6756, 83, 416, 2678, 38, 4397, 1375, 263, 2], "score": -0.432945191860199, "weight": 1, "toks": ["<s>", "Create", "a", "simple", "test", "scenario", "for", "`", "JSoupParserBolt", "`", ".", "</s>"]}, {"tids": [1, 1021, 1375, 3875, 2678, 38, 4397, 261, 262, 1375, 707, 1410, 4046, 4573, 10459, 578, 5030, 364, 326, 1375, 6756, 83, 416, 2678, 38, 4397, 1375, 791, 263, 2], "score": -0.46047624945640564, "weight": 1, "toks": ["<s>", "The", "`", "setupParserBolt", "(", ")", "`", "method", "should", "initialize", "necessary", "configurations", "or", "dependencies", "for", "the", "`", "JSoupParserBolt", "`", "instance", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1921, 2277, 261, 262, 288, 6912, 1982, 273, 394, 6912, 261, 262, 274, 1815, 5510, 261, 1982, 263, 2709, 261, 262, 262, 274, 289, 2], "score": -0.4606313407421112, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testEmptyMetadata", "(", ")", "{", "Metadata", "metadata", "=", "new", "Metadata", "(", ")", ";", "assertTrue", "(", "metadata", ".", "isEmpty", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1788, 279, 16745, 14628, 720, 5457, 1664, 358, 4356, 326, 1842, 707, 23500, 263, 2], "score": -0.46605730056762695, "weight": 1, "toks": ["<s>", "Create", "a", "minimal", "sitemap", "subdocument", "configuration", "to", "invoke", "the", "test", "method", "effectively", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 11826, 7100, 261, 262, 288, 342, 342, 9190, 326, 667, 358, 1842, 19072, 7100, 4709, 6751, 7100, 4709, 273, 394, 19072, 7100, 4709, 261, 262, 274, 342, 342, 1000, 731, 810, 4317, 411, 514, 269, 514, 405, 810, 273, 394, 4317, 411, 405, 261, 262, 274, 810, 263, 1378, 261, 315, 1976, 315, 269, 315, 1062, 294, 342, 342, 3454, 263, 532, 315, 262, 274, 342, 342, 7903, 326, 707, 3613, 1842, 1250, 563, 273, 6751, 7100, 4709, 263, 1104, 23897, 261, 810, 262, 274, 342, 342, 5452, 326, 2665, 12884, 1815, 5510, 261, 563, 269, 315, 13219, 358, 1104, 11211, 315, 262, 274, 289, 2], "score": -0.5023296475410461, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testDuplicateLinks", "(", ")", "{", "/", "/", "Initialize", "the", "class", "to", "test", "DuplicateLinksTest", "duplicateLinksTest", "=", "new", "DuplicateLinksTest", "(", ")", ";", "/", "/", "Set", "up", "input", "HashMap", "<", "String", ",", "String", ">", "input", "=", "new", "HashMap", "<", ">", "(", ")", ";", "input", ".", "put", "(", "\"", "URL", "\"", ",", "\"", "http", ":", "/", "/", "example", ".", "com", "\"", ")", ";", "/", "/", "Execute", "the", "method", "under", "test", "boolean", "result", "=", "duplicateLinksTest", ".", "findDuplicates", "(", "input", ")", ";", "/", "/", "Assert", "the", "expected", "outcome", "assertTrue", "(", "result", ",", "\"", "Expected", "to", "find", "duplicates", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 2672, 326, 1375, 642, 1375, 316, 326, 707, 3613, 1842, 263, 2], "score": -0.5246476531028748, "weight": 1, "toks": ["<s>", "Use", "the", "`", "config", "`", "in", "the", "method", "under", "test", ".", "</s>"]}, {"tids": [1, 7693, 716, 326, 1375, 1842, 18487, 1676, 24795, 1375, 23500, 20761, 720, 5457, 5811, 635, 17721, 4573, 10459, 471, 7820, 263, 2], "score": -0.539504885673523, "weight": 1, "toks": ["<s>", "Ensure", "that", "the", "`", "testSitemapSubdocuments", "`", "effectively", "verifies", "subdocument", "parsing", "by", "providing", "necessary", "configurations", "and", "assertions", ".", "</s>"]}, {"tids": [1, 1788, 279, 1842, 707, 716, 2195, 481, 959, 326, 2719, 434, 279, 4143, 498, 300, 460, 3082, 358, 326, 296, 3481, 296, 4317, 263, 2], "score": -0.5695472359657288, "weight": 1, "toks": ["<s>", "Create", "a", "test", "method", "that", "confirms", "the", "addition", "of", "a", "simple", "key", "-", "value", "pair", "to", "the", "'", "md", "'", "HashMap", ".", "</s>"]}, {"tids": [1, 1788, 279, 16745, 269, 3912, 3454, 434, 279, 2836, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 342, 342, 10939, 1635, 411, 514, 269, 514, 405, 642, 273, 394, 4317, 411, 405, 261, 262, 274, 642, 263, 1378, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 18330, 263, 15517, 261, 642, 262, 274, 342, 342, 4603, 18330, 263, 1836, 261, 262, 274, 342, 342, 5452, 25395, 261, 18330, 263, 11062, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.5734184384346008, "weight": 1, "toks": ["<s>", "Create", "a", "minimal", ",", "complete", "example", "of", "a", "unit", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "/", "/", "Setup", "Map", "<", "String", ",", "String", ">", "config", "=", "new", "HashMap", "<", ">", "(", ")", ";", "config", ".", "put", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "bolt", ".", "setConfig", "(", "config", ")", ";", "/", "/", "Act", "bolt", ".", "execute", "(", ")", ";", "/", "/", "Assert", "assertNotNull", "(", "bolt", ".", "getOutput", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 7.465821904275577, "bleu-max": 16.297098401810178, "bleu-min": 6.437520879140125, "bleu-avg": 9.527762319006618, "code-bleu": 1.6329391012932226, "code-bleu-max": 9.494885237574708, "code-bleu-min": 1.6294980313396212, "code-bleu-avg": 3.8527218611378773, "edit-sim": 31, "edit-sim-max": 41, "edit-sim-min": 31, "edit-sim-avg": 34.8, "rouge-p": 71.42857142857143, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 65.79184704184703, "rouge-r": 41.66666666666667, "rouge-r-max": 50.0, "rouge-r-min": 33.33333333333333, "rouge-r-avg": 41.66666666666667, "rouge-f": 52.63157848199447, "rouge-f-max": 58.8235289965398, "rouge-f-min": 39.99999952000001, "rouge-f-avg": 50.44226674725723, "num-seq": 10}, "time": 0.9561398029327393, "misc": {}}
{"id": 42, "data_id": "csn-4603", "input_stids": [1, 8586, 3481, 32315, 1071, 760, 19726, 1042, 2108, 975, 329, 18618, 1042, 261, 262, 288, 19726, 1042, 819, 273, 5416, 261, 19726, 1042, 263, 667, 262, 274, 1347, 261, 819, 263, 1744, 5396, 261, 1281, 780, 261, 262, 269, 1281, 261, 467, 5396, 263, 667, 262, 269, 1281, 1702, 261, 262, 262, 262, 263, 1508, 13203, 261, 394, 21019, 411, 467, 5396, 405, 261, 262, 288, 632, 1439, 1071, 467, 5396, 5803, 261, 11298, 1398, 9865, 9495, 262, 1216, 4206, 288, 327, 9495, 263, 11950, 261, 404, 269, 467, 5396, 263, 667, 262, 274, 289, 289, 262, 274, 327, 819, 274, 289, 32315, 19072, 7100, 4709, 4317, 32315, 6912, 32315, 327, 1976, 5422, 263, 1008, 1785, 5422, 274, 32315, 632, 11672, 1071, 918, 3875, 2678, 38, 4397, 261, 262, 288, 18330, 273, 394, 6756, 83, 416, 2678, 38, 4397, 261, 262, 274, 3875, 2678, 38, 4397, 261, 18330, 262, 274, 289, 632, 7360, 1071, 918, 6686, 38, 4397, 261, 262, 288, 309, 261, 18330, 480, 446, 262, 288, 18330, 263, 6686, 261, 262, 274, 289, 876, 273, 446, 274, 289, 32315, 1071, 6912, 261, 262, 288, 3481, 273, 394, 4317, 411, 405, 261, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 32315, 1635, 642, 273, 394, 4317, 261, 262, 274, 642, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 18330, 263, 2911, 261, 642, 269, 7766, 1304, 263, 2108, 975, 329, 18618, 1042, 261, 262, 269, 394, 3633, 7134, 261, 876, 262, 262, 274, 2], "topk": [{"tids": [1, 1788, 392, 791, 434, 1375, 19726, 1042, 1375, 1450, 326, 1375, 2108, 975, 329, 18618, 1042, 1375, 707, 263, 2], "score": -0.372369647026062, "weight": 1, "toks": ["<s>", "Create", "an", "instance", "of", "`", "TopologyContext", "`", "using", "the", "`", "getMockedTopologyContext", "`", "method", ".", "</s>"]}, {"tids": [1, 1071, 6912, 261, 262, 288, 3481, 273, 394, 4317, 411, 405, 261, 262, 274, 289, 2], "score": -0.38200342655181885, "weight": 1, "toks": ["<s>", "public", "Metadata", "(", ")", "{", "md", "=", "new", "HashMap", "<", ">", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 1220, 981, 3267, 14606, 358, 506, 1087, 434, 279, 444, 434, 2836, 7434, 364, 279, 5110, 2521, 716, 4692, 24840, 934, 535, 263, 2597, 6104, 2590, 364, 5416, 310, 279, 1375, 19726, 1042, 1375, 269, 3637, 731, 471, 24225, 731, 279, 1375, 6756, 83, 416, 2678, 38, 4397, 1375, 269, 471, 279, 1842, 648, 364, 14628, 720, 24795, 263, 1021, 1842, 11643, 326, 1375, 6756, 83, 416, 2678, 38, 4397, 1375, 598, 10459, 471, 15895, 269, 1496, 518, 1552, 486, 8492, 2424, 9478, 1368, 326, 2923, 7820, 578, 1842, 1960, 1031, 6541, 358, 518, 3832, 6391, 3397, 263, 1021, 819, 2112, 10192, 22397, 603, 7769, 326, 6885, 3613, 2923, 10459, 471, 5416, 329, 29951, 2639, 263, 2], "score": -0.38767507672309875, "weight": 1, "toks": ["<s>", "This", "code", "segment", "appears", "to", "be", "part", "of", "a", "set", "of", "unit", "tests", "for", "a", "Java", "application", "that", "uses", "Apache", "Storm", ".", "It", "includes", "methods", "for", "mocking", "a", "`", "TopologyContext", "`", ",", "setting", "up", "and", "cleaning", "up", "a", "`", "JSoupParserBolt", "`", ",", "and", "a", "test", "case", "for", "sitemap", "subdocuments", ".", "The", "test", "initializes", "the", "`", "JSoupParserBolt", "`", "with", "configurations", "and", "mocks", ",", "but", "it", "does", "not", "give", "clear", "visibility", "into", "the", "specific", "assertions", "or", "test", "goals", "due", "to", "it", "being", "cut", "off", ".", "The", "context", "provided", "looks", "focused", "on", "testing", "the", "behavior", "under", "specific", "configurations", "and", "mocked", "circumstances", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1842, 18487, 1676, 24795, 1375, 707, 23500, 269, 326, 1842, 1410, 7155, 603, 3929, 310, 3661, 326, 1375, 6756, 83, 416, 2678, 38, 4397, 1375, 7372, 326, 5811, 434, 14628, 720, 24795, 263, 1021, 1842, 3875, 29876, 3324, 675, 12583, 326, 1375, 18330, 1375, 598, 279, 5416, 329, 9442, 819, 471, 279, 19555, 1664, 263, 7693, 716, 1375, 876, 1375, 21922, 326, 2707, 1686, 364, 11240, 4271, 263, 2], "score": -0.3888334035873413, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "testSitemapSubdocuments", "`", "method", "effectively", ",", "the", "test", "should", "focus", "on", "verifying", "how", "the", "`", "JSoupParserBolt", "`", "handles", "the", "parsing", "of", "sitemap", "subdocuments", ".", "The", "test", "setup", "involves", "preparing", "the", "`", "bolt", "`", "with", "a", "mocked", "topology", "context", "and", "a", "predefined", "configuration", ".", "Ensure", "that", "`", "output", "`", "captures", "the", "parsed", "results", "for", "assertion", "checks", ".", "</s>"]}, {"tids": [1, 1788, 279, 16745, 1842, 648, 716, 18058, 326, 707, 3613, 1842, 263, 2], "score": -0.3918309807777405, "weight": 1, "toks": ["<s>", "Create", "a", "minimal", "test", "case", "that", "invokes", "the", "method", "under", "test", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 18330, 263, 2911, 261, 642, 269, 7766, 1304, 263, 2108, 975, 329, 18618, 1042, 261, 262, 269, 394, 3633, 7134, 261, 876, 262, 262, 274, 289, 2], "score": -0.3959842622280121, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "bolt", ".", "prepare", "(", "config", ",", "TestUtil", ".", "getMockedTopologyContext", "(", ")", ",", "new", "OutputCollector", "(", "output", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 707, 1375, 19726, 1042, 263, 2108, 975, 329, 18618, 1042, 261, 262, 1375, 353, 18432, 635, 22584, 279, 6756, 83, 416, 2678, 38, 4397, 471, 4440, 2097, 1375, 2911, 1375, 707, 269, 1450, 279, 5416, 329, 9442, 819, 471, 279, 1664, 852, 3470, 326, 1375, 1842, 18487, 1676, 24795, 261, 262, 1375, 2836, 1842, 263, 2], "score": -0.4075784385204315, "weight": 1, "toks": ["<s>", "The", "method", "`", "TopologyContext", ".", "getMockedTopologyContext", "(", ")", "`", "is", "tested", "by", "initializing", "a", "JSoupParserBolt", "and", "calling", "its", "`", "prepare", "`", "method", ",", "using", "a", "mocked", "topology", "context", "and", "a", "configuration", "map", "within", "the", "`", "testSitemapSubdocuments", "(", ")", "`", "unit", "test", ".", "</s>"]}, {"tids": [1, 1021, 1842, 11643, 471, 29294, 326, 1375, 6756, 83, 416, 2678, 38, 4397, 1375, 598, 1664, 471, 279, 5416, 329, 9442, 819, 1865, 7769, 14628, 720, 24795, 5057, 263, 2], "score": -0.4165717363357544, "weight": 1, "toks": ["<s>", "The", "test", "initializes", "and", "prepares", "the", "`", "JSoupParserBolt", "`", "with", "configuration", "and", "a", "mocked", "topology", "context", "before", "testing", "sitemap", "subdocuments", "handling", ".", "</s>"]}, {"tids": [1, 1788, 279, 16745, 4573, 1664, 3875, 471, 4356, 326, 707, 716, 7372, 333, 1664, 316, 3433, 1842, 648, 263, 2], "score": -0.42874377965927124, "weight": 1, "toks": ["<s>", "Create", "a", "minimal", "necessary", "configuration", "setup", "and", "invoke", "the", "method", "that", "handles", "this", "configuration", "in", "your", "test", "case", ".", "</s>"]}, {"tids": [1, 1635, 642, 273, 394, 4317, 261, 262, 274, 2], "score": -0.45994797348976135, "weight": 1, "toks": ["<s>", "Map", "config", "=", "new", "HashMap", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 11.374853510120092, "bleu-avg": 29.246000757535512, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 2.4650765557418075, "code-bleu-avg": 25.970045893941368, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 32, "edit-sim-avg": 49.6, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 49.12698412698412, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 42.857142857142854, "rouge-r-avg": 55.71428571428571, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 37.499999507812504, "rouge-f-avg": 52.07142807544246, "num-seq": 10}, "time": 0.8199996948242188, "misc": {}}
{"id": 43, "data_id": "csn-4603", "input_stids": [1, 32315, 1071, 6912, 261, 262, 288, 3481, 273, 394, 4317, 411, 405, 261, 262, 274, 289, 32315, 19072, 7100, 4709, 4317, 6912, 32315, 6912, 32315, 1771, 6188, 3239, 273, 9675, 1989, 263, 4997, 261, 2195, 269, 4547, 1064, 263, 24245, 67, 6188, 67, 6307, 67, 8388, 269, 315, 3902, 6, 262, 274, 32315, 632, 11672, 1071, 918, 3875, 2678, 38, 4397, 261, 262, 288, 18330, 273, 394, 6756, 83, 416, 2678, 38, 4397, 261, 262, 274, 3875, 2678, 38, 4397, 261, 18330, 262, 274, 289, 632, 7360, 1071, 918, 6686, 38, 4397, 261, 262, 288, 309, 261, 18330, 480, 446, 262, 288, 18330, 263, 6686, 261, 262, 274, 289, 876, 273, 446, 274, 289, 32315, 1071, 6912, 261, 262, 288, 3481, 273, 394, 4317, 411, 405, 261, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 32315, 1635, 642, 273, 394, 4317, 261, 262, 274, 642, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 18330, 263, 2911, 261, 642, 269, 7766, 1304, 263, 2108, 975, 329, 18618, 1042, 261, 262, 269, 394, 3633, 7134, 261, 876, 262, 262, 274, 6912, 1982, 273, 394, 6912, 261, 262, 274, 2], "topk": [{"tids": [1, 657, 326, 1842, 707, 1375, 1842, 18487, 1676, 24795, 1375, 269, 4046, 1375, 6912, 1375, 471, 5068, 326, 1375, 6756, 83, 416, 2678, 38, 4397, 1375, 263, 2], "score": -0.12685725092887878, "weight": 1, "toks": ["<s>", "In", "the", "test", "method", "`", "testSitemapSubdocuments", "`", ",", "initialize", "`", "Metadata", "`", "and", "configure", "the", "`", "JSoupParserBolt", "`", ".", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 342, 342, 10371, 726, 1635, 642, 273, 394, 4317, 261, 262, 274, 642, 263, 1378, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 18330, 263, 2911, 261, 642, 269, 7766, 1304, 263, 2108, 975, 329, 18618, 1042, 261, 262, 269, 394, 3633, 7134, 261, 876, 262, 262, 274, 6912, 1982, 273, 394, 6912, 261, 262, 274, 342, 342, 4603, 342, 342, 3049, 279, 707, 716, 4102, 506, 2665, 358, 16592, 598, 326, 296, 1982, 296, 342, 342, 5452, 342, 342, 5452, 2665, 29867, 628, 326, 13581, 289, 1375, 1375, 1375, 2], "score": -0.3150655925273895, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "/", "/", "Arrange", "Map", "config", "=", "new", "HashMap", "(", ")", ";", "config", ".", "put", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "bolt", ".", "prepare", "(", "config", ",", "TestUtil", ".", "getMockedTopologyContext", "(", ")", ",", "new", "OutputCollector", "(", "output", ")", ")", ";", "Metadata", "metadata", "=", "new", "Metadata", "(", ")", ";", "/", "/", "Act", "/", "/", "Call", "a", "method", "that", "would", "be", "expected", "to", "interact", "with", "the", "'", "metadata", "'", "/", "/", "Assert", "/", "/", "Assert", "expected", "outcomes", "from", "the", "interaction", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 6912, 1375, 3885, 269, 3387, 518, 11643, 326, 1375, 3481, 1375, 4317, 8783, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 2277, 6293, 261, 262, 288, 6912, 1982, 273, 394, 6912, 261, 262, 274, 25395, 261, 1982, 263, 3481, 262, 274, 1815, 5510, 261, 1982, 263, 3481, 263, 2709, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3477737009525299, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "Metadata", "`", "constructor", ",", "ensure", "it", "initializes", "the", "`", "md", "`", "HashMap", "correctly", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testMetadataConstructor", "(", ")", "{", "Metadata", "metadata", "=", "new", "Metadata", "(", ")", ";", "assertNotNull", "(", "metadata", ".", "md", ")", ";", "assertTrue", "(", "metadata", ".", "md", ".", "isEmpty", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 1635, 642, 273, 394, 4317, 261, 262, 274, 642, 263, 1378, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 18330, 263, 2911, 261, 642, 269, 7766, 1304, 263, 2108, 975, 329, 18618, 1042, 261, 262, 269, 394, 3633, 7134, 261, 876, 262, 262, 274, 6912, 1982, 273, 394, 6912, 261, 262, 274, 289, 2], "score": -0.3693717122077942, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "Map", "config", "=", "new", "HashMap", "(", ")", ";", "config", ".", "put", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "bolt", ".", "prepare", "(", "config", ",", "TestUtil", ".", "getMockedTopologyContext", "(", ")", ",", "new", "OutputCollector", "(", "output", ")", ")", ";", "Metadata", "metadata", "=", "new", "Metadata", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 1788, 279, 16745, 1842, 10766, 364, 1375, 6912, 1375, 263, 2], "score": -0.3716656565666199, "weight": 1, "toks": ["<s>", "Create", "a", "minimal", "test", "scenario", "for", "`", "Metadata", "`", ".", "</s>"]}, {"tids": [1, 9190, 6912, 471, 4659, 364, 7769, 14628, 720, 24795, 263, 2], "score": -0.38254013657569885, "weight": 1, "toks": ["<s>", "Initialize", "Metadata", "and", "Configuration", "for", "testing", "sitemap", "subdocuments", ".", "</s>"]}, {"tids": [1, 1788, 279, 16745, 1842, 648, 358, 3387, 326, 6912, 3885, 11643, 8214, 263, 2], "score": -0.39858585596084595, "weight": 1, "toks": ["<s>", "Create", "a", "minimal", "test", "case", "to", "ensure", "the", "Metadata", "constructor", "initializes", "properly", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 17701, 261, 262, 1216, 1860, 288, 25395, 261, 1982, 262, 274, 289, 2], "score": -0.4024910628795624, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocumentsInitialization", "(", ")", "throws", "IOException", "{", "assertNotNull", "(", "metadata", ")", ";", "}", "</s>"]}, {"tids": [1, 19072, 7100, 4709, 1410, 3929, 716, 326, 6912, 733, 8783, 7372, 6751, 3222, 263, 2], "score": -0.4253627359867096, "weight": 1, "toks": ["<s>", "DuplicateLinksTest", "should", "verify", "that", "the", "Metadata", "object", "correctly", "handles", "duplicate", "entries", ".", "</s>"]}, {"tids": [1, 1788, 279, 4143, 1842, 358, 866, 326, 10313, 434, 1375, 6912, 1375, 263, 2], "score": -0.42543721199035645, "weight": 1, "toks": ["<s>", "Create", "a", "simple", "test", "to", "check", "the", "initialization", "of", "`", "Metadata", "`", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 46.38596139522901, "bleu-max": 46.38596139522901, "bleu-min": 12.126781251816647, "bleu-avg": 30.96911922241161, "code-bleu": 24.592931548896036, "code-bleu-max": 24.592931548896036, "code-bleu-min": 3.7402450801698213, "code-bleu-avg": 14.98293614273189, "edit-sim": 60, "edit-sim-max": 66, "edit-sim-min": 44, "edit-sim-avg": 54.1, "rouge-p": 85.71428571428571, "rouge-p-max": 85.71428571428571, "rouge-p-min": 50.0, "rouge-p-avg": 71.23015873015872, "rouge-r": 85.71428571428571, "rouge-r-max": 85.71428571428571, "rouge-r-min": 71.42857142857143, "rouge-r-avg": 81.42857142857142, "rouge-f": 85.71428521428571, "rouge-f-max": 85.71428521428571, "rouge-f-min": 58.823528927335644, "rouge-f-avg": 75.66806673179507, "num-seq": 10}, "time": 0.8123736381530762, "misc": {}}
{"id": 44, "data_id": "csn-4603", "input_stids": [1, 32315, 4750, 918, 1109, 261, 514, 880, 269, 514, 1544, 269, 6912, 1982, 262, 1216, 1860, 288, 1160, 306, 308, 913, 273, 855, 1350, 261, 1544, 262, 274, 7257, 3193, 273, 5416, 261, 7257, 263, 667, 262, 274, 1347, 261, 3193, 263, 27149, 858, 974, 261, 315, 3902, 6, 262, 262, 263, 1508, 990, 261, 913, 262, 274, 1347, 261, 3193, 263, 4997, 858, 974, 261, 315, 3902, 6, 262, 262, 263, 1508, 990, 261, 880, 262, 274, 1347, 261, 3193, 263, 2366, 858, 974, 261, 315, 3902, 6, 262, 262, 263, 1508, 990, 261, 1982, 262, 274, 18330, 263, 1836, 261, 3193, 262, 274, 289, 32315, 19072, 7100, 4709, 4317, 6912, 32315, 32315, 2393, 263, 714, 261, 315, 3902, 6, 262, 263, 714, 261, 1577, 263, 4339, 261, 262, 262, 263, 714, 261, 315, 3902, 6, 262, 274, 32315, 632, 11672, 1071, 918, 3875, 2678, 38, 4397, 261, 262, 288, 18330, 273, 394, 6756, 83, 416, 2678, 38, 4397, 261, 262, 274, 3875, 2678, 38, 4397, 261, 18330, 262, 274, 289, 632, 7360, 1071, 918, 6686, 38, 4397, 261, 262, 288, 309, 261, 18330, 480, 446, 262, 288, 18330, 263, 6686, 261, 262, 274, 289, 876, 273, 446, 274, 289, 32315, 1071, 6912, 261, 262, 288, 3481, 273, 394, 4317, 411, 405, 261, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 32315, 1635, 642, 273, 394, 4317, 261, 262, 274, 642, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 18330, 263, 2911, 261, 642, 269, 7766, 1304, 263, 2108, 975, 329, 18618, 1042, 261, 262, 269, 394, 3633, 7134, 261, 876, 262, 262, 274, 6912, 1982, 273, 394, 6912, 261, 262, 274, 1109, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 1982, 262, 274, 2], "topk": [{"tids": [1, 1021, 981, 14606, 358, 506, 279, 2836, 1842, 13016, 364, 279, 5110, 2521, 1450, 279, 6756, 83, 416, 2678, 38, 4397, 667, 269, 10016, 628, 326, 24840, 934, 535, 8257, 263, 1021, 1842, 353, 26584, 358, 3929, 326, 14176, 434, 5811, 720, 24795, 628, 279, 14628, 263, 300, 1375, 6912, 1375, 294, 432, 4143, 667, 598, 279, 3885, 22584, 392, 1008, 4317, 263, 300, 1375, 1109, 1375, 294, 432, 4750, 707, 358, 20089, 5811, 279, 3193, 598, 1269, 1976, 471, 1982, 913, 263, 2597, 15895, 326, 6885, 434, 3193, 2590, 1450, 7867, 11250, 263, 300, 1021, 1842, 3875, 261, 1375, 3875, 2678, 38, 4397, 1375, 262, 471, 6686, 261, 1375, 6686, 38, 4397, 1375, 262, 2590, 2911, 326, 2082, 18330, 364, 4588, 471, 2721, 518, 1839, 7434, 263, 300, 1375, 1842, 18487, 1676, 24795, 1375, 294, 1021, 3214, 1842, 707, 1678, 731, 326, 2082, 18330, 598, 1664, 269, 471, 1508, 4097, 326, 1375, 1109, 1375, 707, 358, 1842, 326, 18330, 296, 272, 7123, 358, 1640, 471, 1109, 720, 5457, 501, 628, 272, 1726, 6679, 263, 1021, 707, 1375, 1109, 1375, 1914, 326, 2922, 7769, 4058, 1625, 518, 6838, 913, 628, 279, 1544, 269, 15895, 326, 3193, 358, 327, 2923, 924, 269, 471, 3095, 11997, 326, 18330, 598, 326, 5416, 329, 501, 263, 1021, 1842, 353, 19788, 358, 3387, 326, 2082, 18330, 7372, 810, 501, 471, 1982, 487, 2665, 263, 2], "score": -0.21840950846672058, "weight": 1, "toks": ["<s>", "The", "code", "appears", "to", "be", "a", "unit", "test", "snippet", "for", "a", "Java", "application", "using", "a", "JSoupParserBolt", "class", ",", "possibly", "from", "the", "Apache", "Storm", "framework", ".", "The", "test", "is", "designed", "to", "verify", "the", "functionality", "of", "parsing", "subdocuments", "from", "a", "sitemap", ".", "-", "`", "Metadata", "`", ":", "A", "simple", "class", "with", "a", "constructor", "initializing", "an", "empty", "HashMap", ".", "-", "`", "parse", "`", ":", "A", "protected", "method", "to", "simulate", "parsing", "a", "tuple", "with", "specified", "URL", "and", "metadata", "content", ".", "It", "mocks", "the", "behavior", "of", "tuple", "methods", "using", "Mockito", ".", "-", "The", "test", "setup", "(", "`", "setupParserBolt", "`", ")", "and", "cleanup", "(", "`", "cleanupBolt", "`", ")", "methods", "prepare", "the", "parser", "bolt", "for", "execution", "and", "clean", "it", "after", "tests", ".", "-", "`", "testSitemapSubdocuments", "`", ":", "The", "actual", "test", "method", "sets", "up", "the", "parser", "bolt", "with", "configuration", ",", "and", "then", "calls", "the", "`", "parse", "`", "method", "to", "test", "the", "bolt", "'", "s", "ability", "to", "handle", "and", "parse", "subdocument", "data", "from", "sitemaps", ".", "The", "method", "`", "parse", "`", "contains", "the", "core", "testing", "logic", "where", "it", "reads", "content", "from", "a", "filename", ",", "mocks", "the", "tuple", "to", "return", "specific", "values", ",", "and", "finally", "executes", "the", "bolt", "with", "the", "mocked", "data", ".", "The", "test", "is", "structured", "to", "ensure", "the", "parser", "bolt", "handles", "input", "data", "and", "metadata", "as", "expected", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 6912, 1982, 273, 394, 6912, 261, 262, 274, 1109, 261, 315, 1062, 294, 342, 342, 3454, 263, 532, 315, 269, 315, 14628, 263, 2025, 315, 269, 1982, 262, 274, 289, 2], "score": -0.23078007996082306, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "Metadata", "metadata", "=", "new", "Metadata", "(", ")", ";", "parse", "(", "\"", "http", ":", "/", "/", "example", ".", "com", "\"", ",", "\"", "sitemap", ".", "xml", "\"", ",", "metadata", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3201, 1305, 261, 262, 1216, 1860, 288, 6912, 1982, 273, 394, 6912, 261, 262, 274, 1109, 261, 315, 880, 315, 269, 315, 1544, 315, 269, 1982, 262, 274, 289, 2], "score": -0.254774272441864, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testParseMethod", "(", ")", "throws", "IOException", "{", "Metadata", "metadata", "=", "new", "Metadata", "(", ")", ";", "parse", "(", "\"", "url", "\"", ",", "\"", "filename", "\"", ",", "metadata", ")", ";", "}", "</s>"]}, {"tids": [1, 5452, 716, 1982, 353, 4358, 487, 2665, 635, 326, 1375, 1109, 1375, 707, 263, 2], "score": -0.31890109181404114, "weight": 1, "toks": ["<s>", "Assert", "that", "metadata", "is", "modified", "as", "expected", "by", "the", "`", "parse", "`", "method", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 2], "score": -0.32272806763648987, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "</s>"]}, {"tids": [1, 2974, 3387, 11448, 7769, 434, 326, 1375, 1109, 1375, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1410, 3201, 1350, 16147, 715, 261, 262, 1216, 1860, 288, 6912, 1982, 273, 394, 6912, 261, 262, 274, 1109, 261, 315, 1062, 294, 342, 342, 3454, 263, 532, 315, 269, 315, 3454, 263, 1729, 315, 269, 1982, 262, 274, 25395, 261, 1982, 263, 336, 261, 315, 2707, 751, 315, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.4020790457725525, "weight": 1, "toks": ["<s>", "To", "ensure", "effective", "testing", "of", "the", "`", "parse", "`", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "shouldParseContentCorrectly", "(", ")", "throws", "IOException", "{", "Metadata", "metadata", "=", "new", "Metadata", "(", ")", ";", "parse", "(", "\"", "http", ":", "/", "/", "example", ".", "com", "\"", ",", "\"", "example", ".", "html", "\"", ",", "metadata", ")", ";", "assertNotNull", "(", "metadata", ".", "get", "(", "\"", "parsedData", "\"", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 14373, 326, 707, 1375, 1842, 18487, 1676, 24795, 1375, 358, 5122, 1842, 326, 6885, 434, 5811, 14628, 720, 24795, 263, 2], "score": -0.4209544062614441, "weight": 1, "toks": ["<s>", "Invoke", "the", "method", "`", "testSitemapSubdocuments", "`", "to", "directly", "test", "the", "behavior", "of", "parsing", "sitemap", "subdocuments", ".", "</s>"]}, {"tids": [1, 2672, 1375, 1109, 261, 315, 1062, 294, 342, 342, 3454, 263, 532, 315, 269, 315, 3454, 263, 1729, 315, 269, 394, 6912, 261, 262, 262, 274, 1375, 316, 3433, 1842, 707, 263, 2], "score": -0.4250587821006775, "weight": 1, "toks": ["<s>", "Use", "`", "parse", "(", "\"", "http", ":", "/", "/", "example", ".", "com", "\"", ",", "\"", "example", ".", "html", "\"", ",", "new", "Metadata", "(", ")", ")", ";", "`", "in", "your", "test", "method", ".", "</s>"]}, {"tids": [1, 18330, 263, 1836, 261, 3193, 262, 274, 2], "score": -0.4289048910140991, "weight": 1, "toks": ["<s>", "bolt", ".", "execute", "(", "tuple", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 18487, 1676, 24795, 261, 262, 1216, 1860, 288, 1635, 642, 273, 394, 4317, 261, 262, 274, 642, 263, 1378, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 18330, 263, 2911, 261, 642, 269, 7766, 1304, 263, 2108, 975, 329, 18618, 1042, 261, 262, 269, 394, 3633, 7134, 261, 876, 262, 262, 274, 6912, 1982, 273, 394, 6912, 261, 262, 274, 1109, 261, 315, 7128, 315, 269, 315, 7128, 315, 269, 1982, 262, 274, 289, 2], "score": -0.4337438642978668, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSitemapSubdocuments", "(", ")", "throws", "IOException", "{", "Map", "config", "=", "new", "HashMap", "(", ")", ";", "config", ".", "put", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "bolt", ".", "prepare", "(", "config", ",", "TestUtil", ".", "getMockedTopologyContext", "(", ")", ",", "new", "OutputCollector", "(", "output", ")", ")", ";", "Metadata", "metadata", "=", "new", "Metadata", "(", ")", ";", "parse", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "metadata", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 29.212315003229133, "bleu-max": 38.89321882526202, "bleu-min": 14.350325437941407, "bleu-avg": 27.678986248413583, "code-bleu": 25.56297108209356, "code-bleu-max": 31.167607372344413, "code-bleu-min": 8.253393419184365, "code-bleu-avg": 20.71580906355395, "edit-sim": 59, "edit-sim-max": 63, "edit-sim-min": 52, "edit-sim-avg": 58.1, "rouge-p": 66.66666666666666, "rouge-p-max": 77.77777777777779, "rouge-p-min": 45.45454545454545, "rouge-p-avg": 60.469696969696976, "rouge-r": 50.0, "rouge-r-max": 58.333333333333336, "rouge-r-min": 41.66666666666667, "rouge-r-avg": 47.50000000000001, "rouge-f": 57.14285665306124, "rouge-f-max": 66.66666617687076, "rouge-f-min": 43.478260370510405, "rouge-f-avg": 53.06945179464242, "num-seq": 10}, "time": 1.0327789783477783, "misc": {}}
{"id": 45, "data_id": "csn-55130", "input_stids": [1, 1758, 32315, 32315, 13217, 1887, 4709, 32315, 13217, 1887, 32315, 32315, 32315, 632, 1439, 1071, 509, 13374, 261, 262, 288, 327, 5647, 263, 13374, 261, 1758, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 1887, 21952, 261, 262, 32315, 2], "topk": [{"tids": [1, 1815, 8867, 261, 5318, 1887, 21, 263, 13374, 261, 262, 269, 5318, 1887, 22, 263, 13374, 261, 262, 262, 274, 2], "score": -0.11250249296426773, "weight": 1, "toks": ["<s>", "assertEquals", "(", "macAddress1", ".", "hashCode", "(", ")", ",", "macAddress2", ".", "hashCode", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 1815, 8867, 261, 5647, 263, 13374, 261, 394, 1160, 306, 308, 288, 1728, 269, 4200, 269, 5196, 269, 8063, 269, 6437, 269, 4752, 289, 262, 269, 394, 13217, 1887, 261, 394, 1160, 306, 308, 288, 1728, 269, 4200, 269, 5196, 269, 8063, 269, 6437, 269, 4752, 289, 262, 263, 13374, 261, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.14147643744945526, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "assertEquals", "(", "Arrays", ".", "hashCode", "(", "new", "byte", "[", "]", "{", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", "}", ")", ",", "new", "MacAddress", "(", "new", "byte", "[", "]", "{", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", "}", ")", ".", "hashCode", "(", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 5647, 263, 13374, 261, 394, 1160, 306, 308, 288, 261, 1160, 262, 20217, 269, 261, 1160, 262, 2872, 28, 269, 261, 1160, 262, 404, 269, 261, 1160, 262, 404, 289, 262, 269, 5318, 1887, 263, 13374, 261, 262, 262, 274, 2], "score": -0.17461968958377838, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "Arrays", ".", "hashCode", "(", "new", "byte", "[", "]", "{", "(", "byte", ")", "192", ",", "(", "byte", ")", "168", ",", "(", "byte", ")", "1", ",", "(", "byte", ")", "1", "}", ")", ",", "macAddress", ".", "hashCode", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1887, 21952, 261, 262, 288, 13217, 1887, 5318, 1887, 273, 394, 13217, 1887, 261, 394, 1160, 306, 308, 288, 1728, 269, 4200, 269, 5196, 269, 8063, 269, 6437, 269, 4752, 289, 262, 274, 509, 2665, 21952, 273, 5647, 263, 13374, 261, 394, 1160, 306, 308, 288, 1728, 269, 4200, 269, 5196, 269, 8063, 269, 6437, 269, 4752, 289, 262, 274, 1815, 8867, 261, 2665, 21952, 269, 5318, 1887, 263, 13374, 261, 262, 262, 274, 289, 2], "score": -0.18223465979099274, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddressHashCode", "(", ")", "{", "MacAddress", "macAddress", "=", "new", "MacAddress", "(", "new", "byte", "[", "]", "{", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", "}", ")", ";", "int", "expectedHashCode", "=", "Arrays", ".", "hashCode", "(", "new", "byte", "[", "]", "{", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", "}", ")", ";", "assertEquals", "(", "expectedHashCode", ",", "macAddress", ".", "hashCode", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 25395, 261, 394, 13217, 1887, 261, 394, 1160, 306, 308, 288, 374, 269, 404, 269, 576, 269, 890, 269, 1059, 269, 1381, 289, 262, 263, 13374, 261, 262, 262, 274, 2], "score": -0.21627797186374664, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "new", "MacAddress", "(", "new", "byte", "[", "]", "{", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "}", ")", ".", "hashCode", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1220, 981, 13016, 353, 1087, 434, 279, 2836, 1842, 667, 364, 326, 1375, 13217, 1887, 1375, 667, 316, 5110, 263, 1021, 1375, 13374, 261, 262, 1375, 707, 316, 326, 1375, 13217, 1887, 1375, 667, 353, 11000, 358, 327, 279, 1651, 981, 8894, 628, 392, 526, 2566, 1375, 1758, 1375, 261, 1492, 4075, 379, 6906, 9064, 326, 1731, 434, 326, 14246, 1758, 262, 1450, 326, 1375, 5647, 263, 13374, 261, 262, 1375, 707, 263, 1021, 1842, 707, 4141, 1375, 1842, 1887, 21952, 261, 262, 1375, 353, 18405, 358, 1842, 333, 1375, 13374, 261, 262, 1375, 707, 263, 2974, 8214, 1842, 326, 1375, 13374, 261, 262, 1375, 707, 269, 518, 353, 10802, 716, 326, 1842, 4271, 364, 14297, 434, 326, 1651, 981, 4374, 635, 3229, 4097, 471, 10016, 3086, 3775, 3884, 716, 1240, 326, 1967, 1758, 263, 13743, 296, 272, 3661, 1846, 4825, 1960, 2973, 7410, 279, 4143, 471, 14382, 1842, 364, 326, 1375, 13374, 261, 262, 1375, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1887, 21952, 261, 262, 288, 1160, 306, 308, 1758, 2160, 273, 288, 1728, 269, 4200, 269, 5196, 269, 8063, 269, 6437, 269, 4752, 289, 274, 13217, 1887, 5318, 21, 273, 394, 13217, 1887, 261, 1758, 2160, 262, 274, 13217, 1887, 5318, 22, 273, 394, 13217, 1887, 261, 1758, 2160, 262, 274, 342, 342, 2073, 716, 13374, 353, 11071, 10279, 3229, 4097, 509, 13374, 21, 273, 5318, 21, 263, 13374, 261, 262, 274, 509, 13374, 22, 273, 5318, 21, 263, 13374, 261, 262, 274, 1815, 8867, 261, 13374, 21, 269, 13374, 22, 262, 274, 342, 342, 2073, 716, 2795, 3884, 598, 326, 1967, 1758, 501, 1240, 326, 1967, 13374, 1815, 8867, 261, 5318, 21, 263, 13374, 261, 262, 269, 5318, 22, 263, 13374, 261, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 11932, 716, 326, 1375, 13374, 261, 262, 1375, 707, 353, 8783, 8249, 316, 6548, 434, 14297, 471, 3959, 24266, 434, 3959, 501, 263, 2], "score": -0.2250819355249405, "weight": 1, "toks": ["<s>", "This", "code", "snippet", "is", "part", "of", "a", "unit", "test", "class", "for", "the", "`", "MacAddress", "`", "class", "in", "Java", ".", "The", "`", "hashCode", "(", ")", "`", "method", "in", "the", "`", "MacAddress", "`", "class", "is", "overridden", "to", "return", "a", "hash", "code", "calculated", "from", "an", "array", "called", "`", "address", "`", "(", "which", "presumably", "stores", "the", "bytes", "of", "the", "MAC", "address", ")", "using", "the", "`", "Arrays", ".", "hashCode", "(", ")", "`", "method", ".", "The", "test", "method", "named", "`", "testAddressHashCode", "(", ")", "`", "is", "supposed", "to", "test", "this", "`", "hashCode", "(", ")", "`", "method", ".", "To", "properly", "test", "the", "`", "hashCode", "(", ")", "`", "method", ",", "it", "is", "important", "that", "the", "test", "checks", "for", "consistency", "of", "the", "hash", "code", "generated", "by", "multiple", "calls", "and", "possibly", "between", "different", "instances", "that", "have", "the", "same", "address", ".", "Here", "'", "s", "how", "you", "might", "go", "about", "writing", "a", "simple", "and", "efficient", "test", "for", "the", "`", "hashCode", "(", ")", "`", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testAddressHashCode", "(", ")", "{", "byte", "[", "]", "addressBytes", "=", "{", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", "}", ";", "MacAddress", "mac1", "=", "new", "MacAddress", "(", "addressBytes", ")", ";", "MacAddress", "mac2", "=", "new", "MacAddress", "(", "addressBytes", ")", ";", "/", "/", "Check", "that", "hashCode", "is", "consistent", "across", "multiple", "calls", "int", "hashCode1", "=", "mac1", ".", "hashCode", "(", ")", ";", "int", "hashCode2", "=", "mac1", ".", "hashCode", "(", ")", ";", "assertEquals", "(", "hashCode1", ",", "hashCode2", ")", ";", "/", "/", "Check", "that", "two", "instances", "with", "the", "same", "address", "data", "have", "the", "same", "hashCode", "assertEquals", "(", "mac1", ".", "hashCode", "(", ")", ",", "mac2", ".", "hashCode", "(", ")", ")", ";", "}", "`", "`", "`", "This", "test", "ensures", "that", "the", "`", "hashCode", "(", ")", "`", "method", "is", "correctly", "implemented", "in", "terms", "of", "consistency", "and", "equal", "treatment", "of", "equal", "data", ".", "</s>"]}, {"tids": [1, 1220, 316, 1697, 87, 358, 1045, 279, 1842, 364, 326, 1375, 13374, 261, 262, 1375, 707, 316, 326, 1375, 13217, 1887, 1375, 667, 263, 13743, 296, 272, 279, 4143, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1887, 21952, 261, 262, 288, 1160, 306, 308, 1758, 2160, 273, 288, 374, 269, 404, 269, 576, 269, 890, 269, 1059, 269, 1381, 289, 274, 13217, 1887, 5318, 1887, 273, 394, 13217, 1887, 261, 1758, 2160, 262, 274, 509, 2665, 21952, 273, 5647, 263, 13374, 261, 1758, 2160, 262, 274, 1815, 8867, 261, 2665, 21952, 269, 5318, 1887, 263, 13374, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.25536900758743286, "weight": 1, "toks": ["<s>", "This", "instructs", "to", "write", "a", "test", "for", "the", "`", "hashCode", "(", ")", "`", "method", "in", "the", "`", "MacAddress", "`", "class", ".", "Here", "'", "s", "a", "simple", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testAddressHashCode", "(", ")", "{", "byte", "[", "]", "addressBytes", "=", "{", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "}", ";", "MacAddress", "macAddress", "=", "new", "MacAddress", "(", "addressBytes", ")", ";", "int", "expectedHashCode", "=", "Arrays", ".", "hashCode", "(", "addressBytes", ")", ";", "assertEquals", "(", "expectedHashCode", ",", "macAddress", ".", "hashCode", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 25395, 261, 394, 13217, 1887, 261, 394, 1160, 306, 308, 288, 1728, 269, 4200, 269, 5196, 269, 8063, 269, 6437, 269, 4752, 289, 262, 263, 13374, 261, 262, 262, 274, 2], "score": -0.26854461431503296, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "new", "MacAddress", "(", "new", "byte", "[", "]", "{", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", "}", ")", ".", "hashCode", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 394, 13217, 1887, 261, 394, 1160, 306, 308, 288, 374, 92, 1611, 269, 374, 92, 4366, 269, 374, 92, 7950, 269, 374, 92, 9599, 269, 374, 92, 6675, 269, 374, 92, 2090, 289, 262, 263, 13374, 261, 262, 262, 274, 2], "score": -0.27575767040252686, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "new", "MacAddress", "(", "new", "byte", "[", "]", "{", "0x01", ",", "0x23", ",", "0x45", ",", "0x67", ",", "0x89", ",", "0xAB", "}", ")", ".", "hashCode", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 394, 13217, 1887, 261, 394, 1160, 306, 308, 288, 1728, 269, 4200, 269, 5196, 269, 8063, 269, 6437, 269, 4752, 289, 262, 263, 13374, 261, 262, 262, 274, 2], "score": -0.2769027650356293, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "new", "MacAddress", "(", "new", "byte", "[", "]", "{", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", "}", ")", ".", "hashCode", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 11.838206121635448, "bleu-max": 44.721359549995796, "bleu-min": 7.337451206366999, "bleu-avg": 23.11527890445576, "code-bleu": 13.053289018424724, "code-bleu-max": 47.15091192276758, "code-bleu-min": 12.686920903006635, "code-bleu-avg": 26.188561708065784, "edit-sim": 51, "edit-sim-max": 80, "edit-sim-min": 44, "edit-sim-avg": 58.8, "rouge-p": 55.55555555555556, "rouge-p-max": 77.77777777777779, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 60.27777777777777, "rouge-r": 55.55555555555556, "rouge-r-max": 77.77777777777779, "rouge-r-min": 33.33333333333333, "rouge-r-avg": 58.88888888888888, "rouge-f": 55.55555505555557, "rouge-f-max": 77.77777727777779, "rouge-f-min": 33.33333283333334, "rouge-f-avg": 59.4805636562828, "num-seq": 10}, "time": 1.3664910793304443, "misc": {}}
{"id": 46, "data_id": "csn-55130", "input_stids": [1, 32315, 1071, 13217, 1887, 261, 727, 514, 5318, 1887, 262, 288, 1758, 273, 1109, 9990, 1887, 261, 5318, 1887, 262, 274, 289, 32315, 13217, 1887, 4709, 13217, 1887, 32315, 13217, 1887, 32315, 327, 2707, 1887, 274, 32315, 32315, 632, 1439, 1071, 509, 13374, 261, 262, 288, 327, 5647, 263, 13374, 261, 1758, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 1887, 21952, 261, 262, 32315, 727, 13217, 1887, 5318, 1887, 273, 394, 13217, 1887, 261, 14913, 2871, 9053, 67, 15140, 262, 274, 2], "topk": [{"tids": [1, 1375, 1375, 1375, 2252, 1815, 8867, 261, 5647, 263, 13374, 261, 5318, 1887, 263, 1758, 262, 269, 5318, 1887, 263, 13374, 261, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.0773644894361496, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "assertEquals", "(", "Arrays", ".", "hashCode", "(", "macAddress", ".", "address", ")", ",", "macAddress", ".", "hashCode", "(", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1887, 21952, 261, 262, 288, 727, 13217, 1887, 5318, 1887, 273, 394, 13217, 1887, 261, 14913, 2871, 9053, 67, 15140, 262, 274, 1815, 8867, 261, 5647, 263, 13374, 261, 5318, 1887, 263, 1758, 262, 269, 5318, 1887, 263, 13374, 261, 262, 262, 274, 289, 2], "score": -0.11411001533269882, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddressHashCode", "(", ")", "{", "final", "MacAddress", "macAddress", "=", "new", "MacAddress", "(", "MULTICAST_ADDRESS", ")", ";", "assertEquals", "(", "Arrays", ".", "hashCode", "(", "macAddress", ".", "address", ")", ",", "macAddress", ".", "hashCode", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1887, 21952, 261, 262, 288, 727, 13217, 1887, 5318, 1887, 273, 394, 13217, 1887, 261, 14913, 2871, 9053, 67, 15140, 262, 274, 1815, 8867, 261, 5647, 263, 13374, 261, 1109, 9990, 1887, 261, 14913, 2871, 9053, 67, 15140, 262, 262, 269, 5318, 1887, 263, 13374, 261, 262, 262, 274, 289, 2], "score": -0.15622791647911072, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddressHashCode", "(", ")", "{", "final", "MacAddress", "macAddress", "=", "new", "MacAddress", "(", "MULTICAST_ADDRESS", ")", ";", "assertEquals", "(", "Arrays", ".", "hashCode", "(", "parseMacAddress", "(", "MULTICAST_ADDRESS", ")", ")", ",", "macAddress", ".", "hashCode", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 25395, 261, 5318, 1887, 263, 13374, 261, 262, 262, 274, 2], "score": -0.1848277449607849, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "macAddress", ".", "hashCode", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 5318, 1887, 263, 13374, 261, 262, 262, 274, 2], "score": -0.2251025140285492, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "macAddress", ".", "hashCode", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1887, 21952, 261, 262, 288, 727, 13217, 1887, 5318, 1887, 273, 394, 13217, 1887, 261, 315, 8743, 294, 10213, 294, 12292, 294, 21017, 294, 28308, 294, 10336, 315, 262, 274, 1815, 8867, 261, 5647, 263, 13374, 261, 394, 1160, 306, 308, 288, 374, 92, 1611, 269, 374, 92, 4366, 269, 374, 92, 7950, 269, 374, 92, 9599, 269, 374, 92, 6675, 269, 261, 1160, 262, 374, 92, 2090, 289, 262, 269, 5318, 1887, 263, 13374, 261, 262, 262, 274, 289, 2], "score": -0.23294372856616974, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddressHashCode", "(", ")", "{", "final", "MacAddress", "macAddress", "=", "new", "MacAddress", "(", "\"", "01", ":", "23", ":", "45", ":", "67", ":", "89", ":", "AB", "\"", ")", ";", "assertEquals", "(", "Arrays", ".", "hashCode", "(", "new", "byte", "[", "]", "{", "0x01", ",", "0x23", ",", "0x45", ",", "0x67", ",", "0x89", ",", "(", "byte", ")", "0xAB", "}", ")", ",", "macAddress", ".", "hashCode", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1887, 21952, 261, 262, 288, 727, 13217, 1887, 5318, 1887, 273, 394, 13217, 1887, 261, 315, 14913, 2871, 9053, 67, 15140, 315, 262, 274, 342, 342, 4725, 21249, 14913, 2871, 9053, 67, 15140, 353, 279, 923, 14246, 1758, 263, 509, 2665, 21952, 273, 5647, 263, 13374, 261, 5318, 1887, 263, 1758, 262, 274, 342, 342, 1758, 4260, 358, 506, 12718, 578, 999, 279, 7060, 1815, 8867, 261, 2665, 21952, 269, 5318, 1887, 263, 13374, 261, 262, 262, 274, 289, 2], "score": -0.2825537323951721, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddressHashCode", "(", ")", "{", "final", "MacAddress", "macAddress", "=", "new", "MacAddress", "(", "\"", "MULTICAST_ADDRESS", "\"", ")", ";", "/", "/", "Assuming", "MULTICAST_ADDRESS", "is", "a", "valid", "MAC", "address", ".", "int", "expectedHashCode", "=", "Arrays", ".", "hashCode", "(", "macAddress", ".", "address", ")", ";", "/", "/", "address", "needs", "to", "be", "accessible", "or", "use", "a", "getter", "assertEquals", "(", "expectedHashCode", ",", "macAddress", ".", "hashCode", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 411, 272, 405, 632, 7766, 1071, 918, 1842, 1887, 21952, 261, 262, 288, 727, 13217, 1887, 5318, 1887, 273, 394, 13217, 1887, 261, 315, 8743, 294, 10213, 294, 12292, 294, 21017, 294, 28308, 294, 10336, 315, 262, 274, 1815, 8867, 261, 5647, 263, 13374, 261, 394, 1160, 306, 308, 288, 404, 269, 13191, 269, 20963, 269, 1728, 23, 269, 300, 27894, 269, 300, 19692, 289, 262, 269, 5318, 1887, 263, 13374, 261, 262, 262, 274, 289, 411, 342, 272, 405, 2], "score": -0.3002244234085083, "weight": 1, "toks": ["<s>", "<", "s", ">", "@", "Test", "public", "void", "testAddressHashCode", "(", ")", "{", "final", "MacAddress", "macAddress", "=", "new", "MacAddress", "(", "\"", "01", ":", "23", ":", "45", ":", "67", ":", "89", ":", "AB", "\"", ")", ";", "assertEquals", "(", "Arrays", ".", "hashCode", "(", "new", "byte", "[", "]", "{", "1", ",", "35", ",", "69", ",", "103", ",", "-", "117", ",", "-", "85", "}", ")", ",", "macAddress", ".", "hashCode", "(", ")", ")", ";", "}", "<", "/", "s", ">", "</s>"]}, {"tids": [1, 25395, 261, 5318, 1887, 263, 13374, 261, 262, 262, 274, 2], "score": -0.3141084909439087, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "macAddress", ".", "hashCode", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 5318, 1887, 263, 13374, 261, 262, 262, 274, 2], "score": -0.3378337621688843, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "macAddress", ".", "hashCode", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 52.129309241030896, "bleu-max": 72.59195233680444, "bleu-min": 36.16665088418031, "bleu-avg": 47.68565232055491, "code-bleu": 50.74527331808408, "code-bleu-max": 57.70649526301074, "code-bleu-min": 40.76374502476652, "code-bleu-avg": 47.24752221667802, "edit-sim": 76, "edit-sim-max": 86, "edit-sim-min": 60, "edit-sim-avg": 71.0, "rouge-p": 75.0, "rouge-p-max": 87.5, "rouge-p-min": 60.0, "rouge-p-avg": 71.70238095238095, "rouge-r": 75.0, "rouge-r-max": 87.5, "rouge-r-min": 62.5, "rouge-r-avg": 73.75, "rouge-f": 74.9999995, "rouge-f-max": 87.4999995, "rouge-f-min": 66.6666661688889, "rouge-f-avg": 72.47548969793044, "num-seq": 10}, "time": 1.0540988445281982, "misc": {}}
{"id": 47, "data_id": "csn-61990", "input_stids": [1, 1758, 2355, 4040, 1016, 4322, 1016, 32315, 32315, 9587, 11775, 1887, 4709, 32315, 9587, 11775, 1887, 32315, 32315, 32315, 1071, 509, 14808, 1016, 261, 262, 288, 1620, 261, 1758, 2355, 262, 288, 648, 432, 43, 2222, 294, 327, 4040, 1016, 274, 648, 17062, 654, 294, 327, 4322, 1016, 274, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 967, 1887, 1016, 67, 2080, 3630, 261, 262, 32315, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1887, 1016, 67, 2080, 6671, 261, 262, 288, 9587, 11775, 1887, 1758, 273, 394, 9587, 11775, 1887, 261, 5267, 2355, 263, 17062, 654, 269, 374, 269, 404, 262, 274, 1815, 8867, 261, 404, 269, 1758, 263, 14808, 1016, 261, 262, 262, 274, 289, 2], "score": -0.18094703555107117, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetAddressIndex_fromWorker", "(", ")", "{", "SimulatorAddress", "address", "=", "new", "SimulatorAddress", "(", "AddressLevel", ".", "WORKER", ",", "0", ",", "1", ")", ";", "assertEquals", "(", "1", ",", "address", ".", "getAddressIndex", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1887, 1016, 67, 2080, 6671, 261, 262, 288, 9587, 11775, 1887, 1758, 273, 394, 9587, 11775, 1887, 261, 5267, 2355, 263, 17062, 654, 269, 374, 269, 404, 262, 274, 1815, 8867, 261, 404, 269, 1758, 263, 14808, 1016, 261, 262, 262, 274, 289, 2], "score": -0.2604749798774719, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetAddressIndex_fromWorker", "(", ")", "{", "SimulatorAddress", "address", "=", "new", "SimulatorAddress", "(", "AddressLevel", ".", "WORKER", ",", "0", ",", "1", ")", ";", "assertEquals", "(", "1", ",", "address", ".", "getAddressIndex", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 1815, 8867, 261, 404, 269, 3142, 11775, 1887, 263, 14808, 1016, 261, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.2780863642692566, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "assertEquals", "(", "1", ",", "simulatorAddress", ".", "getAddressIndex", "(", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 1815, 8867, 261, 4040, 1016, 269, 3142, 11775, 1887, 263, 14808, 1016, 261, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.2982855439186096, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "assertEquals", "(", "agentIndex", ",", "simulatorAddress", ".", "getAddressIndex", "(", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1887, 1016, 67, 2080, 6671, 261, 262, 288, 9587, 11775, 1887, 1758, 273, 394, 9587, 11775, 1887, 261, 9587, 11775, 1887, 263, 17062, 654, 269, 374, 269, 404, 262, 274, 1815, 8867, 261, 404, 269, 1758, 263, 14808, 1016, 261, 262, 262, 274, 289, 2], "score": -0.3636881113052368, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetAddressIndex_fromWorker", "(", ")", "{", "SimulatorAddress", "address", "=", "new", "SimulatorAddress", "(", "SimulatorAddress", ".", "WORKER", ",", "0", ",", "1", ")", ";", "assertEquals", "(", "1", ",", "address", ".", "getAddressIndex", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1887, 1016, 67, 2080, 6671, 261, 262, 288, 9587, 11775, 1887, 1758, 273, 394, 9587, 11775, 1887, 261, 5267, 2355, 263, 17062, 654, 269, 374, 269, 404, 262, 274, 1815, 8867, 261, 404, 269, 1758, 263, 14808, 1016, 261, 262, 262, 274, 289, 2], "score": -0.36743417382240295, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetAddressIndex_fromWorker", "(", ")", "{", "SimulatorAddress", "address", "=", "new", "SimulatorAddress", "(", "AddressLevel", ".", "WORKER", ",", "0", ",", "1", ")", ";", "assertEquals", "(", "1", ",", "address", ".", "getAddressIndex", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1887, 1016, 67, 2080, 6671, 261, 262, 288, 9587, 11775, 1887, 1758, 273, 394, 9587, 11775, 1887, 261, 5267, 2355, 263, 17062, 654, 269, 374, 269, 1381, 262, 274, 1815, 8867, 261, 1381, 269, 1758, 263, 14808, 1016, 261, 262, 262, 274, 289, 2], "score": -0.37745195627212524, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetAddressIndex_fromWorker", "(", ")", "{", "SimulatorAddress", "address", "=", "new", "SimulatorAddress", "(", "AddressLevel", ".", "WORKER", ",", "0", ",", "5", ")", ";", "assertEquals", "(", "5", ",", "address", ".", "getAddressIndex", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1887, 1016, 67, 2080, 6671, 261, 262, 288, 9587, 11775, 1887, 1758, 273, 394, 9587, 11775, 1887, 261, 262, 274, 1758, 263, 1758, 2355, 273, 5267, 2355, 263, 17062, 654, 274, 1758, 263, 4322, 1016, 273, 1381, 274, 509, 563, 273, 1758, 263, 14808, 1016, 261, 262, 274, 1815, 8867, 261, 1381, 269, 563, 262, 274, 289, 2], "score": -0.38294947147369385, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetAddressIndex_fromWorker", "(", ")", "{", "SimulatorAddress", "address", "=", "new", "SimulatorAddress", "(", ")", ";", "address", ".", "addressLevel", "=", "AddressLevel", ".", "WORKER", ";", "address", ".", "workerIndex", "=", "5", ";", "int", "result", "=", "address", ".", "getAddressIndex", "(", ")", ";", "assertEquals", "(", "5", ",", "result", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 1815, 8867, 261, 2665, 3630, 1016, 269, 3142, 11775, 1887, 263, 14808, 1016, 261, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.390580952167511, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "assertEquals", "(", "expectedAgentIndex", ",", "simulatorAddress", ".", "getAddressIndex", "(", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 1815, 8867, 261, 3142, 11775, 1887, 263, 14808, 1016, 261, 262, 269, 4040, 1016, 262, 274, 2], "score": -0.3958280682563782, "weight": 1, "toks": ["<s>", "assertEquals", "(", "simulatorAddress", ".", "getAddressIndex", "(", ")", ",", "agentIndex", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 11.362723791274826, "bleu-max": 45.1408995717323, "bleu-min": 11.362723791274826, "bleu-avg": 15.705634050169726, "code-bleu": 6.709004753491812, "code-bleu-max": 31.281462798763833, "code-bleu-min": 2.400389092188322, "code-bleu-avg": 6.615183375477717, "edit-sim": 50, "edit-sim-max": 83, "edit-sim-min": 46, "edit-sim-avg": 52.4, "rouge-p": 42.857142857142854, "rouge-p-max": 66.66666666666666, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 40.26082251082251, "rouge-r": 37.5, "rouge-r-max": 75.0, "rouge-r-min": 37.5, "rouge-r-avg": 45.0, "rouge-f": 39.999999502222224, "rouge-f-max": 70.58823479584775, "rouge-f-min": 35.294117148788935, "rouge-f-avg": 42.26255540379965, "num-seq": 10}, "time": 0.7322998046875, "misc": {}}
{"id": 48, "data_id": "csn-62228", "input_stids": [1, 32315, 32315, 7766, 1318, 4709, 32315, 5835, 3603, 11406, 2988, 32315, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1185, 13289, 263, 2715, 261, 262, 274, 729, 1621, 273, 3875, 25462, 1299, 1621, 261, 262, 274, 1438, 273, 5416, 261, 3224, 263, 667, 262, 274, 3419, 273, 5416, 261, 9396, 263, 667, 262, 274, 1347, 261, 3419, 263, 15885, 1442, 261, 262, 262, 263, 1508, 990, 261, 5416, 261, 11551, 1442, 263, 667, 262, 262, 274, 3301, 273, 394, 7766, 1318, 261, 1438, 269, 3419, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 28196, 25462, 1299, 1621, 261, 262, 274, 289, 32315, 1071, 918, 787, 4709, 11406, 261, 3603, 11406, 2988, 1061, 269, 5835, 5109, 262, 1216, 1185, 288, 7766, 11406, 1842, 11406, 273, 1061, 263, 29384, 11406, 261, 262, 274, 514, 1842, 548, 273, 1061, 263, 29384, 548, 261, 262, 274, 7766, 2170, 1842, 2170, 273, 7434, 263, 336, 261, 1842, 548, 262, 274, 309, 261, 1842, 2170, 422, 446, 262, 288, 604, 394, 2754, 261, 740, 261, 315, 3902, 6, 269, 1842, 11406, 269, 1842, 548, 262, 262, 274, 289, 394, 7766, 11406, 3830, 261, 1842, 2170, 269, 1842, 11406, 269, 1842, 548, 269, 5109, 262, 263, 787, 261, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 32315, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 67, 1918, 1941, 4709, 548, 67, 15069, 503, 261, 262, 288, 3603, 11406, 2988, 1674, 273, 394, 3603, 11406, 2988, 261, 7766, 11406, 263, 15484, 269, 315, 2057, 4709, 548, 315, 262, 274, 5835, 5109, 273, 5416, 261, 5835, 263, 667, 262, 274, 1815, 21845, 261, 2754, 263, 667, 269, 261, 262, 300, 405, 3301, 263, 787, 4709, 11406, 261, 1674, 269, 5109, 262, 262, 274, 289, 2], "score": -0.26915544271469116, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "test_startRun_withInvalidTestId_throwsException", "(", ")", "{", "StartPhaseOperation", "operation", "=", "new", "StartPhaseOperation", "(", "TestPhase", ".", "RUN", ",", "\"", "invalidTestId", "\"", ")", ";", "Promise", "promise", "=", "mock", "(", "Promise", ".", "class", ")", ";", "assertThrows", "(", "IllegalArgumentException", ".", "class", ",", "(", ")", "-", ">", "manager", ".", "startTestPhase", "(", "operation", ",", "promise", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 657, 326, 1842, 707, 1375, 1842, 67, 1937, 1997, 261, 262, 1375, 269, 1846, 1410, 10275, 1375, 3603, 11406, 2988, 1375, 471, 1375, 5835, 1375, 269, 444, 4573, 924, 269, 471, 4356, 1375, 787, 4709, 11406, 261, 262, 1375, 358, 1842, 326, 10766, 1625, 326, 7278, 1674, 7597, 2887, 19440, 1281, 4798, 269, 15144, 1842, 316, 26150, 353, 8783, 444, 731, 263, 13743, 296, 272, 3661, 518, 3377, 2324, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 288, 342, 342, 10939, 1842, 501, 3603, 11406, 2988, 1061, 273, 5416, 261, 3603, 11406, 2988, 263, 667, 262, 274, 5835, 5109, 273, 5416, 261, 5835, 263, 667, 262, 274, 7766, 11406, 1842, 11406, 273, 7766, 11406, 263, 15484, 274, 514, 1842, 548, 273, 315, 1842, 548, 12936, 315, 274, 342, 342, 10939, 15895, 6885, 1347, 261, 1061, 263, 29384, 11406, 261, 262, 262, 263, 1508, 990, 261, 1842, 11406, 262, 274, 1347, 261, 1061, 263, 29384, 548, 261, 262, 262, 263, 1508, 990, 261, 1842, 548, 262, 274, 7766, 2170, 1842, 2170, 273, 5416, 261, 7766, 2170, 263, 667, 262, 274, 1347, 261, 7434, 263, 336, 261, 1842, 548, 262, 262, 263, 1508, 990, 261, 1842, 2170, 262, 274, 342, 342, 3049, 326, 707, 3613, 1842, 3301, 263, 787, 4709, 11406, 261, 1061, 269, 5109, 262, 274, 342, 342, 8553, 23877, 471, 919, 3929, 261, 7434, 269, 4124, 261, 404, 262, 262, 263, 336, 261, 1842, 548, 262, 274, 3929, 261, 5109, 269, 5903, 261, 262, 262, 263, 444, 5247, 261, 1281, 261, 1185, 263, 667, 262, 262, 274, 289, 1375, 1375, 1375, 4344, 3071, 333, 1842, 7155, 281, 603, 326, 10766, 434, 5023, 326, 15484, 6855, 364, 279, 923, 1842, 648, 2887, 8296, 263, 2], "score": -0.3206762671470642, "weight": 1, "toks": ["<s>", "In", "the", "test", "method", "`", "test_startRun", "(", ")", "`", ",", "you", "should", "instantiate", "`", "StartPhaseOperation", "`", "and", "`", "Promise", "`", ",", "set", "necessary", "values", ",", "and", "invoke", "`", "startTestPhase", "(", ")", "`", "to", "test", "the", "scenario", "where", "the", "entire", "operation", "runs", "without", "throwing", "any", "exceptions", ",", "assuming", "test", "infrastructure", "is", "correctly", "set", "up", ".", "Here", "'", "s", "how", "it", "could", "look", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "test_startRun", "(", ")", "throws", "Exception", "{", "/", "/", "Setup", "test", "data", "StartPhaseOperation", "op", "=", "mock", "(", "StartPhaseOperation", ".", "class", ")", ";", "Promise", "promise", "=", "mock", "(", "Promise", ".", "class", ")", ";", "TestPhase", "testPhase", "=", "TestPhase", ".", "RUN", ";", "String", "testId", "=", "\"", "testId123", "\"", ";", "/", "/", "Setup", "mocks", "behavior", "when", "(", "op", ".", "getTestPhase", "(", ")", ")", ".", "thenReturn", "(", "testPhase", ")", ";", "when", "(", "op", ".", "getTestId", "(", ")", ")", ".", "thenReturn", "(", "testId", ")", ";", "TestContainer", "testContainer", "=", "mock", "(", "TestContainer", ".", "class", ")", ";", "when", "(", "tests", ".", "get", "(", "testId", ")", ")", ".", "thenReturn", "(", "testContainer", ")", ";", "/", "/", "Call", "the", "method", "under", "test", "manager", ".", "startTestPhase", "(", "op", ",", "promise", ")", ";", "/", "/", "Verify", "interactions", "and", "state", "verify", "(", "tests", ",", "times", "(", "1", ")", ")", ".", "get", "(", "testId", ")", ";", "verify", "(", "promise", ",", "never", "(", ")", ")", ".", "setFailure", "(", "any", "(", "Exception", ".", "class", ")", ")", ";", "}", "`", "`", "`", "Make", "sure", "this", "test", "focuses", "on", "the", "scenario", "of", "starting", "the", "RUN", "phase", "for", "a", "valid", "test", "case", "without", "issues", ".", "</s>"]}, {"tids": [1, 787, 1997, 1410, 787, 326, 1086, 6855, 434, 279, 1842, 263, 2], "score": -0.3297483026981354, "weight": 1, "toks": ["<s>", "startRun", "should", "start", "the", "run", "phase", "of", "a", "test", ".", "</s>"]}, {"tids": [1, 657, 333, 981, 13016, 269, 326, 1375, 1842, 67, 1937, 1997, 261, 262, 1375, 707, 1410, 4356, 326, 1375, 787, 4709, 11406, 1375, 707, 598, 5505, 1472, 358, 3387, 716, 518, 11752, 326, 5023, 434, 326, 1842, 6855, 8783, 471, 7372, 326, 22456, 487, 2665, 263, 13743, 353, 326, 1024, 3021, 358, 527, 358, 326, 1842, 707, 294, 1375, 1375, 1375, 2252, 787, 4709, 11406, 261, 394, 3603, 11406, 2988, 261, 7766, 11406, 263, 15484, 269, 315, 1842, 548, 21, 315, 262, 269, 394, 5835, 261, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.3380264639854431, "weight": 1, "toks": ["<s>", "In", "this", "code", "snippet", ",", "the", "`", "test_startRun", "(", ")", "`", "method", "should", "invoke", "the", "`", "startTestPhase", "`", "method", "with", "appropriate", "parameters", "to", "ensure", "that", "it", "triggers", "the", "starting", "of", "the", "test", "phase", "correctly", "and", "handles", "the", "scenarios", "as", "expected", ".", "Here", "is", "the", "next", "statement", "to", "add", "to", "the", "test", "method", ":", "`", "`", "`", "java", "startTestPhase", "(", "new", "StartPhaseOperation", "(", "TestPhase", ".", "RUN", ",", "\"", "testId1", "\"", ")", ",", "new", "Promise", "(", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 11672, 5023, 326, 1842, 648, 1375, 1842, 67, 1937, 1997, 1375, 269, 3387, 716, 326, 1375, 7766, 1318, 1375, 353, 8783, 17651, 598, 923, 3884, 434, 1375, 3224, 1375, 471, 1375, 9396, 1375, 269, 471, 326, 4573, 15895, 854, 8208, 263, 1220, 3875, 21814, 316, 7155, 310, 3433, 1842, 3704, 2357, 603, 326, 14176, 434, 326, 1375, 787, 4709, 11406, 1375, 707, 3613, 2212, 1674, 4636, 269, 1625, 326, 1375, 7766, 2170, 1375, 1704, 364, 326, 2112, 1375, 1842, 548, 1375, 263, 2], "score": -0.3468427360057831, "weight": 1, "toks": ["<s>", "Before", "starting", "the", "test", "case", "`", "test_startRun", "`", ",", "ensure", "that", "the", "`", "TestManager", "`", "is", "correctly", "instantiated", "with", "valid", "instances", "of", "`", "Server", "`", "and", "`", "Driver", "`", ",", "and", "the", "necessary", "mocks", "are", "prepared", ".", "This", "setup", "helps", "in", "focusing", "your", "test", "solely", "on", "the", "functionality", "of", "the", "`", "startTestPhase", "`", "method", "under", "normal", "operation", "conditions", ",", "where", "the", "`", "TestContainer", "`", "exists", "for", "the", "provided", "`", "testId", "`", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 288, 3603, 11406, 2988, 1674, 273, 394, 3603, 11406, 2988, 261, 7766, 11406, 263, 15484, 269, 315, 1842, 548, 21, 315, 262, 274, 5835, 5109, 273, 394, 5835, 261, 262, 274, 787, 4709, 11406, 261, 1674, 269, 5109, 262, 274, 289, 2], "score": -0.3501470386981964, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "test_startRun", "(", ")", "throws", "Exception", "{", "StartPhaseOperation", "operation", "=", "new", "StartPhaseOperation", "(", "TestPhase", ".", "RUN", ",", "\"", "testId1", "\"", ")", ";", "Promise", "promise", "=", "new", "Promise", "(", ")", ";", "startTestPhase", "(", "operation", ",", "promise", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 1685, 4709, 11406, 1190, 1556, 2988, 261, 262, 288, 342, 342, 10371, 726, 3603, 11406, 2988, 1674, 273, 394, 3603, 11406, 2988, 261, 7766, 11406, 263, 15484, 269, 315, 1842, 548, 21, 315, 262, 274, 5835, 5109, 273, 5416, 261, 5835, 263, 667, 262, 274, 342, 342, 4603, 3301, 263, 787, 4709, 11406, 261, 1674, 269, 5109, 262, 274, 342, 342, 5452, 3929, 261, 5109, 262, 263, 16136, 7540, 261, 262, 274, 289, 2], "score": -0.35816189646720886, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldStartTestPhaseWithValidOperation", "(", ")", "{", "/", "/", "Arrange", "StartPhaseOperation", "operation", "=", "new", "StartPhaseOperation", "(", "TestPhase", ".", "RUN", ",", "\"", "testId1", "\"", ")", ";", "Promise", "promise", "=", "mock", "(", "Promise", ".", "class", ")", ";", "/", "/", "Act", "manager", ".", "startTestPhase", "(", "operation", ",", "promise", ")", ";", "/", "/", "Assert", "verify", "(", "promise", ")", ".", "fulfil", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 67, 13139, 1685, 4709, 11406, 261, 262, 1216, 1185, 288, 3603, 11406, 2988, 1674, 273, 394, 3603, 11406, 2988, 261, 7766, 11406, 263, 15484, 269, 315, 1842, 548, 21, 315, 262, 274, 5835, 5109, 273, 5416, 261, 5835, 263, 667, 262, 274, 3301, 263, 787, 4709, 11406, 261, 1674, 269, 5109, 262, 274, 3929, 261, 5109, 262, 263, 22290, 261, 1281, 261, 262, 262, 274, 289, 2], "score": -0.5700647234916687, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "test_startRun_shouldStartTestPhase", "(", ")", "throws", "Exception", "{", "StartPhaseOperation", "operation", "=", "new", "StartPhaseOperation", "(", "TestPhase", ".", "RUN", ",", "\"", "testId1", "\"", ")", ";", "Promise", "promise", "=", "mock", "(", "Promise", ".", "class", ")", ";", "manager", ".", "startTestPhase", "(", "operation", ",", "promise", ")", ";", "verify", "(", "promise", ")", ".", "fulfill", "(", "any", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1685, 1997, 11406, 2988, 261, 262, 1216, 1185, 288, 3603, 11406, 2988, 1674, 273, 394, 3603, 11406, 2988, 261, 7766, 11406, 263, 15484, 269, 315, 1842, 548, 315, 262, 274, 5835, 5109, 273, 394, 5835, 261, 262, 274, 3301, 263, 787, 4709, 11406, 261, 1674, 269, 5109, 262, 274, 289, 2], "score": -0.593357503414154, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testStartRunPhaseOperation", "(", ")", "throws", "Exception", "{", "StartPhaseOperation", "operation", "=", "new", "StartPhaseOperation", "(", "TestPhase", ".", "RUN", ",", "\"", "testId", "\"", ")", ";", "Promise", "promise", "=", "new", "Promise", "(", ")", ";", "manager", ".", "startTestPhase", "(", "operation", ",", "promise", ")", ";", "}", "</s>"]}, {"tids": [1, 657, 326, 1375, 1842, 67, 1937, 1997, 261, 262, 1375, 707, 269, 1846, 1410, 4356, 1375, 787, 4709, 11406, 1375, 598, 279, 7168, 2992, 1375, 3603, 11406, 2988, 1375, 471, 279, 5416, 1375, 5835, 1375, 269, 471, 3929, 309, 326, 1375, 7766, 11406, 3830, 1375, 353, 5746, 8783, 263, 13743, 353, 392, 3454, 1842, 648, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 288, 342, 342, 10939, 3603, 11406, 2988, 1061, 273, 5416, 261, 3603, 11406, 2988, 263, 667, 262, 274, 5835, 5109, 273, 5416, 261, 5835, 263, 667, 262, 274, 7766, 11406, 1842, 11406, 273, 7766, 11406, 263, 15484, 274, 514, 1842, 548, 273, 315, 1842, 548, 21, 315, 274, 7766, 2170, 1842, 2170, 273, 5416, 261, 7766, 2170, 263, 667, 262, 274, 1347, 261, 1061, 263, 29384, 11406, 261, 262, 262, 263, 1508, 990, 261, 1842, 11406, 262, 274, 1347, 261, 1061, 263, 29384, 548, 261, 262, 262, 263, 1508, 990, 261, 1842, 548, 262, 274, 1347, 261, 7434, 263, 336, 261, 1842, 548, 262, 262, 263, 1508, 990, 261, 1842, 2170, 262, 274, 342, 342, 4382, 3301, 263, 787, 4709, 11406, 261, 1061, 269, 5109, 262, 274, 342, 342, 5452, 3929, 261, 1842, 2170, 262, 263, 787, 4709, 11406, 3830, 261, 1842, 11406, 269, 1842, 548, 269, 5109, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 4271, 309, 326, 1375, 787, 4709, 11406, 1375, 353, 8214, 5057, 326, 4540, 471, 1208, 22906, 326, 1375, 7766, 11406, 3830, 1375, 598, 3434, 1472, 263, 17720, 5416, 3875, 87, 471, 7820, 2511, 603, 3433, 3214, 16164, 471, 707, 21399, 263, 2], "score": -0.5950977206230164, "weight": 1, "toks": ["<s>", "In", "the", "`", "test_startRun", "(", ")", "`", "method", ",", "you", "should", "invoke", "`", "startTestPhase", "`", "with", "a", "stubbed", "`", "StartPhaseOperation", "`", "and", "a", "mock", "`", "Promise", "`", ",", "and", "verify", "if", "the", "`", "TestPhaseThread", "`", "is", "started", "correctly", ".", "Here", "is", "an", "example", "test", "case", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "test_startRun", "(", ")", "throws", "Exception", "{", "/", "/", "Setup", "StartPhaseOperation", "op", "=", "mock", "(", "StartPhaseOperation", ".", "class", ")", ";", "Promise", "promise", "=", "mock", "(", "Promise", ".", "class", ")", ";", "TestPhase", "testPhase", "=", "TestPhase", ".", "RUN", ";", "String", "testId", "=", "\"", "testId1", "\"", ";", "TestContainer", "testContainer", "=", "mock", "(", "TestContainer", ".", "class", ")", ";", "when", "(", "op", ".", "getTestPhase", "(", ")", ")", ".", "thenReturn", "(", "testPhase", ")", ";", "when", "(", "op", ".", "getTestId", "(", ")", ")", ".", "thenReturn", "(", "testId", ")", ";", "when", "(", "tests", ".", "get", "(", "testId", ")", ")", ".", "thenReturn", "(", "testContainer", ")", ";", "/", "/", "Action", "manager", ".", "startTestPhase", "(", "op", ",", "promise", ")", ";", "/", "/", "Assert", "verify", "(", "testContainer", ")", ".", "startTestPhaseThread", "(", "testPhase", ",", "testId", ",", "promise", ")", ";", "}", "`", "`", "`", "This", "test", "checks", "if", "the", "`", "startTestPhase", "`", "is", "properly", "handling", "the", "inputs", "and", "initiating", "the", "`", "TestPhaseThread", "`", "with", "correct", "parameters", ".", "Adjust", "mock", "setups", "and", "assertions", "based", "on", "your", "actual", "implementations", "and", "method", "behaviors", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 13.60033712205879, "bleu-max": 13.60033712205879, "bleu-min": 0.5791913568955529, "bleu-avg": 8.586657780475868, "code-bleu": 10.657724339376335, "code-bleu-max": 14.387090141943537, "code-bleu-min": 2.764919778155301, "code-bleu-avg": 6.250029956275498, "edit-sim": 44, "edit-sim-max": 52, "edit-sim-min": 26, "edit-sim-avg": 41.3, "rouge-p": 45.45454545454545, "rouge-p-max": 71.42857142857143, "rouge-p-min": 23.809523809523807, "rouge-p-avg": 46.21150950498776, "rouge-r": 38.46153846153847, "rouge-r-max": 46.15384615384615, "rouge-r-min": 23.076923076923077, "rouge-r-avg": 39.23076923076923, "rouge-f": 41.66666617013889, "rouge-f-max": 49.99999954500001, "rouge-f-min": 29.411764233564014, "rouge-f-avg": 40.591969646130714, "num-seq": 10}, "time": 1.802973747253418, "misc": {}}
{"id": 49, "data_id": "csn-62228", "input_stids": [1, 32315, 1071, 7766, 2449, 7486, 261, 514, 508, 269, 1033, 331, 262, 288, 514, 460, 273, 331, 1276, 1659, 692, 261, 261, 1659, 262, 331, 262, 263, 1723, 261, 262, 294, 331, 263, 1762, 261, 262, 274, 327, 7486, 261, 508, 269, 460, 262, 274, 289, 32315, 7766, 1318, 4709, 7766, 2449, 32315, 5835, 3603, 11406, 2988, 32315, 1272, 5250, 263, 1993, 261, 333, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1185, 13289, 263, 2715, 261, 262, 274, 729, 1621, 273, 3875, 25462, 1299, 1621, 261, 262, 274, 1438, 273, 5416, 261, 3224, 263, 667, 262, 274, 3419, 273, 5416, 261, 9396, 263, 667, 262, 274, 1347, 261, 3419, 263, 15885, 1442, 261, 262, 262, 263, 1508, 990, 261, 5416, 261, 11551, 1442, 263, 667, 262, 262, 274, 3301, 273, 394, 7766, 1318, 261, 1438, 269, 3419, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 28196, 25462, 1299, 1621, 261, 262, 274, 289, 32315, 1071, 918, 787, 4709, 11406, 261, 3603, 11406, 2988, 1061, 269, 5835, 5109, 262, 1216, 1185, 288, 7766, 11406, 1842, 11406, 273, 1061, 263, 29384, 11406, 261, 262, 274, 514, 1842, 548, 273, 1061, 263, 29384, 548, 261, 262, 274, 7766, 2170, 1842, 2170, 273, 7434, 263, 336, 261, 1842, 548, 262, 274, 309, 261, 1842, 2170, 422, 446, 262, 288, 604, 394, 2754, 261, 740, 261, 315, 3902, 6, 269, 1842, 11406, 269, 1842, 548, 262, 262, 274, 289, 394, 7766, 11406, 3830, 261, 1842, 2170, 269, 1842, 11406, 269, 1842, 548, 269, 5109, 262, 263, 787, 261, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 32315, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 315, 3902, 6, 262, 263, 7486, 261, 315, 3902, 6, 269, 404, 262, 263, 7486, 261, 315, 3902, 6, 269, 5131, 1382, 4709, 263, 667, 262, 274, 2], "topk": [{"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 288, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 315, 7128, 315, 262, 263, 7486, 261, 315, 7128, 315, 269, 404, 262, 263, 7486, 261, 315, 7128, 315, 269, 5131, 1382, 4709, 263, 667, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2596324682235718, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "test_startRun", "(", ")", "throws", "Exception", "{", "TestCase", "testCase", "=", "new", "TestCase", "(", "\"", "STR", "\"", ")", ".", "setProperty", "(", "\"", "STR", "\"", ",", "1", ")", ".", "setProperty", "(", "\"", "STR", "\"", ",", "StoppingTest", ".", "class", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 1396, 1190, 19733, 261, 262, 288, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 262, 274, 1842, 2449, 263, 7486, 261, 315, 7766, 653, 315, 269, 315, 18595, 315, 262, 274, 1815, 8867, 261, 315, 18595, 315, 269, 1842, 2449, 263, 3911, 261, 315, 7766, 653, 315, 262, 262, 274, 289, 2], "score": -0.26822784543037415, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetPropertyWithStringValue", "(", ")", "{", "TestCase", "testCase", "=", "new", "TestCase", "(", ")", ";", "testCase", ".", "setProperty", "(", "\"", "TestKey", "\"", ",", "\"", "StringValue", "\"", ")", ";", "assertEquals", "(", "\"", "StringValue", "\"", ",", "testCase", ".", "getProperty", "(", "\"", "TestKey", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 288, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 315, 7128, 315, 262, 263, 7486, 261, 315, 7128, 315, 269, 404, 262, 263, 7486, 261, 315, 7128, 315, 269, 5131, 1382, 4709, 263, 667, 262, 274, 289, 2], "score": -0.2799197733402252, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "test_startRun", "(", ")", "throws", "Exception", "{", "TestCase", "testCase", "=", "new", "TestCase", "(", "\"", "STR", "\"", ")", ".", "setProperty", "(", "\"", "STR", "\"", ",", "1", ")", ".", "setProperty", "(", "\"", "STR", "\"", ",", "StoppingTest", ".", "class", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 1396, 1190, 19733, 261, 262, 288, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 315, 7766, 461, 315, 262, 274, 1842, 2449, 263, 7486, 261, 315, 5090, 1396, 315, 269, 315, 18595, 315, 262, 274, 289, 2], "score": -0.2971652150154114, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetPropertyWithStringValue", "(", ")", "{", "TestCase", "testCase", "=", "new", "TestCase", "(", "\"", "TestName", "\"", ")", ";", "testCase", ".", "setProperty", "(", "\"", "ExampleProperty", "\"", ",", "\"", "StringValue", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 288, 3603, 11406, 2988, 1061, 273, 394, 3603, 11406, 2988, 261, 7766, 11406, 263, 15484, 269, 315, 7128, 315, 262, 274, 5835, 5109, 273, 394, 5835, 2828, 261, 262, 274, 3301, 263, 787, 4709, 11406, 261, 1061, 269, 5109, 262, 274, 289, 2], "score": -0.3096814751625061, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "test_startRun", "(", ")", "throws", "Exception", "{", "StartPhaseOperation", "op", "=", "new", "StartPhaseOperation", "(", "TestPhase", ".", "RUN", ",", "\"", "STR", "\"", ")", ";", "Promise", "promise", "=", "new", "PromiseImpl", "(", ")", ";", "manager", ".", "startTestPhase", "(", "op", ",", "promise", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 1842, 326, 707, 1375, 7486, 261, 514, 508, 269, 1033, 331, 262, 1375, 316, 326, 819, 434, 3433, 2112, 981, 13016, 269, 732, 1410, 279, 381, 364, 279, 16745, 2836, 1842, 716, 20761, 3937, 11483, 434, 326, 11139, 4058, 2511, 603, 326, 618, 434, 326, 2205, 1237, 2275, 358, 1375, 7486, 1375, 263, 13743, 353, 279, 22168, 20570, 784, 1842, 707, 716, 4271, 3937, 28474, 1625, 326, 1237, 1375, 331, 1375, 353, 279, 667, 618, 471, 1625, 518, 296, 272, 486, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 1396, 261, 262, 288, 342, 342, 10939, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 315, 7128, 315, 262, 274, 342, 342, 4382, 471, 5452, 364, 1661, 300, 667, 618, 1842, 2449, 263, 7486, 261, 315, 2144, 620, 315, 269, 404, 262, 274, 1815, 8867, 261, 315, 404, 315, 269, 1842, 2449, 263, 3911, 261, 315, 2144, 620, 315, 262, 262, 274, 342, 342, 4725, 21249, 3911, 353, 8249, 342, 342, 4382, 471, 5452, 364, 667, 618, 1842, 2449, 263, 7486, 261, 315, 1659, 620, 315, 269, 5131, 1382, 4709, 263, 667, 262, 274, 1815, 8867, 261, 5131, 1382, 4709, 263, 667, 263, 1723, 261, 262, 269, 1842, 2449, 263, 3911, 261, 315, 1659, 620, 315, 262, 262, 274, 342, 342, 4725, 21249, 3911, 353, 8249, 289, 1375, 1375, 1375, 657, 333, 2836, 1842, 269, 15144, 1915, 854, 7060, 2590, 578, 1308, 16226, 358, 5334, 326, 1790, 444, 603, 326, 1375, 7766, 2449, 1375, 733, 269, 732, 294, 404, 263, 1788, 392, 791, 434, 1375, 7766, 2449, 1375, 263, 576, 263, 1000, 2795, 1790, 603, 716, 791, 294, 1245, 598, 392, 3571, 471, 1245, 598, 279, 667, 2114, 263, 890, 263, 5452, 716, 326, 1790, 4591, 444, 8783, 263, 7693, 4573, 10095, 471, 3330, 3875, 854, 316, 3166, 358, 2865, 333, 1842, 269, 471, 3387, 716, 326, 1375, 3911, 261, 514, 498, 262, 1375, 707, 261, 578, 7281, 12860, 262, 353, 2319, 364, 6728, 326, 1272, 924, 263, 3609, 294, 7897, 326, 1375, 7486, 1375, 707, 1135, 392, 791, 434, 1375, 7766, 2449, 1375, 269, 1846, 848, 2546, 2687, 4259, 1272, 1947, 269, 1496, 364, 927, 20498, 316, 7769, 326, 6826, 1301, 471, 2665, 1686, 269, 518, 296, 272, 16337, 25933, 358, 9004, 2182, 263, 8080, 269, 1453, 1375, 315, 2144, 620, 315, 1375, 471, 1375, 315, 1659, 620, 315, 1375, 598, 15098, 1311, 1846, 4489, 316, 3433, 2863, 2521, 10766, 263, 2], "score": -0.3123968541622162, "weight": 1, "toks": ["<s>", "To", "test", "the", "method", "`", "setProperty", "(", "String", "name", ",", "Object", "v", ")", "`", "in", "the", "context", "of", "your", "provided", "code", "snippet", ",", "we", "should", "aim", "for", "a", "minimal", "unit", "test", "that", "verifies", "both", "branches", "of", "the", "conditional", "logic", "based", "on", "the", "type", "of", "the", "second", "argument", "passed", "to", "`", "setProperty", "`", ".", "Here", "is", "a", "suggested", "concise", "test", "method", "that", "checks", "both", "situations", "where", "the", "argument", "`", "v", "`", "is", "a", "class", "type", "and", "where", "it", "'", "s", "not", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetProperty", "(", ")", "{", "/", "/", "Setup", "TestCase", "testCase", "=", "new", "TestCase", "(", "\"", "STR", "\"", ")", ";", "/", "/", "Action", "and", "Assert", "for", "non", "-", "class", "type", "testCase", ".", "setProperty", "(", "\"", "IntegerValue", "\"", ",", "1", ")", ";", "assertEquals", "(", "\"", "1", "\"", ",", "testCase", ".", "getProperty", "(", "\"", "IntegerValue", "\"", ")", ")", ";", "/", "/", "Assuming", "getProperty", "is", "implemented", "/", "/", "Action", "and", "Assert", "for", "class", "type", "testCase", ".", "setProperty", "(", "\"", "ClassValue", "\"", ",", "StoppingTest", ".", "class", ")", ";", "assertEquals", "(", "StoppingTest", ".", "class", ".", "getName", "(", ")", ",", "testCase", ".", "getProperty", "(", "\"", "ClassValue", "\"", ")", ")", ";", "/", "/", "Assuming", "getProperty", "is", "implemented", "}", "`", "`", "`", "In", "this", "unit", "test", ",", "assuming", "there", "are", "getter", "methods", "or", "other", "ways", "to", "inspect", "the", "properties", "set", "on", "the", "`", "TestCase", "`", "object", ",", "we", ":", "1", ".", "Create", "an", "instance", "of", "`", "TestCase", "`", ".", "2", ".", "Set", "two", "properties", "on", "that", "instance", ":", "one", "with", "an", "integer", "and", "one", "with", "a", "class", "reference", ".", "3", ".", "Assert", "that", "the", "properties", "were", "set", "correctly", ".", "Ensure", "necessary", "imports", "and", "environment", "setup", "are", "in", "place", "to", "support", "this", "test", ",", "and", "ensure", "that", "the", "`", "getProperty", "(", "String", "key", ")", "`", "method", "(", "or", "similar", "mechanism", ")", "is", "available", "for", "checking", "the", "property", "values", ".", "Note", ":", "Since", "the", "`", "setProperty", "`", "method", "returns", "an", "instance", "of", "`", "TestCase", "`", ",", "you", "can", "also", "chain", "these", "property", "settings", ",", "but", "for", "clarity", "in", "testing", "the", "particular", "action", "and", "expected", "results", ",", "it", "'", "s", "often", "cleaner", "to", "separate", "them", ".", "Also", ",", "replace", "`", "\"", "IntegerValue", "\"", "`", "and", "`", "\"", "ClassValue", "\"", "`", "with", "whatever", "keys", "you", "expect", "in", "your", "real", "application", "scenario", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 1396, 1190, 797, 620, 261, 262, 288, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 315, 1842, 734, 315, 262, 274, 1842, 2449, 263, 7486, 261, 315, 498, 315, 269, 5131, 1382, 4709, 263, 667, 262, 274, 1815, 8867, 261, 315, 532, 263, 3454, 263, 5131, 1382, 4709, 315, 269, 1842, 2449, 263, 3911, 261, 315, 498, 315, 262, 262, 274, 289, 2], "score": -0.3171045482158661, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetPropertyWithClassValue", "(", ")", "{", "TestCase", "testCase", "=", "new", "TestCase", "(", "\"", "testID", "\"", ")", ";", "testCase", ".", "setProperty", "(", "\"", "key", "\"", ",", "StoppingTest", ".", "class", ")", ";", "assertEquals", "(", "\"", "com", ".", "example", ".", "StoppingTest", "\"", ",", "testCase", ".", "getProperty", "(", "\"", "key", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 1396, 18328, 261, 262, 288, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 262, 274, 1842, 2449, 263, 7486, 261, 315, 1842, 4658, 315, 269, 5131, 1382, 4709, 263, 667, 262, 274, 1815, 8867, 261, 315, 5131, 1382, 4709, 315, 269, 1842, 2449, 263, 3911, 261, 315, 1842, 4658, 315, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3229360580444336, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetPropertyClassType", "(", ")", "{", "TestCase", "testCase", "=", "new", "TestCase", "(", ")", ";", "testCase", ".", "setProperty", "(", "\"", "testProp", "\"", ",", "StoppingTest", ".", "class", ")", ";", "assertEquals", "(", "\"", "StoppingTest", "\"", ",", "testCase", ".", "getProperty", "(", "\"", "testProp", "\"", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 288, 1842, 2449, 263, 7486, 261, 315, 1842, 653, 315, 269, 315, 1842, 620, 315, 262, 274, 289, 2], "score": -0.3494190573692322, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "test_startRun", "(", ")", "{", "testCase", ".", "setProperty", "(", "\"", "testKey", "\"", ",", "\"", "testValue", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 288, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 315, 7128, 315, 262, 263, 7486, 261, 315, 7128, 315, 269, 404, 262, 263, 7486, 261, 315, 7128, 315, 269, 5131, 1382, 4709, 263, 667, 262, 274, 289, 2], "score": -0.35213908553123474, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "test_startRun", "(", ")", "throws", "Exception", "{", "TestCase", "testCase", "=", "new", "TestCase", "(", "\"", "STR", "\"", ")", ".", "setProperty", "(", "\"", "STR", "\"", ",", "1", ")", ".", "setProperty", "(", "\"", "STR", "\"", ",", "StoppingTest", ".", "class", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 26.064654620515448, "bleu-max": 26.37793416028006, "bleu-min": 16.762331087128306, "bleu-avg": 21.01178014617231, "code-bleu": 22.10104950805967, "code-bleu-max": 22.10104950805967, "code-bleu-min": 4.695857878111178, "code-bleu-avg": 15.65530845510676, "edit-sim": 72, "edit-sim-max": 76, "edit-sim-min": 60, "edit-sim-avg": 67.0, "rouge-p": 60.0, "rouge-p-max": 60.0, "rouge-p-min": 46.15384615384615, "rouge-p-avg": 52.13986013986014, "rouge-r": 75.0, "rouge-r-max": 75.0, "rouge-r-min": 75.0, "rouge-r-avg": 75.0, "rouge-f": 66.66666617283951, "rouge-f-max": 66.66666617283951, "rouge-f-min": 57.14285667120181, "rouge-f-avg": 61.39348322666975, "num-seq": 10}, "time": 1.012699842453003, "misc": {}}
{"id": 50, "data_id": "csn-62228", "input_stids": [1, 32315, 1071, 918, 752, 4709, 261, 1788, 4709, 2988, 1674, 262, 288, 7766, 2449, 1842, 2449, 273, 1674, 263, 29384, 2449, 261, 262, 274, 514, 1842, 548, 273, 1842, 2449, 263, 2634, 261, 262, 274, 7766, 2170, 1842, 2170, 273, 7434, 263, 336, 261, 1842, 548, 262, 274, 309, 261, 1842, 2170, 480, 446, 262, 288, 604, 394, 5477, 261, 740, 261, 315, 3902, 6, 269, 1674, 269, 1842, 548, 262, 262, 274, 289, 4145, 263, 1123, 261, 740, 261, 315, 3902, 6, 269, 463, 10793, 3991, 269, 1842, 548, 269, 463, 10793, 3991, 269, 1842, 2449, 262, 262, 274, 7766, 1042, 2828, 1842, 1042, 273, 394, 7766, 1042, 2828, 261, 1842, 548, 269, 446, 269, 1438, 262, 274, 1842, 2170, 273, 394, 7766, 2170, 261, 1842, 1042, 269, 1842, 2449, 269, 3419, 263, 15885, 1442, 261, 262, 262, 274, 7434, 263, 1378, 261, 1842, 548, 269, 1842, 2170, 262, 274, 289, 32315, 7766, 1318, 4709, 7766, 2449, 32315, 5835, 3603, 11406, 2988, 32315, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1185, 13289, 263, 2715, 261, 262, 274, 729, 1621, 273, 3875, 25462, 1299, 1621, 261, 262, 274, 1438, 273, 5416, 261, 3224, 263, 667, 262, 274, 3419, 273, 5416, 261, 9396, 263, 667, 262, 274, 1347, 261, 3419, 263, 15885, 1442, 261, 262, 262, 263, 1508, 990, 261, 5416, 261, 11551, 1442, 263, 667, 262, 262, 274, 3301, 273, 394, 7766, 1318, 261, 1438, 269, 3419, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 28196, 25462, 1299, 1621, 261, 262, 274, 289, 32315, 1071, 918, 787, 4709, 11406, 261, 3603, 11406, 2988, 1061, 269, 5835, 5109, 262, 1216, 1185, 288, 7766, 11406, 1842, 11406, 273, 1061, 263, 29384, 11406, 261, 262, 274, 514, 1842, 548, 273, 1061, 263, 29384, 548, 261, 262, 274, 7766, 2170, 1842, 2170, 273, 7434, 263, 336, 261, 1842, 548, 262, 274, 309, 261, 1842, 2170, 422, 446, 262, 288, 604, 394, 2754, 261, 740, 261, 315, 3902, 6, 269, 1842, 11406, 269, 1842, 548, 262, 262, 274, 289, 394, 7766, 11406, 3830, 261, 1842, 2170, 269, 1842, 11406, 269, 1842, 548, 269, 5109, 262, 263, 787, 261, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 32315, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 315, 3902, 6, 262, 263, 7486, 261, 315, 3902, 6, 269, 404, 262, 263, 7486, 261, 315, 3902, 6, 269, 5131, 1382, 4709, 263, 667, 262, 274, 3301, 263, 752, 4709, 261, 394, 1788, 4709, 2988, 261, 1842, 2449, 262, 262, 274, 2], "topk": [{"tids": [1, 2974, 1842, 326, 1375, 752, 4709, 1375, 707, 23500, 269, 732, 1410, 279, 381, 358, 3929, 309, 518, 8783, 1216, 392, 1520, 1347, 279, 1375, 7766, 2170, 1375, 598, 392, 2062, 1375, 1842, 548, 1375, 353, 1818, 3430, 263, 1220, 903, 1842, 326, 707, 296, 272, 7123, 358, 1640, 6751, 1842, 6088, 294, 1375, 1375, 1375, 2252, 632, 7766, 261, 2665, 273, 5477, 263, 667, 262, 1071, 918, 1842, 1684, 4709, 67, 1190, 9895, 4709, 548, 67, 14309, 8282, 503, 261, 262, 288, 342, 342, 10371, 726, 514, 2062, 4709, 548, 273, 315, 2062, 4709, 548, 315, 274, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 2062, 4709, 548, 262, 274, 7766, 2170, 2062, 4709, 2170, 273, 5416, 261, 7766, 2170, 263, 667, 262, 274, 7434, 263, 1378, 261, 2062, 4709, 548, 269, 2062, 4709, 2170, 262, 274, 342, 342, 2962, 300, 6490, 326, 852, 598, 279, 1842, 1478, 1788, 4709, 2988, 1674, 273, 394, 1788, 4709, 2988, 261, 1842, 2449, 262, 274, 342, 342, 4603, 3301, 263, 752, 4709, 261, 1674, 262, 274, 342, 342, 5452, 7681, 635, 326, 2665, 1520, 289, 1375, 1375, 1375, 2], "score": -0.19743192195892334, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "createTest", "`", "method", "effectively", ",", "we", "should", "aim", "to", "verify", "if", "it", "correctly", "throws", "an", "exception", "when", "a", "`", "TestContainer", "`", "with", "an", "existing", "`", "testId", "`", "is", "already", "present", ".", "This", "will", "test", "the", "method", "'", "s", "ability", "to", "handle", "duplicate", "test", "cases", ":", "`", "`", "`", "java", "@", "Test", "(", "expected", "=", "IllegalStateException", ".", "class", ")", "public", "void", "testCreateTest_WithExistingTestId_ShouldThrowException", "(", ")", "{", "/", "/", "Arrange", "String", "existingTestId", "=", "\"", "existingTestId", "\"", ";", "TestCase", "testCase", "=", "new", "TestCase", "(", "existingTestId", ")", ";", "TestContainer", "existingTestContainer", "=", "mock", "(", "TestContainer", ".", "class", ")", ";", "tests", ".", "put", "(", "existingTestId", ",", "existingTestContainer", ")", ";", "/", "/", "Pre", "-", "populate", "the", "map", "with", "a", "test", "container", "CreateTestOperation", "operation", "=", "new", "CreateTestOperation", "(", "testCase", ")", ";", "/", "/", "Act", "manager", ".", "createTest", "(", "operation", ")", ";", "/", "/", "Assert", "handled", "by", "the", "expected", "exception", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1021, 3021, 1375, 3301, 263, 752, 4709, 261, 394, 1788, 4709, 2988, 261, 1842, 2449, 262, 262, 274, 1375, 1410, 4356, 326, 707, 3613, 1842, 263, 2], "score": -0.20430268347263336, "weight": 1, "toks": ["<s>", "The", "statement", "`", "manager", ".", "createTest", "(", "new", "CreateTestOperation", "(", "testCase", ")", ")", ";", "`", "should", "invoke", "the", "method", "under", "test", ".", "</s>"]}, {"tids": [1, 7801, 5615, 326, 2923, 1779, 578, 326, 618, 434, 876, 1846, 854, 17012, 628, 333, 981, 13016, 263, 2], "score": -0.24292311072349548, "weight": 1, "toks": ["<s>", "Please", "provide", "the", "specific", "information", "or", "the", "type", "of", "output", "you", "are", "expecting", "from", "this", "code", "snippet", ".", "</s>"]}, {"tids": [1, 1842, 67, 1937, 1997, 261, 262, 274, 2], "score": -0.25920674204826355, "weight": 1, "toks": ["<s>", "test_startRun", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1685, 1997, 14309, 8282, 12195, 5060, 261, 262, 288, 342, 342, 10371, 726, 514, 1842, 548, 273, 315, 1842, 548, 315, 274, 7766, 2449, 2062, 4709, 2449, 273, 394, 7766, 2449, 261, 1842, 548, 262, 274, 3301, 263, 752, 4709, 261, 394, 1788, 4709, 2988, 261, 2062, 4709, 2449, 262, 262, 274, 342, 342, 1436, 279, 1842, 358, 20089, 518, 1818, 3832, 3430, 316, 326, 1478, 263, 342, 342, 4603, 471, 5452, 7766, 2449, 1842, 774, 4600, 273, 394, 7766, 2449, 261, 1842, 548, 262, 274, 1815, 21845, 261, 5477, 263, 667, 269, 261, 262, 300, 405, 3301, 263, 752, 4709, 261, 394, 1788, 4709, 2988, 261, 1842, 774, 4600, 262, 262, 262, 274, 289, 2], "score": -0.2657235860824585, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testStartRunShouldThrowIllegalStateException", "(", ")", "{", "/", "/", "Arrange", "String", "testId", "=", "\"", "testId", "\"", ";", "TestCase", "existingTestCase", "=", "new", "TestCase", "(", "testId", ")", ";", "manager", ".", "createTest", "(", "new", "CreateTestOperation", "(", "existingTestCase", ")", ")", ";", "/", "/", "Add", "a", "test", "to", "simulate", "it", "already", "being", "present", "in", "the", "container", ".", "/", "/", "Act", "and", "Assert", "TestCase", "testToInsert", "=", "new", "TestCase", "(", "testId", ")", ";", "assertThrows", "(", "IllegalStateException", ".", "class", ",", "(", ")", "-", ">", "manager", ".", "createTest", "(", "new", "CreateTestOperation", "(", "testToInsert", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 7801, 5588, 784, 326, 1842, 3021, 358, 2341, 392, 11240, 578, 279, 11805, 358, 3912, 326, 1842, 10766, 263, 2457, 3454, 269, 1846, 3377, 1815, 716, 326, 1842, 2170, 711, 2118, 3096, 358, 326, 3301, 296, 272, 1842, 1849, 269, 578, 3929, 716, 279, 707, 603, 1245, 434, 326, 15895, 1703, 2566, 263, 23047, 6534, 5943, 3007, 294, 1375, 1375, 1375, 2252, 1815, 5510, 261, 3301, 263, 3181, 25563, 261, 262, 263, 5724, 261, 1842, 2449, 263, 2634, 261, 262, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.2705010771751404, "weight": 1, "toks": ["<s>", "Please", "revise", "the", "test", "statement", "to", "include", "an", "assertion", "or", "a", "verification", "to", "complete", "the", "test", "scenario", ".", "For", "example", ",", "you", "could", "assert", "that", "the", "testContainer", "has", "been", "added", "to", "the", "manager", "'", "s", "test", "collection", ",", "or", "verify", "that", "a", "method", "on", "one", "of", "the", "mocks", "was", "called", ".", "Consider", "adding", "something", "like", ":", "`", "`", "`", "java", "assertTrue", "(", "manager", ".", "getTests", "(", ")", ".", "containsKey", "(", "testCase", ".", "getId", "(", ")", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 3301, 263, 752, 4709, 261, 394, 1788, 4709, 2988, 261, 1842, 2449, 262, 262, 274, 1375, 2], "score": -0.3261484205722809, "weight": 1, "toks": ["<s>", "`", "manager", ".", "createTest", "(", "new", "CreateTestOperation", "(", "testCase", ")", ")", ";", "`", "</s>"]}, {"tids": [1, 7766, 326, 1375, 752, 4709, 1375, 707, 635, 24831, 518, 1216, 392, 1375, 5477, 1375, 1347, 279, 1842, 598, 326, 1967, 1599, 1818, 1704, 316, 326, 1375, 7434, 1375, 4317, 263, 1220, 353, 279, 11239, 1087, 434, 326, 707, 296, 272, 14176, 716, 7372, 1842, 1599, 14450, 263, 2], "score": -0.32709240913391113, "weight": 1, "toks": ["<s>", "Test", "the", "`", "createTest", "`", "method", "by", "ensuring", "it", "throws", "an", "`", "IllegalStateException", "`", "when", "a", "test", "with", "the", "same", "ID", "already", "exists", "in", "the", "`", "tests", "`", "HashMap", ".", "This", "is", "a", "critical", "part", "of", "the", "method", "'", "s", "functionality", "that", "handles", "test", "ID", "conflicts", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1684, 4709, 67, 1918, 9895, 4709, 548, 67, 15069, 503, 261, 262, 288, 342, 342, 10371, 726, 514, 2062, 4709, 548, 273, 315, 2062, 4709, 548, 315, 274, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 2062, 4709, 548, 262, 274, 7766, 2170, 2062, 4709, 2170, 273, 5416, 261, 7766, 2170, 263, 667, 262, 274, 3301, 263, 7434, 263, 1378, 261, 2062, 4709, 548, 269, 2062, 4709, 2170, 262, 274, 342, 342, 4603, 473, 5452, 1815, 21845, 261, 5477, 263, 667, 269, 261, 262, 300, 405, 288, 3301, 263, 752, 4709, 261, 394, 1788, 4709, 2988, 261, 1842, 2449, 262, 262, 274, 289, 262, 274, 289, 2], "score": -0.32713404297828674, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCreateTest_withExistingTestId_throwsException", "(", ")", "{", "/", "/", "Arrange", "String", "existingTestId", "=", "\"", "existingTestId", "\"", ";", "TestCase", "testCase", "=", "new", "TestCase", "(", "existingTestId", ")", ";", "TestContainer", "existingTestContainer", "=", "mock", "(", "TestContainer", ".", "class", ")", ";", "manager", ".", "tests", ".", "put", "(", "existingTestId", ",", "existingTestContainer", ")", ";", "/", "/", "Act", "&", "Assert", "assertThrows", "(", "IllegalStateException", ".", "class", ",", "(", ")", "-", ">", "{", "manager", ".", "createTest", "(", "new", "CreateTestOperation", "(", "testCase", ")", ")", ";", "}", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 3301, 263, 787, 4709, 11406, 261, 394, 3603, 11406, 2988, 261, 315, 7128, 315, 269, 394, 5835, 261, 262, 262, 269, 394, 5835, 261, 262, 262, 274, 1375, 2], "score": -0.3315196931362152, "weight": 1, "toks": ["<s>", "`", "manager", ".", "startTestPhase", "(", "new", "StartPhaseOperation", "(", "\"", "STR", "\"", ",", "new", "Promise", "(", ")", ")", ",", "new", "Promise", "(", ")", ")", ";", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 10.209116374860235, "bleu-max": 10.209116374860235, "bleu-min": 5.9652354671805075, "bleu-avg": 8.273604176626428, "code-bleu": 7.637873523371557, "code-bleu-max": 14.476780040168416, "code-bleu-min": 1.8768990269503825, "code-bleu-avg": 7.812549832012143, "edit-sim": 39, "edit-sim-max": 39, "edit-sim-min": 32, "edit-sim-avg": 35.7, "rouge-p": 36.36363636363637, "rouge-p-max": 36.36363636363637, "rouge-p-min": 20.0, "rouge-p-avg": 29.674825174825173, "rouge-r": 57.14285714285714, "rouge-r-max": 57.14285714285714, "rouge-r-min": 42.857142857142854, "rouge-r-avg": 51.42857142857142, "rouge-f": 44.444443969135804, "rouge-f-max": 44.444443969135804, "rouge-f-min": 27.27272683884298, "rouge-f-avg": 37.551833668732215, "num-seq": 10}, "time": 1.1188552379608154, "misc": {}}
{"id": 51, "data_id": "csn-62228", "input_stids": [1, 32315, 1071, 918, 752, 4709, 261, 1788, 4709, 2988, 1674, 262, 288, 7766, 2449, 1842, 2449, 273, 1674, 263, 29384, 2449, 261, 262, 274, 514, 1842, 548, 273, 1842, 2449, 263, 2634, 261, 262, 274, 7766, 2170, 1842, 2170, 273, 7434, 263, 336, 261, 1842, 548, 262, 274, 309, 261, 1842, 2170, 480, 446, 262, 288, 604, 394, 5477, 261, 740, 261, 315, 3902, 6, 269, 1674, 269, 1842, 548, 262, 262, 274, 289, 4145, 263, 1123, 261, 740, 261, 315, 3902, 6, 269, 463, 10793, 3991, 269, 1842, 548, 269, 463, 10793, 3991, 269, 1842, 2449, 262, 262, 274, 7766, 1042, 2828, 1842, 1042, 273, 394, 7766, 1042, 2828, 261, 1842, 548, 269, 446, 269, 1438, 262, 274, 1842, 2170, 273, 394, 7766, 2170, 261, 1842, 1042, 269, 1842, 2449, 269, 3419, 263, 15885, 1442, 261, 262, 262, 274, 7434, 263, 1378, 261, 1842, 548, 269, 1842, 2170, 262, 274, 289, 32315, 7766, 1318, 4709, 7766, 2449, 26483, 7643, 32315, 5835, 3603, 11406, 2988, 32315, 5109, 263, 5803, 261, 315, 3902, 6, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1185, 13289, 263, 2715, 261, 262, 274, 729, 1621, 273, 3875, 25462, 1299, 1621, 261, 262, 274, 1438, 273, 5416, 261, 3224, 263, 667, 262, 274, 3419, 273, 5416, 261, 9396, 263, 667, 262, 274, 1347, 261, 3419, 263, 15885, 1442, 261, 262, 262, 263, 1508, 990, 261, 5416, 261, 11551, 1442, 263, 667, 262, 262, 274, 3301, 273, 394, 7766, 1318, 261, 1438, 269, 3419, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 28196, 25462, 1299, 1621, 261, 262, 274, 289, 32315, 1071, 918, 787, 4709, 11406, 261, 3603, 11406, 2988, 1061, 269, 5835, 5109, 262, 1216, 1185, 288, 7766, 11406, 1842, 11406, 273, 1061, 263, 29384, 11406, 261, 262, 274, 514, 1842, 548, 273, 1061, 263, 29384, 548, 261, 262, 274, 7766, 2170, 1842, 2170, 273, 7434, 263, 336, 261, 1842, 548, 262, 274, 309, 261, 1842, 2170, 422, 446, 262, 288, 604, 394, 2754, 261, 740, 261, 315, 3902, 6, 269, 1842, 11406, 269, 1842, 548, 262, 262, 274, 289, 394, 7766, 11406, 3830, 261, 1842, 2170, 269, 1842, 11406, 269, 1842, 548, 269, 5109, 262, 263, 787, 261, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 32315, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 315, 3902, 6, 262, 263, 7486, 261, 315, 3902, 6, 269, 404, 262, 263, 7486, 261, 315, 3902, 6, 269, 5131, 1382, 4709, 263, 667, 262, 274, 3301, 263, 752, 4709, 261, 394, 1788, 4709, 2988, 261, 1842, 2449, 262, 262, 274, 26483, 7643, 5109, 273, 394, 26483, 7643, 261, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 11826, 4709, 548, 21845, 503, 261, 262, 288, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 315, 1842, 548, 315, 262, 274, 3301, 263, 752, 4709, 261, 394, 1788, 4709, 2988, 261, 1842, 2449, 262, 262, 274, 1815, 21845, 261, 5477, 263, 667, 269, 261, 262, 300, 405, 3301, 263, 752, 4709, 261, 394, 1788, 4709, 2988, 261, 1842, 2449, 262, 262, 262, 274, 289, 2], "score": -0.15305040776729584, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testDuplicateTestIdThrowsException", "(", ")", "{", "TestCase", "testCase", "=", "new", "TestCase", "(", "\"", "testId", "\"", ")", ";", "manager", ".", "createTest", "(", "new", "CreateTestOperation", "(", "testCase", ")", ")", ";", "assertThrows", "(", "IllegalStateException", ".", "class", ",", "(", ")", "-", ">", "manager", ".", "createTest", "(", "new", "CreateTestOperation", "(", "testCase", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 3301, 263, 787, 4709, 11406, 261, 394, 3603, 11406, 2988, 261, 315, 7128, 315, 269, 1842, 2449, 263, 2634, 261, 262, 262, 269, 5109, 262, 274, 2], "score": -0.17490218579769135, "weight": 1, "toks": ["<s>", "manager", ".", "startTestPhase", "(", "new", "StartPhaseOperation", "(", "\"", "STR", "\"", ",", "testCase", ".", "getId", "(", ")", ")", ",", "promise", ")", ";", "</s>"]}, {"tids": [1, 5452, 1815, 21845, 261, 5477, 263, 667, 269, 261, 262, 300, 405, 3301, 263, 752, 4709, 261, 394, 1788, 4709, 2988, 261, 1842, 2449, 262, 262, 262, 274, 2], "score": -0.2074628323316574, "weight": 1, "toks": ["<s>", "Assert", "assertThrows", "(", "IllegalStateException", ".", "class", ",", "(", ")", "-", ">", "manager", ".", "createTest", "(", "new", "CreateTestOperation", "(", "testCase", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 3301, 263, 787, 4709, 11406, 261, 394, 3603, 11406, 2988, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 269, 5109, 262, 274, 2], "score": -0.22242608666419983, "weight": 1, "toks": ["<s>", "manager", ".", "startTestPhase", "(", "new", "StartPhaseOperation", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ",", "promise", ")", ";", "</s>"]}, {"tids": [1, 1436, 279, 1842, 648, 358, 3387, 716, 1375, 752, 4709, 1375, 1216, 392, 1375, 5477, 1375, 1347, 279, 1842, 598, 326, 1967, 1599, 1818, 1704, 316, 326, 2619, 263, 2], "score": -0.2636914551258087, "weight": 1, "toks": ["<s>", "Add", "a", "test", "case", "to", "ensure", "that", "`", "createTest", "`", "throws", "an", "`", "IllegalStateException", "`", "when", "a", "test", "with", "the", "same", "ID", "already", "exists", "in", "the", "system", ".", "</s>"]}, {"tids": [1, 3603, 11406, 2988, 1061, 273, 394, 3603, 11406, 2988, 261, 315, 7128, 315, 269, 394, 7766, 11406, 261, 315, 7128, 315, 262, 262, 274, 3301, 263, 787, 4709, 11406, 261, 1061, 269, 5109, 262, 274, 2], "score": -0.2738116383552551, "weight": 1, "toks": ["<s>", "StartPhaseOperation", "op", "=", "new", "StartPhaseOperation", "(", "\"", "STR", "\"", ",", "new", "TestPhase", "(", "\"", "STR", "\"", ")", ")", ";", "manager", ".", "startTestPhase", "(", "op", ",", "promise", ")", ";", "</s>"]}, {"tids": [1, 3603, 11406, 2988, 1674, 273, 394, 3603, 11406, 2988, 261, 315, 7128, 315, 269, 7766, 11406, 263, 15484, 262, 274, 3301, 263, 787, 4709, 11406, 261, 1674, 269, 5109, 262, 274, 2], "score": -0.28684040904045105, "weight": 1, "toks": ["<s>", "StartPhaseOperation", "operation", "=", "new", "StartPhaseOperation", "(", "\"", "STR", "\"", ",", "TestPhase", ".", "RUN", ")", ";", "manager", ".", "startTestPhase", "(", "operation", ",", "promise", ")", ";", "</s>"]}, {"tids": [1, 3603, 11406, 2988, 1061, 273, 394, 3603, 11406, 2988, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 3301, 263, 787, 4709, 11406, 261, 1061, 269, 5109, 262, 274, 2], "score": -0.2895257771015167, "weight": 1, "toks": ["<s>", "StartPhaseOperation", "op", "=", "new", "StartPhaseOperation", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "manager", ".", "startTestPhase", "(", "op", ",", "promise", ")", ";", "</s>"]}, {"tids": [1, 3603, 326, 1842, 6855, 1450, 1375, 787, 4709, 11406, 1375, 598, 5505, 1472, 263, 2], "score": -0.2995661199092865, "weight": 1, "toks": ["<s>", "Start", "the", "test", "phase", "using", "`", "startTestPhase", "`", "with", "appropriate", "parameters", ".", "</s>"]}, {"tids": [1, 1021, 20579, 3323, 1842, 3021, 358, 866, 326, 707, 1375, 752, 4709, 1375, 1410, 999, 279, 4143, 1842, 648, 263, 22073, 269, 326, 1024, 3021, 4102, 506, 294, 1375, 1375, 1375, 2252, 3301, 263, 752, 4709, 261, 394, 1788, 4709, 2988, 261, 394, 7766, 2449, 261, 315, 1842, 548, 315, 262, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.30155497789382935, "weight": 1, "toks": ["<s>", "The", "shortest", "possible", "test", "statement", "to", "check", "the", "method", "`", "createTest", "`", "should", "use", "a", "simple", "test", "case", ".", "Thus", ",", "the", "next", "statement", "would", "be", ":", "`", "`", "`", "java", "manager", ".", "createTest", "(", "new", "CreateTestOperation", "(", "new", "TestCase", "(", "\"", "testId", "\"", ")", ")", ")", ";", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 74.15218483683708, "bleu-max": 74.15218483683708, "bleu-min": 35.07680703772616, "bleu-avg": 55.42787808076332, "code-bleu": 48.65958240563917, "code-bleu-max": 48.65958240563917, "code-bleu-min": 21.02403780736314, "code-bleu-avg": 35.341570130511236, "edit-sim": 96, "edit-sim-max": 96, "edit-sim-min": 73, "edit-sim-avg": 85.4, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 54.54545454545454, "rouge-p-avg": 77.99999999999999, "rouge-r": 90.9090909090909, "rouge-r-max": 90.9090909090909, "rouge-r-min": 54.54545454545454, "rouge-r-avg": 73.63636363636365, "rouge-f": 95.23809473922903, "rouge-f-max": 95.23809473922903, "rouge-f-min": 54.54545404545455, "rouge-f-avg": 75.66666616750682, "num-seq": 10}, "time": 0.8721258640289307, "misc": {}}
{"id": 52, "data_id": "csn-62228", "input_stids": [1, 32315, 1071, 918, 787, 4709, 11406, 261, 3603, 11406, 2988, 1061, 269, 5835, 5109, 262, 1216, 1185, 288, 7766, 11406, 1842, 11406, 273, 1061, 263, 29384, 11406, 261, 262, 274, 514, 1842, 548, 273, 1061, 263, 29384, 548, 261, 262, 274, 7766, 2170, 1842, 2170, 273, 7434, 263, 336, 261, 1842, 548, 262, 274, 309, 261, 1842, 2170, 422, 446, 262, 288, 604, 394, 2754, 261, 740, 261, 315, 3902, 6, 269, 1842, 11406, 269, 1842, 548, 262, 262, 274, 289, 394, 7766, 11406, 3830, 261, 1842, 2170, 269, 1842, 11406, 269, 1842, 548, 269, 5109, 262, 263, 787, 261, 262, 274, 289, 32315, 7766, 1318, 4709, 7766, 2449, 26483, 7643, 32315, 5835, 3603, 11406, 2988, 32315, 1525, 787, 6947, 273, 8102, 261, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1185, 13289, 263, 2715, 261, 262, 274, 729, 1621, 273, 3875, 25462, 1299, 1621, 261, 262, 274, 1438, 273, 5416, 261, 3224, 263, 667, 262, 274, 3419, 273, 5416, 261, 9396, 263, 667, 262, 274, 1347, 261, 3419, 263, 15885, 1442, 261, 262, 262, 263, 1508, 990, 261, 5416, 261, 11551, 1442, 263, 667, 262, 262, 274, 3301, 273, 394, 7766, 1318, 261, 1438, 269, 3419, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 28196, 25462, 1299, 1621, 261, 262, 274, 289, 32315, 1071, 918, 787, 4709, 11406, 261, 3603, 11406, 2988, 1061, 269, 5835, 5109, 262, 1216, 1185, 288, 7766, 11406, 1842, 11406, 273, 1061, 263, 29384, 11406, 261, 262, 274, 514, 1842, 548, 273, 1061, 263, 29384, 548, 261, 262, 274, 7766, 2170, 1842, 2170, 273, 7434, 263, 336, 261, 1842, 548, 262, 274, 309, 261, 1842, 2170, 422, 446, 262, 288, 604, 394, 2754, 261, 740, 261, 315, 3902, 6, 269, 1842, 11406, 269, 1842, 548, 262, 262, 274, 289, 394, 7766, 11406, 3830, 261, 1842, 2170, 269, 1842, 11406, 269, 1842, 548, 269, 5109, 262, 263, 787, 261, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 32315, 7766, 2449, 1842, 2449, 273, 394, 7766, 2449, 261, 315, 3902, 6, 262, 263, 7486, 261, 315, 3902, 6, 269, 404, 262, 263, 7486, 261, 315, 3902, 6, 269, 5131, 1382, 4709, 263, 667, 262, 274, 3301, 263, 752, 4709, 261, 394, 1788, 4709, 2988, 261, 1842, 2449, 262, 262, 274, 26483, 7643, 5109, 273, 394, 26483, 7643, 261, 262, 274, 3301, 263, 787, 4709, 11406, 261, 394, 3603, 11406, 2988, 261, 15484, 269, 315, 3902, 6, 262, 269, 5109, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 1685, 4709, 11406, 261, 262, 1216, 1185, 288, 3603, 11406, 2988, 1061, 273, 394, 3603, 11406, 2988, 261, 7766, 11406, 263, 15484, 269, 315, 1842, 548, 21, 315, 262, 274, 5835, 5109, 273, 394, 26483, 7643, 261, 262, 274, 3301, 263, 787, 4709, 11406, 261, 1061, 269, 5109, 262, 274, 289, 2], "score": -0.13305620849132538, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testStartTestPhase", "(", ")", "throws", "Exception", "{", "StartPhaseOperation", "op", "=", "new", "StartPhaseOperation", "(", "TestPhase", ".", "RUN", ",", "\"", "testId1", "\"", ")", ";", "Promise", "promise", "=", "new", "StubPromise", "(", ")", ";", "manager", ".", "startTestPhase", "(", "op", ",", "promise", ")", ";", "}", "</s>"]}, {"tids": [1, 14373, 1375, 3301, 263, 787, 4709, 11406, 261, 394, 3603, 11406, 2988, 261, 15484, 269, 315, 7128, 315, 262, 269, 394, 26483, 7643, 261, 262, 262, 274, 1375, 316, 326, 1842, 707, 263, 2], "score": -0.1837511509656906, "weight": 1, "toks": ["<s>", "Invoke", "`", "manager", ".", "startTestPhase", "(", "new", "StartPhaseOperation", "(", "RUN", ",", "\"", "STR", "\"", ")", ",", "new", "StubPromise", "(", ")", ")", ";", "`", "in", "the", "test", "method", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 67, 1937, 4709, 11406, 67, 2041, 4709, 2170, 67, 21845, 31237, 261, 262, 1216, 1185, 288, 3603, 11406, 2988, 1061, 273, 394, 3603, 11406, 2988, 261, 7766, 11406, 263, 15484, 269, 315, 2057, 4709, 548, 315, 262, 274, 5835, 5109, 273, 394, 26483, 7643, 261, 262, 274, 1815, 21845, 261, 2754, 263, 667, 269, 261, 262, 300, 405, 3301, 263, 787, 4709, 11406, 261, 1061, 269, 5109, 262, 262, 274, 289, 2], "score": -0.19083620607852936, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "test_startTestPhase_NullTestContainer_ThrowsIllegalArgumentException", "(", ")", "throws", "Exception", "{", "StartPhaseOperation", "op", "=", "new", "StartPhaseOperation", "(", "TestPhase", ".", "RUN", ",", "\"", "invalidTestId", "\"", ")", ";", "Promise", "promise", "=", "new", "StubPromise", "(", ")", ";", "assertThrows", "(", "IllegalArgumentException", ".", "class", ",", "(", ")", "-", ">", "manager", ".", "startTestPhase", "(", "op", ",", "promise", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 9330, 395, 4031, 358, 1842, 326, 1375, 787, 4709, 11406, 1375, 707, 353, 358, 3929, 716, 1347, 279, 1375, 7766, 2170, 1375, 353, 486, 1392, 635, 326, 2112, 1375, 1842, 548, 1375, 269, 518, 1216, 392, 1375, 2754, 1375, 263, 2], "score": -0.24177952110767365, "weight": 1, "toks": ["<s>", "The", "simplest", "way", "to", "test", "the", "`", "startTestPhase", "`", "method", "is", "to", "verify", "that", "when", "a", "`", "TestContainer", "`", "is", "not", "found", "by", "the", "provided", "`", "testId", "`", ",", "it", "throws", "an", "`", "IllegalArgumentException", "`", ".", "</s>"]}, {"tids": [1, 14373, 1375, 787, 4709, 11406, 1375, 598, 279, 446, 1375, 7766, 2170, 1375, 358, 3080, 326, 1375, 2754, 1375, 263, 2], "score": -0.24790051579475403, "weight": 1, "toks": ["<s>", "Invoke", "`", "startTestPhase", "`", "with", "a", "null", "`", "TestContainer", "`", "to", "trigger", "the", "`", "IllegalArgumentException", "`", ".", "</s>"]}, {"tids": [1, 1788, 392, 791, 434, 1375, 7766, 2170, 1375, 471, 527, 518, 358, 326, 1375, 7434, 1375, 852, 1865, 4440, 1375, 787, 4709, 11406, 1375, 263, 2], "score": -0.28000903129577637, "weight": 1, "toks": ["<s>", "Create", "an", "instance", "of", "`", "TestContainer", "`", "and", "add", "it", "to", "the", "`", "tests", "`", "map", "before", "calling", "`", "startTestPhase", "`", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 288, 7766, 11406, 2988, 1061, 273, 394, 3603, 11406, 2988, 261, 7766, 11406, 263, 15484, 269, 315, 1842, 548, 21, 315, 262, 274, 5835, 5109, 273, 394, 26483, 7643, 261, 262, 274, 3301, 263, 787, 4709, 11406, 261, 1061, 269, 5109, 262, 274, 289, 2], "score": -0.3126305341720581, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "test_startRun", "(", ")", "throws", "Exception", "{", "TestPhaseOperation", "op", "=", "new", "StartPhaseOperation", "(", "TestPhase", ".", "RUN", ",", "\"", "testId1", "\"", ")", ";", "Promise", "promise", "=", "new", "StubPromise", "(", ")", ";", "manager", ".", "startTestPhase", "(", "op", ",", "promise", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 67, 1937, 1997, 261, 262, 1216, 1185, 288, 3301, 263, 787, 4709, 11406, 261, 394, 3603, 11406, 2988, 261, 15484, 269, 315, 7128, 315, 262, 269, 394, 26483, 7643, 261, 262, 262, 274, 289, 2], "score": -0.32926300168037415, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "test_startRun", "(", ")", "throws", "Exception", "{", "manager", ".", "startTestPhase", "(", "new", "StartPhaseOperation", "(", "RUN", ",", "\"", "STR", "\"", ")", ",", "new", "StubPromise", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1685, 4709, 11406, 67, 7337, 4709, 261, 262, 288, 1815, 21845, 261, 2754, 263, 667, 269, 261, 262, 300, 405, 288, 3603, 11406, 2988, 1061, 273, 394, 3603, 11406, 2988, 261, 7766, 11406, 263, 15484, 269, 315, 1661, 19041, 315, 262, 274, 5835, 5109, 273, 394, 26483, 7643, 261, 262, 274, 3301, 263, 787, 4709, 11406, 261, 1061, 269, 5109, 262, 274, 289, 262, 274, 289, 2], "score": -0.3318100571632385, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testStartTestPhase_missingTest", "(", ")", "{", "assertThrows", "(", "IllegalArgumentException", ".", "class", ",", "(", ")", "-", ">", "{", "StartPhaseOperation", "op", "=", "new", "StartPhaseOperation", "(", "TestPhase", ".", "RUN", ",", "\"", "nonexistent", "\"", ")", ";", "Promise", "promise", "=", "new", "StubPromise", "(", ")", ";", "manager", ".", "startTestPhase", "(", "op", ",", "promise", ")", ";", "}", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1685, 4709, 11406, 261, 262, 1216, 1185, 288, 3603, 11406, 2988, 1061, 273, 394, 3603, 11406, 2988, 261, 15484, 269, 315, 1842, 548, 315, 262, 274, 26483, 7643, 5109, 273, 394, 26483, 7643, 261, 262, 274, 3301, 263, 787, 4709, 11406, 261, 1061, 269, 5109, 262, 274, 289, 2], "score": -0.34265169501304626, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testStartTestPhase", "(", ")", "throws", "Exception", "{", "StartPhaseOperation", "op", "=", "new", "StartPhaseOperation", "(", "RUN", ",", "\"", "testId", "\"", ")", ";", "StubPromise", "promise", "=", "new", "StubPromise", "(", ")", ";", "manager", ".", "startTestPhase", "(", "op", ",", "promise", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 10.320993901640014, "bleu-max": 26.970223719007375, "bleu-min": 9.246523455174717, "bleu-avg": 13.570916399586476, "code-bleu": 4.57614046287835, "code-bleu-max": 19.821761156227506, "code-bleu-min": 4.472223507033754, "code-bleu-avg": 8.835675028981974, "edit-sim": 34, "edit-sim-max": 47, "edit-sim-min": 33, "edit-sim-avg": 37.5, "rouge-p": 33.33333333333333, "rouge-p-max": 50.0, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 36.57575757575757, "rouge-r": 80.0, "rouge-r-max": 80.0, "rouge-r-min": 60.0, "rouge-r-avg": 74.0, "rouge-f": 47.05882311418686, "rouge-f-max": 54.54545404958678, "rouge-f-min": 42.85714239795918, "rouge-f-avg": 48.47695397878922, "num-seq": 10}, "time": 0.8274805545806885, "misc": {}}
{"id": 53, "data_id": "csn-69043", "input_stids": [1, 9664, 8320, 6191, 4402, 32315, 32315, 11820, 23, 3672, 4709, 32315, 8058, 14571, 70, 32315, 32315, 32315, 1071, 28770, 25945, 3219, 261, 262, 1216, 1860, 288, 11114, 2623, 273, 6191, 4402, 263, 1024, 3219, 261, 262, 274, 309, 261, 2623, 422, 446, 262, 327, 446, 274, 327, 8320, 263, 2495, 3219, 261, 2623, 269, 22238, 261, 262, 262, 274, 289, 32315, 632, 7766, 261, 2665, 273, 3235, 263, 667, 262, 1071, 918, 1842, 3219, 14571, 70, 2568, 4976, 14097, 261, 262, 1216, 1185, 32315, 2], "topk": [{"tids": [1, 5452, 263, 25395, 261, 394, 8058, 14571, 70, 261, 262, 263, 25945, 3219, 261, 262, 262, 274, 2], "score": -0.3243585228919983, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "new", "FrameGrab", "(", ")", ".", "getNativeFrame", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1021, 1842, 1410, 745, 1375, 25945, 3219, 261, 262, 1375, 358, 866, 309, 518, 8214, 1216, 279, 1375, 3235, 1375, 1347, 4636, 854, 5100, 263, 2], "score": -0.36543530225753784, "weight": 1, "toks": ["<s>", "The", "test", "should", "call", "`", "getNativeFrame", "(", ")", "`", "to", "check", "if", "it", "properly", "throws", "a", "`", "RuntimeException", "`", "when", "conditions", "are", "met", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 9220, 3219, 261, 262, 1216, 1860, 288, 25395, 261, 25945, 3219, 261, 262, 262, 274, 289, 2], "score": -0.39494243264198303, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetNativeFrame", "(", ")", "throws", "IOException", "{", "assertNotNull", "(", "getNativeFrame", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 11820, 23, 3672, 4709, 1410, 787, 635, 1721, 372, 11256, 279, 6191, 3298, 2623, 358, 1842, 326, 25945, 3219, 707, 23500, 263, 2], "score": -0.4336860477924347, "weight": 1, "toks": ["<s>", "Issue380Test", "should", "start", "by", "acquiring", "a", "video", "track", "frame", "to", "test", "the", "getNativeFrame", "method", "effectively", ".", "</s>"]}, {"tids": [1, 3049, 1375, 1842, 3219, 14571, 70, 2568, 4976, 14097, 261, 262, 1375, 358, 1842, 326, 707, 263, 2], "score": -0.4504449963569641, "weight": 1, "toks": ["<s>", "Call", "`", "testFrameGrabCanExtractOrientation", "(", ")", "`", "to", "test", "the", "method", ".", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 25945, 3219, 1375, 707, 269, 326, 1024, 3021, 1410, 5416, 326, 6885, 434, 1375, 6191, 4402, 263, 1024, 3219, 261, 262, 1375, 358, 327, 279, 1661, 300, 446, 1375, 11114, 1375, 269, 471, 326, 1375, 8320, 263, 2495, 3219, 261, 262, 1375, 707, 1410, 1836, 2887, 19440, 4798, 263, 2], "score": -0.5125824809074402, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "getNativeFrame", "`", "method", ",", "the", "next", "statement", "should", "mock", "the", "behavior", "of", "`", "videoTrack", ".", "nextFrame", "(", ")", "`", "to", "return", "a", "non", "-", "null", "`", "Packet", "`", ",", "and", "the", "`", "decoder", ".", "decodeFrame", "(", ")", "`", "method", "should", "execute", "without", "throwing", "exceptions", ".", "</s>"]}, {"tids": [1, 1021, 2112, 977, 12001, 358, 506, 279, 13016, 434, 981, 7826, 598, 2690, 646, 434, 3204, 578, 9813, 269, 1496, 518, 296, 272, 6301, 298, 297, 4121, 5565, 13115, 578, 4084, 353, 12613, 635, 333, 977, 740, 263, 10724, 269, 2511, 603, 326, 913, 471, 3695, 269, 326, 977, 12001, 358, 2198, 5390, 5110, 5402, 11987, 598, 2836, 7769, 1450, 804, 2802, 263, 1021, 707, 1375, 25945, 3219, 261, 262, 1375, 7531, 358, 336, 279, 2623, 628, 279, 6191, 3298, 269, 2495, 518, 269, 471, 327, 279, 28770, 733, 263, 2597, 7372, 279, 648, 1625, 326, 6191, 3298, 4825, 327, 279, 446, 2623, 269, 316, 1492, 648, 518, 2546, 1135, 446, 263, 1021, 1842, 707, 1375, 1842, 3219, 14571, 70, 2568, 4976, 14097, 261, 262, 1375, 353, 2665, 358, 604, 279, 1375, 3235, 1375, 269, 1492, 8527, 716, 333, 707, 1410, 1842, 2690, 9648, 434, 9820, 18752, 716, 269, 3613, 2923, 4636, 269, 6684, 635, 8281, 316, 279, 25934, 4031, 263, 2974, 21043, 7694, 715, 444, 731, 279, 1842, 364, 326, 707, 1375, 25945, 3219, 261, 262, 1375, 269, 732, 1608, 358, 3387, 716, 326, 1375, 6191, 4402, 1375, 471, 1375, 8320, 1375, 854, 8214, 5416, 329, 578, 7168, 2992, 358, 5615, 25934, 4540, 471, 6729, 364, 31024, 7769, 263, 13743, 225, 163, 227, 252, 272, 326, 20579, 1177, 434, 4123, 279, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 9220, 3219, 67, 6154, 24888, 3219, 261, 262, 1216, 1860, 288, 342, 342, 10371, 726, 11114, 5416, 329, 3219, 273, 5416, 261, 11114, 263, 667, 262, 274, 28770, 2665, 24061, 273, 5416, 261, 28770, 263, 667, 262, 274, 14030, 4402, 6191, 4402, 273, 5416, 261, 14030, 4402, 263, 667, 262, 274, 1347, 261, 6191, 4402, 263, 1024, 3219, 261, 262, 262, 263, 1508, 990, 261, 5416, 329, 3219, 262, 274, 15138, 8320, 273, 5416, 261, 15138, 263, 667, 262, 274, 1347, 261, 8320, 263, 2495, 3219, 261, 1281, 261, 11114, 263, 667, 262, 269, 1281, 261, 262, 262, 262, 263, 1508, 990, 261, 2665, 24061, 262, 274, 8058, 14571, 70, 2623, 14571, 70, 273, 394, 8058, 14571, 70, 261, 6191, 4402, 269, 8320, 262, 274, 342, 342, 4603, 28770, 563, 273, 2623, 14571, 70, 263, 25945, 3219, 261, 262, 274, 342, 342, 5452, 1815, 8867, 261, 2665, 24061, 269, 563, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 4271, 716, 1375, 25945, 3219, 261, 262, 1375, 8783, 16889, 279, 2623, 12700, 628, 1375, 6191, 4402, 1375, 1450, 1375, 8320, 1375, 263, 2597, 1709, 3128, 5416, 310, 358, 20089, 326, 6885, 434, 326, 5030, 261, 1375, 6191, 4402, 1375, 471, 1375, 8320, 1375, 262, 471, 4271, 326, 707, 296, 272, 876, 5314, 326, 2665, 563, 263, 2], "score": -0.5230380892753601, "weight": 1, "toks": ["<s>", "The", "provided", "text", "seems", "to", "be", "a", "snippet", "of", "code", "mixed", "with", "some", "form", "of", "annotation", "or", "markup", ",", "but", "it", "'", "s", "unclear", "what", "exact", "purpose", "or", "usage", "is", "intended", "by", "this", "text", "format", ".", "However", ",", "based", "on", "the", "content", "and", "structure", ",", "the", "text", "seems", "to", "involve", "Java", "programming", "with", "unit", "testing", "using", "JUnit", ".", "The", "method", "`", "getNativeFrame", "(", ")", "`", "attempts", "to", "get", "a", "frame", "from", "a", "video", "track", ",", "decode", "it", ",", "and", "return", "a", "Picture", "object", ".", "It", "handles", "a", "case", "where", "the", "video", "track", "might", "return", "a", "null", "frame", ",", "in", "which", "case", "it", "also", "returns", "null", ".", "The", "test", "method", "`", "testFrameGrabCanExtractOrientation", "(", ")", "`", "is", "expected", "to", "throw", "a", "`", "RuntimeException", "`", ",", "which", "indicates", "that", "this", "method", "should", "test", "some", "aspect", "of", "orientation", "extraction", "that", ",", "under", "specific", "conditions", ",", "fails", "by", "design", "in", "a", "controlled", "way", ".", "To", "succinctly", "set", "up", "a", "test", "for", "the", "method", "`", "getNativeFrame", "(", ")", "`", ",", "we", "need", "to", "ensure", "that", "the", "`", "videoTrack", "`", "and", "`", "decoder", "`", "are", "properly", "mocked", "or", "stubbed", "to", "provide", "controlled", "inputs", "and", "outputs", "for", "reliable", "testing", ".", "Here", "\u2019", "s", "the", "shortest", "version", "of", "such", "a", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetNativeFrame_returnsDecodedFrame", "(", ")", "throws", "IOException", "{", "/", "/", "Arrange", "Packet", "mockedFrame", "=", "mock", "(", "Packet", ".", "class", ")", ";", "Picture", "expectedPicture", "=", "mock", "(", "Picture", ".", "class", ")", ";", "VideoTrack", "videoTrack", "=", "mock", "(", "VideoTrack", ".", "class", ")", ";", "when", "(", "videoTrack", ".", "nextFrame", "(", ")", ")", ".", "thenReturn", "(", "mockedFrame", ")", ";", "Decoder", "decoder", "=", "mock", "(", "Decoder", ".", "class", ")", ";", "when", "(", "decoder", ".", "decodeFrame", "(", "any", "(", "Packet", ".", "class", ")", ",", "any", "(", ")", ")", ")", ".", "thenReturn", "(", "expectedPicture", ")", ";", "FrameGrab", "frameGrab", "=", "new", "FrameGrab", "(", "videoTrack", ",", "decoder", ")", ";", "/", "/", "Act", "Picture", "result", "=", "frameGrab", ".", "getNativeFrame", "(", ")", ";", "/", "/", "Assert", "assertEquals", "(", "expectedPicture", ",", "result", ")", ";", "}", "`", "`", "`", "This", "test", "checks", "that", "`", "getNativeFrame", "(", ")", "`", "correctly", "decodes", "a", "frame", "obtained", "from", "`", "videoTrack", "`", "using", "`", "decoder", "`", ".", "It", "utilizes", "mocking", "to", "simulate", "the", "behavior", "of", "the", "dependencies", "(", "`", "videoTrack", "`", "and", "`", "decoder", "`", ")", "and", "checks", "the", "method", "'", "s", "output", "against", "the", "expected", "result", ".", "</s>"]}, {"tids": [1, 1021, 707, 1375, 1842, 3219, 14571, 70, 2568, 4976, 14097, 261, 262, 1375, 1410, 2341, 279, 745, 358, 1375, 25945, 3219, 261, 262, 1375, 358, 5122, 1842, 2097, 7123, 358, 1640, 578, 13551, 279, 1375, 3235, 1375, 1347, 13547, 7793, 263, 2], "score": -0.524229884147644, "weight": 1, "toks": ["<s>", "The", "method", "`", "testFrameGrabCanExtractOrientation", "(", ")", "`", "should", "include", "a", "call", "to", "`", "getNativeFrame", "(", ")", "`", "to", "directly", "test", "its", "ability", "to", "handle", "or", "propagate", "a", "`", "RuntimeException", "`", "when", "decoding", "frames", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 25945, 3219, 1375, 707, 23500, 269, 3387, 716, 326, 1375, 6191, 4402, 263, 1024, 3219, 261, 262, 1375, 471, 1375, 8320, 263, 2495, 3219, 261, 262, 1375, 14176, 353, 18147, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 9220, 3219, 1356, 24888, 3219, 261, 262, 1216, 1860, 288, 342, 342, 7867, 5030, 14030, 4402, 5416, 10083, 4402, 273, 5416, 261, 14030, 4402, 263, 667, 262, 274, 15138, 5416, 7975, 273, 5416, 261, 15138, 263, 667, 262, 274, 3525, 306, 308, 9664, 273, 394, 3525, 306, 404, 308, 274, 342, 342, 15983, 22238, 707, 1135, 333, 1613, 526, 11114, 5416, 3219, 273, 394, 11114, 261, 262, 274, 342, 342, 7867, 329, 2623, 864, 635, 6191, 4402, 28770, 2665, 24061, 273, 394, 28770, 261, 262, 274, 342, 342, 13219, 28770, 2106, 635, 2495, 3219, 1347, 261, 5416, 10083, 4402, 263, 1024, 3219, 261, 262, 262, 263, 1508, 990, 261, 5416, 3219, 262, 274, 342, 342, 934, 22298, 310, 1024, 3219, 358, 327, 279, 5416, 3219, 1347, 261, 5416, 7975, 263, 2495, 3219, 261, 5416, 3219, 269, 9664, 262, 262, 263, 1508, 990, 261, 2665, 24061, 262, 274, 342, 342, 934, 22298, 310, 2495, 3219, 358, 327, 326, 2665, 28770, 8058, 14571, 70, 2623, 14571, 70, 273, 394, 8058, 14571, 70, 261, 5416, 10083, 4402, 269, 5416, 7975, 269, 9664, 262, 274, 342, 342, 1788, 791, 598, 5416, 329, 2184, 28770, 563, 273, 2623, 14571, 70, 263, 25945, 3219, 261, 262, 274, 342, 342, 4603, 300, 745, 326, 707, 3613, 1842, 25395, 261, 563, 262, 274, 342, 342, 5452, 300, 326, 563, 1410, 486, 506, 446, 1815, 8867, 261, 2665, 24061, 269, 563, 262, 274, 342, 342, 1021, 563, 1410, 506, 326, 2665, 15406, 289, 1375, 1375, 1375, 2], "score": -0.5260571837425232, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "getNativeFrame", "`", "method", "effectively", ",", "ensure", "that", "the", "`", "videoTrack", ".", "nextFrame", "(", ")", "`", "and", "`", "decoder", ".", "decodeFrame", "(", ")", "`", "functionality", "is", "covered", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetNativeFrameReturnsDecodedFrame", "(", ")", "throws", "IOException", "{", "/", "/", "Mock", "dependencies", "VideoTrack", "mockVideoTrack", "=", "mock", "(", "VideoTrack", ".", "class", ")", ";", "Decoder", "mockDecoder", "=", "mock", "(", "Decoder", ".", "class", ")", ";", "Buffer", "[", "]", "buffers", "=", "new", "Buffer", "[", "1", "]", ";", "/", "/", "Assume", "getBuffer", "method", "returns", "this", "buffer", "array", "Packet", "mockFrame", "=", "new", "Packet", "(", ")", ";", "/", "/", "Mocked", "frame", "given", "by", "videoTrack", "Picture", "expectedPicture", "=", "new", "Picture", "(", ")", ";", "/", "/", "Expected", "Picture", "returned", "by", "decodeFrame", "when", "(", "mockVideoTrack", ".", "nextFrame", "(", ")", ")", ".", "thenReturn", "(", "mockFrame", ")", ";", "/", "/", "Stubbing", "nextFrame", "to", "return", "a", "mockFrame", "when", "(", "mockDecoder", ".", "decodeFrame", "(", "mockFrame", ",", "buffers", ")", ")", ".", "thenReturn", "(", "expectedPicture", ")", ";", "/", "/", "Stubbing", "decodeFrame", "to", "return", "the", "expected", "Picture", "FrameGrab", "frameGrab", "=", "new", "FrameGrab", "(", "mockVideoTrack", ",", "mockDecoder", ",", "buffers", ")", ";", "/", "/", "Create", "instance", "with", "mocked", "objects", "Picture", "result", "=", "frameGrab", ".", "getNativeFrame", "(", ")", ";", "/", "/", "Act", "-", "call", "the", "method", "under", "test", "assertNotNull", "(", "result", ")", ";", "/", "/", "Assert", "-", "the", "result", "should", "not", "be", "null", "assertEquals", "(", "expectedPicture", ",", "result", ")", ";", "/", "/", "The", "result", "should", "be", "the", "expected", "picture", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 9220, 3219, 1356, 24888, 3219, 261, 262, 1216, 1860, 288, 28770, 2665, 273, 394, 28770, 261, 262, 274, 11114, 4414, 273, 394, 11114, 261, 262, 274, 1347, 261, 6191, 4402, 263, 1024, 3219, 261, 262, 262, 263, 1508, 990, 261, 4414, 262, 274, 1347, 261, 8320, 263, 2495, 3219, 261, 1281, 261, 11114, 263, 667, 262, 269, 1281, 261, 3525, 306, 308, 263, 667, 262, 262, 262, 263, 1508, 990, 261, 2665, 262, 274, 28770, 563, 273, 394, 8058, 14571, 70, 261, 262, 263, 25945, 3219, 261, 262, 274, 1815, 8867, 261, 2665, 269, 563, 262, 274, 289, 2], "score": -0.5390639901161194, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetNativeFrameReturnsDecodedFrame", "(", ")", "throws", "IOException", "{", "Picture", "expected", "=", "new", "Picture", "(", ")", ";", "Packet", "packet", "=", "new", "Packet", "(", ")", ";", "when", "(", "videoTrack", ".", "nextFrame", "(", ")", ")", ".", "thenReturn", "(", "packet", ")", ";", "when", "(", "decoder", ".", "decodeFrame", "(", "any", "(", "Packet", ".", "class", ")", ",", "any", "(", "Buffer", "[", "]", ".", "class", ")", ")", ")", ".", "thenReturn", "(", "expected", ")", ";", "Picture", "result", "=", "new", "FrameGrab", "(", ")", ".", "getNativeFrame", "(", ")", ";", "assertEquals", "(", "expected", ",", "result", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 10.77532365390773, "bleu-max": 17.91133980809729, "bleu-min": 10.295205318795361, "bleu-avg": 12.509701234164613, "code-bleu": 6.790648388435218, "code-bleu-max": 16.89674556086649, "code-bleu-min": 1.6792834291149534, "code-bleu-avg": 11.077882483555635, "edit-sim": 57, "edit-sim-max": 61, "edit-sim-min": 39, "edit-sim-avg": 50.9, "rouge-p": 85.71428571428571, "rouge-p-max": 85.71428571428571, "rouge-p-min": 50.0, "rouge-p-avg": 69.04761904761904, "rouge-r": 54.54545454545454, "rouge-r-max": 54.54545454545454, "rouge-r-min": 27.27272727272727, "rouge-r-avg": 49.0909090909091, "rouge-f": 66.66666619135802, "rouge-f-max": 66.66666619135802, "rouge-f-min": 35.29411719031142, "rouge-f-avg": 57.08909480531956, "num-seq": 10}, "time": 0.8832066059112549, "misc": {}}
{"id": 54, "data_id": "csn-69043", "input_stids": [1, 32315, 32315, 11820, 23, 3672, 4709, 8058, 14571, 70, 32315, 8058, 14571, 70, 32315, 6191, 263, 2897, 4047, 3219, 261, 404, 5877, 262, 274, 32315, 32315, 1071, 28770, 25945, 3219, 261, 262, 1216, 1860, 288, 11114, 2623, 273, 6191, 4402, 263, 1024, 3219, 261, 262, 274, 309, 261, 2623, 422, 446, 262, 327, 446, 274, 327, 8320, 263, 2495, 3219, 261, 2623, 269, 22238, 261, 262, 262, 274, 289, 32315, 632, 7766, 261, 2665, 273, 3235, 263, 667, 262, 1071, 918, 1842, 3219, 14571, 70, 2568, 4976, 14097, 261, 262, 1216, 1185, 32315, 8058, 14571, 70, 10186, 273, 752, 3219, 14571, 70, 261, 7471, 2909, 261, 394, 1387, 261, 315, 3902, 6, 262, 262, 262, 274, 2], "topk": [{"tids": [1, 25395, 261, 10186, 263, 25945, 3219, 261, 262, 262, 274, 2], "score": -0.06462948769330978, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "fg", ".", "getNativeFrame", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 8058, 14571, 70, 10186, 273, 752, 3219, 14571, 70, 261, 7471, 2909, 261, 394, 1387, 261, 315, 7128, 315, 262, 262, 262, 274, 2], "score": -0.2134954184293747, "weight": 1, "toks": ["<s>", "FrameGrab", "fg", "=", "createFrameGrab", "(", "readableChannel", "(", "new", "File", "(", "\"", "STR", "\"", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 8058, 14571, 70, 10186, 273, 752, 3219, 14571, 70, 261, 7471, 2909, 261, 394, 1387, 261, 315, 3296, 263, 6749, 24, 315, 262, 262, 262, 274, 2], "score": -0.3020753264427185, "weight": 1, "toks": ["<s>", "FrameGrab", "fg", "=", "createFrameGrab", "(", "readableChannel", "(", "new", "File", "(", "\"", "sample", ".", "mp4", "\"", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 8058, 14571, 70, 10186, 273, 752, 3219, 14571, 70, 261, 7471, 2909, 261, 394, 1387, 261, 315, 7128, 315, 262, 262, 262, 274, 2], "score": -0.30864623188972473, "weight": 1, "toks": ["<s>", "FrameGrab", "fg", "=", "createFrameGrab", "(", "readableChannel", "(", "new", "File", "(", "\"", "STR", "\"", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 1375, 10186, 263, 25396, 261, 404, 5877, 262, 274, 1375, 2], "score": -0.3614422678947449, "weight": 1, "toks": ["<s>", "`", "fg", ".", "getFrame", "(", "175", ")", ";", "`", "</s>"]}, {"tids": [1, 10186, 263, 2897, 3219, 261, 404, 5877, 262, 274, 2], "score": -0.3891668915748596, "weight": 1, "toks": ["<s>", "fg", ".", "gotoFrame", "(", "175", ")", ";", "</s>"]}, {"tids": [1, 6191, 263, 2897, 4047, 3219, 261, 404, 5877, 262, 274, 2], "score": -0.4040417969226837, "weight": 1, "toks": ["<s>", "video", ".", "gotoSyncFrame", "(", "175", ")", ";", "</s>"]}, {"tids": [1, 10186, 263, 25945, 3219, 261, 262, 274, 2], "score": -0.44492819905281067, "weight": 1, "toks": ["<s>", "fg", ".", "getNativeFrame", "(", ")", ";", "</s>"]}, {"tids": [1, 8058, 14571, 70, 10186, 273, 752, 3219, 14571, 70, 261, 7471, 2909, 261, 394, 1387, 261, 315, 7128, 315, 262, 262, 262, 274, 2], "score": -0.45906364917755127, "weight": 1, "toks": ["<s>", "FrameGrab", "fg", "=", "createFrameGrab", "(", "readableChannel", "(", "new", "File", "(", "\"", "STR", "\"", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 10186, 263, 2897, 4047, 3219, 261, 404, 5877, 262, 274, 2], "score": -0.4898378551006317, "weight": 1, "toks": ["<s>", "fg", ".", "gotoSyncFrame", "(", "175", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 60.653065971263345, "bleu-max": 100.0, "bleu-min": 29.94029821162099, "bleu-avg": 53.73877285478635, "code-bleu": 39.84813922956387, "code-bleu-max": 100.0, "code-bleu-min": 28.68259420891004, "code-bleu-avg": 44.93321042154001, "edit-sim": 74, "edit-sim-max": 100, "edit-sim-min": 50, "edit-sim-avg": 70.4, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 55.55555555555556, "rouge-p-avg": 77.50793650793652, "rouge-r": 62.5, "rouge-r-max": 100.0, "rouge-r-min": 62.5, "rouge-r-avg": 70.0, "rouge-f": 76.92307644970415, "rouge-f-max": 99.9999995, "rouge-f-min": 58.82352891349482, "rouge-f-avg": 72.86037442513675, "num-seq": 10}, "time": 0.7385265827178955, "misc": {}}
{"id": 55, "data_id": "csn-69128", "input_stids": [1, 32315, 32315, 2974, 2986, 4709, 32315, 1033, 32315, 32315, 32315, 1071, 760, 514, 17028, 261, 1033, 1081, 262, 288, 3225, 2089, 273, 394, 3225, 261, 262, 274, 3094, 19558, 2110, 273, 3094, 19558, 263, 752, 1702, 19558, 261, 262, 274, 17028, 1676, 261, 1081, 269, 2110, 269, 2089, 262, 274, 327, 2089, 263, 1762, 261, 262, 274, 289, 32315, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 13279, 261, 262, 32315, 2], "topk": [{"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 261, 2665, 273, 2754, 263, 667, 262, 1071, 918, 1842, 2041, 921, 261, 262, 288, 2974, 2986, 263, 17028, 261, 446, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.22905024886131287, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "(", "expected", "=", "IllegalArgumentException", ".", "class", ")", "public", "void", "testNullObject", "(", ")", "{", "ToJSON", ".", "toJSON", "(", "null", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1815, 21845, 261, 7283, 15526, 668, 263, 667, 269, 261, 262, 300, 405, 17028, 261, 394, 1033, 261, 262, 262, 262, 274, 2], "score": -0.2430003434419632, "weight": 1, "toks": ["<s>", "assertThrows", "(", "StackOverflowError", ".", "class", ",", "(", ")", "-", ">", "toJSON", "(", "new", "Object", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 774, 2986, 1190, 2041, 921, 261, 262, 288, 1815, 8867, 261, 315, 446, 315, 269, 2974, 2986, 4709, 263, 17028, 261, 446, 262, 262, 274, 289, 2], "score": -0.264090359210968, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testToJSONWithNullObject", "(", ")", "{", "assertEquals", "(", "\"", "null", "\"", ",", "ToJSONTest", ".", "toJSON", "(", "null", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 13743, 353, 279, 20482, 1177, 434, 326, 1842, 707, 364, 326, 1375, 17028, 1375, 707, 269, 7155, 310, 603, 7769, 364, 733, 15139, 294, 1375, 1375, 1375, 2252, 632, 7766, 261, 2665, 273, 7283, 15526, 668, 263, 667, 262, 342, 342, 17720, 1520, 618, 2511, 603, 3433, 4471, 1071, 918, 1842, 13279, 261, 262, 288, 1033, 1081, 273, 394, 1033, 261, 262, 274, 342, 342, 10939, 279, 30383, 4904, 316, 1081, 309, 3433, 1796, 11854, 4058, 3302, 296, 268, 1640, 518, 17028, 261, 1081, 262, 274, 342, 342, 1220, 745, 1410, 604, 392, 1520, 6541, 358, 326, 8589, 289, 1375, 1375, 1375, 2], "score": -0.301053524017334, "weight": 1, "toks": ["<s>", "Here", "is", "a", "simplified", "version", "of", "the", "test", "method", "for", "the", "`", "toJSON", "`", "method", ",", "focusing", "on", "testing", "for", "object", "cycles", ":", "`", "`", "`", "java", "@", "Test", "(", "expected", "=", "StackOverflowError", ".", "class", ")", "/", "/", "Adjust", "exception", "type", "based", "on", "your", "implementation", "public", "void", "testCycle", "(", ")", "{", "Object", "obj", "=", "new", "Object", "(", ")", ";", "/", "/", "Setup", "a", "cyclic", "dependency", "in", "obj", "if", "your", "JSON", "serialization", "logic", "doesn", "'", "t", "handle", "it", "toJSON", "(", "obj", ")", ";", "/", "/", "This", "call", "should", "throw", "an", "exception", "due", "to", "the", "cycle", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 774, 2986, 1190, 2041, 261, 262, 288, 1815, 2041, 261, 1033, 263, 17028, 261, 446, 262, 262, 274, 289, 2], "score": -0.3050134479999542, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testToJSONWithNull", "(", ")", "{", "assertNull", "(", "Object", ".", "toJSON", "(", "null", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5784, 921, 261, 262, 288, 1033, 1081, 273, 394, 1033, 261, 262, 274, 514, 563, 273, 17028, 261, 1081, 262, 274, 25395, 261, 563, 262, 274, 1815, 8381, 261, 563, 263, 2709, 261, 262, 262, 274, 289, 2], "score": -0.3062165081501007, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSimpleObject", "(", ")", "{", "Object", "obj", "=", "new", "Object", "(", ")", ";", "String", "result", "=", "toJSON", "(", "obj", ")", ";", "assertNotNull", "(", "result", ")", ";", "assertFalse", "(", "result", ".", "isEmpty", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1921, 921, 261, 262, 288, 1815, 8867, 261, 315, 288, 289, 315, 269, 17028, 261, 394, 1033, 261, 262, 262, 262, 274, 289, 2], "score": -0.36040183901786804, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testEmptyObject", "(", ")", "{", "assertEquals", "(", "\"", "{", "}", "\"", ",", "toJSON", "(", "new", "Object", "(", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 7693, 716, 326, 707, 1375, 17028, 261, 262, 1375, 848, 1640, 30383, 5351, 3470, 326, 733, 2667, 358, 5309, 14853, 13917, 263, 2], "score": -0.36679431796073914, "weight": 1, "toks": ["<s>", "Ensure", "that", "the", "method", "`", "toJSON", "(", ")", "`", "can", "handle", "cyclic", "references", "within", "the", "object", "graph", "to", "prevent", "infinite", "recursion", ".", "</s>"]}, {"tids": [1, 1220, 1842, 353, 26584, 358, 866, 3661, 326, 1375, 17028, 1375, 707, 7372, 2184, 4191, 30383, 5351, 358, 3387, 716, 326, 707, 3344, 8783, 20754, 281, 2182, 578, 6684, 25063, 3470, 326, 1269, 2021, 434, 4336, 10993, 263, 2], "score": -0.37478527426719666, "weight": 1, "toks": ["<s>", "This", "test", "is", "designed", "to", "check", "how", "the", "`", "toJSON", "`", "method", "handles", "objects", "containing", "cyclic", "references", "to", "ensure", "that", "the", "method", "either", "correctly", "manages", "them", "or", "fails", "gracefully", "within", "the", "specified", "timeout", "of", "1000", "milliseconds", ".", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 261, 2665, 273, 2754, 263, 667, 262, 1071, 918, 1842, 2041, 921, 261, 262, 288, 8005, 797, 263, 17028, 261, 446, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3802123963832855, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "(", "expected", "=", "IllegalArgumentException", ".", "class", ")", "public", "void", "testNullObject", "(", ")", "{", "MyClass", ".", "toJSON", "(", "null", ")", ";", "}", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 13.083737883508872, "bleu-max": 19.070828081828378, "bleu-min": 11.044795567078944, "bleu-avg": 13.276116240408692, "code-bleu": 13.219890162594124, "code-bleu-max": 13.219890162594124, "code-bleu-min": 2.6499243417336915, "code-bleu-avg": 9.523090807199438, "edit-sim": 39, "edit-sim-max": 39, "edit-sim-min": 31, "edit-sim-avg": 36.3, "rouge-p": 40.0, "rouge-p-max": 42.857142857142854, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 38.89177489177489, "rouge-r": 57.14285714285714, "rouge-r-max": 57.14285714285714, "rouge-r-min": 42.857142857142854, "rouge-r-avg": 54.28571428571428, "rouge-f": 47.0588230449827, "rouge-f-max": 47.0588230449827, "rouge-f-min": 37.499999507812504, "rouge-f-avg": 45.15989680731232, "num-seq": 10}, "time": 0.7514805793762207, "misc": {}}
{"id": 56, "data_id": "csn-69128", "input_stids": [1, 32315, 1071, 3905, 21, 261, 262, 288, 333, 263, 2454, 273, 394, 2407, 411, 3905, 22, 405, 261, 262, 274, 289, 32315, 2974, 2986, 4709, 2974, 2986, 4709, 8, 2009, 21, 32315, 1033, 32315, 327, 25324, 682, 263, 752, 261, 25324, 263, 752, 261, 7701, 20, 92, 2009, 269, 7701, 20, 93, 2009, 269, 25324, 263, 1278, 261, 7701, 20, 262, 262, 269, 25324, 263, 752, 261, 7701, 21, 92, 2009, 269, 7701, 21, 93, 2009, 269, 25324, 263, 1278, 261, 7701, 21, 262, 262, 262, 274, 32315, 32315, 1071, 760, 514, 17028, 261, 1033, 1081, 262, 288, 3225, 2089, 273, 394, 3225, 261, 262, 274, 3094, 19558, 2110, 273, 3094, 19558, 263, 752, 1702, 19558, 261, 262, 274, 17028, 1676, 261, 1081, 269, 2110, 269, 2089, 262, 274, 327, 2089, 263, 1762, 261, 262, 274, 289, 32315, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 13279, 261, 262, 32315, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 2], "topk": [{"tids": [1, 927, 21, 263, 17028, 261, 262, 274, 2], "score": -0.18515217304229736, "weight": 1, "toks": ["<s>", "cl1", ".", "toJSON", "(", ")", ";", "</s>"]}, {"tids": [1, 927, 21, 263, 17028, 261, 262, 274, 2], "score": -0.3161684572696686, "weight": 1, "toks": ["<s>", "cl1", ".", "toJSON", "(", ")", ";", "</s>"]}, {"tids": [1, 927, 21, 263, 17028, 261, 262, 274, 2], "score": -0.38068079948425293, "weight": 1, "toks": ["<s>", "cl1", ".", "toJSON", "(", ")", ";", "</s>"]}, {"tids": [1, 927, 21, 263, 17028, 261, 262, 274, 2], "score": -0.41520053148269653, "weight": 1, "toks": ["<s>", "cl1", ".", "toJSON", "(", ")", ";", "</s>"]}, {"tids": [1, 927, 21, 263, 17028, 261, 262, 274, 2], "score": -0.43219539523124695, "weight": 1, "toks": ["<s>", "cl1", ".", "toJSON", "(", ")", ";", "</s>"]}, {"tids": [1, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 2], "score": -0.4626801609992981, "weight": 1, "toks": ["<s>", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "</s>"]}, {"tids": [1, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 262, 274, 927, 21, 263, 2454, 263, 527, 261, 927, 22, 262, 274, 927, 21, 263, 2454, 263, 527, 261, 927, 22, 262, 274, 342, 342, 3094, 303, 2544, 2822, 279, 8589, 316, 326, 666, 263, 2], "score": -0.4718549847602844, "weight": 1, "toks": ["<s>", "Cl2", "cl2", "=", "new", "Cl2", "(", ")", ";", "cl1", ".", "arr", ".", "add", "(", "cl2", ")", ";", "cl1", ".", "arr", ".", "add", "(", "cl2", ")", ";", "/", "/", "Introducing", "a", "cycle", "in", "the", "list", ".", "</s>"]}, {"tids": [1, 927, 21, 263, 17028, 261, 262, 274, 2], "score": -0.4790642559528351, "weight": 1, "toks": ["<s>", "cl1", ".", "toJSON", "(", ")", ";", "</s>"]}, {"tids": [1, 927, 21, 263, 17028, 261, 262, 274, 2], "score": -0.5395700335502625, "weight": 1, "toks": ["<s>", "cl1", ".", "toJSON", "(", ")", ";", "</s>"]}, {"tids": [1, 927, 21, 263, 9604, 2986, 261, 262, 274, 2], "score": -0.5562048554420471, "weight": 1, "toks": ["<s>", "cl1", ".", "addToJSON", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 24.00475352087591, "bleu-max": 46.542002141774795, "bleu-min": 17.94837793103305, "bleu-avg": 36.12669536509124, "code-bleu": 18.61371093345245, "code-bleu-max": 19.16968420728629, "code-bleu-min": 2.853756878156641, "code-bleu-avg": 15.130114660732701, "edit-sim": 67, "edit-sim-max": 89, "edit-sim-min": 48, "edit-sim-avg": 76.2, "rouge-p": 71.42857142857143, "rouge-p-max": 85.71428571428571, "rouge-p-min": 60.0, "rouge-p-avg": 72.35714285714285, "rouge-r": 71.42857142857143, "rouge-r-max": 85.71428571428571, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 78.57142857142856, "rouge-f": 71.42857092857143, "rouge-f-max": 85.71428521428571, "rouge-f-min": 61.53846104142012, "rouge-f-avg": 74.78248172836808, "num-seq": 10}, "time": 0.621901273727417, "misc": {}}
{"id": 57, "data_id": "csn-69128", "input_stids": [1, 32315, 1071, 918, 527, 2009, 22, 261, 3905, 22, 1804, 262, 288, 2454, 263, 527, 261, 1804, 262, 274, 289, 32315, 2974, 2986, 4709, 2974, 2986, 4709, 8, 2009, 21, 32315, 1033, 32315, 327, 25324, 682, 263, 752, 261, 25324, 263, 752, 261, 7701, 20, 92, 2009, 269, 7701, 20, 93, 2009, 269, 25324, 263, 1278, 261, 7701, 20, 262, 262, 269, 25324, 263, 752, 261, 7701, 21, 92, 2009, 269, 7701, 21, 93, 2009, 269, 25324, 263, 1278, 261, 7701, 21, 262, 262, 262, 274, 32315, 32315, 1071, 760, 514, 17028, 261, 1033, 1081, 262, 288, 3225, 2089, 273, 394, 3225, 261, 262, 274, 3094, 19558, 2110, 273, 3094, 19558, 263, 752, 1702, 19558, 261, 262, 274, 17028, 1676, 261, 1081, 269, 2110, 269, 2089, 262, 274, 327, 2089, 263, 1762, 261, 262, 274, 289, 32315, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 13279, 261, 262, 32315, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 774, 2986, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 514, 1163, 273, 2974, 2986, 263, 17028, 261, 927, 21, 262, 274, 25395, 261, 1163, 262, 274, 289, 2], "score": -0.17536045610904694, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testToJSON", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "cl1", ".", "addCl2", "(", "new", "Cl2", "(", "cl1", ")", ")", ";", "String", "json", "=", "ToJSON", ".", "toJSON", "(", "cl1", ")", ";", "assertNotNull", "(", "json", ")", ";", "}", "</s>"]}, {"tids": [1, 3049, 1375, 1842, 13279, 261, 262, 1375, 358, 3387, 716, 326, 707, 7372, 733, 15139, 2887, 14853, 13917, 578, 1334, 263, 2], "score": -0.18925242125988007, "weight": 1, "toks": ["<s>", "Call", "`", "testCycle", "(", ")", "`", "to", "ensure", "that", "the", "method", "handles", "object", "cycles", "without", "infinite", "recursion", "or", "errors", ".", "</s>"]}, {"tids": [1, 1021, 1842, 353, 26584, 358, 5956, 326, 5057, 434, 279, 30383, 4904, 316, 11854, 263, 2597, 1410, 6932, 716, 326, 1375, 17028, 1375, 707, 848, 8783, 4472, 392, 733, 2667, 716, 6104, 15139, 2887, 19014, 392, 14853, 13917, 263, 2], "score": -0.256790429353714, "weight": 1, "toks": ["<s>", "The", "test", "is", "designed", "to", "evaluate", "the", "handling", "of", "a", "cyclic", "dependency", "in", "serialization", ".", "It", "should", "confirm", "that", "the", "`", "toJSON", "`", "method", "can", "correctly", "serialize", "an", "object", "graph", "that", "includes", "cycles", "without", "entering", "an", "infinite", "recursion", ".", "</s>"]}, {"tids": [1, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 13279, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 289, 2], "score": -0.27092260122299194, "weight": 1, "toks": ["<s>", "@", "Test", "(", "timeout", "=", "1000", ")", "public", "void", "testCycle", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "cl1", ".", "addCl2", "(", "new", "Cl2", "(", "cl1", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 774, 2986, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 25395, 261, 17028, 261, 927, 21, 262, 262, 274, 289, 2], "score": -0.31232818961143494, "weight": 1, "toks": ["<s>", "@", "Test", "(", "timeout", "=", "1000", ")", "public", "void", "testToJSON", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "cl1", ".", "addCl2", "(", "new", "Cl2", "(", "cl1", ")", ")", ";", "assertNotNull", "(", "toJSON", "(", "cl1", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 3929, 716, 1375, 527, 2009, 22, 1375, 707, 8783, 4831, 392, 791, 434, 1375, 3905, 22, 1375, 358, 1375, 2454, 1375, 666, 316, 326, 1375, 3905, 21, 1375, 667, 269, 1846, 1338, 1608, 1245, 3021, 358, 1842, 326, 14176, 1839, 3637, 731, 326, 667, 263, 13743, 296, 272, 3661, 1846, 4825, 1045, 518, 316, 279, 1842, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 1815, 5510, 261, 927, 21, 263, 2454, 263, 1914, 261, 927, 22, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.329916775226593, "weight": 1, "toks": ["<s>", "To", "verify", "that", "`", "addCl2", "`", "method", "correctly", "adds", "an", "instance", "of", "`", "Cl2", "`", "to", "`", "arr", "`", "list", "in", "the", "`", "Cl1", "`", "class", ",", "you", "only", "need", "one", "statement", "to", "test", "the", "functionality", "after", "setting", "up", "the", "class", ".", "Here", "'", "s", "how", "you", "might", "write", "it", "in", "a", "test", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "assertTrue", "(", "cl1", ".", "arr", ".", "contains", "(", "cl2", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 986, 2009, 22, 1442, 261, 262, 288, 3905, 22, 1804, 273, 394, 3905, 22, 261, 262, 274, 1842, 797, 263, 527, 2009, 22, 261, 1804, 262, 274, 289, 2], "score": -0.35811102390289307, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldAddCl2Instance", "(", ")", "{", "Cl2", "inst", "=", "new", "Cl2", "(", ")", ";", "testClass", ".", "addCl2", "(", "inst", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 1815, 8867, 261, 404, 269, 927, 21, 263, 2454, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.3765181005001068, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "assertEquals", "(", "1", ",", "cl1", ".", "arr", ".", "size", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 927, 21, 263, 17028, 261, 262, 274, 2], "score": -0.38314196467399597, "weight": 1, "toks": ["<s>", "cl1", ".", "toJSON", "(", ")", ";", "</s>"]}, {"tids": [1, 1220, 810, 14606, 358, 912, 5402, 11987, 981, 24613, 3746, 358, 5110, 5402, 11987, 269, 6826, 715, 7155, 310, 603, 2836, 7434, 269, 5057, 1796, 11854, 269, 471, 21964, 598, 733, 11499, 263, 1021, 498, 4085, 854, 487, 13040, 294, 300, 432, 707, 1375, 527, 2009, 22, 261, 262, 1375, 1492, 4831, 392, 733, 791, 1375, 3905, 22, 1375, 358, 279, 1849, 1375, 2454, 1375, 263, 300, 432, 760, 707, 1375, 17028, 261, 262, 1375, 1492, 27187, 392, 1375, 1033, 1375, 1368, 1796, 740, 1450, 279, 5904, 4222, 445, 263, 300, 432, 2836, 1842, 1375, 1842, 13279, 261, 262, 1375, 1492, 7434, 364, 6143, 830, 1706, 5351, 3470, 2184, 358, 866, 364, 11854, 8296, 578, 2110, 9391, 87, 263, 16803, 4259, 2186, 269, 326, 1024, 6374, 2235, 364, 7769, 326, 1796, 11854, 707, 3377, 506, 358, 3387, 716, 326, 1375, 17028, 1375, 707, 8783, 7372, 326, 6143, 830, 1706, 4904, 26339, 316, 326, 1375, 1842, 13279, 261, 262, 1375, 707, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 17028, 14309, 3259, 17992, 18964, 8053, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 927, 21, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 514, 1163, 273, 17028, 261, 927, 21, 262, 274, 25395, 261, 1163, 262, 274, 1815, 5510, 261, 1163, 263, 1914, 261, 315, 8589, 8316, 315, 262, 571, 571, 1163, 263, 769, 261, 262, 405, 374, 262, 274, 342, 342, 1021, 2269, 10935, 603, 4471, 3189, 603, 3661, 15139, 854, 7681, 263, 289, 1375, 1375, 1375, 2], "score": -0.38340625166893005, "weight": 1, "toks": ["<s>", "This", "input", "appears", "to", "contain", "programming", "code", "snippets", "related", "to", "Java", "programming", ",", "particularly", "focusing", "on", "unit", "tests", ",", "handling", "JSON", "serialization", ",", "and", "dealing", "with", "object", "relationships", ".", "The", "key", "components", "are", "as", "follows", ":", "-", "A", "method", "`", "addCl2", "(", ")", "`", "which", "adds", "an", "object", "instance", "`", "Cl2", "`", "to", "a", "collection", "`", "arr", "`", ".", "-", "A", "static", "method", "`", "toJSON", "(", ")", "`", "which", "serializes", "an", "`", "Object", "`", "into", "JSON", "format", "using", "a", "recursive", "helper", "function", ".", "-", "A", "unit", "test", "`", "testCycle", "(", ")", "`", "which", "tests", "for", "cyclical", "references", "within", "objects", "to", "check", "for", "serialization", "issues", "or", "stack", "overflows", ".", "Given", "these", "elements", ",", "the", "next", "logical", "step", "for", "testing", "the", "JSON", "serialization", "method", "could", "be", "to", "ensure", "that", "the", "`", "toJSON", "`", "method", "correctly", "handles", "the", "cyclical", "dependency", "introduced", "in", "the", "`", "testCycle", "(", ")", "`", "method", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "toJSONShouldHandleCyclicDependencies", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", "cl1", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "String", "json", "=", "toJSON", "(", "cl1", ")", ";", "assertNotNull", "(", "json", ")", ";", "assertTrue", "(", "json", ".", "contains", "(", "\"", "cycle", "detected", "\"", ")", "|", "|", "json", ".", "length", "(", ")", ">", "0", ")", ";", "/", "/", "The", "condition", "depends", "on", "implementation", "details", "on", "how", "cycles", "are", "handled", ".", "}", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 40.35278637463991, "bleu-max": 100.0, "bleu-min": 19.230188007838596, "bleu-avg": 41.46389447801432, "code-bleu": 21.61677473808661, "code-bleu-max": 100.0, "code-bleu-min": 5.542276018898604, "code-bleu-avg": 38.12525213781857, "edit-sim": 43, "edit-sim-max": 100, "edit-sim-min": 41, "edit-sim-avg": 59.5, "rouge-p": 44.44444444444444, "rouge-p-max": 100.0, "rouge-p-min": 40.0, "rouge-p-avg": 55.97619047619048, "rouge-r": 57.14285714285714, "rouge-r-max": 100.0, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 70.0, "rouge-f": 49.99999950781251, "rouge-f-max": 99.9999995, "rouge-f-min": 47.0588230449827, "rouge-f-avg": 61.77684358158016, "num-seq": 10}, "time": 0.8644886016845703, "misc": {}}
{"id": 58, "data_id": "csn-69128", "input_stids": [1, 32315, 1071, 918, 527, 2009, 22, 261, 3905, 22, 1804, 262, 288, 2454, 263, 527, 261, 1804, 262, 274, 289, 32315, 2974, 2986, 4709, 2974, 2986, 4709, 8, 2009, 21, 32315, 1033, 32315, 327, 25324, 682, 263, 752, 261, 25324, 263, 752, 261, 7701, 20, 92, 2009, 269, 7701, 20, 93, 2009, 269, 25324, 263, 1278, 261, 7701, 20, 262, 262, 269, 25324, 263, 752, 261, 7701, 21, 92, 2009, 269, 7701, 21, 93, 2009, 269, 25324, 263, 1278, 261, 7701, 21, 262, 262, 262, 274, 32315, 32315, 1071, 760, 514, 17028, 261, 1033, 1081, 262, 288, 3225, 2089, 273, 394, 3225, 261, 262, 274, 3094, 19558, 2110, 273, 3094, 19558, 263, 752, 1702, 19558, 261, 262, 274, 17028, 1676, 261, 1081, 269, 2110, 269, 2089, 262, 274, 327, 2089, 263, 1762, 261, 262, 274, 289, 32315, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 13279, 261, 262, 32315, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 774, 2986, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 927, 21, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 514, 1163, 273, 17028, 261, 927, 21, 262, 274, 289, 2], "score": -0.09114636480808258, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testToJSON", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", "cl1", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "String", "json", "=", "toJSON", "(", "cl1", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 774, 2986, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 514, 1163, 1253, 273, 2974, 2986, 4709, 263, 17028, 261, 927, 21, 262, 274, 289, 2], "score": -0.163935124874115, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testToJSON", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "cl1", ".", "addCl2", "(", "new", "Cl2", "(", "cl1", ")", ")", ";", "String", "jsonResult", "=", "ToJSONTest", ".", "toJSON", "(", "cl1", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 632, 7766, 1071, 918, 1842, 774, 2986, 261, 262, 288, 17028, 261, 394, 3905, 21, 261, 262, 262, 274, 289, 1375, 2], "score": -0.22602209448814392, "weight": 1, "toks": ["<s>", "`", "@", "Test", "public", "void", "testToJSON", "(", ")", "{", "toJSON", "(", "new", "Cl1", "(", ")", ")", ";", "}", "`", "</s>"]}, {"tids": [1, 14373, 1375, 17028, 1375, 603, 1375, 927, 21, 1375, 471, 1815, 326, 563, 358, 3929, 326, 1796, 4105, 1207, 263, 2], "score": -0.2434198409318924, "weight": 1, "toks": ["<s>", "Invoke", "`", "toJSON", "`", "on", "`", "cl1", "`", "and", "assert", "the", "result", "to", "verify", "the", "JSON", "conversion", "process", ".", "</s>"]}, {"tids": [1, 10371, 726, 279, 1842, 10766, 364, 1375, 17028, 1375, 1625, 279, 8589, 353, 26339, 635, 1554, 8537, 2184, 358, 3929, 716, 326, 707, 7372, 30383, 5030, 8783, 263, 2], "score": -0.26286742091178894, "weight": 1, "toks": ["<s>", "Arrange", "a", "test", "scenario", "for", "`", "toJSON", "`", "where", "a", "cycle", "is", "introduced", "by", "interconnected", "objects", "to", "verify", "that", "the", "method", "handles", "cyclic", "dependencies", "correctly", ".", "</s>"]}, {"tids": [1, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 2], "score": -0.2897130846977234, "weight": 1, "toks": ["<s>", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "cl1", ".", "addCl2", "(", "new", "Cl2", "(", "cl1", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 1815, 8867, 261, 404, 269, 927, 21, 263, 2454, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.32216525077819824, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "assertEquals", "(", "1", ",", "cl1", ".", "arr", ".", "size", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 774, 2986, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 514, 563, 273, 2974, 2986, 4709, 263, 17028, 261, 927, 21, 262, 274, 289, 2], "score": -0.3224283754825592, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testToJSON", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "cl1", ".", "addCl2", "(", "new", "Cl2", "(", "cl1", ")", ")", ";", "String", "result", "=", "ToJSONTest", ".", "toJSON", "(", "cl1", ")", ";", "}", "</s>"]}, {"tids": [1, 14373, 1375, 17028, 1375, 603, 326, 791, 1375, 927, 21, 1375, 358, 4472, 518, 358, 1796, 471, 6932, 326, 876, 353, 487, 2665, 263, 2], "score": -0.32331252098083496, "weight": 1, "toks": ["<s>", "Invoke", "`", "toJSON", "`", "on", "the", "instance", "`", "cl1", "`", "to", "serialize", "it", "to", "JSON", "and", "confirm", "the", "output", "is", "as", "expected", ".", "</s>"]}, {"tids": [1, 7693, 1375, 17028, 1375, 707, 848, 10680, 30383, 5030, 316, 2184, 263, 2], "score": -0.3734549283981323, "weight": 1, "toks": ["<s>", "Ensure", "`", "toJSON", "`", "method", "can", "manage", "cyclic", "dependencies", "in", "objects", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 16.856590464330143, "bleu-avg": 45.079825540217584, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 5.252007132627293, "code-bleu-avg": 35.016048262959856, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 41, "edit-sim-avg": 59.6, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 36.36363636363637, "rouge-p-avg": 56.67424242424242, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 71.42857142857142, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 44.444443969135804, "rouge-f-avg": 62.85620866116746, "num-seq": 10}, "time": 0.7737586498260498, "misc": {}}
{"id": 59, "data_id": "csn-69128", "input_stids": [1, 32315, 1071, 918, 527, 2009, 22, 261, 3905, 22, 1804, 262, 288, 2454, 263, 527, 261, 1804, 262, 274, 289, 32315, 2974, 2986, 4709, 2974, 2986, 4709, 8, 2009, 21, 32315, 1033, 32315, 327, 25324, 682, 263, 752, 261, 25324, 263, 752, 261, 7701, 20, 92, 2009, 269, 7701, 20, 93, 2009, 269, 25324, 263, 1278, 261, 7701, 20, 262, 262, 269, 25324, 263, 752, 261, 7701, 21, 92, 2009, 269, 7701, 21, 93, 2009, 269, 25324, 263, 1278, 261, 7701, 21, 262, 262, 262, 274, 32315, 32315, 1071, 760, 514, 17028, 261, 1033, 1081, 262, 288, 3225, 2089, 273, 394, 3225, 261, 262, 274, 3094, 19558, 2110, 273, 3094, 19558, 263, 752, 1702, 19558, 261, 262, 274, 17028, 1676, 261, 1081, 269, 2110, 269, 2089, 262, 274, 327, 2089, 263, 1762, 261, 262, 274, 289, 32315, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 13279, 261, 262, 32315, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 2], "topk": [{"tids": [1, 1021, 1842, 707, 1375, 1842, 13279, 261, 262, 1375, 4831, 3229, 3884, 434, 1375, 3905, 22, 1375, 716, 2114, 1473, 358, 326, 1967, 791, 434, 1375, 3905, 21, 1375, 269, 1492, 10374, 1686, 316, 279, 30383, 4904, 263, 1220, 707, 4676, 12001, 26584, 358, 1842, 326, 6885, 434, 11854, 4186, 578, 733, 2533, 11803, 598, 8762, 358, 15139, 316, 733, 19422, 263, 2974, 23500, 1842, 326, 4471, 434, 1375, 17028, 261, 262, 1375, 3613, 30383, 4636, 269, 3387, 518, 7372, 15302, 5351, 2887, 19440, 279, 2110, 9391, 555, 578, 19014, 392, 14853, 2798, 269, 14382, 715, 5057, 30383, 733, 12597, 263, 2], "score": -0.10309972614049911, "weight": 1, "toks": ["<s>", "The", "test", "method", "`", "testCycle", "(", ")", "`", "adds", "multiple", "instances", "of", "`", "Cl2", "`", "that", "reference", "back", "to", "the", "same", "instance", "of", "`", "Cl1", "`", ",", "which", "likely", "results", "in", "a", "cyclic", "dependency", ".", "This", "methodology", "seems", "designed", "to", "test", "the", "behavior", "of", "serialization", "functions", "or", "object", "relation", "management", "with", "respect", "to", "cycles", "in", "object", "graphs", ".", "To", "effectively", "test", "the", "implementation", "of", "`", "toJSON", "(", ")", "`", "under", "cyclic", "conditions", ",", "ensure", "it", "handles", "circular", "references", "without", "throwing", "a", "stack", "overflow", "error", "or", "entering", "an", "infinite", "loop", ",", "efficiently", "handling", "cyclic", "object", "structures", ".", "</s>"]}, {"tids": [1, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 927, 21, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 1815, 8867, 261, 404, 269, 927, 21, 263, 2454, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 927, 21, 263, 2454, 263, 1914, 261, 927, 22, 262, 262, 274, 289, 2], "score": -0.13924898207187653, "weight": 1, "toks": ["<s>", "@", "Test", "(", "timeout", "=", "1000", ")", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", "cl1", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "assertEquals", "(", "1", ",", "cl1", ".", "arr", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "cl1", ".", "arr", ".", "contains", "(", "cl2", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 25395, 261, 927, 21, 263, 17028, 261, 262, 262, 274, 2], "score": -0.21525724232196808, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "cl1", ".", "toJSON", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1436, 3905, 22, 2184, 358, 3905, 21, 791, 3229, 4124, 471, 3387, 3434, 27651, 263, 2], "score": -0.238262340426445, "weight": 1, "toks": ["<s>", "Add", "Cl2", "objects", "to", "Cl1", "instance", "multiple", "times", "and", "ensure", "correct", "linking", ".", "</s>"]}, {"tids": [1, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 13279, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 289, 2], "score": -0.24285776913166046, "weight": 1, "toks": ["<s>", "@", "Test", "(", "timeout", "=", "1000", ")", "public", "void", "testCycle", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "cl1", ".", "addCl2", "(", "new", "Cl2", "(", "cl1", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 927, 21, 263, 17028, 261, 262, 274, 2], "score": -0.2848229706287384, "weight": 1, "toks": ["<s>", "cl1", ".", "toJSON", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 1815, 8867, 261, 404, 269, 927, 21, 263, 2454, 263, 963, 261, 262, 262, 274, 1815, 8650, 261, 927, 22, 269, 927, 21, 263, 2454, 263, 336, 261, 374, 262, 262, 274, 289, 2], "score": -0.2944762110710144, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "assertEquals", "(", "1", ",", "cl1", ".", "arr", ".", "size", "(", ")", ")", ";", "assertSame", "(", "cl2", ",", "cl1", ".", "arr", ".", "get", "(", "0", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 7766, 326, 1375, 17028, 1375, 707, 635, 2734, 6894, 392, 733, 434, 1375, 3905, 21, 1375, 716, 1914, 11392, 1375, 3905, 22, 1375, 3884, 8459, 358, 518, 263, 2], "score": -0.30500560998916626, "weight": 1, "toks": ["<s>", "Test", "the", "`", "toJSON", "`", "method", "by", "serializing", "an", "object", "of", "`", "Cl1", "`", "that", "contains", "several", "`", "Cl2", "`", "instances", "linked", "to", "it", ".", "</s>"]}, {"tids": [1, 25395, 261, 927, 21, 263, 17028, 261, 262, 262, 274, 2], "score": -0.3127269148826599, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "cl1", ".", "toJSON", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 927, 21, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 1815, 8867, 261, 404, 269, 927, 21, 263, 2454, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.34285759925842285, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", "cl1", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "assertEquals", "(", "1", ",", "cl1", ".", "arr", ".", "size", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 16.856590464330143, "bleu-avg": 38.60985657438441, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 5.252007132627293, "code-bleu-avg": 32.450313417946845, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 39, "edit-sim-avg": 53.8, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 36.36363636363637, "rouge-p-avg": 51.56060606060606, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 67.14285714285712, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 44.444443969135804, "rouge-f-avg": 57.96731977452548, "num-seq": 10}, "time": 1.0461463928222656, "misc": {}}
{"id": 60, "data_id": "csn-69128", "input_stids": [1, 32315, 1071, 918, 527, 2009, 22, 261, 3905, 22, 1804, 262, 288, 2454, 263, 527, 261, 1804, 262, 274, 289, 32315, 2974, 2986, 4709, 2974, 2986, 4709, 8, 2009, 21, 32315, 1033, 32315, 327, 25324, 682, 263, 752, 261, 25324, 263, 752, 261, 7701, 20, 92, 2009, 269, 7701, 20, 93, 2009, 269, 25324, 263, 1278, 261, 7701, 20, 262, 262, 269, 25324, 263, 752, 261, 7701, 21, 92, 2009, 269, 7701, 21, 93, 2009, 269, 25324, 263, 1278, 261, 7701, 21, 262, 262, 262, 274, 32315, 32315, 1071, 760, 514, 17028, 261, 1033, 1081, 262, 288, 3225, 2089, 273, 394, 3225, 261, 262, 274, 3094, 19558, 2110, 273, 3094, 19558, 263, 752, 1702, 19558, 261, 262, 274, 17028, 1676, 261, 1081, 269, 2110, 269, 2089, 262, 274, 327, 2089, 263, 1762, 261, 262, 274, 289, 32315, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 13279, 261, 262, 32315, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 2], "topk": [{"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 927, 21, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 1815, 8867, 261, 404, 269, 927, 21, 263, 2454, 263, 963, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.11658617109060287, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", "cl1", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "assertEquals", "(", "1", ",", "cl1", ".", "arr", ".", "size", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 774, 3185, 1305, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 514, 1163, 273, 2974, 2986, 4709, 263, 17028, 261, 927, 21, 262, 274, 25395, 261, 1163, 262, 274, 289, 2], "score": -0.12379864603281021, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testToJsonMethod", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "cl1", ".", "addCl2", "(", "new", "Cl2", "(", "cl1", ")", ")", ";", "String", "json", "=", "ToJSONTest", ".", "toJSON", "(", "cl1", ")", ";", "assertNotNull", "(", "json", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 927, 21, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 1815, 8867, 261, 404, 269, 927, 21, 263, 2454, 263, 963, 261, 262, 262, 274, 1815, 8650, 261, 927, 22, 269, 927, 21, 263, 2454, 263, 336, 261, 374, 262, 262, 274, 289, 2], "score": -0.19791318476200104, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", "cl1", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "assertEquals", "(", "1", ",", "cl1", ".", "arr", ".", "size", "(", ")", ")", ";", "assertSame", "(", "cl2", ",", "cl1", ".", "arr", ".", "get", "(", "0", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 25395, 261, 927, 21, 262, 274, 1375, 1375, 1375, 2], "score": -0.2296326905488968, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "assertNotNull", "(", "cl1", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 527, 2009, 22, 67, 4709, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 1815, 5510, 261, 927, 21, 263, 2454, 263, 1914, 261, 927, 22, 262, 262, 274, 289, 2], "score": -0.2646487057209015, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "addCl2_Test", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "assertTrue", "(", "cl1", ".", "arr", ".", "contains", "(", "cl2", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 927, 21, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 289, 2], "score": -0.2752753496170044, "weight": 1, "toks": ["<s>", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", "cl1", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 527, 2009, 22, 1375, 707, 23500, 269, 752, 392, 791, 434, 1375, 3905, 21, 1375, 269, 527, 279, 1375, 3905, 22, 1375, 791, 358, 518, 269, 471, 1815, 716, 326, 761, 1703, 3096, 8783, 263, 2457, 3454, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 342, 342, 5180, 434, 667, 1625, 527, 2009, 22, 353, 2553, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 262, 274, 342, 342, 5180, 358, 527, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 342, 342, 2985, 745, 1815, 5510, 261, 927, 21, 263, 1914, 261, 927, 22, 262, 262, 274, 342, 342, 9067, 358, 866, 309, 927, 22, 1703, 4985, 3096, 289, 1375, 1375, 1375, 2], "score": -0.27959302067756653, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "addCl2", "`", "method", "effectively", ",", "create", "an", "instance", "of", "`", "Cl1", "`", ",", "add", "a", "`", "Cl2", "`", "instance", "to", "it", ",", "and", "assert", "that", "the", "item", "was", "added", "correctly", ".", "For", "example", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "/", "/", "Instance", "of", "class", "where", "addCl2", "is", "defined", "Cl2", "cl2", "=", "new", "Cl2", "(", ")", ";", "/", "/", "Instance", "to", "add", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "/", "/", "Method", "call", "assertTrue", "(", "cl1", ".", "contains", "(", "cl2", ")", ")", ";", "/", "/", "Assertion", "to", "check", "if", "cl2", "was", "successfully", "added", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 7693, 326, 2619, 8214, 7372, 1796, 11854, 364, 2184, 598, 30383, 11499, 263, 2], "score": -0.29725250601768494, "weight": 1, "toks": ["<s>", "Ensure", "the", "system", "properly", "handles", "JSON", "serialization", "for", "objects", "with", "cyclic", "relationships", ".", "</s>"]}, {"tids": [1, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 2], "score": -0.30274447798728943, "weight": 1, "toks": ["<s>", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "cl1", ".", "addCl2", "(", "new", "Cl2", "(", "cl1", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 774, 2986, 1398, 5281, 2009, 21, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 1815, 8867, 261, 315, 2665, 1796, 876, 315, 269, 2974, 2986, 263, 17028, 261, 927, 21, 262, 262, 274, 289, 2], "score": -0.3271687924861908, "weight": 1, "toks": ["<s>", "@", "Test", "(", "timeout", "=", "1000", ")", "public", "void", "testToJSONOnSingleCl1", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "cl1", ".", "addCl2", "(", "new", "Cl2", "(", "cl1", ")", ")", ";", "assertEquals", "(", "\"", "expected", "JSON", "output", "\"", ",", "ToJSON", ".", "toJSON", "(", "cl1", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 16.856590464330143, "bleu-avg": 38.60985657438441, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 5.252007132627293, "code-bleu-avg": 32.450313417946845, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 39, "edit-sim-avg": 53.8, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 36.36363636363637, "rouge-p-avg": 51.56060606060606, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 67.14285714285714, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 44.444443969135804, "rouge-f-avg": 57.96731977452548, "num-seq": 10}, "time": 0.9894037246704102, "misc": {}}
{"id": 61, "data_id": "csn-69128", "input_stids": [1, 32315, 1071, 918, 527, 2009, 22, 261, 3905, 22, 1804, 262, 288, 2454, 263, 527, 261, 1804, 262, 274, 289, 32315, 2974, 2986, 4709, 2974, 2986, 4709, 8, 2009, 21, 32315, 1033, 32315, 327, 25324, 682, 263, 752, 261, 25324, 263, 752, 261, 7701, 20, 92, 2009, 269, 7701, 20, 93, 2009, 269, 25324, 263, 1278, 261, 7701, 20, 262, 262, 269, 25324, 263, 752, 261, 7701, 21, 92, 2009, 269, 7701, 21, 93, 2009, 269, 25324, 263, 1278, 261, 7701, 21, 262, 262, 262, 274, 32315, 32315, 1071, 760, 514, 17028, 261, 1033, 1081, 262, 288, 3225, 2089, 273, 394, 3225, 261, 262, 274, 3094, 19558, 2110, 273, 3094, 19558, 263, 752, 1702, 19558, 261, 262, 274, 17028, 1676, 261, 1081, 269, 2110, 269, 2089, 262, 274, 327, 2089, 263, 1762, 261, 262, 274, 289, 32315, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 13279, 261, 262, 32315, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 927, 21, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 289, 2], "score": -0.1166289895772934, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", "cl1", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 927, 21, 263, 17028, 261, 262, 274, 1375, 2], "score": -0.12733133137226105, "weight": 1, "toks": ["<s>", "`", "cl1", ".", "toJSON", "(", ")", ";", "`", "</s>"]}, {"tids": [1, 632, 7766, 261, 2021, 273, 4336, 262, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 289, 2], "score": -0.18903622031211853, "weight": 1, "toks": ["<s>", "@", "Test", "(", "timeout", "=", "1000", ")", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 707, 3613, 1842, 14606, 358, 506, 11274, 326, 2719, 434, 1375, 3905, 22, 1375, 3884, 358, 279, 1375, 3905, 21, 1375, 667, 791, 269, 10860, 635, 7769, 326, 8555, 1796, 11854, 434, 326, 8156, 733, 3695, 263, 1021, 3102, 1375, 927, 21, 263, 527, 2009, 22, 261, 394, 3905, 22, 261, 927, 21, 262, 262, 1375, 8527, 716, 1375, 3905, 22, 1375, 2184, 854, 3832, 3096, 358, 279, 1375, 3905, 21, 1375, 733, 269, 1625, 1517, 1375, 3905, 22, 1375, 791, 10016, 5351, 1473, 358, 1375, 3905, 21, 1375, 269, 13935, 16658, 2822, 15302, 5351, 263, 16803, 326, 1024, 3021, 12405, 294, 1375, 1375, 1375, 2252, 1815, 8867, 261, 315, 13219, 1796, 3695, 315, 269, 2665, 3185, 1447, 269, 2974, 2986, 4709, 263, 17028, 261, 927, 21, 262, 262, 274, 1375, 1375, 1375, 1220, 980, 26124, 716, 326, 1796, 876, 434, 326, 1375, 17028, 1375, 707, 261, 6754, 358, 326, 1375, 927, 21, 1375, 733, 1839, 6534, 11392, 1375, 3905, 22, 1375, 3884, 262, 1885, 326, 2665, 1796, 3695, 1269, 316, 1375, 2665, 3185, 1447, 1375, 263, 1220, 4102, 1842, 3937, 15302, 2114, 5057, 471, 326, 1796, 11854, 14176, 263, 2], "score": -0.22229327261447906, "weight": 1, "toks": ["<s>", "The", "method", "under", "test", "appears", "to", "be", "executing", "the", "addition", "of", "`", "Cl2", "`", "instances", "to", "a", "`", "Cl1", "`", "class", "instance", ",", "followed", "by", "testing", "the", "potential", "JSON", "serialization", "of", "the", "resulting", "object", "structure", ".", "The", "sequence", "`", "cl1", ".", "addCl2", "(", "new", "Cl2", "(", "cl1", ")", ")", "`", "indicates", "that", "`", "Cl2", "`", "objects", "are", "being", "added", "to", "a", "`", "Cl1", "`", "object", ",", "where", "each", "`", "Cl2", "`", "instance", "possibly", "references", "back", "to", "`", "Cl1", "`", ",", "potentially", "introducing", "circular", "references", ".", "Given", "the", "next", "statement", "requirement", ":", "`", "`", "`", "java", "assertEquals", "(", "\"", "Expected", "JSON", "structure", "\"", ",", "expectedJsonOutput", ",", "ToJSONTest", ".", "toJSON", "(", "cl1", ")", ")", ";", "`", "`", "`", "This", "line", "asserts", "that", "the", "JSON", "output", "of", "the", "`", "toJSON", "`", "method", "(", "applied", "to", "the", "`", "cl1", "`", "object", "after", "adding", "several", "`", "Cl2", "`", "instances", ")", "matches", "the", "expected", "JSON", "structure", "specified", "in", "`", "expectedJsonOutput", "`", ".", "This", "would", "test", "both", "circular", "reference", "handling", "and", "the", "JSON", "serialization", "functionality", ".", "</s>"]}, {"tids": [1, 1220, 1842, 7531, 358, 3929, 326, 6885, 434, 5057, 30383, 5351, 3470, 326, 1375, 3905, 21, 1375, 667, 1347, 3884, 434, 1375, 3905, 22, 1375, 854, 3096, 358, 518, 263, 2597, 296, 272, 10802, 358, 3387, 716, 326, 4471, 848, 25063, 1640, 4123, 15139, 269, 29440, 1347, 14540, 2184, 358, 1796, 269, 358, 5309, 14853, 13917, 578, 2110, 9391, 1334, 263, 2], "score": -0.26975691318511963, "weight": 1, "toks": ["<s>", "This", "test", "attempts", "to", "verify", "the", "behavior", "of", "handling", "cyclic", "references", "within", "the", "`", "Cl1", "`", "class", "when", "instances", "of", "`", "Cl2", "`", "are", "added", "to", "it", ".", "It", "'", "s", "important", "to", "ensure", "that", "the", "implementation", "can", "gracefully", "handle", "such", "cycles", ",", "especially", "when", "converting", "objects", "to", "JSON", ",", "to", "prevent", "infinite", "recursion", "or", "stack", "overflow", "errors", ".", "</s>"]}, {"tids": [1, 1788, 1245, 791, 434, 1375, 3905, 21, 1375, 471, 527, 1245, 1375, 3905, 22, 1375, 733, 716, 5351, 326, 1375, 3905, 21, 1375, 791, 263, 2], "score": -0.2737378478050232, "weight": 1, "toks": ["<s>", "Create", "one", "instance", "of", "`", "Cl1", "`", "and", "add", "one", "`", "Cl2", "`", "object", "that", "references", "the", "`", "Cl1", "`", "instance", ".", "</s>"]}, {"tids": [1, 5452, 716, 3433, 1375, 3905, 21, 1375, 733, 20754, 281, 279, 666, 434, 1375, 3905, 22, 1375, 2184, 4191, 15139, 2887, 1281, 8296, 263, 2], "score": -0.2848157584667206, "weight": 1, "toks": ["<s>", "Assert", "that", "your", "`", "Cl1", "`", "object", "manages", "a", "list", "of", "`", "Cl2", "`", "objects", "containing", "cycles", "without", "any", "issues", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 1815, 8867, 261, 404, 269, 927, 21, 263, 2454, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.29330700635910034, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "assertEquals", "(", "1", ",", "cl1", ".", "arr", ".", "size", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 2009, 22, 261, 262, 288, 3905, 21, 927, 21, 273, 394, 3905, 21, 261, 262, 274, 3905, 22, 927, 22, 273, 394, 3905, 22, 261, 927, 21, 262, 274, 927, 21, 263, 527, 2009, 22, 261, 927, 22, 262, 274, 1815, 8867, 261, 404, 269, 927, 21, 263, 2454, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.2984253764152527, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddCl2", "(", ")", "{", "Cl1", "cl1", "=", "new", "Cl1", "(", ")", ";", "Cl2", "cl2", "=", "new", "Cl2", "(", "cl1", ")", ";", "cl1", ".", "addCl2", "(", "cl2", ")", ";", "assertEquals", "(", "1", ",", "cl1", ".", "arr", ".", "size", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 14373, 1375, 17028, 261, 927, 21, 262, 274, 1375, 358, 1842, 326, 1375, 17028, 1375, 707, 263, 2], "score": -0.3207775950431824, "weight": 1, "toks": ["<s>", "Invoke", "`", "toJSON", "(", "cl1", ")", ";", "`", "to", "test", "the", "`", "toJSON", "`", "method", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 28.757255095091672, "bleu-max": 49.32276867112817, "bleu-min": 4.383138680360219, "bleu-avg": 26.16958074533765, "code-bleu": 28.056163896113134, "code-bleu-max": 37.88979995195281, "code-bleu-min": 4.914789435669408, "code-bleu-avg": 21.773051225878177, "edit-sim": 64, "edit-sim-max": 71, "edit-sim-min": 22, "edit-sim-avg": 53.3, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 77.5021645021645, "rouge-r": 81.81818181818183, "rouge-r-max": 90.9090909090909, "rouge-r-min": 36.36363636363637, "rouge-r-avg": 68.18181818181819, "rouge-f": 89.999999505, "rouge-f-max": 95.23809473922903, "rouge-f-min": 42.10526267036012, "rouge-f-avg": 72.25237286307896, "num-seq": 10}, "time": 0.9929454326629639, "misc": {}}
{"id": 62, "data_id": "csn-75808", "input_stids": [1, 32315, 32315, 21438, 2802, 21391, 2886, 4709, 32315, 32315, 32315, 32315, 4750, 760, 1250, 353, 5357, 25931, 5108, 329, 261, 262, 288, 327, 4084, 25931, 5108, 329, 274, 289, 32315, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 32315, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 21438, 2802, 21391, 2886, 263, 2774, 261, 394, 514, 306, 308, 288, 289, 262, 274, 1815, 5510, 261, 21438, 2802, 21391, 2886, 4709, 263, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 2], "score": -0.13314011693000793, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "CassandraUnitCommandLineLoader", ".", "main", "(", "new", "String", "[", "]", "{", "}", ")", ";", "assertTrue", "(", "CassandraUnitCommandLineLoaderTest", ".", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 288, 342, 342, 10939, 4573, 675, 300, 4636, 471, 4540, 514, 306, 308, 833, 273, 394, 514, 306, 308, 288, 289, 274, 342, 342, 2631, 1479, 1456, 2112, 342, 342, 7903, 326, 707, 3832, 18432, 21438, 2802, 21391, 2886, 263, 2774, 261, 833, 262, 274, 342, 342, 8553, 326, 876, 578, 919, 2549, 1815, 5510, 261, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 2], "score": -0.15143144130706787, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "{", "/", "/", "Setup", "necessary", "pre", "-", "conditions", "and", "inputs", "String", "[", "]", "args", "=", "new", "String", "[", "]", "{", "}", ";", "/", "/", "No", "host", "option", "provided", "/", "/", "Execute", "the", "method", "being", "tested", "CassandraUnitCommandLineLoader", ".", "main", "(", "args", ")", ";", "/", "/", "Verify", "the", "output", "or", "state", "change", "assertTrue", "(", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 288, 15893, 2886, 4088, 273, 394, 15893, 2886, 261, 394, 514, 306, 308, 288, 289, 262, 274, 4088, 263, 1262, 261, 262, 274, 1815, 5510, 261, 21438, 2802, 21391, 2886, 4709, 263, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 2], "score": -0.16686972975730896, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "{", "CommandLineLoader", "loader", "=", "new", "CommandLineLoader", "(", "new", "String", "[", "]", "{", "}", ")", ";", "loader", ".", "load", "(", ")", ";", "assertTrue", "(", "CassandraUnitCommandLineLoaderTest", ".", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 21438, 2802, 21391, 2886, 263, 2774, 261, 394, 514, 306, 308, 288, 289, 262, 274, 1815, 5510, 261, 21438, 2802, 21391, 2886, 4709, 263, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 2], "score": -0.17565785348415375, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "CassandraUnitCommandLineLoader", ".", "main", "(", "new", "String", "[", "]", "{", "}", ")", ";", "assertTrue", "(", "CassandraUnitCommandLineLoaderTest", ".", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 342, 342, 20471, 1842, 981, 2674, 289, 2], "score": -0.18743887543678284, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "/", "/", "Your", "test", "code", "here", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 21438, 2802, 21391, 2886, 263, 2774, 261, 394, 514, 306, 308, 288, 289, 262, 274, 1815, 5510, 261, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 2], "score": -0.24493247270584106, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "CassandraUnitCommandLineLoader", ".", "main", "(", "new", "String", "[", "]", "{", "}", ")", ";", "assertTrue", "(", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 288, 342, 342, 10371, 726, 514, 306, 308, 833, 273, 288, 289, 274, 342, 342, 8953, 1775, 20089, 3315, 1479, 1456, 342, 342, 4603, 21438, 2802, 21391, 2886, 263, 2774, 261, 833, 262, 274, 342, 342, 5452, 1815, 5510, 261, 21438, 2802, 21391, 2886, 4709, 263, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 2], "score": -0.2519393265247345, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "{", "/", "/", "Arrange", "String", "[", "]", "args", "=", "{", "}", ";", "/", "/", "Empty", "arguments", "simulate", "missing", "host", "option", "/", "/", "Act", "CassandraUnitCommandLineLoader", ".", "main", "(", "args", ")", ";", "/", "/", "Assert", "assertTrue", "(", "CassandraUnitCommandLineLoaderTest", ".", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1375, 707, 316, 1375, 21438, 2802, 21391, 2886, 4709, 1375, 269, 1846, 848, 2805, 4259, 6075, 294, 404, 263, 380, 380, 10939, 380, 380, 294, 7730, 326, 4573, 3330, 578, 4636, 364, 326, 1842, 263, 7897, 333, 707, 10374, 4271, 1296, 980, 1775, 269, 3387, 716, 326, 1479, 1456, 353, 316, 323, 329, 3315, 628, 326, 1775, 1846, 5615, 263, 576, 263, 380, 380, 8687, 380, 380, 294, 3049, 326, 1375, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1375, 707, 263, 890, 263, 380, 380, 9067, 380, 380, 294, 17580, 716, 326, 707, 8783, 9283, 326, 3315, 1479, 1456, 471, 563, 329, 316, 19171, 4084, 1779, 263, 4554, 296, 6579, 866, 309, 1375, 353, 5357, 25931, 5108, 329, 261, 262, 1375, 1135, 1375, 638, 1375, 1839, 326, 707, 4588, 269, 11193, 716, 326, 4084, 883, 711, 2118, 14099, 6541, 358, 326, 3315, 1479, 1456, 263, 1059, 263, 380, 380, 399, 2091, 10077, 380, 380, 261, 309, 4573, 262, 294, 9645, 731, 1281, 3478, 578, 15226, 1281, 1947, 309, 1931, 263, 1220, 17504, 14382, 715, 7434, 326, 707, 225, 163, 227, 252, 272, 14176, 316, 5966, 310, 279, 3315, 1456, 471, 8783, 27411, 279, 729, 9875, 1359, 766, 263, 2], "score": -0.25381147861480713, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "`", "method", "in", "`", "CassandraUnitCommandLineLoaderTest", "`", ",", "you", "can", "follow", "these", "steps", ":", "1", ".", "*", "*", "Setup", "*", "*", ":", "Prepare", "the", "necessary", "environment", "or", "conditions", "for", "the", "test", ".", "Since", "this", "method", "likely", "checks", "command", "line", "arguments", ",", "ensure", "that", "the", "host", "option", "is", "indeed", "missing", "from", "the", "arguments", "you", "provide", ".", "2", ".", "*", "*", "Execution", "*", "*", ":", "Call", "the", "`", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "`", "method", ".", "3", ".", "*", "*", "Assertion", "*", "*", ":", "Confirm", "that", "the", "method", "correctly", "identified", "the", "missing", "host", "option", "and", "resulted", "in", "printing", "usage", "information", ".", "You", "'", "ll", "check", "if", "`", "isUsageBeenPrinted", "(", ")", "`", "returns", "`", "true", "`", "after", "the", "method", "execution", ",", "indicating", "that", "the", "usage", "message", "has", "been", "printed", "due", "to", "the", "missing", "host", "option", ".", "4", ".", "*", "*", "Tear", "Down", "*", "*", "(", "if", "necessary", ")", ":", "Clean", "up", "any", "changes", "or", "revert", "any", "settings", "if", "required", ".", "This", "approach", "efficiently", "tests", "the", "method", "\u2019", "s", "functionality", "in", "detecting", "a", "missing", "option", "and", "correctly", "triggering", "a", "user", "guidance", "response", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 288, 21438, 2802, 21391, 2886, 4709, 263, 353, 5357, 25931, 5108, 329, 261, 262, 274, 289, 2], "score": -0.2590204179286957, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "{", "CassandraUnitCommandLineLoaderTest", ".", "isUsageBeenPrinted", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 288, 21438, 2802, 21391, 2886, 263, 2774, 261, 394, 514, 306, 308, 288, 289, 262, 274, 1815, 5510, 261, 21438, 2802, 21391, 2886, 4709, 263, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.267263263463974, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "{", "CassandraUnitCommandLineLoader", ".", "main", "(", "new", "String", "[", "]", "{", "}", ")", ";", "assertTrue", "(", "CassandraUnitCommandLineLoaderTest", ".", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 4.011273867342056, "bleu-max": 48.32250811898254, "bleu-min": 4.011273867342056, "bleu-avg": 9.655951378471553, "code-bleu": 0.45191427964354014, "code-bleu-max": 44.632560823852536, "code-bleu-min": 0.45191427964354014, "code-bleu-avg": 4.9416836632914025, "edit-sim": 18, "edit-sim-max": 70, "edit-sim-min": 18, "edit-sim-avg": 27.0, "rouge-p": 16.666666666666664, "rouge-p-max": 100.0, "rouge-p-min": 14.285714285714285, "rouge-p-avg": 26.507936507936506, "rouge-r": 10.0, "rouge-r-max": 100.0, "rouge-r-min": 10.0, "rouge-r-avg": 23.0, "rouge-f": 12.499999531250019, "rouge-f-max": 99.9999995, "rouge-f-min": 11.764705397923896, "rouge-f-avg": 24.450463907760142, "num-seq": 10}, "time": 0.8583354949951172, "misc": {}}
{"id": 63, "data_id": "csn-75808", "input_stids": [1, 32315, 32315, 21438, 2802, 21391, 2886, 4709, 514, 32315, 32315, 327, 5647, 263, 8528, 261, 3709, 262, 274, 32315, 32315, 4750, 760, 1250, 353, 5357, 25931, 5108, 329, 261, 262, 288, 327, 4084, 25931, 5108, 329, 274, 289, 32315, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 32315, 514, 306, 308, 833, 273, 288, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 289, 274, 2], "topk": [{"tids": [1, 5452, 263, 1815, 5510, 261, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 2], "score": -0.17848750948905945, "weight": 1, "toks": ["<s>", "Assert", ".", "assertTrue", "(", "isUsageBeenPrinted", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 21438, 2802, 21391, 2886, 263, 2774, 261, 394, 514, 306, 308, 288, 289, 262, 274, 1815, 5510, 261, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.18165503442287445, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "CassandraUnitCommandLineLoader", ".", "main", "(", "new", "String", "[", "]", "{", "}", ")", ";", "assertTrue", "(", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1815, 18163, 29591, 858, 261, 261, 262, 300, 405, 394, 21438, 2802, 21391, 2886, 261, 262, 263, 1262, 261, 833, 262, 262, 263, 28349, 261, 2754, 263, 667, 262, 274, 2], "score": -0.18204548954963684, "weight": 1, "toks": ["<s>", "assertThatThrownBy", "(", "(", ")", "-", ">", "new", "CassandraUnitCommandLineLoader", "(", ")", ".", "load", "(", "args", ")", ")", ".", "isInstanceOf", "(", "IllegalArgumentException", ".", "class", ")", ";", "</s>"]}, {"tids": [1, 1375, 272, 322, 263, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 274, 1375, 2], "score": -0.18538090586662292, "weight": 1, "toks": ["<s>", "`", "sut", ".", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", ";", "`", "</s>"]}, {"tids": [1, 1815, 18163, 261, 4529, 1447, 263, 1762, 261, 262, 269, 1914, 780, 261, 315, 4893, 1456, 353, 3315, 315, 262, 262, 274, 2], "score": -0.19337700307369232, "weight": 1, "toks": ["<s>", "assertThat", "(", "standardOutput", ".", "toString", "(", ")", ",", "containsString", "(", "\"", "Host", "option", "is", "missing", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 514, 306, 308, 833, 273, 288, 315, 300, 1479, 315, 289, 274, 342, 342, 3094, 22918, 3315, 1479, 460, 358, 3080, 4084, 1172, 263, 2], "score": -0.19375434517860413, "weight": 1, "toks": ["<s>", "String", "[", "]", "args", "=", "{", "\"", "-", "host", "\"", "}", ";", "/", "/", "Intentionally", "missing", "host", "value", "to", "trigger", "usage", "print", ".", "</s>"]}, {"tids": [1, 632, 4893, 261, 3143, 774, 14650, 273, 315, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 315, 262, 1071, 918, 1172, 5357, 261, 262, 288, 1172, 6696, 261, 262, 274, 342, 342, 9587, 11799, 707, 358, 866, 326, 19171, 14176, 289, 2], "score": -0.19470222294330597, "weight": 1, "toks": ["<s>", "@", "Host", "(", "pointsToTests", "=", "\"", "shouldPrintUsageBecauseHostOptionIsMissing", "\"", ")", "public", "void", "printUsage", "(", ")", "{", "printHelp", "(", ")", ";", "/", "/", "Simulated", "method", "to", "check", "the", "printing", "functionality", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 342, 342, 10371, 726, 514, 306, 308, 833, 273, 288, 315, 7128, 315, 269, 315, 7128, 315, 269, 315, 7128, 315, 269, 315, 7128, 315, 269, 315, 7128, 315, 269, 315, 7128, 315, 289, 274, 342, 342, 4603, 471, 5452, 1815, 5510, 261, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 2], "score": -0.20020213723182678, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "/", "/", "Arrange", "String", "[", "]", "args", "=", "{", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "\"", "STR", "\"", "}", ";", "/", "/", "Act", "and", "Assert", "assertTrue", "(", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 514, 306, 308, 833, 273, 288, 315, 7128, 315, 269, 315, 7128, 315, 269, 315, 7128, 315, 269, 315, 7128, 315, 269, 315, 7128, 315, 269, 315, 7128, 315, 289, 274, 21438, 2802, 21391, 2886, 263, 2774, 261, 833, 262, 274, 1815, 5510, 261, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 2], "score": -0.20735736191272736, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "String", "[", "]", "args", "=", "{", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "\"", "STR", "\"", "}", ";", "CassandraUnitCommandLineLoader", ".", "main", "(", "args", ")", ";", "assertTrue", "(", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 514, 306, 308, 833, 273, 288, 315, 300, 284, 315, 269, 315, 3709, 263, 1163, 315, 289, 274, 21438, 2802, 21391, 2886, 263, 2774, 261, 833, 262, 274, 1815, 5510, 261, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2111537903547287, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "String", "[", "]", "args", "=", "{", "\"", "-", "f", "\"", ",", "\"", "dataset", ".", "json", "\"", "}", ";", "CassandraUnitCommandLineLoader", ".", "main", "(", "args", ")", ";", "assertTrue", "(", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 19.26485944699838, "bleu-max": 23.9802967618271, "bleu-min": 12.924328848929262, "bleu-avg": 16.39919460638554, "code-bleu": 5.468839001329493, "code-bleu-max": 6.009586134711259, "code-bleu-min": 4.778447092065076, "code-bleu-avg": 5.157362801668883, "edit-sim": 65, "edit-sim-max": 70, "edit-sim-min": 60, "edit-sim-avg": 63.8, "rouge-p": 57.14285714285714, "rouge-p-max": 66.66666666666666, "rouge-p-min": 40.0, "rouge-p-avg": 48.31746031746032, "rouge-r": 66.66666666666666, "rouge-r-max": 66.66666666666666, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 66.66666666666664, "rouge-f": 61.53846104142012, "rouge-f-max": 66.66666616666667, "rouge-f-min": 49.999999531250005, "rouge-f-avg": 55.64102515786736, "num-seq": 10}, "time": 0.9743332862854004, "misc": {}}
{"id": 64, "data_id": "csn-75808", "input_stids": [1, 32315, 4750, 760, 1250, 1109, 21391, 261, 514, 306, 308, 833, 262, 288, 2424, 5788, 2498, 261, 262, 274, 1208, 1320, 261, 262, 274, 20894, 2678, 273, 394, 6818, 697, 2678, 261, 262, 274, 1250, 2427, 273, 629, 274, 775, 288, 20894, 273, 20894, 2678, 263, 1109, 261, 702, 269, 833, 262, 274, 309, 261, 20894, 263, 9849, 261, 262, 263, 769, 422, 374, 262, 288, 2427, 273, 638, 274, 1172, 5357, 261, 262, 274, 289, 469, 288, 309, 261, 912, 6434, 8309, 6837, 1379, 620, 261, 262, 262, 288, 1172, 5357, 261, 315, 3902, 6, 262, 274, 2427, 273, 638, 274, 289, 289, 289, 1044, 261, 10616, 425, 262, 288, 1172, 5357, 261, 425, 263, 2381, 261, 262, 262, 274, 2427, 273, 638, 274, 289, 327, 2427, 274, 289, 32315, 21438, 2802, 21391, 2886, 4709, 514, 32315, 32315, 327, 5647, 263, 8528, 261, 3709, 262, 274, 32315, 32315, 4750, 760, 1250, 353, 5357, 25931, 5108, 329, 261, 262, 288, 327, 4084, 25931, 5108, 329, 274, 289, 32315, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 32315, 514, 306, 308, 833, 273, 288, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 289, 274, 21438, 2802, 21391, 2886, 263, 1109, 21391, 261, 833, 262, 274, 2], "topk": [{"tids": [1, 2974, 19361, 5173, 1842, 326, 1375, 1109, 21391, 1375, 707, 1347, 326, 1479, 1456, 353, 3315, 269, 1846, 1608, 358, 3387, 3433, 1842, 1775, 741, 486, 20089, 279, 923, 4588, 589, 1625, 777, 1931, 702, 269, 4123, 487, 326, 1479, 269, 854, 3430, 263, 1021, 1842, 1410, 3929, 716, 1375, 1109, 21391, 1375, 8783, 25283, 326, 3315, 4422, 5286, 649, 1237, 471, 26617, 635, 3637, 326, 1375, 2427, 1375, 2982, 358, 638, 1839, 19171, 326, 4084, 1779, 263, 380, 380, 30626, 329, 7766, 10939, 294, 380, 380, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 342, 342, 10939, 1775, 2887, 326, 1479, 1456, 514, 306, 308, 833, 273, 288, 315, 300, 3315, 2594, 315, 289, 274, 342, 342, 3049, 326, 707, 3613, 1842, 1250, 563, 273, 21438, 2802, 21391, 2886, 263, 1109, 21391, 261, 833, 262, 274, 342, 342, 5452, 716, 4084, 353, 14099, 471, 326, 5402, 19816, 87, 15702, 1815, 5510, 261, 315, 13219, 358, 2427, 6541, 358, 3315, 1479, 1456, 315, 269, 563, 262, 274, 1815, 5510, 261, 315, 13219, 4084, 1779, 358, 506, 14099, 315, 269, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 3875, 11932, 716, 326, 10766, 3142, 17099, 279, 3315, 1479, 1456, 261, 578, 1281, 11239, 1664, 262, 269, 1492, 4058, 1230, 5871, 87, 326, 2521, 358, 1172, 4084, 1779, 471, 4277, 392, 12613, 2427, 269, 18075, 326, 707, 296, 272, 555, 5057, 12593, 23500, 263, 2], "score": -0.12437302619218826, "weight": 1, "toks": ["<s>", "To", "accurately", "test", "the", "`", "parseCommandLine", "`", "method", "when", "the", "host", "option", "is", "missing", ",", "you", "need", "to", "ensure", "your", "test", "arguments", "do", "not", "simulate", "a", "valid", "execution", "path", "where", "all", "required", "options", ",", "such", "as", "the", "host", ",", "are", "present", ".", "The", "test", "should", "verify", "that", "`", "parseCommandLine", "`", "correctly", "identifies", "the", "missing", "crucial", "argument", "and", "responds", "by", "setting", "the", "`", "exit", "`", "flag", "to", "true", "after", "printing", "the", "usage", "information", ".", "*", "*", "Corrected", "Test", "Setup", ":", "*", "*", "`", "`", "`", "java", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "/", "/", "Setup", "arguments", "without", "the", "host", "option", "String", "[", "]", "args", "=", "{", "\"", "-", "missingHost", "\"", "}", ";", "/", "/", "Call", "the", "method", "under", "test", "boolean", "result", "=", "CassandraUnitCommandLineLoader", ".", "parseCommandLine", "(", "args", ")", ";", "/", "/", "Assert", "that", "usage", "is", "printed", "and", "the", "program", "suggests", "exiting", "assertTrue", "(", "\"", "Expected", "to", "exit", "due", "to", "missing", "host", "option", "\"", ",", "result", ")", ";", "assertTrue", "(", "\"", "Expected", "usage", "information", "to", "be", "printed", "\"", ",", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "`", "`", "`", "This", "test", "setup", "ensures", "that", "the", "scenario", "simulates", "a", "missing", "host", "option", "(", "or", "any", "critical", "configuration", ")", ",", "which", "logically", "leads", "the", "application", "to", "print", "usage", "information", "and", "signal", "an", "intended", "exit", ",", "validating", "the", "method", "'", "s", "error", "handling", "capability", "effectively", ".", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 1109, 21391, 1375, 707, 269, 732, 848, 7155, 603, 22456, 1625, 1296, 980, 5811, 1410, 2424, 715, 2321, 578, 12897, 2511, 603, 2923, 4636, 263, 13743, 353, 279, 21043, 7694, 1842, 716, 4271, 309, 326, 4084, 883, 353, 14099, 1347, 1931, 702, 854, 3315, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1410, 5108, 5357, 9434, 3705, 1320, 4704, 4841, 261, 262, 288, 514, 306, 308, 833, 273, 288, 289, 274, 342, 342, 8953, 1775, 358, 20089, 3315, 702, 1250, 2427, 273, 21438, 2802, 21391, 2886, 263, 1109, 21391, 261, 833, 262, 274, 1815, 5510, 261, 2427, 262, 274, 342, 342, 15510, 326, 707, 358, 10768, 392, 555, 29468, 2427, 1815, 5510, 261, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 342, 342, 2073, 309, 4084, 1779, 1703, 14099, 289, 1375, 1375, 1375, 1220, 1842, 6138, 326, 10766, 1625, 1158, 1775, 854, 2112, 269, 471, 732, 4489, 326, 2521, 358, 7343, 326, 729, 635, 19171, 4084, 1779, 269, 11193, 716, 518, 353, 486, 5695, 358, 11247, 2887, 326, 4573, 4540, 263, 2], "score": -0.1271781623363495, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "parseCommandLine", "`", "method", ",", "we", "can", "focus", "on", "scenarios", "where", "command", "line", "parsing", "should", "clearly", "fail", "or", "succeed", "based", "on", "specific", "conditions", ".", "Here", "is", "a", "succinct", "test", "that", "checks", "if", "the", "usage", "message", "is", "printed", "when", "required", "options", "are", "missing", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "shouldPrintUsageWhenRequiredOptionsAreMissing", "(", ")", "{", "String", "[", "]", "args", "=", "{", "}", ";", "/", "/", "Empty", "arguments", "to", "simulate", "missing", "options", "boolean", "exit", "=", "CassandraUnitCommandLineLoader", ".", "parseCommandLine", "(", "args", ")", ";", "assertTrue", "(", "exit", ")", ";", "/", "/", "Expect", "the", "method", "to", "indicate", "an", "error", "requiring", "exit", "assertTrue", "(", "isUsageBeenPrinted", "(", ")", ")", ";", "/", "/", "Check", "if", "usage", "information", "was", "printed", "}", "`", "`", "`", "This", "test", "addresses", "the", "scenario", "where", "no", "arguments", "are", "provided", ",", "and", "we", "expect", "the", "application", "to", "guide", "the", "user", "by", "printing", "usage", "information", ",", "indicating", "that", "it", "is", "not", "ready", "to", "proceed", "without", "the", "necessary", "inputs", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 707, 1375, 1109, 21391, 1375, 23500, 269, 326, 2112, 1842, 648, 269, 1375, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 1375, 269, 1410, 1842, 309, 326, 4084, 1779, 353, 14099, 1347, 279, 4573, 1479, 1456, 353, 3315, 628, 326, 1296, 980, 1775, 263, 13743, 269, 732, 2727, 296, 268, 2621, 1281, 981, 21195, 6728, 364, 279, 3315, 1479, 1456, 316, 326, 1842, 864, 263, 10724, 269, 309, 326, 509, 5054, 353, 358, 866, 326, 10766, 1625, 326, 4084, 1410, 506, 14099, 6541, 358, 11332, 578, 2763, 11339, 1775, 269, 3387, 3433, 5416, 578, 4471, 434, 1375, 1109, 21391, 1375, 3037, 87, 333, 2269, 635, 4277, 310, 326, 2417, 802, 434, 1931, 1775, 261, 3007, 279, 1479, 262, 263, 2457, 791, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 514, 306, 308, 833, 273, 288, 315, 300, 1756, 315, 269, 315, 8958, 3672, 315, 289, 274, 342, 342, 509, 22918, 3315, 326, 1479, 1456, 1250, 2427, 273, 21438, 2802, 21391, 2886, 263, 1109, 21391, 261, 833, 262, 274, 1815, 5510, 261, 21438, 2802, 21391, 2886, 263, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 1815, 5510, 261, 2427, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 1410, 6932, 716, 326, 4084, 353, 14099, 471, 326, 707, 1135, 1375, 638, 1375, 358, 10768, 11646, 2427, 263, 7693, 3433, 16164, 434, 1375, 4191, 6434, 8309, 6837, 1379, 620, 1375, 578, 3627, 2590, 20089, 326, 4656, 866, 364, 326, 3315, 1479, 1456, 19361, 5173, 263, 2], "score": -0.12920203804969788, "weight": 1, "toks": ["<s>", "To", "test", "the", "method", "`", "parseCommandLine", "`", "effectively", ",", "the", "provided", "test", "case", ",", "`", "shouldPrintUsageBecauseHostOptionIsMissing", "`", ",", "should", "test", "if", "the", "usage", "information", "is", "printed", "when", "a", "necessary", "host", "option", "is", "missing", "from", "the", "command", "line", "arguments", ".", "Here", ",", "we", "don", "'", "t", "see", "any", "code", "specifically", "checking", "for", "a", "missing", "host", "option", "in", "the", "test", "given", ".", "However", ",", "if", "the", "intention", "is", "to", "check", "the", "scenario", "where", "the", "usage", "should", "be", "printed", "due", "to", "incorrect", "or", "insufficient", "arguments", ",", "ensure", "your", "mock", "or", "implementation", "of", "`", "parseCommandLine", "`", "reflects", "this", "condition", "by", "signaling", "the", "absence", "of", "required", "arguments", "(", "like", "a", "host", ")", ".", "For", "instance", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "String", "[", "]", "args", "=", "{", "\"", "-", "port", "\"", ",", "\"", "8080", "\"", "}", ";", "/", "/", "intentionally", "missing", "the", "host", "option", "boolean", "exit", "=", "CassandraUnitCommandLineLoader", ".", "parseCommandLine", "(", "args", ")", ";", "assertTrue", "(", "CassandraUnitCommandLineLoader", ".", "isUsageBeenPrinted", "(", ")", ")", ";", "assertTrue", "(", "exit", ")", ";", "}", "`", "`", "`", "This", "test", "should", "confirm", "that", "the", "usage", "is", "printed", "and", "the", "method", "returns", "`", "true", "`", "to", "indicate", "early", "exit", ".", "Ensure", "your", "implementations", "of", "`", "containingBadReplicationFactorArgumentValue", "`", "or", "associated", "methods", "simulate", "the", "corresponding", "check", "for", "the", "missing", "host", "option", "accurately", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1109, 21391, 1375, 707, 23500, 269, 1846, 848, 5122, 5615, 279, 1842, 716, 4271, 326, 2269, 1347, 1296, 980, 1775, 741, 486, 912, 279, 1931, 1456, 269, 1492, 5871, 87, 358, 326, 4084, 883, 3832, 14099, 263, 4554, 854, 509, 2846, 358, 1842, 309, 326, 707, 8783, 25283, 326, 2417, 802, 434, 4573, 702, 471, 8214, 7372, 4123, 392, 555, 635, 15387, 326, 1375, 1172, 5357, 1375, 12245, 263, 13743, 353, 279, 4143, 1842, 3454, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1410, 5108, 5357, 30023, 774, 4841, 3705, 1320, 261, 262, 1216, 1185, 288, 342, 342, 9190, 598, 279, 444, 434, 1775, 716, 854, 4846, 486, 358, 18721, 326, 1296, 980, 8433, 514, 306, 308, 833, 273, 288, 315, 7128, 315, 269, 315, 7128, 315, 269, 315, 7128, 315, 269, 315, 7128, 315, 269, 315, 7128, 315, 269, 315, 7128, 315, 289, 274, 1250, 563, 273, 21438, 2802, 21391, 2886, 263, 1109, 21391, 261, 833, 262, 274, 1815, 5510, 261, 563, 269, 315, 13219, 326, 707, 358, 327, 638, 11193, 392, 2427, 6541, 358, 555, 263, 315, 262, 274, 1815, 5510, 261, 21438, 2802, 21391, 2886, 263, 353, 5357, 25931, 5108, 329, 261, 262, 269, 315, 10858, 1410, 1240, 2118, 14099, 6541, 358, 3315, 1931, 702, 263, 315, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 4271, 716, 294, 404, 263, 1021, 1375, 1109, 21391, 1375, 707, 1135, 638, 269, 11193, 716, 326, 5402, 1410, 2427, 10016, 6541, 358, 392, 555, 263, 576, 263, 1021, 1375, 353, 5357, 25931, 5108, 329, 1375, 760, 707, 1135, 638, 6932, 310, 716, 326, 4084, 12509, 4591, 316, 323, 329, 14099, 487, 279, 563, 434, 3315, 498, 1775, 263, 1220, 5122, 7434, 326, 10766, 11893, 471, 2195, 481, 959, 716, 326, 707, 3613, 1842, 13417, 87, 21419, 358, 864, 810, 4636, 263, 2], "score": -0.13216006755828857, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "parseCommandLine", "`", "method", "effectively", ",", "you", "can", "directly", "provide", "a", "test", "that", "checks", "the", "condition", "when", "command", "line", "arguments", "do", "not", "contain", "a", "required", "option", ",", "which", "leads", "to", "the", "usage", "message", "being", "printed", ".", "You", "are", "intending", "to", "test", "if", "the", "method", "correctly", "identifies", "the", "absence", "of", "necessary", "options", "and", "properly", "handles", "such", "an", "error", "by", "invoking", "the", "`", "printUsage", "`", "routine", ".", "Here", "is", "a", "simple", "test", "example", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "shouldPrintUsageDueToMissingRequiredOptions", "(", ")", "throws", "Exception", "{", "/", "/", "Initialize", "with", "a", "set", "of", "arguments", "that", "are", "known", "not", "to", "meet", "the", "command", "line", "requirements", "String", "[", "]", "args", "=", "{", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "\"", "STR", "\"", ",", "\"", "STR", "\"", "}", ";", "boolean", "result", "=", "CassandraUnitCommandLineLoader", ".", "parseCommandLine", "(", "args", ")", ";", "assertTrue", "(", "result", ",", "\"", "Expected", "the", "method", "to", "return", "true", "indicating", "an", "exit", "due", "to", "error", ".", "\"", ")", ";", "assertTrue", "(", "CassandraUnitCommandLineLoader", ".", "isUsageBeenPrinted", "(", ")", ",", "\"", "Usage", "should", "have", "been", "printed", "due", "to", "missing", "required", "options", ".", "\"", ")", ";", "}", "`", "`", "`", "This", "test", "checks", "that", ":", "1", ".", "The", "`", "parseCommandLine", "`", "method", "returns", "true", ",", "indicating", "that", "the", "program", "should", "exit", "possibly", "due", "to", "an", "error", ".", "2", ".", "The", "`", "isUsageBeenPrinted", "`", "static", "method", "returns", "true", "confirming", "that", "the", "usage", "instructions", "were", "indeed", "printed", "as", "a", "result", "of", "missing", "key", "arguments", ".", "This", "directly", "tests", "the", "scenario", "described", "and", "confirms", "that", "the", "method", "under", "test", "reacts", "appropriately", "to", "given", "input", "conditions", ".", "</s>"]}, {"tids": [1, 1021, 1842, 707, 1375, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 1375, 848, 506, 20482, 358, 14416, 22106, 6243, 326, 14176, 12613, 358, 506, 18432, 635, 2537, 11274, 326, 1375, 1109, 21391, 1375, 707, 598, 19555, 1775, 716, 854, 3315, 279, 1931, 1479, 1456, 263, 1220, 707, 1410, 1508, 1815, 269, 8353, 603, 4471, 3189, 486, 2112, 2674, 269, 716, 326, 4084, 1779, 711, 2118, 14099, 2724, 434, 326, 3315, 1456, 263, 1021, 1842, 3377, 2324, 5943, 3007, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 514, 306, 308, 833, 273, 288, 315, 1456, 21, 315, 269, 315, 460, 21, 315, 289, 274, 342, 342, 4725, 21249, 4259, 741, 486, 2341, 326, 1931, 1479, 1456, 263, 21438, 2802, 21391, 2886, 263, 1109, 21391, 261, 833, 262, 274, 1815, 5510, 261, 21438, 2802, 21391, 2886, 263, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 1375, 1375, 1375, 657, 333, 4143, 981, 13016, 294, 300, 432, 2923, 444, 434, 1775, 1375, 833, 1375, 353, 2275, 1492, 509, 22918, 12543, 281, 326, 1479, 1456, 263, 300, 1021, 707, 1375, 1109, 21391, 1375, 353, 2566, 598, 4259, 1775, 263, 300, 1922, 11240, 4271, 716, 326, 4084, 12509, 1240, 2118, 14099, 487, 279, 563, 434, 326, 3315, 1931, 1456, 263, 1220, 3875, 5122, 6138, 326, 1842, 10766, 2887, 19908, 21610, 269, 10480, 518, 3937, 19623, 471, 1898, 22397, 603, 326, 7769, 13072, 263, 2], "score": -0.13675591349601746, "weight": 1, "toks": ["<s>", "The", "test", "method", "`", "shouldPrintUsageBecauseHostOptionIsMissing", "`", "can", "be", "simplified", "to", "completely", "encapsulate", "the", "functionality", "intended", "to", "be", "tested", "by", "just", "executing", "the", "`", "parseCommandLine", "`", "method", "with", "predefined", "arguments", "that", "are", "missing", "a", "required", "host", "option", ".", "This", "method", "should", "then", "assert", ",", "depending", "on", "implementation", "details", "not", "provided", "here", ",", "that", "the", "usage", "information", "has", "been", "printed", "because", "of", "the", "missing", "option", ".", "The", "test", "could", "look", "something", "like", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "String", "[", "]", "args", "=", "{", "\"", "option1", "\"", ",", "\"", "value1", "\"", "}", ";", "/", "/", "Assuming", "these", "do", "not", "include", "the", "required", "host", "option", ".", "CassandraUnitCommandLineLoader", ".", "parseCommandLine", "(", "args", ")", ";", "assertTrue", "(", "CassandraUnitCommandLineLoader", ".", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "`", "`", "`", "In", "this", "simple", "code", "snippet", ":", "-", "A", "specific", "set", "of", "arguments", "`", "args", "`", "is", "passed", "which", "intentionally", "misses", "the", "host", "option", ".", "-", "The", "method", "`", "parseCommandLine", "`", "is", "called", "with", "these", "arguments", ".", "-", "An", "assertion", "checks", "that", "the", "usage", "instructions", "have", "been", "printed", "as", "a", "result", "of", "the", "missing", "required", "option", ".", "This", "setup", "directly", "addresses", "the", "test", "scenario", "without", "unnecessary", "complexity", ",", "making", "it", "both", "shorter", "and", "more", "focused", "on", "the", "testing", "objective", ".", "</s>"]}, {"tids": [1, 2974, 279, 323, 372, 5173, 1842, 326, 1375, 1109, 21391, 1375, 707, 269, 326, 1842, 1410, 866, 309, 326, 1375, 1172, 5357, 1375, 707, 353, 10861, 1347, 326, 1296, 980, 1472, 854, 11332, 263, 1021, 1842, 1375, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 1375, 3377, 506, 20186, 2155, 8616, 635, 26704, 309, 1375, 353, 5357, 25931, 5108, 329, 1375, 1135, 1375, 638, 1375, 1839, 11274, 1375, 1109, 21391, 1375, 598, 279, 6826, 444, 434, 1775, 716, 854, 4846, 358, 506, 3315, 1931, 702, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 514, 306, 308, 833, 273, 288, 315, 300, 1308, 315, 269, 315, 460, 315, 269, 315, 300, 4042, 3482, 315, 269, 315, 460, 22, 315, 289, 274, 1250, 563, 273, 21438, 2802, 21391, 2886, 263, 1109, 21391, 261, 833, 262, 274, 1815, 5510, 261, 315, 10858, 1410, 1240, 2118, 14099, 315, 269, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 1815, 5510, 261, 315, 1021, 707, 1410, 2427, 598, 638, 315, 269, 563, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.1485215425491333, "weight": 1, "toks": ["<s>", "To", "adequately", "test", "the", "`", "parseCommandLine", "`", "method", ",", "the", "test", "should", "check", "if", "the", "`", "printUsage", "`", "method", "is", "triggered", "when", "the", "command", "line", "parameters", "are", "incorrect", ".", "The", "test", "`", "shouldPrintUsageBecauseHostOptionIsMissing", "`", "could", "be", "achieved", "simply", "by", "evaluating", "if", "`", "isUsageBeenPrinted", "`", "returns", "`", "true", "`", "after", "executing", "`", "parseCommandLine", "`", "with", "a", "particular", "set", "of", "arguments", "that", "are", "known", "to", "be", "missing", "required", "options", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "String", "[", "]", "args", "=", "{", "\"", "-", "other", "\"", ",", "\"", "value", "\"", ",", "\"", "-", "anotheroption", "\"", ",", "\"", "value2", "\"", "}", ";", "boolean", "result", "=", "CassandraUnitCommandLineLoader", ".", "parseCommandLine", "(", "args", ")", ";", "assertTrue", "(", "\"", "Usage", "should", "have", "been", "printed", "\"", ",", "isUsageBeenPrinted", "(", ")", ")", ";", "assertTrue", "(", "\"", "The", "method", "should", "exit", "with", "true", "\"", ",", "result", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1109, 21391, 1375, 707, 286, 280, 4966, 715, 269, 326, 1024, 3021, 1410, 3929, 309, 326, 4084, 1779, 711, 2118, 14099, 1347, 1931, 702, 4123, 487, 326, 1479, 854, 3315, 294, 1375, 1375, 1375, 2252, 1815, 5510, 261, 21438, 2802, 21391, 2886, 263, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.14866261184215546, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "parseCommandLine", "`", "method", "thoroughly", ",", "the", "next", "statement", "should", "verify", "if", "the", "usage", "information", "has", "been", "printed", "when", "required", "options", "such", "as", "the", "host", "are", "missing", ":", "`", "`", "`", "java", "assertTrue", "(", "CassandraUnitCommandLineLoader", ".", "isUsageBeenPrinted", "(", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3201, 21391, 1190, 1921, 1320, 261, 262, 288, 514, 306, 308, 833, 273, 288, 289, 274, 1815, 5510, 261, 21438, 2802, 21391, 2886, 263, 1109, 21391, 261, 833, 262, 262, 274, 289, 2], "score": -0.16179543733596802, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testParseCommandLineWithEmptyOptions", "(", ")", "{", "String", "[", "]", "args", "=", "{", "}", ";", "assertTrue", "(", "CassandraUnitCommandLineLoader", ".", "parseCommandLine", "(", "args", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 5108, 5357, 38, 11884, 2594, 1895, 2520, 4841, 261, 262, 1216, 1185, 288, 514, 306, 308, 833, 273, 288, 315, 7128, 315, 289, 274, 1815, 5510, 261, 21438, 2802, 21391, 2886, 263, 1109, 21391, 261, 833, 262, 262, 274, 1815, 5510, 261, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 289, 2], "score": -0.17202861607074738, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldPrintUsageBecauseHostOptionIsMissing", "(", ")", "throws", "Exception", "{", "String", "[", "]", "args", "=", "{", "\"", "STR", "\"", "}", ";", "assertTrue", "(", "CassandraUnitCommandLineLoader", ".", "parseCommandLine", "(", "args", ")", ")", ";", "assertTrue", "(", "isUsageBeenPrinted", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 5452, 263, 1815, 5510, 261, 21438, 2802, 21391, 2886, 263, 353, 5357, 25931, 5108, 329, 261, 262, 262, 274, 2], "score": -0.17312650382518768, "weight": 1, "toks": ["<s>", "Assert", ".", "assertTrue", "(", "CassandraUnitCommandLineLoader", ".", "isUsageBeenPrinted", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 42.00834048569396, "bleu-max": 100.0, "bleu-min": 41.31968790713064, "bleu-avg": 52.74311527165271, "code-bleu": 32.834317445768804, "code-bleu-max": 100.0, "code-bleu-min": 32.803536968191594, "code-bleu-avg": 43.950075682992015, "edit-sim": 79, "edit-sim-max": 100, "edit-sim-min": 78, "edit-sim-avg": 85.8, "rouge-p": 66.66666666666666, "rouge-p-max": 100.0, "rouge-p-min": 66.66666666666666, "rouge-p-avg": 78.17460317460316, "rouge-r": 66.66666666666666, "rouge-r-max": 100.0, "rouge-r-min": 55.55555555555556, "rouge-r-avg": 67.77777777777777, "rouge-f": 66.66666616666667, "rouge-f-max": 99.9999995, "rouge-f-min": 62.49999950781252, "rouge-f-avg": 72.17320212028761, "num-seq": 10}, "time": 0.8339159488677979, "misc": {}}
{"id": 65, "data_id": "csn-92349", "input_stids": [1, 498, 460, 32315, 32315, 31620, 4709, 32315, 31620, 32315, 32315, 32315, 1071, 31620, 1696, 261, 262, 288, 327, 460, 261, 460, 263, 4459, 261, 374, 262, 422, 296, 83, 11, 692, 460, 294, 261, 315, 3902, 6, 397, 460, 262, 262, 274, 289, 32315, 632, 7766, 918, 1696, 261, 262, 32315, 2], "topk": [{"tids": [1, 632, 7766, 918, 1696, 4709, 261, 262, 288, 31620, 12274, 273, 394, 31620, 261, 315, 1696, 315, 262, 274, 1815, 8867, 261, 12274, 263, 1696, 261, 262, 269, 315, 1696, 315, 262, 274, 289, 2], "score": -0.08674363791942596, "weight": 1, "toks": ["<s>", "@", "Test", "void", "openTest", "(", ")", "{", "Arrow", "arrow", "=", "new", "Arrow", "(", "\"", "open", "\"", ")", ";", "assertEquals", "(", "arrow", ".", "open", "(", ")", ",", "\"", "open", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 3387, 326, 1375, 1696, 1375, 707, 353, 8783, 18432, 269, 1045, 279, 2836, 1842, 716, 4271, 2856, 326, 707, 12433, 6606, 487, 2665, 1347, 326, 1122, 3351, 434, 326, 1375, 460, 1375, 533, 353, 296, 320, 296, 471, 1347, 518, 353, 486, 263, 13743, 353, 279, 20570, 784, 471, 11448, 4031, 358, 3695, 326, 1842, 294, 1375, 1375, 1375, 2252, 1930, 2358, 263, 525, 4873, 263, 525, 416, 2165, 263, 1536, 263, 7766, 274, 1930, 760, 2358, 263, 525, 4873, 263, 525, 416, 2165, 263, 1536, 263, 5452, 1115, 263, 1815, 8867, 274, 667, 31620, 4709, 288, 632, 7766, 918, 1842, 3678, 9434, 3759, 7069, 2520, 51, 261, 262, 288, 31620, 12274, 273, 394, 31620, 261, 315, 1696, 620, 315, 262, 274, 1815, 8867, 261, 315, 1696, 620, 315, 269, 12274, 263, 1696, 261, 262, 263, 2366, 261, 262, 262, 274, 289, 632, 7766, 918, 1842, 3678, 9434, 3759, 7069, 28041, 51, 261, 262, 288, 31620, 12274, 273, 394, 31620, 261, 315, 1746, 620, 315, 262, 274, 1815, 8867, 261, 315, 7128, 4412, 620, 315, 269, 12274, 263, 1696, 261, 262, 263, 2366, 261, 262, 262, 274, 289, 289, 1375, 1375, 1375, 8315, 1842, 707, 5122, 7434, 1245, 10766, 269, 24831, 716, 326, 707, 4058, 7372, 3775, 533, 4636, 8214, 263, 2], "score": -0.19314557313919067, "weight": 1, "toks": ["<s>", "To", "ensure", "the", "`", "open", "`", "method", "is", "correctly", "tested", ",", "write", "a", "unit", "test", "that", "checks", "whether", "the", "method", "behaves", "as", "expected", "when", "the", "first", "character", "of", "the", "`", "value", "`", "string", "is", "'", "o", "'", "and", "when", "it", "is", "not", ".", "Here", "is", "a", "concise", "and", "effective", "way", "to", "structure", "the", "test", ":", "`", "`", "`", "java", "import", "org", ".", "junit", ".", "jupiter", ".", "api", ".", "Test", ";", "import", "static", "org", ".", "junit", ".", "jupiter", ".", "api", ".", "Assertions", ".", "assertEquals", ";", "class", "ArrowTest", "{", "@", "Test", "void", "testOpenWhenFirstCharacterIsO", "(", ")", "{", "Arrow", "arrow", "=", "new", "Arrow", "(", "\"", "openValue", "\"", ")", ";", "assertEquals", "(", "\"", "openValue", "\"", ",", "arrow", ".", "open", "(", ")", ".", "getValue", "(", ")", ")", ";", "}", "@", "Test", "void", "testOpenWhenFirstCharacterIsNotO", "(", ")", "{", "Arrow", "arrow", "=", "new", "Arrow", "(", "\"", "closeValue", "\"", ")", ";", "assertEquals", "(", "\"", "STRcloseValue", "\"", ",", "arrow", ".", "open", "(", ")", ".", "getValue", "(", ")", ")", ";", "}", "}", "`", "`", "`", "Each", "test", "method", "directly", "tests", "one", "scenario", ",", "ensuring", "that", "the", "method", "logic", "handles", "different", "string", "conditions", "properly", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3678, 261, 262, 288, 31620, 12274, 273, 394, 31620, 261, 315, 1696, 315, 262, 274, 1815, 8867, 261, 315, 1696, 315, 269, 12274, 263, 1696, 261, 262, 263, 2366, 261, 262, 262, 274, 289, 2], "score": -0.2006208747625351, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOpen", "(", ")", "{", "Arrow", "arrow", "=", "new", "Arrow", "(", "\"", "open", "\"", ")", ";", "assertEquals", "(", "\"", "open", "\"", ",", "arrow", ".", "open", "(", ")", ".", "getValue", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 918, 1696, 261, 262, 288, 31620, 12274, 273, 394, 31620, 261, 315, 1696, 315, 262, 274, 1815, 8867, 261, 12274, 263, 1696, 261, 262, 263, 2366, 261, 262, 269, 315, 1696, 315, 262, 274, 289, 2], "score": -0.200855553150177, "weight": 1, "toks": ["<s>", "@", "Test", "void", "open", "(", ")", "{", "Arrow", "arrow", "=", "new", "Arrow", "(", "\"", "open", "\"", ")", ";", "assertEquals", "(", "arrow", ".", "open", "(", ")", ".", "getValue", "(", ")", ",", "\"", "open", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 918, 1842, 3678, 261, 262, 288, 31620, 12274, 273, 394, 31620, 261, 315, 1696, 315, 262, 274, 1815, 8867, 261, 315, 1696, 315, 269, 12274, 263, 1696, 261, 262, 263, 460, 261, 262, 262, 274, 289, 2], "score": -0.21696703135967255, "weight": 1, "toks": ["<s>", "@", "Test", "void", "testOpen", "(", ")", "{", "Arrow", "arrow", "=", "new", "Arrow", "(", "\"", "open", "\"", ")", ";", "assertEquals", "(", "\"", "open", "\"", ",", "arrow", ".", "open", "(", ")", ".", "value", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 1696, 1375, 707, 316, 326, 1375, 31620, 1375, 667, 269, 1846, 848, 1045, 279, 2836, 1842, 716, 4271, 3937, 4636, 7681, 635, 326, 268, 24265, 3726, 3470, 326, 707, 263, 13743, 296, 272, 279, 4143, 471, 20570, 784, 1842, 10766, 1450, 804, 2802, 294, 1375, 1375, 1375, 2252, 1930, 760, 2358, 263, 525, 4873, 263, 5452, 263, 1815, 8867, 274, 1930, 2358, 263, 525, 4873, 263, 7766, 274, 1071, 667, 31620, 4709, 288, 632, 7766, 1071, 918, 1842, 3678, 1305, 261, 262, 288, 31620, 12274, 1190, 3678, 273, 394, 31620, 261, 315, 1696, 24332, 315, 262, 274, 31620, 12274, 8073, 3678, 273, 394, 31620, 261, 315, 1746, 24332, 315, 262, 274, 342, 342, 7766, 10766, 1625, 326, 2172, 3351, 353, 296, 320, 296, 1815, 8867, 261, 315, 1696, 24332, 315, 269, 12274, 1190, 3678, 263, 1696, 261, 262, 263, 2366, 261, 262, 262, 274, 342, 342, 7766, 10766, 1625, 326, 2172, 3351, 353, 486, 296, 320, 296, 1815, 8867, 261, 315, 7128, 4412, 24332, 315, 269, 12274, 8073, 3678, 263, 1696, 261, 262, 263, 2366, 261, 262, 262, 274, 289, 289, 1375, 1375, 1375, 1220, 1842, 4271, 309, 326, 707, 8783, 1135, 326, 2282, 533, 1347, 518, 2542, 598, 296, 320, 296, 471, 9419, 315, 7128, 315, 3541, 263, 4344, 3071, 716, 326, 1375, 31620, 1375, 667, 471, 2097, 1375, 1696, 1375, 707, 854, 8249, 358, 2865, 4259, 5295, 269, 471, 716, 1915, 353, 279, 1375, 2366, 261, 262, 1375, 707, 316, 326, 2106, 1375, 31620, 1375, 733, 358, 1221, 4259, 7820, 3323, 263, 2], "score": -0.22726228833198547, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "open", "`", "method", "in", "the", "`", "Arrow", "`", "class", ",", "you", "can", "write", "a", "unit", "test", "that", "checks", "both", "conditions", "handled", "by", "the", "ternary", "operator", "within", "the", "method", ".", "Here", "'", "s", "a", "simple", "and", "concise", "test", "scenario", "using", "JUnit", ":", "`", "`", "`", "java", "import", "static", "org", ".", "junit", ".", "Assert", ".", "assertEquals", ";", "import", "org", ".", "junit", ".", "Test", ";", "public", "class", "ArrowTest", "{", "@", "Test", "public", "void", "testOpenMethod", "(", ")", "{", "Arrow", "arrowWithOpen", "=", "new", "Arrow", "(", "\"", "openSomething", "\"", ")", ";", "Arrow", "arrowWithoutOpen", "=", "new", "Arrow", "(", "\"", "closeSomething", "\"", ")", ";", "/", "/", "Test", "scenario", "where", "the", "initial", "character", "is", "'", "o", "'", "assertEquals", "(", "\"", "openSomething", "\"", ",", "arrowWithOpen", ".", "open", "(", ")", ".", "getValue", "(", ")", ")", ";", "/", "/", "Test", "scenario", "where", "the", "initial", "character", "is", "not", "'", "o", "'", "assertEquals", "(", "\"", "STRcloseSomething", "\"", ",", "arrowWithoutOpen", ".", "open", "(", ")", ".", "getValue", "(", ")", ")", ";", "}", "}", "`", "`", "`", "This", "test", "checks", "if", "the", "method", "correctly", "returns", "the", "original", "string", "when", "it", "starts", "with", "'", "o", "'", "and", "prefixes", "\"", "STR", "\"", "otherwise", ".", "Make", "sure", "that", "the", "`", "Arrow", "`", "class", "and", "its", "`", "open", "`", "method", "are", "implemented", "to", "support", "these", "operations", ",", "and", "that", "there", "is", "a", "`", "getValue", "(", ")", "`", "method", "in", "the", "returned", "`", "Arrow", "`", "object", "to", "make", "these", "assertions", "possible", ".", "</s>"]}, {"tids": [1, 632, 272, 7766, 918, 1696, 261, 262, 288, 31620, 12274, 273, 394, 31620, 261, 315, 1696, 3244, 280, 315, 262, 274, 1815, 8867, 261, 315, 1696, 3244, 280, 315, 269, 12274, 263, 1696, 261, 262, 263, 2366, 261, 262, 262, 274, 289, 2], "score": -0.2500389516353607, "weight": 1, "toks": ["<s>", "@", "s", "Test", "void", "open", "(", ")", "{", "Arrow", "arrow", "=", "new", "Arrow", "(", "\"", "openDoor", "\"", ")", ";", "assertEquals", "(", "\"", "openDoor", "\"", ",", "arrow", ".", "open", "(", ")", ".", "getValue", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 5452, 263, 1815, 5510, 261, 394, 31620, 261, 315, 1696, 315, 262, 263, 1696, 261, 262, 263, 1606, 261, 315, 1696, 315, 262, 262, 274, 2], "score": -0.29255422949790955, "weight": 1, "toks": ["<s>", "Assert", ".", "assertTrue", "(", "new", "Arrow", "(", "\"", "open", "\"", ")", ".", "open", "(", ")", ".", "equals", "(", "\"", "open", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 918, 1696, 4709, 261, 262, 288, 31620, 4709, 791, 273, 394, 31620, 4709, 261, 315, 1696, 315, 262, 274, 1815, 8867, 261, 315, 1696, 315, 269, 791, 263, 1696, 261, 262, 263, 2366, 261, 262, 262, 274, 289, 2], "score": -0.3029342293739319, "weight": 1, "toks": ["<s>", "@", "Test", "void", "openTest", "(", ")", "{", "ArrowTest", "instance", "=", "new", "ArrowTest", "(", "\"", "open", "\"", ")", ";", "assertEquals", "(", "\"", "open", "\"", ",", "instance", ".", "open", "(", ")", ".", "getValue", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 918, 1696, 67, 7815, 4709, 261, 262, 288, 31620, 12274, 273, 394, 31620, 261, 315, 1696, 315, 262, 274, 1815, 8867, 261, 315, 1696, 315, 269, 12274, 263, 1696, 261, 262, 263, 2366, 261, 262, 262, 274, 289, 2], "score": -0.3074820041656494, "weight": 1, "toks": ["<s>", "@", "Test", "void", "open_arrowTest", "(", ")", "{", "Arrow", "arrow", "=", "new", "Arrow", "(", "\"", "open", "\"", ")", ";", "assertEquals", "(", "\"", "open", "\"", ",", "arrow", ".", "open", "(", ")", ".", "getValue", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 33.552497434166256, "bleu-max": 50.18638315958046, "bleu-min": 26.683319086423996, "bleu-avg": 36.82005350427296, "code-bleu": 29.735165856039036, "code-bleu-max": 51.06322091912566, "code-bleu-min": 22.42066702990929, "code-bleu-avg": 31.924423220132702, "edit-sim": 74, "edit-sim-max": 74, "edit-sim-min": 59, "edit-sim-avg": 68.0, "rouge-p": 77.77777777777779, "rouge-p-max": 77.77777777777779, "rouge-p-min": 60.0, "rouge-p-avg": 68.69444444444444, "rouge-r": 77.77777777777779, "rouge-r-max": 77.77777777777779, "rouge-r-min": 55.55555555555556, "rouge-r-avg": 73.33333333333334, "rouge-f": 77.77777727777779, "rouge-f-max": 77.77777727777779, "rouge-f-min": 58.82352891349482, "rouge-f-avg": 70.85311267623715, "num-seq": 10}, "time": 0.8756868839263916, "misc": {}}
{"id": 66, "data_id": "csn-97459", "input_stids": [1, 3656, 5580, 2063, 1319, 1489, 1123, 508, 7891, 2290, 7891, 2290, 291, 6014, 15075, 1267, 32315, 32315, 531, 10977, 25316, 13198, 4709, 32315, 531, 10977, 25316, 1952, 32315, 32315, 632, 11672, 1071, 918, 2911, 4254, 261, 262, 1216, 1185, 288, 514, 15158, 273, 508, 263, 26058, 261, 262, 274, 6183, 1123, 273, 394, 6183, 261, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 10977, 8597, 320, 2377, 273, 394, 531, 10977, 8597, 261, 315, 3902, 6, 397, 315, 3902, 6, 397, 15158, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 1123, 262, 274, 3780, 273, 394, 12806, 1190, 13938, 2449, 261, 320, 2377, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 262, 274, 1487, 273, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 274, 7891, 2290, 273, 1487, 263, 17971, 10977, 2290, 261, 262, 274, 1319, 273, 261, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 262, 263, 11263, 261, 262, 274, 752, 3078, 2290, 261, 1319, 262, 274, 309, 261, 401, 394, 1387, 261, 315, 3902, 6, 262, 263, 1704, 261, 262, 262, 531, 1343, 1318, 263, 791, 261, 262, 263, 1894, 261, 333, 269, 315, 3902, 6, 262, 274, 1262, 2290, 261, 1319, 269, 4200, 262, 274, 1319, 263, 1746, 261, 262, 274, 289, 632, 7360, 1071, 918, 1746, 1952, 261, 262, 1216, 1185, 288, 309, 261, 1487, 480, 446, 597, 401, 1487, 263, 18851, 261, 262, 262, 1487, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 289, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 32315, 2], "topk": [{"tids": [1, 5452, 263, 25395, 261, 1319, 263, 843, 261, 315, 9111, 23286, 508, 4571, 1014, 315, 262, 262, 274, 2], "score": -0.3571773171424866, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "db", ".", "query", "(", "\"", "SELECT", "DISTINCT", "name", "FROM", "table", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 1071, 918, 1842, 1684, 3406, 261, 262, 1216, 6483, 288, 8056, 3021, 273, 1487, 263, 25697, 261, 262, 274, 25395, 261, 3021, 262, 274, 289, 2], "score": -0.396383136510849, "weight": 1, "toks": ["<s>", "public", "void", "testCreateStatement", "(", ")", "throws", "SQLException", "{", "Statement", "statement", "=", "conn", ".", "createStatement", "(", ")", ";", "assertNotNull", "(", "statement", ")", ";", "}", "</s>"]}, {"tids": [1, 25697, 261, 262, 274, 2], "score": -0.40874823927879333, "weight": 1, "toks": ["<s>", "createStatement", "(", ")", ";", "</s>"]}, {"tids": [1, 2911, 4254, 261, 262, 274, 2], "score": -0.4132396876811981, "weight": 1, "toks": ["<s>", "prepareDatabase", "(", ")", ";", "</s>"]}, {"tids": [1, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.41812628507614136, "weight": 1, "toks": ["<s>", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}, {"tids": [1, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.4198676645755768, "weight": 1, "toks": ["<s>", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}, {"tids": [1, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.4213167726993561, "weight": 1, "toks": ["<s>", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}, {"tids": [1, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.42426759004592896, "weight": 1, "toks": ["<s>", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}, {"tids": [1, 25697, 261, 262, 263, 14304, 261, 315, 9111, 23286, 1057, 67, 529, 4571, 1014, 67, 529, 315, 262, 274, 2], "score": -0.4260740876197815, "weight": 1, "toks": ["<s>", "createStatement", "(", ")", ".", "executeQuery", "(", "\"", "SELECT", "DISTINCT", "column_name", "FROM", "table_name", "\"", ")", ";", "</s>"]}, {"tids": [1, 7891, 2290, 273, 1487, 263, 17971, 10977, 2290, 261, 262, 274, 2], "score": -0.43251001834869385, "weight": 1, "toks": ["<s>", "orientDB", "=", "conn", ".", "getOrientDB", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 12.839307483032304, "bleu-max": 75.45031759729784, "bleu-min": 6.297534453426143, "bleu-avg": 16.86590851491014, "code-bleu": 9.76401092946142, "code-bleu-max": 86.29897645577385, "code-bleu-min": 9.348997147220416, "code-bleu-avg": 21.386297332561533, "edit-sim": 33, "edit-sim-max": 88, "edit-sim-min": 25, "edit-sim-avg": 37.5, "rouge-p": 40.0, "rouge-p-max": 75.0, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 40.46969696969696, "rouge-r": 25.0, "rouge-r-max": 75.0, "rouge-r-min": 25.0, "rouge-r-avg": 35.0, "rouge-f": 30.76923029585799, "rouge-f-max": 74.9999995, "rouge-f-min": 28.57142808163266, "rouge-f-avg": 36.814310933508196, "num-seq": 10}, "time": 1.300032138824463, "misc": {}}
{"id": 67, "data_id": "csn-97459", "input_stids": [1, 3656, 5580, 2063, 1319, 1489, 1123, 508, 7891, 2290, 7891, 2290, 291, 6014, 15075, 1267, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 531, 10977, 25316, 13198, 4709, 8056, 32315, 531, 10977, 25316, 1952, 32315, 14888, 273, 3853, 263, 963, 261, 262, 274, 32315, 632, 11672, 1071, 918, 2911, 4254, 261, 262, 1216, 1185, 288, 514, 15158, 273, 508, 263, 26058, 261, 262, 274, 6183, 1123, 273, 394, 6183, 261, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 10977, 8597, 320, 2377, 273, 394, 531, 10977, 8597, 261, 315, 3902, 6, 397, 315, 3902, 6, 397, 15158, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 1123, 262, 274, 3780, 273, 394, 12806, 1190, 13938, 2449, 261, 320, 2377, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 262, 274, 1487, 273, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 274, 7891, 2290, 273, 1487, 263, 17971, 10977, 2290, 261, 262, 274, 1319, 273, 261, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 262, 263, 11263, 261, 262, 274, 752, 3078, 2290, 261, 1319, 262, 274, 309, 261, 401, 394, 1387, 261, 315, 3902, 6, 262, 263, 1704, 261, 262, 262, 531, 1343, 1318, 263, 791, 261, 262, 263, 1894, 261, 333, 269, 315, 3902, 6, 262, 274, 1262, 2290, 261, 1319, 269, 4200, 262, 274, 1319, 263, 1746, 261, 262, 274, 289, 632, 7360, 1071, 918, 1746, 1952, 261, 262, 1216, 1185, 288, 309, 261, 1487, 480, 446, 597, 401, 1487, 263, 18851, 261, 262, 262, 1487, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 289, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 32315, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 2], "topk": [{"tids": [1, 10842, 3597, 273, 3480, 263, 14304, 261, 315, 9111, 23286, 508, 4571, 3677, 274, 315, 262, 274, 2], "score": -0.2789731025695801, "weight": 1, "toks": ["<s>", "ResultSet", "rs", "=", "stmt", ".", "executeQuery", "(", "\"", "SELECT", "DISTINCT", "name", "FROM", "users", ";", "\"", ")", ";", "</s>"]}, {"tids": [1, 10842, 3597, 273, 3480, 263, 14304, 261, 315, 9111, 23286, 508, 4571, 1014, 67, 529, 315, 262, 274, 2], "score": -0.30342453718185425, "weight": 1, "toks": ["<s>", "ResultSet", "rs", "=", "stmt", ".", "executeQuery", "(", "\"", "SELECT", "DISTINCT", "name", "FROM", "table_name", "\"", ")", ";", "</s>"]}, {"tids": [1, 10842, 3597, 273, 3480, 263, 14304, 261, 315, 9111, 23286, 508, 4571, 3677, 315, 262, 274, 2], "score": -0.3589943051338196, "weight": 1, "toks": ["<s>", "ResultSet", "rs", "=", "stmt", ".", "executeQuery", "(", "\"", "SELECT", "DISTINCT", "name", "FROM", "users", "\"", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 3480, 262, 274, 2], "score": -0.3705141246318817, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "stmt", ")", ";", "</s>"]}, {"tids": [1, 10842, 3597, 273, 3480, 263, 14304, 261, 315, 9111, 23286, 1057, 67, 529, 4571, 1014, 67, 529, 315, 262, 274, 2], "score": -0.3874310851097107, "weight": 1, "toks": ["<s>", "ResultSet", "rs", "=", "stmt", ".", "executeQuery", "(", "\"", "SELECT", "DISTINCT", "column_name", "FROM", "table_name", "\"", ")", ";", "</s>"]}, {"tids": [1, 7693, 326, 8056, 353, 4985, 2522, 628, 326, 1459, 263, 2], "score": -0.3974530100822449, "weight": 1, "toks": ["<s>", "Ensure", "the", "Statement", "is", "successfully", "created", "from", "the", "connection", ".", "</s>"]}, {"tids": [1, 10842, 3597, 273, 3480, 263, 14304, 261, 315, 9111, 23286, 508, 4571, 3677, 315, 262, 274, 2], "score": -0.398385226726532, "weight": 1, "toks": ["<s>", "ResultSet", "rs", "=", "stmt", ".", "executeQuery", "(", "\"", "SELECT", "DISTINCT", "name", "FROM", "users", "\"", ")", ";", "</s>"]}, {"tids": [1, 10842, 3597, 273, 3480, 263, 14304, 261, 315, 9111, 23286, 1057, 67, 529, 4571, 1014, 67, 529, 315, 262, 274, 2], "score": -0.4077601134777069, "weight": 1, "toks": ["<s>", "ResultSet", "rs", "=", "stmt", ".", "executeQuery", "(", "\"", "SELECT", "DISTINCT", "column_name", "FROM", "table_name", "\"", ")", ";", "</s>"]}, {"tids": [1, 3480, 263, 1836, 261, 315, 9111, 23286, 380, 4571, 1014, 67, 529, 315, 262, 274, 2], "score": -0.4228905439376831, "weight": 1, "toks": ["<s>", "stmt", ".", "execute", "(", "\"", "SELECT", "DISTINCT", "*", "FROM", "table_name", "\"", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 1684, 3406, 261, 262, 1216, 6483, 288, 8056, 3021, 273, 1487, 263, 25697, 261, 262, 274, 25395, 261, 3021, 262, 274, 289, 2], "score": -0.42834413051605225, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldCreateStatement", "(", ")", "throws", "SQLException", "{", "Statement", "statement", "=", "conn", ".", "createStatement", "(", ")", ";", "assertNotNull", "(", "statement", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 22.659486819268018, "bleu-max": 45.1408995717323, "bleu-min": 11.75525211987846, "bleu-avg": 18.859623614431804, "code-bleu": 15.521201226780976, "code-bleu-max": 35.4481294654305, "code-bleu-min": 3.072432854114218, "code-bleu-avg": 12.170458516458392, "edit-sim": 48, "edit-sim-max": 61, "edit-sim-min": 45, "edit-sim-avg": 50.4, "rouge-p": 55.55555555555556, "rouge-p-max": 83.33333333333334, "rouge-p-min": 31.25, "rouge-p-avg": 52.91666666666667, "rouge-r": 62.5, "rouge-r-max": 75.0, "rouge-r-min": 50.0, "rouge-r-avg": 61.25, "rouge-f": 58.82352891349482, "rouge-f-max": 71.42857093877552, "rouge-f-min": 41.666666222222226, "rouge-f-avg": 55.16948760400874, "num-seq": 10}, "time": 1.2303075790405273, "misc": {}}
{"id": 68, "data_id": "csn-97459", "input_stids": [1, 3656, 5580, 2063, 1319, 1489, 1123, 508, 7891, 2290, 7891, 2290, 291, 6014, 15075, 1267, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 531, 10977, 25316, 13198, 4709, 8056, 32315, 32315, 727, 987, 411, 531, 2519, 405, 563, 273, 2063, 263, 1296, 261, 394, 531, 3997, 55, 2515, 1138, 411, 531, 2519, 405, 261, 843, 262, 262, 263, 1836, 261, 262, 274, 32315, 632, 11672, 1071, 918, 2911, 4254, 261, 262, 1216, 1185, 288, 514, 15158, 273, 508, 263, 26058, 261, 262, 274, 6183, 1123, 273, 394, 6183, 261, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 10977, 8597, 320, 2377, 273, 394, 531, 10977, 8597, 261, 315, 3902, 6, 397, 315, 3902, 6, 397, 15158, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 1123, 262, 274, 3780, 273, 394, 12806, 1190, 13938, 2449, 261, 320, 2377, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 262, 274, 1487, 273, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 274, 7891, 2290, 273, 1487, 263, 17971, 10977, 2290, 261, 262, 274, 1319, 273, 261, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 262, 263, 11263, 261, 262, 274, 752, 3078, 2290, 261, 1319, 262, 274, 309, 261, 401, 394, 1387, 261, 315, 3902, 6, 262, 263, 1704, 261, 262, 262, 531, 1343, 1318, 263, 791, 261, 262, 263, 1894, 261, 333, 269, 315, 3902, 6, 262, 274, 1262, 2290, 261, 1319, 269, 4200, 262, 274, 1319, 263, 1746, 261, 262, 274, 289, 632, 7360, 1071, 918, 1746, 1952, 261, 262, 1216, 1185, 288, 309, 261, 1487, 480, 446, 597, 401, 1487, 263, 18851, 261, 262, 262, 1487, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 289, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 32315, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 1815, 18163, 261, 3480, 263, 1836, 261, 315, 3902, 6, 262, 262, 263, 21332, 261, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 288, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 1815, 18163, 261, 3480, 263, 1836, 261, 315, 9111, 23286, 1057, 4571, 1014, 315, 262, 262, 263, 21332, 261, 262, 274, 289, 2], "score": -0.06550203263759613, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldSelectWithDistinct", "(", ")", "throws", "Exception", "{", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "assertThat", "(", "stmt", ".", "execute", "(", "\"", "SELECT", "DISTINCT", "column", "FROM", "table", "\"", ")", ")", ".", "isTrue", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 14373, 1375, 1487, 263, 25697, 261, 262, 1375, 358, 1842, 326, 1375, 25697, 1375, 707, 263, 2], "score": -0.17837566137313843, "weight": 1, "toks": ["<s>", "Invoke", "`", "conn", ".", "createStatement", "(", ")", "`", "to", "test", "the", "`", "createStatement", "`", "method", ".", "</s>"]}, {"tids": [1, 1375, 3480, 263, 1836, 261, 315, 9111, 23286, 508, 4571, 3677, 315, 262, 274, 1375, 2], "score": -0.2250949740409851, "weight": 1, "toks": ["<s>", "`", "stmt", ".", "execute", "(", "\"", "SELECT", "DISTINCT", "name", "FROM", "users", "\"", ")", ";", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 2], "score": -0.22668859362602234, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldSelectWithDistinct", "(", ")", "throws", "Exception", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 25697, 1375, 707, 316, 326, 1375, 531, 10977, 25316, 1952, 1375, 667, 14382, 715, 269, 1846, 848, 999, 326, 3751, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1684, 3406, 261, 262, 1216, 6483, 288, 8056, 3021, 273, 1487, 263, 25697, 261, 262, 274, 25395, 261, 3021, 262, 274, 1815, 5510, 261, 3021, 1276, 531, 10977, 25316, 3406, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2887302339076996, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "createStatement", "`", "method", "in", "the", "`", "OrientJdbcConnection", "`", "class", "efficiently", ",", "you", "can", "use", "the", "following", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testCreateStatement", "(", ")", "throws", "SQLException", "{", "Statement", "statement", "=", "conn", ".", "createStatement", "(", ")", ";", "assertNotNull", "(", "statement", ")", ";", "assertTrue", "(", "statement", "instanceof", "OrientJdbcStatement", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 7730, 279, 10217, 9111, 3021, 364, 4588, 316, 326, 1842, 707, 1375, 1410, 3391, 1190, 23402, 1375, 263, 2], "score": -0.29330745339393616, "weight": 1, "toks": ["<s>", "Prepare", "a", "distinct", "SELECT", "statement", "for", "execution", "in", "the", "test", "method", "`", "shouldSelectWithDistinct", "`", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 2], "score": -0.3320804238319397, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldSelectWithDistinct", "(", ")", "throws", "Exception", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 2], "score": -0.3460782468318939, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldSelectWithDistinct", "(", ")", "throws", "Exception", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 2], "score": -0.364749938249588, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldSelectWithDistinct", "(", ")", "throws", "Exception", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 288, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 1815, 5510, 261, 3480, 263, 1836, 261, 315, 9111, 23286, 1057, 4571, 1014, 315, 262, 262, 274, 289, 2], "score": -0.36799606680870056, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldSelectWithDistinct", "(", ")", "throws", "Exception", "{", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "assertTrue", "(", "stmt", ".", "execute", "(", "\"", "SELECT", "DISTINCT", "column", "FROM", "table", "\"", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 19.01821839976893, "bleu-max": 29.446564457869812, "bleu-min": 13.834368456410944, "bleu-avg": 18.77404333593743, "code-bleu": 10.953226267305215, "code-bleu-max": 17.583408507009928, "code-bleu-min": 2.9407794306575634, "code-bleu-avg": 9.982903802231641, "edit-sim": 51, "edit-sim-max": 52, "edit-sim-min": 47, "edit-sim-avg": 49.1, "rouge-p": 50.0, "rouge-p-max": 80.0, "rouge-p-min": 44.44444444444444, "rouge-p-avg": 51.333333333333336, "rouge-r": 50.0, "rouge-r-max": 50.0, "rouge-r-min": 50.0, "rouge-r-avg": 50.0, "rouge-f": 49.99999950000001, "rouge-f-max": 61.53846106508877, "rouge-f-min": 47.05882303114187, "rouge-f-avg": 50.27149271585144, "num-seq": 10}, "time": 0.7914993762969971, "misc": {}}
{"id": 69, "data_id": "csn-97459", "input_stids": [1, 3656, 5580, 2063, 1319, 1489, 1123, 508, 7891, 2290, 7891, 2290, 291, 6014, 15075, 1267, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 531, 10977, 25316, 13198, 4709, 8056, 10842, 32315, 32315, 727, 987, 411, 531, 2519, 405, 563, 273, 2063, 263, 1296, 261, 394, 531, 3997, 55, 2515, 1138, 411, 531, 2519, 405, 261, 843, 262, 262, 263, 1836, 261, 262, 274, 32315, 632, 11672, 1071, 918, 2911, 4254, 261, 262, 1216, 1185, 288, 514, 15158, 273, 508, 263, 26058, 261, 262, 274, 6183, 1123, 273, 394, 6183, 261, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 10977, 8597, 320, 2377, 273, 394, 531, 10977, 8597, 261, 315, 3902, 6, 397, 315, 3902, 6, 397, 15158, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 1123, 262, 274, 3780, 273, 394, 12806, 1190, 13938, 2449, 261, 320, 2377, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 262, 274, 1487, 273, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 274, 7891, 2290, 273, 1487, 263, 17971, 10977, 2290, 261, 262, 274, 1319, 273, 261, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 262, 263, 11263, 261, 262, 274, 752, 3078, 2290, 261, 1319, 262, 274, 309, 261, 401, 394, 1387, 261, 315, 3902, 6, 262, 263, 1704, 261, 262, 262, 531, 1343, 1318, 263, 791, 261, 262, 263, 1894, 261, 333, 269, 315, 3902, 6, 262, 274, 1262, 2290, 261, 1319, 269, 4200, 262, 274, 1319, 263, 1746, 261, 262, 274, 289, 632, 7360, 1071, 918, 1746, 1952, 261, 262, 1216, 1185, 288, 309, 261, 1487, 480, 446, 597, 401, 1487, 263, 18851, 261, 262, 262, 1487, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 289, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 32315, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 1815, 18163, 261, 3480, 263, 1836, 261, 315, 3902, 6, 262, 262, 263, 21332, 261, 262, 274, 10842, 3597, 273, 3480, 263, 8601, 694, 261, 262, 274, 2], "topk": [{"tids": [1, 1815, 18163, 261, 3597, 263, 1024, 261, 262, 262, 263, 21332, 261, 262, 274, 2], "score": -0.14905139803886414, "weight": 1, "toks": ["<s>", "assertThat", "(", "rs", ".", "next", "(", ")", ")", ".", "isTrue", "(", ")", ";", "</s>"]}, {"tids": [1, 1815, 18163, 261, 3597, 263, 1024, 261, 262, 262, 263, 21332, 261, 262, 274, 2], "score": -0.1952679604291916, "weight": 1, "toks": ["<s>", "assertThat", "(", "rs", ".", "next", "(", ")", ")", ".", "isTrue", "(", ")", ";", "</s>"]}, {"tids": [1, 1788, 279, 394, 1375, 8056, 1375, 1450, 1375, 1487, 263, 25697, 261, 262, 1375, 471, 1836, 279, 843, 358, 1842, 2097, 14176, 263, 2], "score": -0.2400895655155182, "weight": 1, "toks": ["<s>", "Create", "a", "new", "`", "Statement", "`", "using", "`", "conn", ".", "createStatement", "(", ")", "`", "and", "execute", "a", "query", "to", "test", "its", "functionality", ".", "</s>"]}, {"tids": [1, 1815, 18163, 261, 3597, 263, 1024, 261, 262, 262, 263, 21332, 261, 262, 274, 2], "score": -0.2524106800556183, "weight": 1, "toks": ["<s>", "assertThat", "(", "rs", ".", "next", "(", ")", ")", ".", "isTrue", "(", ")", ";", "</s>"]}, {"tids": [1, 1021, 1842, 707, 1375, 1410, 3391, 1190, 23402, 1375, 15610, 10243, 279, 12097, 358, 3929, 309, 11274, 279, 10217, 4421, 843, 3970, 279, 1375, 8056, 1375, 733, 4985, 9023, 279, 1375, 10842, 1375, 471, 9271, 2195, 481, 959, 326, 22613, 434, 2665, 1686, 263, 1021, 707, 353, 19788, 358, 18312, 279, 1459, 269, 752, 279, 3021, 269, 1836, 326, 843, 269, 471, 1815, 29867, 263, 1021, 12788, 353, 316, 18075, 843, 4588, 471, 563, 16191, 18699, 1961, 434, 326, 1375, 531, 10977, 25316, 3406, 1375, 316, 326, 819, 434, 1375, 531, 10977, 25316, 1952, 1375, 263, 2], "score": -0.2527776062488556, "weight": 1, "toks": ["<s>", "The", "test", "method", "`", "shouldSelectWithDistinct", "`", "primarily", "aims", "to", "verify", "if", "executing", "a", "distinct", "selection", "query", "via", "a", "`", "Statement", "`", "object", "successfully", "retrieves", "a", "`", "ResultSet", "`", "and", "further", "confirms", "the", "retrieval", "of", "expected", "results", ".", "The", "method", "is", "structured", "to", "establish", "a", "connection", ",", "create", "a", "statement", ",", "execute", "the", "query", ",", "and", "assert", "outcomes", ".", "The", "utility", "is", "in", "validating", "query", "execution", "and", "result", "fetching", "functionalities", "of", "the", "`", "OrientJdbcStatement", "`", "in", "the", "context", "of", "`", "OrientJdbcConnection", "`", ".", "</s>"]}, {"tids": [1, 1815, 18163, 261, 3597, 263, 1024, 261, 262, 262, 263, 21332, 261, 262, 274, 2], "score": -0.2580161690711975, "weight": 1, "toks": ["<s>", "assertThat", "(", "rs", ".", "next", "(", ")", ")", ".", "isTrue", "(", ")", ";", "</s>"]}, {"tids": [1, 1815, 18163, 261, 3597, 263, 1024, 261, 262, 262, 263, 21332, 261, 262, 274, 2], "score": -0.29675352573394775, "weight": 1, "toks": ["<s>", "assertThat", "(", "rs", ".", "next", "(", ")", ")", ".", "isTrue", "(", ")", ";", "</s>"]}, {"tids": [1, 1815, 18163, 261, 3597, 263, 1024, 261, 262, 262, 263, 21332, 261, 262, 274, 2], "score": -0.3406158983707428, "weight": 1, "toks": ["<s>", "assertThat", "(", "rs", ".", "next", "(", ")", ")", ".", "isTrue", "(", ")", ";", "</s>"]}, {"tids": [1, 1815, 18163, 261, 3597, 263, 1024, 261, 262, 262, 263, 21332, 261, 262, 274, 2], "score": -0.34526219964027405, "weight": 1, "toks": ["<s>", "assertThat", "(", "rs", ".", "next", "(", ")", ")", ".", "isTrue", "(", ")", ";", "</s>"]}, {"tids": [1, 1021, 2112, 977, 12001, 358, 7111, 434, 11392, 7178, 3746, 358, 2836, 7769, 316, 279, 5110, 3330, 269, 21195, 1450, 804, 2802, 7563, 598, 531, 10977, 2290, 269, 279, 5110, 300, 2511, 2631, 3997, 2063, 263, 1021, 2186, 434, 326, 977, 2341, 707, 6377, 364, 4979, 279, 2063, 3021, 269, 3637, 731, 471, 268, 2091, 310, 2588, 279, 2063, 1459, 364, 279, 1842, 269, 471, 279, 1842, 707, 358, 1836, 279, 3021, 471, 3929, 326, 876, 263, 2974, 30630, 1245, 3021, 364, 7769, 269, 2231, 296, 272, 5260, 326, 3751, 1842, 707, 13016, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 288, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 1815, 18163, 261, 3480, 263, 1836, 261, 315, 9111, 23286, 652, 4571, 1014, 315, 262, 262, 263, 21332, 261, 262, 274, 10842, 3597, 273, 3480, 263, 8601, 694, 261, 262, 274, 289, 1375, 1375, 1375, 1220, 13016, 353, 12613, 358, 1842, 309, 326, 3063, 3021, 315, 9111, 23286, 315, 11997, 4985, 471, 358, 3387, 716, 518, 1135, 279, 563, 444, 263, 13743, 296, 272, 279, 898, 2378, 434, 326, 1842, 294, 300, 1375, 25697, 261, 262, 1375, 353, 1399, 358, 752, 279, 1375, 8056, 1375, 733, 628, 326, 1459, 263, 300, 1375, 1836, 261, 514, 1847, 262, 1375, 353, 2566, 603, 326, 1375, 8056, 1375, 733, 598, 392, 3063, 843, 269, 471, 518, 296, 272, 2665, 358, 327, 1375, 638, 1375, 269, 11193, 716, 326, 843, 1703, 7120, 4985, 471, 279, 563, 444, 353, 2319, 263, 300, 1375, 8601, 694, 261, 262, 1375, 9023, 326, 563, 444, 4374, 635, 326, 7120, 843, 269, 1492, 848, 5137, 506, 1399, 358, 3929, 326, 3434, 501, 1703, 10295, 263, 1220, 1842, 848, 506, 1399, 358, 3929, 716, 326, 10217, 843, 2572, 434, 326, 2063, 471, 16364, 3419, 261, 316, 333, 648, 269, 531, 10977, 2290, 296, 272, 16364, 4471, 262, 6330, 487, 2665, 263, 1220, 353, 487, 20570, 784, 487, 4573, 358, 3387, 326, 1375, 1836, 1375, 471, 1375, 8601, 694, 1375, 2590, 1440, 487, 12613, 1347, 14928, 279, 315, 9111, 23286, 315, 3063, 1296, 263, 2], "score": -0.35019996762275696, "weight": 1, "toks": ["<s>", "The", "provided", "text", "seems", "to", "consist", "of", "several", "sections", "related", "to", "unit", "testing", "in", "a", "Java", "environment", ",", "specifically", "using", "JUnit", "along", "with", "OrientDB", ",", "a", "Java", "-", "based", "NoSQL", "database", ".", "The", "elements", "of", "the", "text", "include", "method", "definitions", "for", "creating", "a", "database", "statement", ",", "setting", "up", "and", "tearing", "down", "a", "database", "connection", "for", "a", "test", ",", "and", "a", "test", "method", "to", "execute", "a", "statement", "and", "verify", "the", "output", ".", "To", "isolate", "one", "statement", "for", "testing", ",", "let", "'", "s", "consider", "the", "following", "test", "method", "snippet", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "shouldSelectWithDistinct", "(", ")", "throws", "Exception", "{", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "assertThat", "(", "stmt", ".", "execute", "(", "\"", "SELECT", "DISTINCT", "field", "FROM", "table", "\"", ")", ")", ".", "isTrue", "(", ")", ";", "ResultSet", "rs", "=", "stmt", ".", "getResultSet", "(", ")", ";", "}", "`", "`", "`", "This", "snippet", "is", "intended", "to", "test", "if", "the", "SQL", "statement", "\"", "SELECT", "DISTINCT", "\"", "executes", "successfully", "and", "to", "ensure", "that", "it", "returns", "a", "result", "set", ".", "Here", "'", "s", "a", "breakdown", "of", "the", "test", ":", "-", "`", "createStatement", "(", ")", "`", "is", "used", "to", "create", "a", "`", "Statement", "`", "object", "from", "the", "connection", ".", "-", "`", "execute", "(", "String", "sql", ")", "`", "is", "called", "on", "the", "`", "Statement", "`", "object", "with", "an", "SQL", "query", ",", "and", "it", "'", "s", "expected", "to", "return", "`", "true", "`", ",", "indicating", "that", "the", "query", "was", "executed", "successfully", "and", "a", "result", "set", "is", "available", ".", "-", "`", "getResultSet", "(", ")", "`", "retrieves", "the", "result", "set", "generated", "by", "the", "executed", "query", ",", "which", "can", "later", "be", "used", "to", "verify", "the", "correct", "data", "was", "retrieved", ".", "This", "test", "can", "be", "used", "to", "verify", "that", "the", "distinct", "query", "feature", "of", "the", "database", "and", "JDBC", "driver", "(", "in", "this", "case", ",", "OrientDB", "'", "s", "JDBC", "implementation", ")", "works", "as", "expected", ".", "This", "is", "as", "concise", "as", "necessary", "to", "ensure", "the", "`", "execute", "`", "and", "`", "getResultSet", "`", "methods", "work", "as", "intended", "when", "performing", "a", "\"", "SELECT", "DISTINCT", "\"", "SQL", "command", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 28.34493491225803, "bleu-max": 28.34493491225803, "bleu-min": 21.02369368326755, "bleu-avg": 25.263774566636634, "code-bleu": 18.013312454175477, "code-bleu-max": 18.013312454175477, "code-bleu-min": 9.325855526911003, "code-bleu-avg": 15.541996276526415, "edit-sim": 72, "edit-sim-max": 74, "edit-sim-min": 65, "edit-sim-avg": 70.1, "rouge-p": 71.42857142857143, "rouge-p-max": 71.42857142857143, "rouge-p-min": 55.55555555555556, "rouge-p-avg": 65.37698412698413, "rouge-r": 83.33333333333334, "rouge-r-max": 83.33333333333334, "rouge-r-min": 83.33333333333334, "rouge-r-avg": 83.33333333333336, "rouge-f": 76.92307642603551, "rouge-f-max": 76.92307642603551, "rouge-f-min": 66.66666618666667, "rouge-f-avg": 73.15018265846862, "num-seq": 10}, "time": 0.6668033599853516, "misc": {}}
{"id": 70, "data_id": "csn-97459", "input_stids": [1, 3656, 5580, 2063, 1319, 1489, 1123, 508, 7891, 2290, 7891, 2290, 291, 6014, 15075, 1267, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 531, 10977, 25316, 13198, 4709, 8056, 10842, 32315, 32315, 612, 273, 563, 263, 3911, 261, 315, 3902, 6, 262, 274, 32315, 632, 11672, 1071, 918, 2911, 4254, 261, 262, 1216, 1185, 288, 514, 15158, 273, 508, 263, 26058, 261, 262, 274, 6183, 1123, 273, 394, 6183, 261, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 10977, 8597, 320, 2377, 273, 394, 531, 10977, 8597, 261, 315, 3902, 6, 397, 315, 3902, 6, 397, 15158, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 1123, 262, 274, 3780, 273, 394, 12806, 1190, 13938, 2449, 261, 320, 2377, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 262, 274, 1487, 273, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 274, 7891, 2290, 273, 1487, 263, 17971, 10977, 2290, 261, 262, 274, 1319, 273, 261, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 262, 263, 11263, 261, 262, 274, 752, 3078, 2290, 261, 1319, 262, 274, 309, 261, 401, 394, 1387, 261, 315, 3902, 6, 262, 263, 1704, 261, 262, 262, 531, 1343, 1318, 263, 791, 261, 262, 263, 1894, 261, 333, 269, 315, 3902, 6, 262, 274, 1262, 2290, 261, 1319, 269, 4200, 262, 274, 1319, 263, 1746, 261, 262, 274, 289, 632, 7360, 1071, 918, 1746, 1952, 261, 262, 1216, 1185, 288, 309, 261, 1487, 480, 446, 597, 401, 1487, 263, 18851, 261, 262, 262, 1487, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 289, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 32315, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 1815, 18163, 261, 3480, 263, 1836, 261, 315, 3902, 6, 262, 262, 263, 21332, 261, 262, 274, 10842, 3597, 273, 3480, 263, 8601, 694, 261, 262, 274, 1815, 18163, 261, 3597, 262, 263, 28800, 261, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 288, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 1815, 18163, 261, 3480, 263, 1836, 261, 315, 9111, 23286, 508, 4571, 3677, 315, 262, 262, 263, 21332, 261, 262, 274, 10842, 3597, 273, 3480, 263, 8601, 694, 261, 262, 274, 1815, 18163, 261, 3597, 262, 263, 28800, 261, 262, 274, 289, 2], "score": -0.1574353575706482, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldSelectWithDistinct", "(", ")", "throws", "Exception", "{", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "assertThat", "(", "stmt", ".", "execute", "(", "\"", "SELECT", "DISTINCT", "name", "FROM", "users", "\"", ")", ")", ".", "isTrue", "(", ")", ";", "ResultSet", "rs", "=", "stmt", ".", "getResultSet", "(", ")", ";", "assertThat", "(", "rs", ")", ".", "isNotNull", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 2], "score": -0.16879808902740479, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldSelectWithDistinct", "(", ")", "throws", "Exception", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 288, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 1815, 18163, 261, 3480, 263, 1836, 261, 315, 9111, 23286, 508, 4571, 1014, 315, 262, 262, 263, 21332, 261, 262, 274, 289, 2], "score": -0.17091460525989532, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldSelectWithDistinct", "(", ")", "throws", "Exception", "{", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "assertThat", "(", "stmt", ".", "execute", "(", "\"", "SELECT", "DISTINCT", "name", "FROM", "table", "\"", ")", ")", ".", "isTrue", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 2], "score": -0.1863536238670349, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldSelectWithDistinct", "(", ")", "throws", "Exception", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 25697, 1375, 707, 316, 326, 2112, 5110, 981, 269, 326, 3751, 804, 2802, 1842, 648, 11932, 716, 279, 1375, 8056, 1375, 733, 353, 2522, 269, 471, 1158, 4798, 854, 6718, 4982, 2097, 6710, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1684, 3406, 261, 262, 1216, 6483, 288, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 25395, 261, 3480, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.19884148240089417, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "createStatement", "`", "method", "in", "the", "provided", "Java", "code", ",", "the", "following", "JUnit", "test", "case", "ensures", "that", "a", "`", "Statement", "`", "object", "is", "created", ",", "and", "no", "exceptions", "are", "thrown", "during", "its", "creation", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testCreateStatement", "(", ")", "throws", "SQLException", "{", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "assertNotNull", "(", "stmt", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 1842, 326, 707, 1375, 25697, 261, 262, 1375, 316, 326, 20579, 4031, 3323, 269, 1846, 848, 8616, 752, 279, 8056, 471, 1508, 1815, 716, 518, 353, 486, 446, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1684, 3406, 261, 262, 1216, 6483, 288, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 25395, 261, 3480, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.19910889863967896, "weight": 1, "toks": ["<s>", "To", "test", "the", "method", "`", "createStatement", "(", ")", "`", "in", "the", "shortest", "way", "possible", ",", "you", "can", "simply", "create", "a", "Statement", "and", "then", "assert", "that", "it", "is", "not", "null", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testCreateStatement", "(", ")", "throws", "SQLException", "{", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "assertNotNull", "(", "stmt", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.23797020316123962, "weight": 1, "toks": ["<s>", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 4737, 20788, 632, 7766, 1071, 918, 1842, 1684, 3406, 261, 262, 1216, 6483, 288, 8056, 3021, 273, 1487, 263, 25697, 261, 262, 274, 25395, 261, 3021, 262, 274, 289, 2], "score": -0.27348965406417847, "weight": 1, "toks": ["<s>", "@", "sometag", "@", "Test", "public", "void", "testCreateStatement", "(", ")", "throws", "SQLException", "{", "Statement", "statement", "=", "conn", ".", "createStatement", "(", ")", ";", "assertNotNull", "(", "statement", ")", ";", "}", "</s>"]}, {"tids": [1, 1788, 279, 4143, 843, 1450, 326, 1375, 8056, 1375, 733, 471, 3929, 309, 4588, 1686, 316, 279, 1375, 10842, 1375, 263, 2], "score": -0.27884331345558167, "weight": 1, "toks": ["<s>", "Create", "a", "simple", "query", "using", "the", "`", "Statement", "`", "object", "and", "verify", "if", "execution", "results", "in", "a", "`", "ResultSet", "`", ".", "</s>"]}, {"tids": [1, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.3078310489654541, "weight": 1, "toks": ["<s>", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 60.878950248057876, "bleu-max": 68.48661007688605, "bleu-min": 38.95363561040206, "bleu-avg": 51.210469297553246, "code-bleu": 71.54149656062842, "code-bleu-max": 71.54149656062842, "code-bleu-min": 25.04281654255156, "code-bleu-avg": 44.27872723799566, "edit-sim": 87, "edit-sim-max": 89, "edit-sim-min": 71, "edit-sim-avg": 78.8, "rouge-p": 75.0, "rouge-p-max": 77.77777777777779, "rouge-p-min": 62.5, "rouge-p-avg": 70.87301587301587, "rouge-r": 75.0, "rouge-r-max": 87.5, "rouge-r-min": 62.5, "rouge-r-avg": 70.0, "rouge-f": 74.9999995, "rouge-f-max": 82.35294067820071, "rouge-f-min": 62.4999995, "rouge-f-avg": 70.29411714807154, "num-seq": 10}, "time": 0.9190545082092285, "misc": {}}
{"id": 71, "data_id": "csn-97459", "input_stids": [1, 3656, 5580, 2063, 1319, 1489, 1123, 508, 7891, 2290, 7891, 2290, 291, 6014, 15075, 1267, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 531, 10977, 25316, 13198, 4709, 8056, 10842, 32315, 32315, 327, 1241, 274, 32315, 632, 11672, 1071, 918, 2911, 4254, 261, 262, 1216, 1185, 288, 514, 15158, 273, 508, 263, 26058, 261, 262, 274, 6183, 1123, 273, 394, 6183, 261, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 10977, 8597, 320, 2377, 273, 394, 531, 10977, 8597, 261, 315, 3902, 6, 397, 315, 3902, 6, 397, 15158, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 1123, 262, 274, 3780, 273, 394, 12806, 1190, 13938, 2449, 261, 320, 2377, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 262, 274, 1487, 273, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 274, 7891, 2290, 273, 1487, 263, 17971, 10977, 2290, 261, 262, 274, 1319, 273, 261, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 262, 263, 11263, 261, 262, 274, 752, 3078, 2290, 261, 1319, 262, 274, 309, 261, 401, 394, 1387, 261, 315, 3902, 6, 262, 263, 1704, 261, 262, 262, 531, 1343, 1318, 263, 791, 261, 262, 263, 1894, 261, 333, 269, 315, 3902, 6, 262, 274, 1262, 2290, 261, 1319, 269, 4200, 262, 274, 1319, 263, 1746, 261, 262, 274, 289, 632, 7360, 1071, 918, 1746, 1952, 261, 262, 1216, 1185, 288, 309, 261, 1487, 480, 446, 597, 401, 1487, 263, 18851, 261, 262, 262, 1487, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 289, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 32315, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 1815, 18163, 261, 3480, 263, 1836, 261, 315, 3902, 6, 262, 262, 263, 21332, 261, 262, 274, 10842, 3597, 273, 3480, 263, 8601, 694, 261, 262, 274, 1815, 18163, 261, 3597, 262, 263, 28800, 261, 262, 274, 1815, 18163, 261, 3597, 263, 2812, 1593, 1225, 261, 262, 262, 263, 21614, 774, 261, 576, 262, 274, 2], "topk": [{"tids": [1, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.11201207339763641, "weight": 1, "toks": ["<s>", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 1684, 3406, 261, 262, 1216, 6483, 288, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 25395, 261, 3480, 262, 274, 289, 2], "score": -0.1440308690071106, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldCreateStatement", "(", ")", "throws", "SQLException", "{", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "assertNotNull", "(", "stmt", ")", ";", "}", "</s>"]}, {"tids": [1, 14373, 1375, 25697, 261, 262, 1375, 471, 1842, 2097, 327, 460, 263, 2], "score": -0.17090018093585968, "weight": 1, "toks": ["<s>", "Invoke", "`", "createStatement", "(", ")", "`", "and", "test", "its", "return", "value", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 288, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 1815, 18163, 261, 3480, 263, 1836, 261, 315, 7128, 315, 262, 262, 263, 21332, 261, 262, 274, 10842, 3597, 273, 3480, 263, 8601, 694, 261, 262, 274, 1815, 18163, 261, 3597, 262, 263, 28800, 261, 262, 274, 1815, 18163, 261, 3597, 263, 2812, 1593, 1225, 261, 262, 262, 263, 21614, 774, 261, 576, 262, 274, 289, 2], "score": -0.18067999184131622, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldSelectWithDistinct", "(", ")", "throws", "Exception", "{", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "assertThat", "(", "stmt", ".", "execute", "(", "\"", "STR", "\"", ")", ")", ".", "isTrue", "(", ")", ";", "ResultSet", "rs", "=", "stmt", ".", "getResultSet", "(", ")", ";", "assertThat", "(", "rs", ")", ".", "isNotNull", "(", ")", ";", "assertThat", "(", "rs", ".", "getFetchSize", "(", ")", ")", ".", "isEqualTo", "(", "2", ")", ";", "}", "</s>"]}, {"tids": [1, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.19753055274486542, "weight": 1, "toks": ["<s>", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}, {"tids": [1, 3049, 326, 1375, 25697, 1375, 707, 471, 866, 309, 326, 2106, 733, 353, 392, 791, 434, 1375, 531, 10977, 25316, 3406, 1375, 263, 2], "score": -0.24159279465675354, "weight": 1, "toks": ["<s>", "Call", "the", "`", "createStatement", "`", "method", "and", "check", "if", "the", "returned", "object", "is", "an", "instance", "of", "`", "OrientJdbcStatement", "`", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 1684, 3406, 261, 262, 1216, 1185, 288, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 25395, 261, 3480, 262, 274, 289, 2], "score": -0.2542402744293213, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldCreateStatement", "(", ")", "throws", "Exception", "{", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "assertNotNull", "(", "stmt", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 1684, 3406, 261, 262, 1216, 6483, 288, 25395, 261, 1487, 263, 25697, 261, 262, 262, 274, 289, 2], "score": -0.28107285499572754, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldCreateStatement", "(", ")", "throws", "SQLException", "{", "assertNotNull", "(", "conn", ".", "createStatement", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 14373, 326, 1375, 25697, 1375, 707, 628, 326, 1459, 733, 263, 2], "score": -0.33582547307014465, "weight": 1, "toks": ["<s>", "Invoke", "the", "`", "createStatement", "`", "method", "from", "the", "connection", "object", ".", "</s>"]}, {"tids": [1, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.3390147387981415, "weight": 1, "toks": ["<s>", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 63.98539306555264, "bleu-max": 81.44476398584995, "bleu-min": 34.95147299767589, "bleu-avg": 53.46620624481142, "code-bleu": 57.364905572052294, "code-bleu-max": 86.68802135896667, "code-bleu-min": 18.66115135887806, "code-bleu-avg": 41.46479794887084, "edit-sim": 83, "edit-sim-max": 91, "edit-sim-min": 72, "edit-sim-avg": 80.5, "rouge-p": 77.77777777777779, "rouge-p-max": 88.88888888888889, "rouge-p-min": 71.42857142857143, "rouge-p-avg": 77.40079365079366, "rouge-r": 77.77777777777779, "rouge-r-max": 88.88888888888889, "rouge-r-min": 55.55555555555556, "rouge-r-avg": 70.0, "rouge-f": 77.77777727777779, "rouge-f-max": 88.8888883888889, "rouge-f-min": 62.49999950781252, "rouge-f-avg": 73.3251629015556, "num-seq": 10}, "time": 0.7546596527099609, "misc": {}}
{"id": 72, "data_id": "csn-97459", "input_stids": [1, 3656, 5580, 2063, 1319, 1489, 1123, 508, 7891, 2290, 7891, 2290, 291, 6014, 15075, 1267, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 531, 10977, 25316, 13198, 4709, 8056, 10842, 32315, 32315, 327, 923, 274, 32315, 632, 11672, 1071, 918, 2911, 4254, 261, 262, 1216, 1185, 288, 514, 15158, 273, 508, 263, 26058, 261, 262, 274, 6183, 1123, 273, 394, 6183, 261, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1123, 263, 1378, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 10977, 8597, 320, 2377, 273, 394, 531, 10977, 8597, 261, 315, 3902, 6, 397, 315, 3902, 6, 397, 15158, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 1123, 262, 274, 3780, 273, 394, 12806, 1190, 13938, 2449, 261, 320, 2377, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 269, 10559, 387, 2449, 263, 7567, 67, 5280, 262, 274, 1487, 273, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 274, 7891, 2290, 273, 1487, 263, 17971, 10977, 2290, 261, 262, 274, 1319, 273, 261, 261, 531, 10977, 25316, 1952, 262, 3780, 263, 6742, 261, 262, 262, 263, 11263, 261, 262, 274, 752, 3078, 2290, 261, 1319, 262, 274, 309, 261, 401, 394, 1387, 261, 315, 3902, 6, 262, 263, 1704, 261, 262, 262, 531, 1343, 1318, 263, 791, 261, 262, 263, 1894, 261, 333, 269, 315, 3902, 6, 262, 274, 1262, 2290, 261, 1319, 269, 4200, 262, 274, 1319, 263, 1746, 261, 262, 274, 289, 632, 7360, 1071, 918, 1746, 1952, 261, 262, 1216, 1185, 288, 309, 261, 1487, 480, 446, 597, 401, 1487, 263, 18851, 261, 262, 262, 1487, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 289, 32315, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1410, 3391, 1190, 23402, 261, 262, 1216, 1185, 32315, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 1815, 18163, 261, 3480, 263, 1836, 261, 315, 3902, 6, 262, 262, 263, 21332, 261, 262, 274, 10842, 3597, 273, 3480, 263, 8601, 694, 261, 262, 274, 1815, 18163, 261, 3597, 262, 263, 28800, 261, 262, 274, 1815, 18163, 261, 3597, 263, 2812, 1593, 1225, 261, 262, 262, 263, 21614, 774, 261, 576, 262, 274, 1815, 18163, 261, 3597, 263, 12835, 261, 404, 262, 262, 263, 21614, 774, 261, 638, 262, 274, 2], "topk": [{"tids": [1, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.05986849591135979, "weight": 1, "toks": ["<s>", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}, {"tids": [1, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.08155830949544907, "weight": 1, "toks": ["<s>", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}, {"tids": [1, 1788, 279, 4143, 2063, 1963, 1931, 364, 7769, 263, 2], "score": -0.14265494048595428, "weight": 1, "toks": ["<s>", "Create", "a", "simple", "database", "schema", "required", "for", "testing", ".", "</s>"]}, {"tids": [1, 1788, 279, 1375, 8056, 1375, 733, 1450, 326, 1375, 25697, 1375, 707, 471, 1836, 279, 843, 263, 2], "score": -0.1487245112657547, "weight": 1, "toks": ["<s>", "Create", "a", "`", "Statement", "`", "object", "using", "the", "`", "createStatement", "`", "method", "and", "execute", "a", "query", ".", "</s>"]}, {"tids": [1, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.17476926743984222, "weight": 1, "toks": ["<s>", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 25697, 261, 262, 1375, 707, 628, 326, 2112, 667, 269, 999, 326, 3751, 1842, 648, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1684, 3406, 261, 262, 1216, 6483, 288, 8056, 3021, 273, 1487, 263, 25697, 261, 262, 274, 25395, 261, 3021, 262, 274, 1815, 5510, 261, 3021, 1276, 531, 10977, 25316, 3406, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2729847729206085, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "createStatement", "(", ")", "`", "method", "from", "the", "provided", "class", ",", "use", "the", "following", "test", "case", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testCreateStatement", "(", ")", "throws", "SQLException", "{", "Statement", "statement", "=", "conn", ".", "createStatement", "(", ")", ";", "assertNotNull", "(", "statement", ")", ";", "assertTrue", "(", "statement", "instanceof", "OrientJdbcStatement", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1788, 392, 791, 434, 1375, 8056, 1375, 1450, 1375, 1487, 263, 25697, 261, 262, 1375, 263, 2], "score": -0.2930803596973419, "weight": 1, "toks": ["<s>", "Create", "an", "instance", "of", "`", "Statement", "`", "using", "`", "conn", ".", "createStatement", "(", ")", "`", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 1684, 3406, 261, 262, 1216, 6483, 288, 8056, 3021, 273, 1487, 263, 25697, 261, 262, 274, 25395, 261, 3021, 262, 274, 289, 2], "score": -0.3201703131198883, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldCreateStatement", "(", ")", "throws", "SQLException", "{", "Statement", "statement", "=", "conn", ".", "createStatement", "(", ")", ";", "assertNotNull", "(", "statement", ")", ";", "}", "</s>"]}, {"tids": [1, 1071, 8056, 25697, 261, 262, 1216, 6483, 288, 327, 394, 531, 10977, 25316, 3406, 261, 333, 262, 274, 289, 2], "score": -0.32431986927986145, "weight": 1, "toks": ["<s>", "public", "Statement", "createStatement", "(", ")", "throws", "SQLException", "{", "return", "new", "OrientJdbcStatement", "(", "this", ")", ";", "}", "</s>"]}, {"tids": [1, 8056, 3480, 273, 1487, 263, 25697, 261, 262, 274, 2], "score": -0.33772361278533936, "weight": 1, "toks": ["<s>", "Statement", "stmt", "=", "conn", ".", "createStatement", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 81.44476398584995, "bleu-max": 81.44476398584995, "bleu-min": 50.158584590602274, "bleu-avg": 63.09864353493306, "code-bleu": 57.52135469229999, "code-bleu-max": 57.52135469229999, "code-bleu-min": 30.525542480893215, "code-bleu-avg": 43.28165038288849, "edit-sim": 95, "edit-sim-max": 95, "edit-sim-min": 79, "edit-sim-avg": 86.5, "rouge-p": 88.88888888888889, "rouge-p-max": 88.88888888888889, "rouge-p-min": 66.66666666666666, "rouge-p-avg": 78.75000000000001, "rouge-r": 88.88888888888889, "rouge-r-max": 88.88888888888889, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 77.77777777777779, "rouge-f": 88.8888883888889, "rouge-f-max": 88.8888883888889, "rouge-f-min": 66.66666616666667, "rouge-f-avg": 78.23529361782008, "num-seq": 10}, "time": 0.7793171405792236, "misc": {}}
{"id": 73, "data_id": "csn-97732", "input_stids": [1, 32315, 32315, 6304, 1016, 6289, 4709, 32315, 531, 1016, 1033, 32315, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 531, 2081, 4446, 1438, 273, 394, 531, 2081, 4446, 261, 315, 3902, 6, 262, 274, 1438, 263, 3077, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1438, 263, 752, 4254, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 1438, 263, 11263, 2853, 261, 262, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 32315, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1410, 5767, 15034, 620, 18303, 261, 262, 288, 25395, 261, 770, 263, 336, 261, 5311, 262, 262, 274, 289, 2], "score": -0.4214010536670685, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldRetrieveIndexedValueSuccessfully", "(", ")", "{", "assertNotNull", "(", "index", ".", "get", "(", "KEY", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 25395, 261, 1842, 1442, 263, 336, 261, 315, 498, 21, 315, 262, 262, 274, 2], "score": -0.42345649003982544, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "testInstance", ".", "get", "(", "\"", "key1", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 25395, 261, 770, 263, 336, 261, 315, 1842, 653, 315, 262, 262, 274, 289, 2], "score": -0.46690839529037476, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "assertNotNull", "(", "index", ".", "get", "(", "\"", "testKey", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 25395, 261, 770, 263, 336, 261, 315, 1842, 653, 315, 262, 262, 274, 289, 2], "score": -0.4734615087509155, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "assertNotNull", "(", "index", ".", "get", "(", "\"", "testKey", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 25395, 261, 336, 261, 315, 1842, 653, 315, 262, 262, 274, 289, 2], "score": -0.4741009473800659, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "assertNotNull", "(", "get", "(", "\"", "testKey", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 25395, 261, 336, 261, 315, 2690, 653, 315, 262, 262, 274, 289, 2], "score": -0.4973222613334656, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "assertNotNull", "(", "get", "(", "\"", "someKey", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 990, 16147, 620, 1398, 1016, 6609, 261, 262, 288, 1815, 8867, 261, 30844, 269, 770, 263, 336, 261, 498, 262, 262, 274, 289, 2], "score": -0.5209174752235413, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldReturnCorrectValueOnIndexLookup", "(", ")", "{", "assertEquals", "(", "expectedValue", ",", "index", ".", "get", "(", "key", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 25395, 261, 770, 263, 336, 261, 315, 498, 315, 262, 262, 274, 289, 2], "score": -0.536015510559082, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "assertNotNull", "(", "index", ".", "get", "(", "\"", "key", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 25395, 261, 336, 261, 315, 498, 315, 262, 262, 274, 289, 2], "score": -0.5401199460029602, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "assertNotNull", "(", "get", "(", "\"", "key", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 25395, 261, 770, 263, 336, 261, 315, 498, 315, 262, 262, 274, 2], "score": -0.545662522315979, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "index", ".", "get", "(", "\"", "key", "\"", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 9.224978011409782, "bleu-max": 32.64971028628052, "bleu-min": 9.224978011409782, "bleu-avg": 20.83336709076935, "code-bleu": 18.68211132235125, "code-bleu-max": 55.4998921709069, "code-bleu-min": 9.84733918163565, "code-bleu-avg": 25.00978896910833, "edit-sim": 35, "edit-sim-max": 50, "edit-sim-min": 32, "edit-sim-avg": 41.9, "rouge-p": 36.36363636363637, "rouge-p-max": 71.42857142857143, "rouge-p-min": 36.36363636363637, "rouge-p-avg": 49.1976356976357, "rouge-r": 50.0, "rouge-r-max": 75.0, "rouge-r-min": 37.5, "rouge-r-avg": 60.0, "rouge-f": 42.10526267036012, "rouge-f-max": 66.6666661688889, "rouge-f-min": 42.10526267036012, "rouge-f-avg": 52.99633651104257, "num-seq": 10}, "time": 0.9429900646209717, "misc": {}}
{"id": 74, "data_id": "csn-97732", "input_stids": [1, 32315, 632, 9336, 1071, 531, 4254, 2519, 4188, 261, 514, 880, 262, 288, 333, 261, 880, 269, 638, 262, 274, 289, 32315, 6304, 1016, 6289, 4709, 531, 4254, 2519, 4188, 32315, 531, 1016, 1033, 32315, 531, 3245, 5169, 2157, 1339, 273, 2632, 263, 7183, 2277, 261, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 531, 2081, 4446, 1438, 273, 394, 531, 2081, 4446, 261, 315, 3902, 6, 262, 274, 1438, 263, 3077, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1438, 263, 752, 4254, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 1438, 263, 11263, 2853, 261, 262, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 32315, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 1319, 263, 1696, 261, 315, 3981, 315, 269, 315, 3981, 315, 262, 274, 2], "score": -0.3823516070842743, "weight": 1, "toks": ["<s>", "db", ".", "open", "(", "\"", "admin", "\"", ",", "\"", "admin", "\"", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 752, 261, 262, 274, 2], "score": -0.43924155831336975, "weight": 1, "toks": ["<s>", "db", ".", "create", "(", ")", ";", "</s>"]}, {"tids": [1, 7693, 326, 2063, 1459, 353, 923, 316, 326, 18432, 707, 263, 2], "score": -0.4461847245693207, "weight": 1, "toks": ["<s>", "Ensure", "the", "database", "connection", "is", "valid", "in", "the", "tested", "method", ".", "</s>"]}, {"tids": [1, 7693, 1375, 531, 4254, 2519, 4188, 1375, 23441, 471, 9023, 1339, 8783, 263, 2], "score": -0.44901296496391296, "weight": 1, "toks": ["<s>", "Ensure", "`", "ODatabaseDocumentTx", "`", "connects", "and", "retrieves", "session", "correctly", ".", "</s>"]}, {"tids": [1, 7693, 1375, 1319, 1375, 23441, 4985, 358, 326, 12613, 2063, 1339, 263, 2], "score": -0.45243310928344727, "weight": 1, "toks": ["<s>", "Ensure", "`", "db", "`", "connects", "successfully", "to", "the", "intended", "database", "session", ".", "</s>"]}, {"tids": [1, 26492, 1375, 531, 4254, 2519, 4188, 1375, 598, 279, 2923, 1976, 533, 487, 1931, 635, 326, 1842, 3875, 263, 2], "score": -0.45610371232032776, "weight": 1, "toks": ["<s>", "Instantiate", "`", "ODatabaseDocumentTx", "`", "with", "a", "specific", "URL", "string", "as", "required", "by", "the", "test", "setup", ".", "</s>"]}, {"tids": [1, 7693, 716, 326, 1375, 632, 9336, 1375, 3885, 11643, 326, 2063, 487, 2665, 263, 2], "score": -0.4578319191932678, "weight": 1, "toks": ["<s>", "Ensure", "that", "the", "`", "@", "Deprecated", "`", "constructor", "initializes", "the", "database", "as", "expected", ".", "</s>"]}, {"tids": [1, 1788, 471, 4614, 279, 2202, 460, 770, 3470, 279, 2492, 263, 2], "score": -0.4719052016735077, "weight": 1, "toks": ["<s>", "Create", "and", "retrieve", "a", "single", "value", "index", "within", "a", "transaction", ".", "</s>"]}, {"tids": [1, 1319, 263, 1696, 261, 315, 3981, 315, 269, 315, 3981, 315, 262, 274, 2], "score": -0.47645851969718933, "weight": 1, "toks": ["<s>", "db", ".", "open", "(", "\"", "admin", "\"", ",", "\"", "admin", "\"", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 336, 261, 315, 498, 315, 262, 274, 2], "score": -0.5014522671699524, "weight": 1, "toks": ["<s>", "db", ".", "get", "(", "\"", "key", "\"", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 23.04318198457308, "bleu-max": 42.88819424803535, "bleu-min": 12.839307483032304, "bleu-avg": 21.478496456233756, "code-bleu": 5.137837606728052, "code-bleu-max": 24.048648940022314, "code-bleu-min": 1.907570128170782, "code-bleu-avg": 9.777968301420417, "edit-sim": 46, "edit-sim-max": 68, "edit-sim-min": 30, "edit-sim-avg": 44.6, "rouge-p": 80.0, "rouge-p-max": 100.0, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 54.52380952380952, "rouge-r": 57.14285714285714, "rouge-r-max": 85.71428571428571, "rouge-r-min": 28.57142857142857, "rouge-r-avg": 67.14285714285714, "rouge-f": 66.66666618055555, "rouge-f-max": 83.33333284722222, "rouge-f-min": 33.33333284722222, "rouge-f-avg": 56.87969878073034, "num-seq": 10}, "time": 0.8052778244018555, "misc": {}}
{"id": 75, "data_id": "csn-97732", "input_stids": [1, 32315, 632, 9336, 1071, 531, 4254, 2519, 4188, 261, 514, 880, 262, 288, 333, 261, 880, 269, 638, 262, 274, 289, 32315, 6304, 1016, 6289, 4709, 531, 4254, 2519, 4188, 32315, 531, 1016, 1033, 32315, 327, 1319, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 531, 2081, 4446, 1438, 273, 394, 531, 2081, 4446, 261, 315, 3902, 6, 262, 274, 1438, 263, 3077, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1438, 263, 752, 4254, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 1438, 263, 11263, 2853, 261, 262, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 32315, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 1788, 471, 1696, 279, 394, 791, 434, 531, 4254, 2519, 4188, 263, 2], "score": -0.3567076623439789, "weight": 1, "toks": ["<s>", "Create", "and", "open", "a", "new", "instance", "of", "ODatabaseDocumentTx", ".", "</s>"]}, {"tids": [1, 1319, 263, 336, 261, 315, 24928, 315, 262, 274, 2], "score": -0.37029337882995605, "weight": 1, "toks": ["<s>", "db", ".", "get", "(", "\"", "iKey", "\"", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 7128, 315, 262, 274, 1319, 263, 1696, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 289, 2], "score": -0.3918675482273102, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "STR", "\"", ")", ";", "db", ".", "open", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 1319, 263, 336, 261, 315, 498, 315, 262, 274, 2], "score": -0.3938274681568146, "weight": 1, "toks": ["<s>", "db", ".", "get", "(", "\"", "key", "\"", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 7128, 315, 262, 274, 1319, 263, 1696, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 289, 2], "score": -0.40148478746414185, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "STR", "\"", ")", ";", "db", ".", "open", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 1319, 263, 752, 261, 262, 274, 2], "score": -0.41094744205474854, "weight": 1, "toks": ["<s>", "db", ".", "create", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 7128, 315, 262, 274, 1319, 263, 1696, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 289, 2], "score": -0.4122413396835327, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "STR", "\"", ")", ";", "db", ".", "open", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 2632, 294, 1842, 1966, 315, 262, 274, 1319, 263, 1696, 261, 315, 3981, 315, 269, 315, 3981, 315, 262, 274, 2], "score": -0.4135943353176117, "weight": 1, "toks": ["<s>", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "remote", ":", "testdb", "\"", ")", ";", "db", ".", "open", "(", "\"", "admin", "\"", ",", "\"", "admin", "\"", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 336, 261, 315, 498, 21, 315, 262, 274, 2], "score": -0.42488688230514526, "weight": 1, "toks": ["<s>", "db", ".", "get", "(", "\"", "key1", "\"", ")", ";", "</s>"]}, {"tids": [1, 1788, 1245, 460, 316, 326, 770, 471, 3387, 518, 848, 506, 10295, 263, 2], "score": -0.42814281582832336, "weight": 1, "toks": ["<s>", "Create", "one", "value", "in", "the", "index", "and", "ensure", "it", "can", "be", "retrieved", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 12.47599147198524, "bleu-max": 23.84697636112595, "bleu-min": 9.614217984757346, "bleu-avg": 16.58034877623664, "code-bleu": 3.4338726467944136, "code-bleu-max": 36.371409468610246, "code-bleu-min": 3.4338726467944136, "code-bleu-avg": 20.64760764209546, "edit-sim": 40, "edit-sim-max": 44, "edit-sim-min": 32, "edit-sim-avg": 39.5, "rouge-p": 71.42857142857143, "rouge-p-max": 71.42857142857143, "rouge-p-min": 36.36363636363637, "rouge-p-avg": 47.683982683982684, "rouge-r": 45.45454545454545, "rouge-r-max": 54.54545454545454, "rouge-r-min": 36.36363636363637, "rouge-r-avg": 50.0, "rouge-f": 55.55555508024692, "rouge-f-max": 55.55555508024692, "rouge-f-min": 36.36363586363637, "rouge-f-avg": 48.35713608769979, "num-seq": 10}, "time": 0.8825602531433105, "misc": {}}
{"id": 76, "data_id": "csn-97732", "input_stids": [1, 32315, 531, 797, 752, 797, 261, 514, 277, 3834, 262, 274, 32315, 6304, 1016, 6289, 4709, 531, 4254, 2519, 4188, 531, 797, 32315, 531, 1016, 1033, 32315, 727, 514, 2308, 273, 1466, 263, 336, 261, 315, 3902, 6, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 531, 2081, 4446, 1438, 273, 394, 531, 2081, 4446, 261, 315, 3902, 6, 262, 274, 1438, 263, 3077, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1438, 263, 752, 4254, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 1438, 263, 11263, 2853, 261, 262, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 32315, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 4003, 263, 25207, 261, 315, 7128, 315, 269, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 2], "score": -0.2904689311981201, "weight": 1, "toks": ["<s>", "clazz", ".", "createIndex", "(", "\"", "STR", "\"", ",", "OClass", ".", "INDEX_TYPE", ".", "UNIQUE", ")", ";", "</s>"]}, {"tids": [1, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 7128, 315, 262, 274, 1319, 263, 1696, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 2], "score": -0.37542229890823364, "weight": 1, "toks": ["<s>", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "STR", "\"", ")", ";", "db", ".", "open", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 31318, 261, 315, 508, 315, 269, 531, 559, 263, 9469, 262, 274, 2], "score": -0.38338255882263184, "weight": 1, "toks": ["<s>", "db", ".", "createProperty", "(", "\"", "name", "\"", ",", "OType", ".", "STRING", ")", ";", "</s>"]}, {"tids": [1, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 2632, 294, 17365, 342, 1842, 2290, 315, 262, 274, 1319, 263, 10235, 1398, 3935, 3830, 261, 262, 274, 1319, 263, 1696, 261, 315, 3981, 315, 269, 315, 3981, 315, 262, 274, 2], "score": -0.38475263118743896, "weight": 1, "toks": ["<s>", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "remote", ":", "localhost", "/", "testDB", "\"", ")", ";", "db", ".", "activateOnCurrentThread", "(", ")", ";", "db", ".", "open", "(", "\"", "admin", "\"", ",", "\"", "admin", "\"", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 1746, 261, 262, 274, 2], "score": -0.3954114615917206, "weight": 1, "toks": ["<s>", "db", ".", "close", "(", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 997, 273, 394, 531, 2519, 261, 4003, 262, 274, 2], "score": -0.3960004448890686, "weight": 1, "toks": ["<s>", "ODocument", "doc", "=", "new", "ODocument", "(", "clazz", ")", ";", "</s>"]}, {"tids": [1, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 7128, 315, 262, 274, 1319, 263, 1696, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7128, 315, 262, 274, 2], "score": -0.41220328211784363, "weight": 1, "toks": ["<s>", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "STR", "\"", ")", ";", "db", ".", "open", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 1746, 261, 262, 274, 2], "score": -0.41435062885284424, "weight": 1, "toks": ["<s>", "db", ".", "close", "(", ")", ";", "</s>"]}, {"tids": [1, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 293, 3729, 294, 342, 16358, 342, 1842, 1966, 315, 262, 274, 1319, 263, 752, 261, 262, 274, 2], "score": -0.42721566557884216, "weight": 1, "toks": ["<s>", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "plocal", ":", "/", "databases", "/", "testdb", "\"", ")", ";", "db", ".", "create", "(", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 1746, 261, 262, 274, 2], "score": -0.4295196533203125, "weight": 1, "toks": ["<s>", "db", ".", "close", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 10.570286935571655, "bleu-max": 13.258121831533215, "bleu-min": 7.69669093969019, "bleu-avg": 10.797280781050365, "code-bleu": 2.2829412699287532, "code-bleu-max": 4.147184546170083, "code-bleu-min": 1.5403620639616977, "code-bleu-avg": 2.3822523082406724, "edit-sim": 35, "edit-sim-max": 37, "edit-sim-min": 32, "edit-sim-avg": 35.1, "rouge-p": 41.66666666666667, "rouge-p-max": 41.66666666666667, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 39.3872793872794, "rouge-r": 38.46153846153847, "rouge-r-max": 38.46153846153847, "rouge-r-min": 30.76923076923077, "rouge-r-avg": 36.92307692307692, "rouge-f": 39.9999995008, "rouge-f-max": 39.9999995008, "rouge-f-min": 31.99999950080001, "rouge-f-avg": 38.083190384166706, "num-seq": 10}, "time": 0.9785571098327637, "misc": {}}
{"id": 77, "data_id": "csn-97732", "input_stids": [1, 32315, 1071, 531, 1016, 411, 692, 405, 25207, 261, 727, 531, 797, 263, 12425, 67, 2399, 277, 559, 262, 274, 32315, 6304, 1016, 6289, 4709, 531, 4254, 2519, 4188, 531, 797, 32315, 531, 1016, 1033, 32315, 531, 559, 14867, 273, 531, 559, 263, 9469, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 531, 2081, 4446, 1438, 273, 394, 531, 2081, 4446, 261, 315, 3902, 6, 262, 274, 1438, 263, 3077, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1438, 263, 752, 4254, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 1438, 263, 11263, 2853, 261, 262, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 32315, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 2], "topk": [{"tids": [1, 5452, 263, 25395, 261, 4003, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 262, 274, 2], "score": -0.22519972920417786, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "clazz", ".", "createIndex", "(", "OClass", ".", "INDEX_TYPE", ".", "NOTUNIQUE", ")", ")", ";", "</s>"]}, {"tids": [1, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 2], "score": -0.27151569724082947, "weight": 1, "toks": ["<s>", "createIndex", "(", "OClass", ".", "INDEX_TYPE", ".", "NOTUNIQUE", ")", ";", "</s>"]}, {"tids": [1, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3778, 294, 1842, 1966, 315, 262, 274, 1319, 263, 752, 261, 262, 274, 1319, 263, 10235, 1398, 3935, 3830, 261, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 797, 315, 262, 274, 4003, 263, 31318, 261, 315, 508, 315, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 1319, 263, 1746, 261, 262, 274, 2], "score": -0.3248741626739502, "weight": 1, "toks": ["<s>", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "memory", ":", "testdb", "\"", ")", ";", "db", ".", "create", "(", ")", ";", "db", ".", "activateOnCurrentThread", "(", ")", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "TestClass", "\"", ")", ";", "clazz", ".", "createProperty", "(", "\"", "name", "\"", ",", "OType", ".", "STRING", ")", ".", "createIndex", "(", "OClass", ".", "INDEX_TYPE", ".", "NOTUNIQUE", ")", ";", "db", ".", "close", "(", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 1746, 261, 262, 274, 2], "score": -0.325604647397995, "weight": 1, "toks": ["<s>", "db", ".", "close", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1684, 1016, 261, 262, 288, 531, 1016, 411, 692, 405, 770, 273, 4003, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 25395, 261, 770, 262, 274, 289, 2], "score": -0.32766133546829224, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCreateIndex", "(", ")", "{", "OIndex", "<", "?", ">", "index", "=", "clazz", ".", "createIndex", "(", "OClass", ".", "INDEX_TYPE", ".", "NOTUNIQUE", ")", ";", "assertNotNull", "(", "index", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1684, 1016, 261, 262, 288, 531, 1016, 411, 692, 405, 770, 273, 4003, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 25395, 261, 770, 262, 274, 289, 2], "score": -0.3278747797012329, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCreateIndex", "(", ")", "{", "OIndex", "<", "?", ">", "index", "=", "clazz", ".", "createIndex", "(", "OClass", ".", "INDEX_TYPE", ".", "NOTUNIQUE", ")", ";", "assertNotNull", "(", "index", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 30545, 5767, 1016, 261, 262, 288, 531, 1016, 411, 692, 405, 770, 273, 4003, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 25395, 261, 770, 262, 274, 289, 2], "score": -0.33258315920829773, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "createAndRetrieveIndex", "(", ")", "{", "OIndex", "<", "?", ">", "index", "=", "clazz", ".", "createIndex", "(", "OClass", ".", "INDEX_TYPE", ".", "NOTUNIQUE", ")", ";", "assertNotNull", "(", "index", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1684, 1016, 261, 262, 288, 531, 1016, 411, 692, 405, 770, 273, 4003, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 25395, 261, 770, 262, 274, 289, 2], "score": -0.3328757584095001, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCreateIndex", "(", ")", "{", "OIndex", "<", "?", ">", "index", "=", "clazz", ".", "createIndex", "(", "OClass", ".", "INDEX_TYPE", ".", "NOTUNIQUE", ")", ";", "assertNotNull", "(", "index", ")", ";", "}", "</s>"]}, {"tids": [1, 1319, 263, 1746, 261, 262, 274, 2], "score": -0.34566351771354675, "weight": 1, "toks": ["<s>", "db", ".", "close", "(", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 1746, 261, 262, 274, 2], "score": -0.3649096190929413, "weight": 1, "toks": ["<s>", "db", ".", "close", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 8.744821970182539, "bleu-max": 10.363232116621422, "bleu-min": 8.744821970182539, "bleu-avg": 9.008280125713073, "code-bleu": 4.2295678553639275, "code-bleu-max": 4.386565964139243, "code-bleu-min": 4.2295678553639275, "code-bleu-avg": 4.255095525143777, "edit-sim": 19, "edit-sim-max": 25, "edit-sim-min": 19, "edit-sim-avg": 19.9, "rouge-p": 23.076923076923077, "rouge-p-max": 33.33333333333333, "rouge-p-min": 23.076923076923077, "rouge-p-avg": 24.52214452214452, "rouge-r": 60.0, "rouge-r-max": 60.0, "rouge-r-min": 60.0, "rouge-r-avg": 60.0, "rouge-f": 33.33333293209878, "rouge-f-max": 42.85714239795918, "rouge-f-min": 33.33333293209878, "rouge-f-avg": 34.70238054250619, "num-seq": 10}, "time": 0.9793360233306885, "misc": {}}
{"id": 78, "data_id": "csn-97732", "input_stids": [1, 32315, 632, 1439, 1071, 531, 4254, 411, 531, 2115, 405, 2376, 261, 262, 288, 866, 3678, 4496, 261, 262, 274, 2713, 263, 2376, 261, 262, 274, 327, 333, 274, 289, 32315, 6304, 1016, 6289, 4709, 531, 4254, 2519, 4188, 531, 797, 32315, 531, 1016, 1033, 32315, 531, 559, 14867, 273, 531, 559, 263, 9469, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 531, 2081, 4446, 1438, 273, 394, 531, 2081, 4446, 261, 315, 3902, 6, 262, 274, 1438, 263, 3077, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1438, 263, 752, 4254, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 1438, 263, 11263, 2853, 261, 262, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 32315, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 1319, 263, 2376, 261, 262, 274, 2], "topk": [{"tids": [1, 14373, 326, 1375, 336, 1375, 707, 603, 326, 770, 1450, 326, 498, 263, 2], "score": -0.36875540018081665, "weight": 1, "toks": ["<s>", "Invoke", "the", "`", "get", "`", "method", "on", "the", "index", "using", "the", "key", ".", "</s>"]}, {"tids": [1, 5452, 263, 25395, 261, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 7128, 315, 262, 263, 3911, 261, 315, 7128, 315, 262, 263, 8088, 261, 262, 262, 274, 2], "score": -0.37046629190444946, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "STR", "\"", ")", ".", "getProperty", "(", "\"", "STR", "\"", ")", ".", "getIndex", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 4003, 263, 3911, 261, 315, 7128, 315, 262, 263, 8088, 281, 261, 262, 262, 274, 2], "score": -0.41293302178382874, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "clazz", ".", "getProperty", "(", "\"", "STR", "\"", ")", ".", "getIndexes", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 2376, 1375, 707, 316, 326, 1375, 531, 4254, 2519, 4188, 1375, 667, 269, 1846, 4825, 1045, 279, 1842, 3007, 333, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 8149, 3342, 261, 262, 288, 342, 342, 15983, 296, 1319, 296, 353, 1818, 392, 791, 434, 531, 4254, 2519, 4188, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 293, 3729, 294, 342, 16358, 342, 1842, 1966, 315, 262, 274, 1319, 263, 1696, 261, 315, 3981, 315, 269, 315, 3981, 315, 262, 274, 1319, 263, 2376, 261, 262, 274, 25395, 261, 1319, 263, 15674, 261, 262, 263, 336, 261, 262, 262, 274, 1815, 5510, 261, 1319, 263, 15674, 261, 262, 263, 15083, 261, 262, 262, 274, 1319, 263, 1746, 261, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 4271, 309, 326, 2492, 711, 2118, 5746, 471, 353, 2695, 1839, 1375, 2376, 261, 262, 1375, 353, 2566, 263, 2], "score": -0.4279146194458008, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "begin", "`", "method", "in", "the", "`", "ODatabaseDocumentTx", "`", "class", ",", "you", "might", "write", "a", "test", "like", "this", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testBeginTransaction", "(", ")", "{", "/", "/", "Assume", "'", "db", "'", "is", "already", "an", "instance", "of", "ODatabaseDocumentTx", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "plocal", ":", "/", "databases", "/", "testdb", "\"", ")", ";", "db", ".", "open", "(", "\"", "admin", "\"", ",", "\"", "admin", "\"", ")", ";", "db", ".", "begin", "(", ")", ";", "assertNotNull", "(", "db", ".", "getTransaction", "(", ")", ".", "get", "(", ")", ")", ";", "assertTrue", "(", "db", ".", "getTransaction", "(", ")", ".", "isActive", "(", ")", ")", ";", "db", ".", "close", "(", ")", ";", "}", "`", "`", "`", "This", "test", "checks", "if", "the", "transaction", "has", "been", "started", "and", "is", "active", "after", "`", "begin", "(", ")", "`", "is", "called", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 1319, 263, 2376, 261, 262, 274, 289, 2], "score": -0.428265243768692, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "db", ".", "begin", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 5452, 263, 25395, 261, 1319, 263, 11159, 261, 262, 263, 8088, 1318, 261, 262, 263, 8088, 261, 315, 7128, 315, 262, 262, 274, 2], "score": -0.44051337242126465, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "db", ".", "getMetadata", "(", ")", ".", "getIndexManager", "(", ")", ".", "getIndex", "(", "\"", "STR", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 14373, 326, 707, 358, 2324, 731, 279, 460, 316, 326, 770, 3470, 279, 2492, 263, 2], "score": -0.44898632168769836, "weight": 1, "toks": ["<s>", "Invoke", "the", "method", "to", "look", "up", "a", "value", "in", "the", "index", "within", "a", "transaction", ".", "</s>"]}, {"tids": [1, 7693, 326, 2522, 770, 353, 3430, 471, 18699, 3470, 326, 2492, 263, 2], "score": -0.45471906661987305, "weight": 1, "toks": ["<s>", "Ensure", "the", "created", "index", "is", "present", "and", "functional", "within", "the", "transaction", ".", "</s>"]}, {"tids": [1, 14373, 326, 707, 1375, 336, 1375, 598, 279, 498, 358, 1842, 326, 770, 3689, 2572, 3470, 279, 2492, 263, 2], "score": -0.45870622992515564, "weight": 1, "toks": ["<s>", "Invoke", "the", "method", "`", "get", "`", "with", "a", "key", "to", "test", "the", "index", "lookup", "feature", "within", "a", "transaction", ".", "</s>"]}, {"tids": [1, 7693, 716, 279, 2202, 460, 848, 506, 8214, 8808, 471, 10295, 3470, 279, 2492, 263, 2], "score": -0.46201610565185547, "weight": 1, "toks": ["<s>", "Ensure", "that", "a", "single", "value", "can", "be", "properly", "indexed", "and", "retrieved", "within", "a", "transaction", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 9.198981913847797, "bleu-max": 27.081963757418848, "bleu-min": 7.09390046023764, "bleu-avg": 13.911919065518038, "code-bleu": 19.031526259065423, "code-bleu-max": 33.97563805197408, "code-bleu-min": 18.88164888656409, "code-bleu-avg": 23.730219137809648, "edit-sim": 35, "edit-sim-max": 50, "edit-sim-min": 31, "edit-sim-avg": 38.5, "rouge-p": 27.77777777777778, "rouge-p-max": 41.66666666666667, "rouge-p-min": 27.77777777777778, "rouge-p-avg": 34.24459527400704, "rouge-r": 62.5, "rouge-r-max": 62.5, "rouge-r-min": 62.5, "rouge-r-avg": 62.5, "rouge-f": 38.461538035502954, "rouge-f-max": 49.99999952000001, "rouge-f-min": 38.461538035502954, "rouge-f-avg": 43.90842445615964, "num-seq": 10}, "time": 1.2017502784729004, "misc": {}}
{"id": 79, "data_id": "csn-97732", "input_stids": [1, 32315, 1071, 531, 2519, 261, 727, 514, 277, 3834, 262, 288, 3875, 261, 262, 274, 444, 3834, 261, 277, 3834, 262, 274, 289, 32315, 6304, 1016, 6289, 4709, 531, 4254, 2519, 4188, 531, 797, 531, 2519, 32315, 531, 1016, 1033, 32315, 2633, 263, 12325, 261, 404, 269, 638, 269, 315, 3902, 6, 269, 997, 263, 20066, 261, 262, 263, 1762, 261, 262, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 531, 2081, 4446, 1438, 273, 394, 531, 2081, 4446, 261, 315, 3902, 6, 262, 274, 1438, 263, 3077, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1438, 263, 752, 4254, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 1438, 263, 11263, 2853, 261, 262, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 32315, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 1319, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 1319, 263, 1923, 261, 997, 262, 274, 2], "score": -0.2601334750652313, "weight": 1, "toks": ["<s>", "db", ".", "save", "(", "doc", ")", ";", "</s>"]}, {"tids": [1, 1220, 3021, 1678, 731, 364, 7769, 326, 14403, 2572, 3470, 279, 2492, 635, 4979, 392, 1375, 531, 2519, 1375, 316, 392, 531, 10977, 2290, 2063, 263, 2597, 4271, 326, 6885, 434, 21079, 7429, 1368, 392, 8808, 667, 3470, 279, 2492, 819, 263, 2], "score": -0.2709972858428955, "weight": 1, "toks": ["<s>", "This", "statement", "sets", "up", "for", "testing", "the", "indexing", "feature", "within", "a", "transaction", "by", "creating", "an", "`", "ODocument", "`", "in", "an", "OrientDB", "database", ".", "It", "checks", "the", "behavior", "of", "inserting", "documents", "into", "an", "indexed", "class", "within", "a", "transaction", "context", ".", "</s>"]}, {"tids": [1, 1375, 1319, 263, 3294, 261, 262, 274, 1375, 2], "score": -0.33303728699684143, "weight": 1, "toks": ["<s>", "`", "db", ".", "commit", "(", ")", ";", "`", "</s>"]}, {"tids": [1, 997, 263, 444, 3834, 261, 315, 7128, 315, 262, 274, 2], "score": -0.33730435371398926, "weight": 1, "toks": ["<s>", "doc", ".", "setClassName", "(", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 1375, 997, 263, 444, 3834, 261, 315, 7128, 315, 262, 274, 1375, 2], "score": -0.35254013538360596, "weight": 1, "toks": ["<s>", "`", "doc", ".", "setClassName", "(", "\"", "STR", "\"", ")", ";", "`", "</s>"]}, {"tids": [1, 1021, 1842, 707, 1375, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1375, 23500, 7434, 326, 6710, 471, 5337, 27029, 434, 392, 770, 3470, 279, 25078, 819, 316, 392, 531, 10977, 2290, 2063, 263, 10724, 269, 326, 3021, 3377, 506, 20482, 578, 8406, 358, 7418, 6932, 333, 707, 11932, 23877, 598, 279, 2202, 300, 460, 770, 1440, 8783, 3470, 279, 2492, 316, 326, 2063, 1375, 531, 4254, 2519, 4188, 1375, 263, 2457, 279, 16745, 4671, 3912, 1842, 269, 518, 3377, 2198, 5390, 294, 404, 263, 21240, 392, 1241, 358, 326, 770, 263, 576, 263, 10269, 1787, 326, 2492, 263, 890, 263, 8803, 6282, 326, 1241, 628, 326, 770, 358, 3929, 518, 1703, 8783, 4041, 471, 10295, 3470, 326, 2492, 2146, 263, 2], "score": -0.3954010605812073, "weight": 1, "toks": ["<s>", "The", "test", "method", "`", "testOneValueIndexInTxLookup", "(", ")", "`", "effectively", "tests", "the", "creation", "and", "basic", "manipulation", "of", "an", "index", "within", "a", "transactional", "context", "in", "an", "OrientDB", "database", ".", "However", ",", "the", "statement", "could", "be", "simplified", "or", "expanded", "to", "fully", "confirm", "this", "method", "ensures", "interactions", "with", "a", "single", "-", "value", "index", "work", "correctly", "within", "a", "transaction", "in", "the", "database", "`", "ODatabaseDocumentTx", "`", ".", "For", "a", "minimal", "yet", "complete", "test", ",", "it", "could", "involve", ":", "1", ".", "Adding", "an", "entry", "to", "the", "index", ".", "2", ".", "Committing", "the", "transaction", ".", "3", ".", "Retrieving", "the", "entry", "from", "the", "index", "to", "verify", "it", "was", "correctly", "stored", "and", "retrieved", "within", "the", "transaction", "scope", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 289, 2], "score": -0.41977205872535706, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 531, 2519, 3096, 273, 261, 531, 2519, 262, 4003, 263, 3911, 261, 315, 7128, 315, 262, 263, 8088, 281, 261, 262, 263, 2775, 261, 262, 263, 1024, 261, 262, 263, 336, 261, 997, 263, 5031, 261, 315, 7128, 315, 262, 262, 274, 2], "score": -0.4411930739879608, "weight": 1, "toks": ["<s>", "ODocument", "added", "=", "(", "ODocument", ")", "clazz", ".", "getProperty", "(", "\"", "STR", "\"", ")", ".", "getIndexes", "(", ")", ".", "iterator", "(", ")", ".", "next", "(", ")", ".", "get", "(", "doc", ".", "getField", "(", "\"", "STR", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 1000, 731, 279, 2202, 1842, 358, 1954, 326, 6885, 434, 279, 707, 716, 5596, 279, 10894, 2522, 1668, 3470, 279, 2492, 819, 263, 2], "score": -0.4999610483646393, "weight": 1, "toks": ["<s>", "Set", "up", "a", "single", "test", "to", "validate", "the", "behavior", "of", "a", "method", "that", "indexes", "a", "newly", "created", "document", "within", "a", "transaction", "context", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 7128, 315, 262, 274, 1319, 263, 1696, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7128, 315, 262, 274, 4003, 263, 31318, 261, 315, 7128, 315, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 1319, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 289, 2], "score": -0.5077036023139954, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "STR", "\"", ")", ";", "db", ".", "open", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "STR", "\"", ")", ";", "clazz", ".", "createProperty", "(", "\"", "STR", "\"", ",", "OType", ".", "STRING", ")", ".", "createIndex", "(", "OClass", ".", "INDEX_TYPE", ".", "NOTUNIQUE", ")", ";", "db", ".", "begin", "(", ")", ";", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 70.49141756270427, "bleu-max": 70.49141756270427, "bleu-min": 33.77725411873747, "bleu-avg": 52.57487223950527, "code-bleu": 77.37552424018409, "code-bleu-max": 77.37552424018409, "code-bleu-min": 11.386140327414223, "code-bleu-avg": 44.45377398354859, "edit-sim": 92, "edit-sim-max": 92, "edit-sim-min": 64, "edit-sim-avg": 77.5, "rouge-p": 85.71428571428571, "rouge-p-max": 85.71428571428571, "rouge-p-min": 75.0, "rouge-p-avg": 82.02380952380952, "rouge-r": 85.71428571428571, "rouge-r-max": 85.71428571428571, "rouge-r-min": 71.42857142857143, "rouge-r-avg": 82.85714285714285, "rouge-f": 85.71428521428571, "rouge-f-max": 85.71428521428571, "rouge-f-min": 76.92307642603551, "rouge-f-avg": 82.24175774301662, "num-seq": 10}, "time": 0.5438699722290039, "misc": {}}
{"id": 80, "data_id": "csn-97732", "input_stids": [1, 32315, 1071, 531, 2519, 652, 261, 727, 514, 277, 7287, 269, 1033, 277, 16107, 262, 288, 327, 652, 261, 277, 7287, 269, 277, 16107, 269, 531, 6517, 9661, 263, 8984, 67, 10564, 67, 8552, 262, 274, 289, 32315, 6304, 1016, 6289, 4709, 531, 4254, 2519, 4188, 531, 797, 531, 2519, 32315, 531, 1016, 1033, 32315, 327, 997, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 531, 2081, 4446, 1438, 273, 394, 531, 2081, 4446, 261, 315, 3902, 6, 262, 274, 1438, 263, 3077, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1438, 263, 752, 4254, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 1438, 263, 11263, 2853, 261, 262, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 32315, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 1319, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 263, 652, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 1319, 263, 3294, 261, 262, 274, 2], "score": -0.20031507313251495, "weight": 1, "toks": ["<s>", "db", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 2], "score": -0.2755439579486847, "weight": 1, "toks": ["<s>", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 3294, 261, 262, 274, 2], "score": -0.3002570569515228, "weight": 1, "toks": ["<s>", "db", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 3294, 261, 262, 274, 2], "score": -0.4092186987400055, "weight": 1, "toks": ["<s>", "db", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 3294, 261, 262, 274, 2], "score": -0.4138798713684082, "weight": 1, "toks": ["<s>", "db", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 997, 263, 1923, 261, 262, 274, 2], "score": -0.44613540172576904, "weight": 1, "toks": ["<s>", "doc", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 3294, 261, 262, 274, 2], "score": -0.4534069299697876, "weight": 1, "toks": ["<s>", "db", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 3294, 261, 262, 274, 2], "score": -0.4709570109844208, "weight": 1, "toks": ["<s>", "db", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 974, 9267, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 997, 263, 652, 261, 315, 4289, 315, 269, 315, 10729, 315, 262, 274, 25395, 261, 997, 262, 274, 289, 2], "score": -0.4780687093734741, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testFieldInvocation", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "doc", ".", "field", "(", "\"", "fieldName", "\"", ",", "\"", "fieldValue", "\"", ")", ";", "assertNotNull", "(", "doc", ")", ";", "}", "</s>"]}, {"tids": [1, 1319, 263, 3294, 261, 262, 274, 2], "score": -0.4955655634403229, "weight": 1, "toks": ["<s>", "db", ".", "commit", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 21.66864420114564, "bleu-max": 32.15935109119012, "bleu-min": 21.66864420114564, "bleu-avg": 23.34100986362135, "code-bleu": 5.053439437837126, "code-bleu-max": 29.104662816359056, "code-bleu-min": 5.053439437837126, "code-bleu-avg": 7.665669658859651, "edit-sim": 48, "edit-sim-max": 61, "edit-sim-min": 36, "edit-sim-avg": 50.4, "rouge-p": 57.14285714285714, "rouge-p-max": 80.0, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 52.76190476190476, "rouge-r": 66.66666666666666, "rouge-r-max": 66.66666666666666, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 66.66666666666664, "rouge-f": 61.53846104142012, "rouge-f-max": 72.72727223140495, "rouge-f-min": 44.444444000000004, "rouge-f-avg": 58.31057782326127, "num-seq": 10}, "time": 0.5860710144042969, "misc": {}}
{"id": 81, "data_id": "csn-97732", "input_stids": [1, 32315, 632, 1439, 1071, 411, 32305, 3231, 531, 2115, 405, 32305, 1923, 261, 531, 2115, 277, 921, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1923, 261, 277, 921, 262, 274, 289, 32315, 6304, 1016, 6289, 4709, 531, 4254, 2519, 4188, 531, 797, 531, 2519, 32315, 531, 1016, 1033, 32315, 531, 2115, 548, 10911, 273, 261, 531, 2115, 548, 262, 3591, 1759, 263, 20066, 261, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 531, 2081, 4446, 1438, 273, 394, 531, 2081, 4446, 261, 315, 3902, 6, 262, 274, 1438, 263, 3077, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1438, 263, 752, 4254, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 1438, 263, 11263, 2853, 261, 262, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 32315, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 1319, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 263, 652, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1319, 263, 1923, 261, 997, 262, 274, 2], "topk": [{"tids": [1, 4554, 1410, 1842, 716, 392, 531, 2519, 848, 506, 5198, 471, 10295, 3970, 279, 2553, 770, 3470, 279, 2492, 263, 2], "score": -0.23953525722026825, "weight": 1, "toks": ["<s>", "You", "should", "test", "that", "an", "ODocument", "can", "be", "saved", "and", "retrieved", "via", "a", "defined", "index", "within", "a", "transaction", ".", "</s>"]}, {"tids": [1, 14373, 1375, 1319, 263, 3689, 14560, 261, 315, 5311, 315, 262, 1375, 358, 1842, 309, 326, 770, 9023, 326, 1668, 8783, 263, 2], "score": -0.2639023959636688, "weight": 1, "toks": ["<s>", "Invoke", "`", "db", ".", "lookupByKey", "(", "\"", "KEY", "\"", ")", "`", "to", "test", "if", "the", "index", "retrieves", "the", "document", "correctly", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 4755, 261, 262, 288, 531, 2115, 277, 921, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 1815, 8867, 261, 277, 921, 269, 1923, 261, 277, 921, 262, 262, 274, 289, 2], "score": -0.26673659682273865, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSave", "(", ")", "{", "ORecord", "iObject", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "assertEquals", "(", "iObject", ",", "save", "(", "iObject", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1319, 263, 3294, 261, 262, 274, 2], "score": -0.29693812131881714, "weight": 1, "toks": ["<s>", "db", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 2974, 1842, 326, 707, 3613, 1842, 269, 1492, 12001, 358, 506, 3746, 358, 12392, 279, 1668, 316, 392, 531, 10977, 2290, 2063, 2492, 269, 326, 9330, 395, 3102, 316, 326, 1842, 707, 1375, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1375, 1410, 7155, 603, 294, 404, 263, 13274, 731, 326, 2063, 1459, 471, 1963, 263, 576, 263, 21837, 279, 1668, 471, 12392, 518, 316, 279, 2492, 263, 890, 263, 5452, 310, 326, 1668, 1703, 5198, 263, 1021, 2112, 1842, 2728, 1375, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1375, 1818, 18172, 1230, 25559, 4259, 6075, 23500, 263, 13743, 518, 353, 2411, 13148, 358, 2097, 18518, 802, 364, 927, 20498, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 342, 342, 10939, 2063, 471, 667, 1963, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 7128, 315, 262, 274, 1319, 263, 1696, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7128, 315, 262, 274, 4003, 263, 31318, 261, 315, 7128, 315, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 342, 342, 3603, 2492, 269, 752, 1668, 269, 1923, 518, 269, 471, 3294, 2492, 1319, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 1319, 263, 1923, 261, 997, 262, 274, 1319, 263, 3294, 261, 262, 274, 342, 342, 8553, 326, 1668, 353, 5198, 531, 2519, 10295, 1759, 273, 1319, 263, 1262, 261, 394, 531, 2115, 548, 261, 997, 263, 20066, 261, 262, 263, 1762, 261, 262, 262, 262, 274, 25395, 261, 10295, 1759, 262, 274, 1815, 8867, 261, 315, 7128, 315, 269, 10295, 1759, 263, 652, 261, 315, 7128, 315, 262, 262, 274, 342, 342, 19968, 2703, 1319, 263, 1746, 261, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 707, 1552, 7756, 487, 3025, 471, 4143, 487, 3323, 358, 1842, 326, 12392, 14176, 4832, 279, 2492, 269, 598, 7820, 358, 3387, 326, 1668, 1703, 5198, 471, 848, 506, 10295, 8783, 263, 2], "score": -0.32273414731025696, "weight": 1, "toks": ["<s>", "To", "test", "the", "method", "under", "test", ",", "which", "seems", "to", "be", "related", "to", "saving", "a", "document", "in", "an", "OrientDB", "database", "transaction", ",", "the", "simplest", "sequence", "in", "the", "test", "method", "`", "testOneValueIndexInTxLookup", "(", ")", "`", "should", "focus", "on", ":", "1", ".", "Setting", "up", "the", "database", "connection", "and", "schema", ".", "2", ".", "Creating", "a", "document", "and", "saving", "it", "in", "a", "transaction", ".", "3", ".", "Asserting", "the", "document", "was", "saved", ".", "The", "provided", "test", "script", "`", "testOneValueIndexInTxLookup", "(", ")", "`", "already", "minimally", "covers", "these", "steps", "effectively", ".", "Here", "it", "is", "distilled", "to", "its", "essence", "for", "clarity", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "/", "/", "Setup", "database", "and", "class", "schema", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "STR", "\"", ")", ";", "db", ".", "open", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "STR", "\"", ")", ";", "clazz", ".", "createProperty", "(", "\"", "STR", "\"", ",", "OType", ".", "STRING", ")", ".", "createIndex", "(", "OClass", ".", "INDEX_TYPE", ".", "NOTUNIQUE", ")", ";", "/", "/", "Start", "transaction", ",", "create", "document", ",", "save", "it", ",", "and", "commit", "transaction", "db", ".", "begin", "(", ")", ";", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "db", ".", "save", "(", "doc", ")", ";", "db", ".", "commit", "(", ")", ";", "/", "/", "Verify", "the", "document", "is", "saved", "ODocument", "retrievedDoc", "=", "db", ".", "load", "(", "new", "ORecordId", "(", "doc", ".", "getIdentity", "(", ")", ".", "toString", "(", ")", ")", ")", ";", "assertNotNull", "(", "retrievedDoc", ")", ";", "assertEquals", "(", "\"", "STR", "\"", ",", "retrievedDoc", ".", "field", "(", "\"", "STR", "\"", ")", ")", ";", "/", "/", "Cleanup", "resources", "db", ".", "close", "(", ")", ";", "}", "`", "`", "`", "This", "test", "method", "does", "everything", "as", "short", "and", "simple", "as", "possible", "to", "test", "the", "saving", "functionality", "inside", "a", "transaction", ",", "with", "assertions", "to", "ensure", "the", "document", "was", "saved", "and", "can", "be", "retrieved", "correctly", ".", "</s>"]}, {"tids": [1, 2974, 279, 323, 372, 5173, 1842, 326, 1375, 1923, 261, 262, 1375, 707, 316, 1375, 531, 4254, 2519, 4188, 1375, 269, 999, 333, 20570, 784, 1842, 981, 13016, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 4755, 1305, 261, 262, 288, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 2632, 294, 17365, 342, 3399, 1966, 315, 262, 274, 1319, 263, 1696, 261, 315, 3981, 315, 269, 315, 3981, 315, 262, 274, 531, 2519, 1668, 273, 394, 531, 2519, 261, 315, 8005, 797, 315, 262, 274, 1668, 263, 652, 261, 315, 508, 315, 269, 315, 7766, 620, 315, 262, 274, 531, 2519, 5198, 1759, 273, 1319, 263, 1923, 261, 1668, 262, 274, 25395, 261, 5198, 1759, 262, 274, 1815, 8867, 261, 315, 7766, 620, 315, 269, 5198, 1759, 263, 652, 261, 315, 508, 315, 262, 262, 274, 1319, 263, 1746, 261, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 11932, 326, 1375, 1923, 261, 262, 1375, 707, 8783, 9064, 392, 791, 434, 1375, 531, 2519, 1375, 471, 9023, 518, 19361, 5173, 269, 598, 326, 1466, 487, 2665, 263, 2], "score": -0.34176018834114075, "weight": 1, "toks": ["<s>", "To", "adequately", "test", "the", "`", "save", "(", ")", "`", "method", "in", "`", "ODatabaseDocumentTx", "`", ",", "use", "this", "concise", "test", "code", "snippet", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSaveMethod", "(", ")", "{", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "remote", ":", "localhost", "/", "mydb", "\"", ")", ";", "db", ".", "open", "(", "\"", "admin", "\"", ",", "\"", "admin", "\"", ")", ";", "ODocument", "document", "=", "new", "ODocument", "(", "\"", "MyClass", "\"", ")", ";", "document", ".", "field", "(", "\"", "name", "\"", ",", "\"", "TestValue", "\"", ")", ";", "ODocument", "savedDoc", "=", "db", ".", "save", "(", "document", ")", ";", "assertNotNull", "(", "savedDoc", ")", ";", "assertEquals", "(", "\"", "TestValue", "\"", ",", "savedDoc", ".", "field", "(", "\"", "name", "\"", ")", ")", ";", "db", ".", "close", "(", ")", ";", "}", "`", "`", "`", "This", "test", "ensures", "the", "`", "save", "(", ")", "`", "method", "correctly", "stores", "an", "instance", "of", "`", "ODocument", "`", "and", "retrieves", "it", "accurately", ",", "with", "the", "fields", "as", "expected", ".", "</s>"]}, {"tids": [1, 1220, 981, 14606, 358, 506, 19981, 279, 4166, 434, 5295, 3746, 358, 326, 1375, 531, 10977, 2290, 1375, 2063, 316, 279, 7769, 3330, 263, 13743, 225, 163, 227, 252, 272, 279, 324, 17802, 436, 1074, 995, 434, 326, 2112, 1842, 3875, 471, 1301, 294, 404, 263, 380, 380, 632, 11672, 3875, 261, 1865, 707, 262, 294, 380, 380, 300, 10188, 3128, 471, 2542, 392, 1375, 531, 2081, 1375, 791, 263, 300, 17787, 23385, 281, 279, 1459, 471, 3414, 279, 394, 2063, 1450, 1375, 531, 2081, 4446, 1375, 263, 576, 263, 380, 380, 632, 7360, 28196, 261, 1839, 707, 262, 294, 380, 380, 300, 2638, 12940, 2588, 326, 1438, 471, 531, 10977, 2290, 791, 263, 300, 17973, 326, 2063, 1867, 269, 24831, 279, 2721, 2020, 340, 364, 10815, 7434, 263, 890, 263, 380, 380, 7766, 2985, 261, 1842, 3335, 620, 1016, 382, 4188, 6609, 262, 294, 380, 380, 300, 6066, 773, 392, 1375, 531, 4254, 2519, 4188, 1375, 25078, 2063, 1459, 263, 300, 10210, 279, 394, 667, 471, 1272, 316, 326, 2063, 1963, 471, 4831, 392, 770, 358, 716, 1272, 263, 300, 605, 1332, 2679, 279, 2492, 269, 3414, 279, 394, 1668, 3637, 2097, 1466, 269, 471, 1508, 14649, 326, 1668, 263, 1021, 24613, 3086, 1375, 411, 5478, 405, 1375, 2342, 19264, 358, 2406, 9004, 5110, 667, 578, 1560, 1257, 716, 4825, 506, 9368, 358, 326, 3875, 1496, 854, 486, 415, 378, 280, 690, 603, 316, 326, 2774, 981, 13016, 263, 26775, 269, 14656, 4123, 487, 1375, 531, 2115, 548, 10911, 273, 261, 531, 2115, 548, 262, 3591, 1759, 263, 20066, 261, 262, 274, 1375, 9788, 358, 506, 7524, 3855, 15522, 578, 14715, 2140, 434, 279, 10974, 17574, 7155, 310, 603, 531, 10977, 2290, 5295, 263, 10752, 454, 269, 333, 1842, 3875, 471, 4471, 8121, 279, 707, 358, 2243, 471, 770, 501, 3470, 279, 2492, 269, 3929, 310, 23877, 598, 279, 8429, 531, 10977, 2290, 791, 358, 3387, 5338, 14176, 434, 2063, 5295, 3470, 392, 2521, 819, 263, 2], "score": -0.3605327904224396, "weight": 1, "toks": ["<s>", "This", "code", "appears", "to", "be", "implementing", "a", "series", "of", "operations", "related", "to", "the", "`", "OrientDB", "`", "database", "in", "a", "testing", "environment", ".", "Here", "\u2019", "s", "a", "brief", "rundown", "of", "the", "provided", "test", "setup", "and", "action", ":", "1", ".", "*", "*", "@", "Before", "setup", "(", "before", "method", ")", ":", "*", "*", "-", "Initializes", "and", "starts", "an", "`", "OServer", "`", "instance", ".", "-", "Establishes", "a", "connection", "and", "creates", "a", "new", "database", "using", "`", "OServerAdmin", "`", ".", "2", ".", "*", "*", "@", "After", "teardown", "(", "after", "method", ")", ":", "*", "*", "-", "Shuts", "down", "the", "server", "and", "OrientDB", "instance", ".", "-", "Deletes", "the", "database", "directory", ",", "ensuring", "a", "clean", "slate", "for", "subsequent", "tests", ".", "3", ".", "*", "*", "Test", "Method", "(", "testOneValueIndexInTxLookup", ")", ":", "*", "*", "-", "Opens", "an", "`", "ODatabaseDocumentTx", "`", "transactional", "database", "connection", ".", "-", "Creates", "a", "new", "class", "and", "property", "in", "the", "database", "schema", "and", "adds", "an", "index", "to", "that", "property", ".", "-", "Begins", "a", "transaction", ",", "creates", "a", "new", "document", "setting", "its", "fields", ",", "and", "then", "saves", "the", "document", ".", "The", "snippets", "between", "`", "<", "sep", ">", "`", "tags", "seem", "to", "represent", "separate", "Java", "class", "or", "interface", "names", "that", "might", "be", "relevant", "to", "the", "setup", "but", "are", "not", "elaborated", "on", "in", "the", "main", "code", "snippet", ".", "Additionally", ",", "fragments", "such", "as", "`", "ORecordId", "rid", "=", "(", "ORecordId", ")", "edgeDoc", ".", "getIdentity", "(", ")", ";", "`", "appear", "to", "be", "miscellaneous", "or", "incomplete", "parts", "of", "a", "larger", "codebase", "focusing", "on", "OrientDB", "operations", ".", "Overall", ",", "this", "test", "setup", "and", "implementation", "provides", "a", "method", "to", "insert", "and", "index", "data", "within", "a", "transaction", ",", "verifying", "interactions", "with", "a", "live", "OrientDB", "instance", "to", "ensure", "proper", "functionality", "of", "database", "operations", "within", "an", "application", "context", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1923, 1375, 707, 269, 1846, 4102, 1608, 358, 3929, 716, 392, 1375, 531, 2115, 1375, 353, 8783, 14249, 1368, 326, 2063, 263, 13743, 353, 326, 9330, 395, 1842, 3021, 1846, 3377, 999, 294, 1375, 1375, 1375, 2252, 25395, 261, 1319, 263, 1923, 261, 997, 262, 263, 20066, 261, 262, 262, 274, 1375, 1375, 1375, 1220, 3021, 4271, 716, 326, 1668, 1375, 997, 1375, 353, 5198, 471, 711, 279, 1661, 300, 446, 4215, 269, 6932, 310, 518, 1703, 14249, 316, 326, 2063, 263, 2], "score": -0.3686942756175995, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "save", "`", "method", ",", "you", "would", "need", "to", "verify", "that", "an", "`", "ORecord", "`", "is", "correctly", "persisted", "into", "the", "database", ".", "Here", "is", "the", "simplest", "test", "statement", "you", "could", "use", ":", "`", "`", "`", "java", "assertNotNull", "(", "db", ".", "save", "(", "doc", ")", ".", "getIdentity", "(", ")", ")", ";", "`", "`", "`", "This", "statement", "checks", "that", "the", "document", "`", "doc", "`", "is", "saved", "and", "has", "a", "non", "-", "null", "identity", ",", "confirming", "it", "was", "persisted", "in", "the", "database", ".", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 4755, 1305, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 667, 315, 262, 274, 1319, 263, 1923, 261, 997, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.38137316703796387, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testSaveMethod", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "class", "\"", ")", ";", "db", ".", "save", "(", "doc", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 13743, 353, 279, 20482, 1842, 3021, 364, 326, 2112, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 4755, 1305, 261, 262, 288, 531, 2115, 1409, 273, 394, 531, 2519, 261, 262, 274, 1409, 263, 1923, 261, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3826180398464203, "weight": 1, "toks": ["<s>", "Here", "is", "a", "simplified", "test", "statement", "for", "the", "provided", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSaveMethod", "(", ")", "{", "ORecord", "record", "=", "new", "ODocument", "(", ")", ";", "record", ".", "save", "(", ")", ";", "}", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 2.129257168044803, "bleu-max": 22.346248871903374, "bleu-min": 0.4535228845506394, "bleu-avg": 10.176169524329108, "code-bleu": 1.1381110251750601, "code-bleu-max": 33.72841153382107, "code-bleu-min": 1.1381110251750601, "code-bleu-avg": 14.589320487151443, "edit-sim": 26, "edit-sim-max": 57, "edit-sim-min": 16, "edit-sim-avg": 37.9, "rouge-p": 57.14285714285714, "rouge-p-max": 83.33333333333334, "rouge-p-min": 44.44444444444444, "rouge-p-avg": 62.41378066378066, "rouge-r": 26.666666666666668, "rouge-r-max": 66.66666666666666, "rouge-r-min": 26.666666666666668, "rouge-r-avg": 38.666666666666664, "rouge-f": 36.36363592975207, "rouge-f-max": 74.07407358024692, "rouge-f-min": 33.33333286458334, "rouge-f-avg": 46.972421641082654, "num-seq": 10}, "time": 0.9167828559875488, "misc": {}}
{"id": 82, "data_id": "csn-97732", "input_stids": [1, 32315, 531, 1016, 411, 692, 405, 8088, 261, 727, 514, 277, 461, 262, 274, 32315, 6304, 1016, 6289, 4709, 531, 4254, 2519, 4188, 531, 797, 531, 2519, 531, 1016, 32315, 531, 1016, 1033, 32315, 727, 531, 1016, 1852, 770, 1852, 273, 770, 263, 12762, 261, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 531, 2081, 4446, 1438, 273, 394, 531, 2081, 4446, 261, 315, 3902, 6, 262, 274, 1438, 263, 3077, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1438, 263, 752, 4254, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 1438, 263, 11263, 2853, 261, 262, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 32315, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 1319, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 263, 652, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1319, 263, 1923, 261, 997, 262, 274, 531, 1016, 411, 2200, 411, 531, 6106, 8424, 405, 405, 2067, 273, 261, 531, 1016, 411, 2200, 411, 531, 6106, 8424, 405, 405, 262, 1319, 263, 11159, 261, 262, 263, 8088, 1318, 261, 262, 263, 8088, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 7766, 716, 326, 770, 9023, 326, 3434, 1668, 2511, 603, 326, 810, 498, 316, 279, 25078, 819, 263, 2], "score": -0.20924846827983856, "weight": 1, "toks": ["<s>", "Test", "that", "the", "index", "retrieves", "the", "correct", "document", "based", "on", "the", "input", "key", "in", "a", "transactional", "context", ".", "</s>"]}, {"tids": [1, 25395, 261, 2067, 262, 274, 2], "score": -0.28039517998695374, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "idx", ")", ";", "</s>"]}, {"tids": [1, 1021, 293, 427, 1568, 980, 358, 1842, 316, 326, 707, 1375, 1842, 3335, 620, 1016, 382, 4188, 6609, 1375, 353, 294, 1375, 1375, 1375, 2252, 531, 1016, 411, 2200, 411, 531, 6106, 8424, 405, 405, 2067, 273, 261, 531, 1016, 411, 2200, 411, 531, 6106, 8424, 405, 405, 262, 1319, 263, 11159, 261, 262, 263, 8088, 1318, 261, 262, 263, 8088, 261, 315, 7128, 315, 262, 274, 1375, 1375, 1375, 1220, 980, 9023, 392, 770, 635, 508, 1839, 518, 711, 2118, 2522, 471, 6737, 598, 501, 316, 279, 2492, 263, 24471, 309, 1375, 2067, 1375, 353, 486, 446, 471, 1914, 326, 2665, 501, 854, 326, 498, 7820, 3577, 2674, 263, 2], "score": -0.2927689850330353, "weight": 1, "toks": ["<s>", "The", "pivotal", "line", "to", "test", "in", "the", "method", "`", "testOneValueIndexInTxLookup", "`", "is", ":", "`", "`", "`", "java", "OIndex", "<", "Collection", "<", "OIdentifiable", ">", ">", "idx", "=", "(", "OIndex", "<", "Collection", "<", "OIdentifiable", ">", ">", ")", "db", ".", "getMetadata", "(", ")", ".", "getIndexManager", "(", ")", ".", "getIndex", "(", "\"", "STR", "\"", ")", ";", "`", "`", "`", "This", "line", "retrieves", "an", "index", "by", "name", "after", "it", "has", "been", "created", "and", "populated", "with", "data", "in", "a", "transaction", ".", "Checking", "if", "`", "idx", "`", "is", "not", "null", "and", "contains", "the", "expected", "data", "are", "the", "key", "assertions", "needed", "here", ".", "</s>"]}, {"tids": [1, 1375, 25395, 261, 2067, 262, 274, 1375, 2], "score": -0.3012484014034271, "weight": 1, "toks": ["<s>", "`", "assertNotNull", "(", "idx", ")", ";", "`", "</s>"]}, {"tids": [1, 25395, 261, 2067, 262, 274, 2], "score": -0.32030683755874634, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "idx", ")", ";", "</s>"]}, {"tids": [1, 1788, 471, 1923, 279, 1668, 316, 326, 8808, 667, 471, 6932, 326, 770, 9023, 518, 263, 2], "score": -0.3365349769592285, "weight": 1, "toks": ["<s>", "Create", "and", "save", "a", "document", "in", "the", "indexed", "class", "and", "confirm", "the", "index", "retrieves", "it", ".", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 404, 269, 2067, 263, 336, 261, 315, 7128, 315, 262, 263, 963, 261, 262, 262, 274, 2], "score": -0.3417247533798218, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "1", ",", "idx", ".", "get", "(", "\"", "STR", "\"", ")", ".", "size", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 25395, 261, 2067, 263, 336, 261, 315, 7128, 315, 262, 262, 274, 2], "score": -0.3431290090084076, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "idx", ".", "get", "(", "\"", "STR", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 2067, 262, 274, 2], "score": -0.34454113245010376, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "idx", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 2067, 262, 274, 2], "score": -0.3702787756919861, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "idx", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 36.744446004373295, "bleu-max": 69.74985701852872, "bleu-min": 23.124463019346486, "bleu-avg": 43.786996850396875, "code-bleu": 25.685974206175977, "code-bleu-max": 83.51710448175895, "code-bleu-min": 10.301142980996644, "code-bleu-avg": 45.201592228280376, "edit-sim": 53, "edit-sim-max": 89, "edit-sim-min": 42, "edit-sim-avg": 69.9, "rouge-p": 60.0, "rouge-p-max": 84.61538461538461, "rouge-p-min": 50.0, "rouge-p-avg": 70.17249417249418, "rouge-r": 50.0, "rouge-r-max": 91.66666666666666, "rouge-r-min": 41.66666666666667, "rouge-r-avg": 71.66666666666666, "rouge-f": 54.54545404958678, "rouge-f-max": 87.9999995008, "rouge-f-min": 45.45454495867769, "rouge-f-avg": 70.75072413908212, "num-seq": 10}, "time": 0.9062645435333252, "misc": {}}
{"id": 83, "data_id": "csn-97732", "input_stids": [1, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 6304, 1016, 6289, 4709, 531, 4254, 2519, 4188, 531, 797, 531, 2519, 531, 1016, 2200, 32315, 1033, 32315, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 531, 2081, 4446, 1438, 273, 394, 531, 2081, 4446, 261, 315, 3902, 6, 262, 274, 1438, 263, 3077, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1438, 263, 752, 4254, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 1438, 263, 11263, 2853, 261, 262, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 32315, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 1319, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 263, 652, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1319, 263, 1923, 261, 997, 262, 274, 531, 1016, 411, 2200, 411, 531, 6106, 8424, 405, 405, 2067, 273, 261, 531, 1016, 411, 2200, 411, 531, 6106, 8424, 405, 405, 262, 1319, 263, 11159, 261, 262, 263, 8088, 1318, 261, 262, 263, 8088, 261, 315, 3902, 6, 262, 274, 2200, 411, 531, 6106, 8424, 405, 400, 273, 2067, 263, 336, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 25395, 261, 400, 262, 274, 2], "score": -0.08533917367458344, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "res", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 400, 262, 274, 2], "score": -0.21317429840564728, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "res", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 400, 262, 274, 2], "score": -0.22565557062625885, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "res", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 400, 262, 274, 2], "score": -0.2411995232105255, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "res", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 400, 263, 1914, 261, 997, 262, 262, 274, 2], "score": -0.2540628910064697, "weight": 1, "toks": ["<s>", "assertTrue", "(", "res", ".", "contains", "(", "doc", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 400, 262, 274, 2], "score": -0.27859318256378174, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "res", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8381, 261, 400, 263, 2709, 261, 262, 262, 274, 2], "score": -0.30938053131103516, "weight": 1, "toks": ["<s>", "Assert", ".", "assertFalse", "(", "res", ".", "isEmpty", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 400, 262, 274, 2], "score": -0.35820120573043823, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "res", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 400, 262, 274, 2], "score": -0.38419783115386963, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "res", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 1815, 5510, 261, 400, 263, 1914, 261, 997, 262, 262, 274, 2], "score": -0.4002440571784973, "weight": 1, "toks": ["<s>", "Assert", ".", "assertTrue", "(", "res", ".", "contains", "(", "doc", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 41.28369800844274, "bleu-avg": 61.15587673066916, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 37.23991874432514, "code-bleu-avg": 57.949908218723955, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 68, "edit-sim-avg": 82.5, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 62.5, "rouge-p-avg": 77.63888888888889, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 62.5, "rouge-r-avg": 81.25, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 62.4999995, "rouge-f-avg": 79.33823479480971, "num-seq": 10}, "time": 0.5543391704559326, "misc": {}}
{"id": 84, "data_id": "csn-97732", "input_stids": [1, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 6304, 1016, 6289, 4709, 531, 4254, 2519, 4188, 531, 797, 531, 2519, 531, 1016, 2200, 32315, 32315, 987, 411, 1185, 405, 4798, 273, 394, 2407, 411, 1185, 405, 261, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 531, 2081, 4446, 1438, 273, 394, 531, 2081, 4446, 261, 315, 3902, 6, 262, 274, 1438, 263, 3077, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1438, 263, 752, 4254, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 1438, 263, 11263, 2853, 261, 262, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 399, 336, 261, 1033, 24928, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 32315, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 1319, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 263, 652, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 1319, 263, 1923, 261, 997, 262, 274, 531, 1016, 411, 2200, 411, 531, 6106, 8424, 405, 405, 2067, 273, 261, 531, 1016, 411, 2200, 411, 531, 6106, 8424, 405, 405, 262, 1319, 263, 11159, 261, 262, 263, 8088, 1318, 261, 262, 263, 8088, 261, 315, 3902, 6, 262, 274, 2200, 411, 531, 6106, 8424, 405, 400, 273, 2067, 263, 336, 261, 315, 3902, 6, 262, 274, 1815, 8867, 261, 404, 269, 400, 263, 963, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 3049, 1375, 2067, 263, 336, 261, 315, 7128, 315, 262, 274, 1375, 358, 1842, 326, 707, 3613, 1842, 263, 2], "score": -0.1876746267080307, "weight": 1, "toks": ["<s>", "Call", "`", "idx", ".", "get", "(", "\"", "STR", "\"", ")", ";", "`", "to", "test", "the", "method", "under", "test", ".", "</s>"]}, {"tids": [1, 1788, 279, 1668, 471, 3929, 518, 848, 506, 10295, 628, 326, 770, 316, 279, 2492, 263, 2], "score": -0.22246453166007996, "weight": 1, "toks": ["<s>", "Create", "a", "document", "and", "verify", "it", "can", "be", "retrieved", "from", "the", "index", "in", "a", "transaction", ".", "</s>"]}, {"tids": [1, 1788, 471, 1923, 279, 1668, 269, 1508, 4614, 518, 3970, 770, 3689, 358, 3387, 518, 353, 4041, 8783, 263, 2], "score": -0.2508055865764618, "weight": 1, "toks": ["<s>", "Create", "and", "save", "a", "document", ",", "then", "retrieve", "it", "via", "index", "lookup", "to", "ensure", "it", "is", "stored", "correctly", ".", "</s>"]}, {"tids": [1, 1788, 471, 1923, 392, 531, 2519, 316, 279, 2063, 598, 392, 8808, 652, 269, 1508, 4614, 518, 1450, 326, 770, 358, 3387, 518, 296, 272, 8783, 4041, 471, 8808, 263, 2], "score": -0.2533171772956848, "weight": 1, "toks": ["<s>", "Create", "and", "save", "an", "ODocument", "in", "a", "database", "with", "an", "indexed", "field", ",", "then", "retrieve", "it", "using", "the", "index", "to", "ensure", "it", "'", "s", "correctly", "stored", "and", "indexed", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 3335, 620, 1016, 382, 4188, 6609, 261, 262, 1216, 1860, 288, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 7128, 315, 262, 274, 1319, 263, 1696, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7128, 315, 262, 274, 4003, 263, 31318, 261, 315, 7128, 315, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 1319, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 1319, 263, 1923, 261, 997, 262, 274, 531, 1016, 411, 2200, 411, 531, 6106, 8424, 405, 405, 2067, 273, 261, 531, 1016, 411, 2200, 411, 531, 6106, 8424, 405, 405, 262, 1319, 263, 11159, 261, 262, 263, 8088, 1318, 261, 262, 263, 8088, 261, 315, 7128, 315, 262, 274, 2200, 411, 531, 6106, 8424, 405, 400, 273, 2067, 263, 336, 261, 315, 7128, 315, 262, 274, 1815, 8867, 261, 404, 269, 400, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.25638243556022644, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testOneValueIndexInTxLookup", "(", ")", "throws", "IOException", "{", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "STR", "\"", ")", ";", "db", ".", "open", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "STR", "\"", ")", ";", "clazz", ".", "createProperty", "(", "\"", "STR", "\"", ",", "OType", ".", "STRING", ")", ".", "createIndex", "(", "OClass", ".", "INDEX_TYPE", ".", "NOTUNIQUE", ")", ";", "db", ".", "begin", "(", ")", ";", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "db", ".", "save", "(", "doc", ")", ";", "OIndex", "<", "Collection", "<", "OIdentifiable", ">", ">", "idx", "=", "(", "OIndex", "<", "Collection", "<", "OIdentifiable", ">", ">", ")", "db", ".", "getMetadata", "(", ")", ".", "getIndexManager", "(", ")", ".", "getIndex", "(", "\"", "STR", "\"", ")", ";", "Collection", "<", "OIdentifiable", ">", "res", "=", "idx", ".", "get", "(", "\"", "STR", "\"", ")", ";", "assertEquals", "(", "1", ",", "res", ".", "size", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1319, 263, 3294, 261, 262, 274, 2], "score": -0.26848095655441284, "weight": 1, "toks": ["<s>", "db", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 1788, 279, 1668, 316, 392, 8808, 667, 471, 3929, 2097, 22613, 628, 326, 770, 3470, 279, 2492, 263, 2], "score": -0.2862527668476105, "weight": 1, "toks": ["<s>", "Create", "a", "document", "in", "an", "indexed", "class", "and", "verify", "its", "retrieval", "from", "the", "index", "within", "a", "transaction", ".", "</s>"]}, {"tids": [1, 14373, 326, 707, 1375, 1842, 3335, 620, 1016, 382, 4188, 6609, 1375, 358, 3073, 326, 1842, 263, 2], "score": -0.29310038685798645, "weight": 1, "toks": ["<s>", "Invoke", "the", "method", "`", "testOneValueIndexInTxLookup", "`", "to", "perform", "the", "test", ".", "</s>"]}, {"tids": [1, 5452, 716, 326, 10295, 1849, 628, 326, 770, 1914, 326, 2665, 1668, 263, 2], "score": -0.2932736873626709, "weight": 1, "toks": ["<s>", "Assert", "that", "the", "retrieved", "collection", "from", "the", "index", "contains", "the", "expected", "document", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 707, 1375, 336, 261, 1033, 24928, 262, 1375, 316, 326, 20579, 3323, 4031, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1016, 261, 262, 1216, 1860, 288, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 2632, 294, 17365, 342, 1842, 1966, 315, 262, 274, 1319, 263, 1696, 261, 315, 3981, 315, 269, 315, 3981, 315, 262, 274, 531, 1016, 411, 692, 405, 770, 273, 1319, 263, 11159, 261, 262, 263, 8088, 1318, 261, 262, 263, 8088, 261, 315, 3433, 29276, 315, 262, 274, 1033, 563, 273, 770, 263, 336, 261, 315, 15082, 774, 2979, 315, 262, 274, 25395, 261, 563, 262, 274, 1319, 263, 1746, 261, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2946659028530121, "weight": 1, "toks": ["<s>", "To", "test", "the", "method", "`", "get", "(", "Object", "iKey", ")", "`", "in", "the", "shortest", "possible", "way", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetIndex", "(", ")", "throws", "IOException", "{", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "remote", ":", "localhost", "/", "testdb", "\"", ")", ";", "db", ".", "open", "(", "\"", "admin", "\"", ",", "\"", "admin", "\"", ")", ";", "OIndex", "<", "?", ">", "index", "=", "db", ".", "getMetadata", "(", ")", ".", "getIndexManager", "(", ")", ".", "getIndex", "(", "\"", "yourIndexName", "\"", ")", ";", "Object", "result", "=", "index", ".", "get", "(", "\"", "keyValueToSearch", "\"", ")", ";", "assertNotNull", "(", "result", ")", ";", "db", ".", "close", "(", ")", ";", "}", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 10.209116374860235, "bleu-max": 18.11080070249669, "bleu-min": 10.209116374860235, "bleu-avg": 12.565084855724038, "code-bleu": 21.75157574253284, "code-bleu-max": 26.65831842110009, "code-bleu-min": 21.75157574253284, "code-bleu-avg": 23.585378922967916, "edit-sim": 26, "edit-sim-max": 39, "edit-sim-min": 25, "edit-sim-avg": 29.7, "rouge-p": 30.0, "rouge-p-max": 33.33333333333333, "rouge-p-min": 25.0, "rouge-p-avg": 30.166666666666664, "rouge-r": 60.0, "rouge-r-max": 60.0, "rouge-r-min": 60.0, "rouge-r-avg": 60.0, "rouge-f": 39.99999955555556, "rouge-f-max": 42.85714239795918, "rouge-f-min": 35.29411723183391, "rouge-f-avg": 40.10083989166413, "num-seq": 10}, "time": 0.8795583248138428, "misc": {}}
{"id": 85, "data_id": "csn-97797", "input_stids": [1, 32315, 32315, 6304, 2277, 13013, 4709, 32315, 531, 1016, 1318, 32315, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6912, 7621, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6912, 7621, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 1250, 1704, 1016, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1016, 1318, 1891, 261, 262, 1216, 7558, 32315, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 4002, 1016, 261, 262, 288, 1815, 5510, 261, 1704, 1016, 261, 315, 1842, 1016, 315, 262, 262, 274, 289, 2], "score": -0.3921447694301605, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testExistsIndex", "(", ")", "{", "assertTrue", "(", "existsIndex", "(", "\"", "testIndex", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 14373, 1375, 1704, 1016, 1375, 707, 598, 279, 1842, 770, 508, 263, 2], "score": -0.39746248722076416, "weight": 1, "toks": ["<s>", "Invoke", "`", "existsIndex", "`", "method", "with", "a", "test", "index", "name", ".", "</s>"]}, {"tids": [1, 3049, 1375, 1704, 1016, 261, 315, 2690, 29276, 315, 262, 1375, 316, 326, 1842, 707, 358, 866, 309, 392, 770, 1704, 263, 2], "score": -0.4050138592720032, "weight": 1, "toks": ["<s>", "Call", "`", "existsIndex", "(", "\"", "someIndexName", "\"", ")", "`", "in", "the", "test", "method", "to", "check", "if", "an", "index", "exists", ".", "</s>"]}, {"tids": [1, 632, 11672, 1071, 918, 24292, 261, 262, 288, 1438, 263, 11850, 261, 262, 274, 289, 2], "score": -0.4123438596725464, "weight": 1, "toks": ["<s>", "@", "Before", "public", "void", "setUp", "(", ")", "{", "server", ".", "startup", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 1375, 1842, 1016, 1318, 1891, 1375, 1410, 3929, 309, 4440, 279, 707, 261, 3007, 1375, 1089, 1016, 1375, 262, 603, 1375, 531, 1016, 1318, 1375, 8783, 4533, 392, 2062, 770, 263, 1220, 848, 506, 2731, 635, 4979, 392, 770, 269, 9702, 518, 269, 471, 6728, 309, 326, 3478, 854, 21591, 19361, 5173, 263, 2], "score": -0.4440072476863861, "weight": 1, "toks": ["<s>", "The", "`", "testIndexManagerUpdate", "`", "should", "verify", "if", "calling", "a", "method", "(", "like", "`", "updateIndex", "`", ")", "on", "`", "OIndexManager", "`", "correctly", "updates", "an", "existing", "index", ".", "This", "can", "be", "done", "by", "creating", "an", "index", ",", "updating", "it", ",", "and", "checking", "if", "the", "changes", "are", "reflected", "accurately", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1016, 1318, 1891, 261, 262, 1216, 7558, 288, 1815, 5510, 261, 1704, 1016, 261, 315, 1842, 1016, 315, 262, 262, 274, 289, 2], "score": -0.46292003989219666, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testIndexManagerUpdate", "(", ")", "throws", "InterruptedException", "{", "assertTrue", "(", "existsIndex", "(", "\"", "testIndex", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 14373, 326, 1375, 1704, 1016, 1375, 707, 598, 279, 2923, 770, 508, 263, 2], "score": -0.47274354100227356, "weight": 1, "toks": ["<s>", "Invoke", "the", "`", "existsIndex", "`", "method", "with", "a", "specific", "index", "name", ".", "</s>"]}, {"tids": [1, 1375, 2063, 263, 11159, 261, 262, 263, 8088, 1318, 261, 262, 263, 7749, 261, 262, 274, 1375, 2], "score": -0.5005747079849243, "weight": 1, "toks": ["<s>", "`", "database", ".", "getMetadata", "(", ")", ".", "getIndexManager", "(", ")", ".", "reload", "(", ")", ";", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1016, 1318, 1891, 261, 262, 1216, 7558, 288, 1815, 5510, 261, 1704, 1016, 261, 315, 12753, 315, 262, 262, 274, 289, 2], "score": -0.5073754191398621, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testIndexManagerUpdate", "(", ")", "throws", "InterruptedException", "{", "assertTrue", "(", "existsIndex", "(", "\"", "indexName", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 7693, 716, 392, 770, 848, 506, 8214, 8316, 263, 2], "score": -0.5095466375350952, "weight": 1, "toks": ["<s>", "Ensure", "that", "an", "index", "can", "be", "properly", "detected", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 21.736043597249573, "bleu-max": 21.736043597249573, "bleu-min": 12.500763055889768, "bleu-avg": 17.71211735813518, "code-bleu": 4.743715005761048, "code-bleu-max": 4.743715005761048, "code-bleu-min": 2.737036739843429, "code-bleu-avg": 4.260937723373977, "edit-sim": 36, "edit-sim-max": 46, "edit-sim-min": 29, "edit-sim-avg": 35.1, "rouge-p": 37.5, "rouge-p-max": 42.857142857142854, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 38.82683982683982, "rouge-r": 50.0, "rouge-r-max": 66.66666666666666, "rouge-r-min": 33.33333333333333, "rouge-r-avg": 49.99999999999999, "rouge-f": 42.85714236734694, "rouge-f-max": 47.05882307266437, "rouge-f-min": 36.36363586776859, "rouge-f-avg": 43.33125649002349, "num-seq": 10}, "time": 0.8399760723114014, "misc": {}}
{"id": 86, "data_id": "csn-97797", "input_stids": [1, 32315, 805, 531, 13198, 1296, 261, 514, 843, 269, 1033, 1372, 833, 262, 1216, 531, 2189, 3997, 13963, 503, 269, 531, 2189, 14576, 288, 604, 394, 13172, 261, 262, 274, 289, 32315, 6304, 2277, 13013, 4709, 32315, 531, 1016, 1318, 32315, 277, 691, 263, 501, 263, 1296, 6109, 273, 26072, 306, 576, 308, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6912, 7621, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6912, 7621, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 1250, 1704, 1016, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1016, 1318, 1891, 261, 262, 1216, 7558, 32315, 2063, 263, 1296, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 14373, 1375, 1704, 1016, 1375, 598, 279, 533, 1569, 358, 1842, 2856, 279, 2923, 770, 1704, 263, 2], "score": -0.24234715104103088, "weight": 1, "toks": ["<s>", "Invoke", "`", "existsIndex", "`", "with", "a", "string", "parameter", "to", "test", "whether", "a", "specific", "index", "exists", ".", "</s>"]}, {"tids": [1, 14373, 1375, 1842, 1016, 1318, 1891, 1375, 707, 263, 2], "score": -0.2889721691608429, "weight": 1, "toks": ["<s>", "Invoke", "`", "testIndexManagerUpdate", "`", "method", ".", "</s>"]}, {"tids": [1, 3049, 1375, 1842, 1016, 1318, 1891, 261, 262, 1375, 628, 3433, 1842, 11371, 263, 2], "score": -0.3322352468967438, "weight": 1, "toks": ["<s>", "Call", "`", "testIndexManagerUpdate", "(", ")", "`", "from", "your", "test", "suite", ".", "</s>"]}, {"tids": [1, 3049, 1375, 1704, 1016, 261, 315, 2690, 29276, 315, 262, 1375, 358, 1842, 326, 707, 263, 2], "score": -0.33566924929618835, "weight": 1, "toks": ["<s>", "Call", "`", "existsIndex", "(", "\"", "someIndexName", "\"", ")", "`", "to", "test", "the", "method", ".", "</s>"]}, {"tids": [1, 2974, 8616, 1842, 326, 1375, 1296, 1375, 707, 316, 326, 4486, 20570, 784, 4031, 3323, 269, 326, 4573, 3021, 3377, 506, 294, 1375, 1375, 1375, 2252, 2063, 263, 1296, 261, 315, 9111, 4571, 776, 315, 262, 274, 1375, 1375, 1375, 2], "score": -0.39332225918769836, "weight": 1, "toks": ["<s>", "To", "simply", "test", "the", "`", "command", "`", "method", "in", "the", "most", "concise", "way", "possible", ",", "the", "necessary", "statement", "could", "be", ":", "`", "`", "`", "java", "database", ".", "command", "(", "\"", "SELECT", "FROM", "V", "\"", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 14373, 326, 1375, 1704, 1016, 1375, 707, 598, 392, 770, 508, 263, 2], "score": -0.3962114751338959, "weight": 1, "toks": ["<s>", "Invoke", "the", "`", "existsIndex", "`", "method", "with", "an", "index", "name", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1296, 1375, 707, 269, 1846, 3377, 752, 279, 1842, 716, 9327, 358, 1836, 279, 3063, 1296, 471, 10999, 392, 1375, 13172, 1375, 3241, 326, 707, 1216, 333, 1520, 263, 1375, 1375, 1375, 2252, 632, 7766, 261, 2665, 273, 13172, 263, 667, 262, 1071, 918, 1842, 2189, 1305, 261, 262, 288, 2063, 263, 1296, 261, 315, 9111, 4571, 776, 315, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.4037408232688904, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "command", "`", "method", ",", "you", "could", "create", "a", "test", "that", "tries", "to", "execute", "a", "SQL", "command", "and", "expects", "an", "`", "UnsupportedOperationException", "`", "since", "the", "method", "throws", "this", "exception", ".", "`", "`", "`", "java", "@", "Test", "(", "expected", "=", "UnsupportedOperationException", ".", "class", ")", "public", "void", "testCommandMethod", "(", ")", "{", "database", ".", "command", "(", "\"", "SELECT", "FROM", "V", "\"", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 14373, 1375, 1704, 1016, 1375, 707, 598, 392, 770, 508, 1237, 263, 2], "score": -0.41358017921447754, "weight": 1, "toks": ["<s>", "Invoke", "`", "existsIndex", "`", "method", "with", "an", "index", "name", "argument", ".", "</s>"]}, {"tids": [1, 2063, 263, 1296, 261, 315, 752, 770, 7766, 1016, 603, 7766, 1388, 261, 7766, 1494, 262, 3089, 315, 262, 274, 2], "score": -0.42681223154067993, "weight": 1, "toks": ["<s>", "database", ".", "command", "(", "\"", "create", "index", "TestIndex", "on", "TestTable", "(", "TestColumn", ")", "unique", "\"", ")", ";", "</s>"]}, {"tids": [1, 7360, 3637, 731, 326, 1438, 471, 2063, 269, 745, 326, 1375, 1704, 1016, 1375, 707, 358, 3929, 716, 392, 770, 1703, 2522, 578, 3526, 316, 326, 2063, 263, 2], "score": -0.4413628876209259, "weight": 1, "toks": ["<s>", "After", "setting", "up", "the", "server", "and", "database", ",", "call", "the", "`", "existsIndex", "`", "method", "to", "verify", "that", "an", "index", "was", "created", "or", "updated", "in", "the", "database", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 17.542198478193427, "bleu-avg": 33.59641289571383, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 4.743715005761048, "code-bleu-avg": 31.09135180998702, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 35, "edit-sim-avg": 50.8, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 37.5, "rouge-p-avg": 57.93650793650793, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 50.0, "rouge-r-avg": 75.0, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 42.85714236734694, "rouge-f-avg": 65.10622661664543, "num-seq": 10}, "time": 0.6945328712463379, "misc": {}}
{"id": 87, "data_id": "csn-97797", "input_stids": [1, 32315, 805, 531, 13198, 1296, 261, 514, 843, 269, 1033, 1372, 833, 262, 1216, 531, 2189, 3997, 13963, 503, 269, 531, 2189, 14576, 288, 604, 394, 13172, 261, 262, 274, 289, 32315, 6304, 2277, 13013, 4709, 32315, 531, 1016, 1318, 32315, 277, 691, 263, 501, 263, 1296, 6109, 273, 26072, 306, 576, 308, 397, 315, 3902, 6, 397, 26072, 306, 890, 308, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6912, 7621, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6912, 7621, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 1250, 1704, 1016, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1016, 1318, 1891, 261, 262, 1216, 7558, 32315, 2063, 263, 1296, 261, 315, 3902, 6, 262, 274, 2063, 263, 1296, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 14373, 1375, 1842, 1016, 1318, 1891, 261, 262, 1375, 707, 263, 2], "score": -0.12606419622898102, "weight": 1, "toks": ["<s>", "Invoke", "`", "testIndexManagerUpdate", "(", ")", "`", "method", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1016, 1318, 1891, 261, 262, 1216, 7558, 2], "score": -0.3244689404964447, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testIndexManagerUpdate", "(", ")", "throws", "InterruptedException", "</s>"]}, {"tids": [1, 2063, 263, 1296, 261, 315, 752, 770, 5090, 1016, 603, 5090, 797, 261, 3454, 974, 262, 26623, 315, 262, 274, 2], "score": -0.34625935554504395, "weight": 1, "toks": ["<s>", "database", ".", "command", "(", "\"", "create", "index", "ExampleIndex", "on", "ExampleClass", "(", "exampleField", ")", "UNIQUE", "\"", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1016, 1318, 1891, 261, 262, 1216, 7558, 288, 2063, 263, 1296, 261, 315, 7128, 315, 262, 274, 289, 2], "score": -0.3653741776943207, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testIndexManagerUpdate", "(", ")", "throws", "InterruptedException", "{", "database", ".", "command", "(", "\"", "STR", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1016, 1318, 1891, 261, 262, 1216, 7558, 288, 2063, 263, 1296, 261, 315, 13278, 12425, 7766, 1016, 6229, 7766, 1388, 261, 7766, 1494, 262, 26623, 315, 262, 274, 289, 2], "score": -0.36806514859199524, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testIndexManagerUpdate", "(", ")", "throws", "InterruptedException", "{", "database", ".", "command", "(", "\"", "CREATE", "INDEX", "TestIndex", "ON", "TestTable", "(", "TestColumn", ")", "UNIQUE", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 14373, 1375, 1704, 1016, 1375, 707, 598, 279, 3296, 770, 508, 263, 2], "score": -0.38169801235198975, "weight": 1, "toks": ["<s>", "Invoke", "`", "existsIndex", "`", "method", "with", "a", "sample", "index", "name", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1016, 1318, 1891, 261, 262, 1216, 7558, 2], "score": -0.4136592745780945, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testIndexManagerUpdate", "(", ")", "throws", "InterruptedException", "</s>"]}, {"tids": [1, 3049, 1375, 1842, 1016, 1318, 1891, 261, 262, 1375, 358, 1836, 326, 1842, 4364, 603, 326, 2063, 263, 2], "score": -0.4253733158111572, "weight": 1, "toks": ["<s>", "Call", "`", "testIndexManagerUpdate", "(", ")", "`", "to", "execute", "the", "test", "commands", "on", "the", "database", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1296, 1375, 707, 269, 3387, 716, 326, 843, 533, 2112, 11752, 326, 12613, 1520, 4058, 263, 2457, 3454, 294, 1375, 1375, 1375, 2252, 632, 7766, 261, 2665, 273, 13172, 263, 667, 262, 1071, 918, 1842, 2189, 1305, 261, 262, 288, 2063, 263, 1296, 261, 315, 7221, 843, 315, 269, 394, 1033, 306, 308, 288, 289, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.43030115962028503, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "command", "`", "method", ",", "ensure", "that", "the", "query", "string", "provided", "triggers", "the", "intended", "exception", "logic", ".", "For", "example", ":", "`", "`", "`", "java", "@", "Test", "(", "expected", "=", "UnsupportedOperationException", ".", "class", ")", "public", "void", "testCommandMethod", "(", ")", "{", "database", ".", "command", "(", "\"", "Unsupported", "query", "\"", ",", "new", "Object", "[", "]", "{", "}", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 7693, 326, 1375, 1842, 1016, 1318, 1891, 1375, 707, 23500, 7434, 1296, 4588, 603, 326, 2063, 263, 2], "score": -0.4901565909385681, "weight": 1, "toks": ["<s>", "Ensure", "the", "`", "testIndexManagerUpdate", "`", "method", "effectively", "tests", "command", "execution", "on", "the", "database", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 17.286039232097053, "bleu-avg": 34.27028587602661, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 4.743715005761048, "code-bleu-avg": 29.890216322468813, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 35, "edit-sim-avg": 52.6, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 37.5, "rouge-p-avg": 57.242063492063494, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 50.0, "rouge-r-avg": 71.66666666666666, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 42.85714236734694, "rouge-f-avg": 63.213369473892875, "num-seq": 10}, "time": 0.8602714538574219, "misc": {}}
{"id": 88, "data_id": "csn-97797", "input_stids": [1, 32315, 805, 531, 13198, 1296, 261, 514, 843, 269, 1033, 1372, 833, 262, 1216, 531, 2189, 3997, 13963, 503, 269, 531, 2189, 14576, 288, 604, 394, 13172, 261, 262, 274, 289, 32315, 6304, 2277, 13013, 4709, 32315, 531, 1016, 1318, 32315, 333, 263, 10911, 273, 277, 54, 350, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6912, 7621, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6912, 7621, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 1250, 1704, 1016, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1016, 1318, 1891, 261, 262, 1216, 7558, 32315, 2063, 263, 1296, 261, 315, 3902, 6, 262, 274, 2063, 263, 1296, 261, 315, 3902, 6, 262, 274, 2063, 263, 1296, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 1000, 731, 279, 1842, 3330, 471, 1836, 279, 4166, 434, 2063, 4364, 263, 2], "score": -0.12229108810424805, "weight": 1, "toks": ["<s>", "Set", "up", "a", "test", "environment", "and", "execute", "a", "series", "of", "database", "commands", ".", "</s>"]}, {"tids": [1, 1021, 1842, 648, 1410, 866, 309, 326, 770, 1089, 5530, 5426, 316, 326, 2063, 263, 2], "score": -0.3410182297229767, "weight": 1, "toks": ["<s>", "The", "test", "case", "should", "check", "if", "the", "index", "update", "takes", "effect", "in", "the", "database", ".", "</s>"]}, {"tids": [1, 14373, 326, 707, 1375, 1704, 1016, 261, 315, 12753, 315, 262, 1375, 358, 1842, 2097, 14176, 263, 2], "score": -0.35083168745040894, "weight": 1, "toks": ["<s>", "Invoke", "the", "method", "`", "existsIndex", "(", "\"", "indexName", "\"", ")", "`", "to", "test", "its", "functionality", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1296, 1375, 707, 269, 8616, 4356, 518, 598, 279, 5337, 843, 533, 294, 1375, 1375, 1375, 2252, 2063, 263, 1296, 261, 315, 9111, 4571, 776, 315, 262, 274, 1375, 1375, 1375, 2], "score": -0.3633815348148346, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "command", "`", "method", ",", "simply", "invoke", "it", "with", "a", "basic", "query", "string", ":", "`", "`", "`", "java", "database", ".", "command", "(", "\"", "SELECT", "FROM", "V", "\"", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 1842, 1016, 1318, 1891, 1375, 707, 269, 518, 353, 4573, 358, 1240, 279, 2424, 7155, 603, 4121, 326, 445, 353, 20348, 358, 1954, 263, 16803, 326, 819, 434, 770, 3301, 4533, 269, 518, 4102, 506, 18518, 2001, 358, 20089, 3478, 578, 4533, 316, 326, 770, 10459, 471, 1551, 403, 2856, 5348, 3478, 3037, 19361, 5173, 263, 13743, 353, 279, 21043, 7694, 1842, 3875, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1016, 1318, 1891, 261, 262, 1216, 1185, 288, 342, 342, 10371, 726, 514, 2172, 1016, 1684, 2189, 273, 315, 13278, 12425, 7766, 1016, 6229, 7766, 1388, 261, 7766, 1494, 262, 26623, 315, 274, 514, 1089, 1016, 2189, 273, 315, 2438, 20215, 12425, 7766, 1016, 315, 274, 514, 866, 1016, 2189, 273, 315, 9111, 4571, 12425, 294, 7766, 1016, 315, 274, 2063, 263, 1296, 261, 2172, 1016, 1684, 2189, 262, 274, 342, 342, 1788, 392, 2172, 770, 342, 342, 4603, 2063, 263, 1296, 261, 1089, 1016, 2189, 262, 274, 342, 342, 2315, 578, 13419, 326, 770, 342, 342, 5452, 531, 13198, 563, 273, 2063, 263, 1296, 261, 866, 1016, 2189, 262, 274, 342, 342, 2073, 309, 770, 1704, 471, 353, 3526, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 342, 342, 5452, 87, 716, 1915, 353, 622, 4520, 1245, 1241, 269, 11193, 770, 9805, 471, 1089, 289, 1375, 1375, 1375, 380, 380, 1312, 15854, 380, 380, 294, 404, 263, 380, 380, 1788, 392, 3340, 380, 380, 294, 3603, 635, 4979, 392, 770, 1450, 279, 3063, 1296, 263, 1220, 1678, 326, 10853, 364, 326, 1842, 263, 576, 263, 380, 380, 2315, 342, 868, 3510, 326, 3340, 380, 380, 294, 2672, 279, 1296, 358, 13419, 578, 1089, 326, 2522, 770, 263, 890, 263, 380, 380, 2073, 326, 3340, 380, 380, 294, 2672, 279, 843, 358, 866, 309, 326, 770, 1704, 1603, 300, 1089, 263, 1220, 2235, 353, 4422, 5286, 649, 487, 518, 20761, 2856, 326, 1089, 9323, 326, 2665, 5426, 263, 1059, 263, 380, 380, 9067, 380, 380, 294, 1021, 1842, 4271, 309, 326, 563, 628, 326, 770, 843, 711, 622, 4520, 1245, 1241, 269, 19816, 310, 326, 770, 1703, 4985, 3526, 471, 1704, 263, 1220, 17504, 20948, 326, 1842, 22397, 269, 20570, 784, 269, 471, 268, 2092, 5122, 358, 326, 14176, 3832, 18432, 3470, 326, 707, 263, 2], "score": -0.3682052195072174, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "testIndexManagerUpdate", "`", "method", ",", "it", "is", "necessary", "to", "have", "a", "clear", "focus", "on", "what", "the", "function", "is", "meant", "to", "validate", ".", "Given", "the", "context", "of", "index", "manager", "updates", ",", "it", "would", "be", "essential", "to", "simulate", "changes", "or", "updates", "in", "the", "index", "configurations", "and", "assess", "whether", "those", "changes", "reflect", "accurately", ".", "Here", "is", "a", "succinct", "test", "setup", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testIndexManagerUpdate", "(", ")", "throws", "Exception", "{", "/", "/", "Arrange", "String", "initialIndexCreateCommand", "=", "\"", "CREATE", "INDEX", "TestIndex", "ON", "TestTable", "(", "TestColumn", ")", "UNIQUE", "\"", ";", "String", "updateIndexCommand", "=", "\"", "REBUILD", "INDEX", "TestIndex", "\"", ";", "String", "checkIndexCommand", "=", "\"", "SELECT", "FROM", "INDEX", ":", "TestIndex", "\"", ";", "database", ".", "command", "(", "initialIndexCreateCommand", ")", ";", "/", "/", "Create", "an", "initial", "index", "/", "/", "Act", "database", ".", "command", "(", "updateIndexCommand", ")", ";", "/", "/", "Update", "or", "rebuild", "the", "index", "/", "/", "Assert", "OResultSet", "result", "=", "database", ".", "command", "(", "checkIndexCommand", ")", ";", "/", "/", "Check", "if", "index", "exists", "and", "is", "updated", "assertTrue", "(", "result", ".", "hasNext", "(", ")", ")", ";", "/", "/", "Asserts", "that", "there", "is", "at", "least", "one", "entry", ",", "indicating", "index", "presence", "and", "update", "}", "`", "`", "`", "*", "*", "Explanation", "*", "*", ":", "1", ".", "*", "*", "Create", "an", "Index", "*", "*", ":", "Start", "by", "creating", "an", "index", "using", "a", "SQL", "command", ".", "This", "sets", "the", "basis", "for", "the", "test", ".", "2", ".", "*", "*", "Update", "/", "Rebuild", "the", "Index", "*", "*", ":", "Use", "a", "command", "to", "rebuild", "or", "update", "the", "created", "index", ".", "3", ".", "*", "*", "Check", "the", "Index", "*", "*", ":", "Use", "a", "query", "to", "check", "if", "the", "index", "exists", "post", "-", "update", ".", "This", "step", "is", "crucial", "as", "it", "verifies", "whether", "the", "update", "had", "the", "expected", "effect", ".", "4", ".", "*", "*", "Assertion", "*", "*", ":", "The", "test", "checks", "if", "the", "result", "from", "the", "index", "query", "has", "at", "least", "one", "entry", ",", "suggesting", "the", "index", "was", "successfully", "updated", "and", "exists", ".", "This", "approach", "keeps", "the", "test", "focused", ",", "concise", ",", "and", "tied", "directly", "to", "the", "functionality", "being", "tested", "within", "the", "method", ".", "</s>"]}, {"tids": [1, 14373, 326, 1375, 1704, 1016, 1375, 707, 598, 279, 2923, 770, 508, 358, 5122, 1842, 309, 326, 770, 1089, 1703, 6873, 263, 2], "score": -0.37505272030830383, "weight": 1, "toks": ["<s>", "Invoke", "the", "`", "existsIndex", "`", "method", "with", "a", "specific", "index", "name", "to", "directly", "test", "if", "the", "index", "update", "was", "successful", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1016, 1318, 1891, 261, 262, 1216, 7558, 288, 2063, 263, 1296, 261, 315, 752, 770, 309, 486, 1704, 315, 262, 274, 289, 2], "score": -0.42466291785240173, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testIndexManagerUpdate", "(", ")", "throws", "InterruptedException", "{", "database", ".", "command", "(", "\"", "create", "index", "if", "not", "exists", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 14373, 326, 707, 1375, 1704, 1016, 261, 315, 12753, 315, 262, 1375, 358, 1842, 2097, 14176, 263, 2], "score": -0.42832499742507935, "weight": 1, "toks": ["<s>", "Invoke", "the", "method", "`", "existsIndex", "(", "\"", "indexName", "\"", ")", "`", "to", "test", "its", "functionality", ".", "</s>"]}, {"tids": [1, 14373, 326, 1375, 1842, 1016, 1318, 1891, 1375, 707, 263, 2], "score": -0.43688449263572693, "weight": 1, "toks": ["<s>", "Invoke", "the", "`", "testIndexManagerUpdate", "`", "method", ".", "</s>"]}, {"tids": [1, 2063, 263, 1296, 261, 315, 752, 770, 7766, 1016, 603, 7766, 1388, 261, 7766, 1494, 262, 3089, 315, 262, 274, 2], "score": -0.4705539345741272, "weight": 1, "toks": ["<s>", "database", ".", "command", "(", "\"", "create", "index", "TestIndex", "on", "TestTable", "(", "TestColumn", ")", "unique", "\"", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 9.337824807905973, "bleu-max": 50.98856683057734, "bleu-min": 6.891840357254354, "bleu-avg": 25.158071717363303, "code-bleu": 7.454639169694034, "code-bleu-max": 42.54925275026953, "code-bleu-min": 6.997749988970072, "code-bleu-avg": 20.86699936098876, "edit-sim": 44, "edit-sim-max": 77, "edit-sim-min": 35, "edit-sim-avg": 56.5, "rouge-p": 83.33333333333334, "rouge-p-max": 85.71428571428571, "rouge-p-min": 37.5, "rouge-p-avg": 65.98809523809523, "rouge-r": 55.55555555555556, "rouge-r-max": 77.77777777777779, "rouge-r-min": 33.33333333333333, "rouge-r-avg": 56.666666666666664, "rouge-f": 66.66666618666667, "rouge-f-max": 74.9999995078125, "rouge-f-min": 35.294117148788935, "rouge-f-avg": 60.59391075449482, "num-seq": 10}, "time": 0.9795889854431152, "misc": {}}
{"id": 89, "data_id": "csn-97962", "input_stids": [1, 32315, 32315, 6304, 3342, 6289, 4709, 32315, 531, 13198, 32315, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2], "topk": [{"tids": [1, 2598, 3478, 1450, 279, 2492, 471, 3929, 326, 1089, 5530, 5426, 263, 2], "score": -0.450227826833725, "weight": 1, "toks": ["<s>", "Write", "changes", "using", "a", "transaction", "and", "verify", "the", "update", "takes", "effect", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 288, 531, 10977, 3342, 2229, 273, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 460, 21, 315, 262, 274, 997, 263, 1923, 261, 262, 274, 2229, 263, 3294, 261, 262, 274, 531, 13198, 563, 273, 2063, 263, 843, 261, 315, 9111, 4571, 7128, 4852, 7128, 273, 296, 460, 21, 296, 315, 262, 274, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 1815, 8867, 261, 404, 269, 563, 263, 1407, 261, 262, 263, 1056, 261, 262, 262, 274, 289, 2], "score": -0.4509007930755615, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "{", "OrientTransaction", "tx", "=", "database", ".", "begin", "(", ")", ";", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "value1", "\"", ")", ";", "doc", ".", "save", "(", ")", ";", "tx", ".", "commit", "(", ")", ";", "OResultSet", "result", "=", "database", ".", "query", "(", "\"", "SELECT", "FROM", "STR", "WHERE", "STR", "=", "'", "value1", "'", "\"", ")", ";", "assertTrue", "(", "result", ".", "hasNext", "(", ")", ")", ";", "assertEquals", "(", "1", ",", "result", ".", "stream", "(", ")", ".", "count", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 288, 342, 342, 14323, 326, 2492, 2063, 263, 2376, 261, 262, 274, 342, 342, 1788, 279, 394, 1409, 3470, 279, 2492, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7766, 315, 262, 274, 997, 263, 652, 261, 315, 508, 315, 269, 315, 1842, 461, 315, 262, 274, 997, 263, 1923, 261, 262, 274, 342, 342, 2315, 326, 1409, 3470, 326, 1967, 2492, 997, 263, 652, 261, 315, 508, 315, 269, 315, 3526, 461, 315, 262, 274, 997, 263, 1923, 261, 262, 274, 342, 342, 10269, 326, 2492, 2063, 263, 3294, 261, 262, 274, 342, 342, 2770, 358, 3929, 326, 1089, 531, 13198, 563, 273, 2063, 263, 843, 261, 315, 9111, 628, 7766, 1625, 508, 273, 692, 315, 269, 315, 3526, 461, 315, 262, 274, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 531, 1253, 761, 273, 563, 263, 1024, 261, 262, 274, 1815, 8867, 261, 315, 3526, 461, 315, 269, 761, 263, 3911, 261, 315, 508, 315, 262, 262, 274, 563, 263, 1746, 261, 262, 274, 289, 2], "score": -0.4687647521495819, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "{", "/", "/", "Begin", "the", "transaction", "database", ".", "begin", "(", ")", ";", "/", "/", "Create", "a", "new", "record", "within", "a", "transaction", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "Test", "\"", ")", ";", "doc", ".", "field", "(", "\"", "name", "\"", ",", "\"", "testName", "\"", ")", ";", "doc", ".", "save", "(", ")", ";", "/", "/", "Update", "the", "record", "within", "the", "same", "transaction", "doc", ".", "field", "(", "\"", "name", "\"", ",", "\"", "updatedName", "\"", ")", ";", "doc", ".", "save", "(", ")", ";", "/", "/", "Commit", "the", "transaction", "database", ".", "commit", "(", ")", ";", "/", "/", "Query", "to", "verify", "the", "update", "OResultSet", "result", "=", "database", ".", "query", "(", "\"", "SELECT", "from", "Test", "where", "name", "=", "?", "\"", ",", "\"", "updatedName", "\"", ")", ";", "assertTrue", "(", "result", ".", "hasNext", "(", ")", ")", ";", "OResult", "item", "=", "result", ".", "next", "(", ")", ";", "assertEquals", "(", "\"", "updatedName", "\"", ",", "item", ".", "getProperty", "(", "\"", "name", "\"", ")", ")", ";", "result", ".", "close", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 288, 342, 342, 3603, 279, 2492, 2063, 263, 2376, 261, 262, 274, 342, 342, 1788, 279, 394, 1409, 531, 2519, 1409, 273, 394, 531, 2519, 261, 315, 7766, 315, 262, 274, 1409, 263, 652, 261, 315, 508, 315, 269, 315, 394, 1409, 315, 262, 274, 1409, 263, 1923, 261, 262, 274, 342, 342, 10269, 326, 2492, 2063, 263, 3294, 261, 262, 274, 342, 342, 2770, 326, 1409, 358, 3387, 518, 1703, 2522, 471, 866, 326, 1089, 775, 261, 531, 13198, 12168, 273, 2063, 263, 843, 261, 315, 2027, 628, 7766, 1625, 508, 273, 692, 315, 269, 315, 394, 1409, 315, 262, 262, 288, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 531, 1253, 563, 273, 12168, 263, 1024, 261, 262, 274, 1815, 8867, 261, 315, 394, 1409, 315, 269, 563, 263, 3911, 261, 315, 508, 315, 262, 262, 274, 289, 342, 342, 2315, 326, 1409, 3470, 279, 394, 2492, 2063, 263, 2376, 261, 262, 274, 775, 261, 531, 13198, 12168, 273, 2063, 263, 1296, 261, 315, 1089, 7766, 444, 508, 273, 692, 1625, 508, 273, 692, 315, 269, 315, 3526, 1409, 315, 269, 315, 394, 1409, 315, 262, 262, 288, 1815, 8867, 261, 404, 269, 12168, 263, 1024, 261, 262, 263, 3911, 261, 315, 1056, 315, 262, 262, 274, 289, 2063, 263, 3294, 261, 262, 274, 342, 342, 8553, 326, 1089, 775, 261, 531, 13198, 12168, 273, 2063, 263, 843, 261, 315, 2027, 628, 7766, 1625, 508, 273, 692, 315, 269, 315, 3526, 1409, 315, 262, 262, 288, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 531, 1253, 563, 273, 12168, 263, 1024, 261, 262, 274, 1815, 8867, 261, 315, 3526, 1409, 315, 269, 563, 263, 3911, 261, 315, 508, 315, 262, 262, 274, 289, 289, 2], "score": -0.5001260638237, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "{", "/", "/", "Start", "a", "transaction", "database", ".", "begin", "(", ")", ";", "/", "/", "Create", "a", "new", "record", "ODocument", "record", "=", "new", "ODocument", "(", "\"", "Test", "\"", ")", ";", "record", ".", "field", "(", "\"", "name", "\"", ",", "\"", "new", "record", "\"", ")", ";", "record", ".", "save", "(", ")", ";", "/", "/", "Commit", "the", "transaction", "database", ".", "commit", "(", ")", ";", "/", "/", "Query", "the", "record", "to", "ensure", "it", "was", "created", "and", "check", "the", "update", "try", "(", "OResultSet", "resultSet", "=", "database", ".", "query", "(", "\"", "select", "from", "Test", "where", "name", "=", "?", "\"", ",", "\"", "new", "record", "\"", ")", ")", "{", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "OResult", "result", "=", "resultSet", ".", "next", "(", ")", ";", "assertEquals", "(", "\"", "new", "record", "\"", ",", "result", ".", "getProperty", "(", "\"", "name", "\"", ")", ")", ";", "}", "/", "/", "Update", "the", "record", "within", "a", "new", "transaction", "database", ".", "begin", "(", ")", ";", "try", "(", "OResultSet", "resultSet", "=", "database", ".", "command", "(", "\"", "update", "Test", "set", "name", "=", "?", "where", "name", "=", "?", "\"", ",", "\"", "updated", "record", "\"", ",", "\"", "new", "record", "\"", ")", ")", "{", "assertEquals", "(", "1", ",", "resultSet", ".", "next", "(", ")", ".", "getProperty", "(", "\"", "count", "\"", ")", ")", ";", "}", "database", ".", "commit", "(", ")", ";", "/", "/", "Verify", "the", "update", "try", "(", "OResultSet", "resultSet", "=", "database", ".", "query", "(", "\"", "select", "from", "Test", "where", "name", "=", "?", "\"", ",", "\"", "updated", "record", "\"", ")", ")", "{", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "OResult", "result", "=", "resultSet", ".", "next", "(", ")", ";", "assertEquals", "(", "\"", "updated", "record", "\"", ",", "result", ".", "getProperty", "(", "\"", "name", "\"", ")", ")", ";", "}", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7766, 315, 262, 274, 997, 263, 652, 261, 315, 508, 315, 269, 315, 2172, 315, 262, 274, 997, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 13198, 12168, 273, 2063, 263, 843, 261, 315, 9111, 628, 7766, 1625, 508, 273, 296, 2172, 296, 315, 262, 274, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 531, 2519, 12807, 1759, 273, 12168, 263, 1024, 261, 262, 263, 336, 6475, 261, 262, 263, 16021, 261, 446, 262, 274, 25395, 261, 12807, 1759, 262, 274, 12807, 1759, 263, 652, 261, 315, 508, 315, 269, 315, 3526, 315, 262, 274, 12807, 1759, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 12168, 273, 2063, 263, 843, 261, 315, 9111, 628, 7766, 1625, 508, 273, 296, 3526, 296, 315, 262, 274, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.5026509165763855, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "Test", "\"", ")", ";", "doc", ".", "field", "(", "\"", "name", "\"", ",", "\"", "initial", "\"", ")", ";", "doc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "database", ".", "begin", "(", ")", ";", "OResultSet", "resultSet", "=", "database", ".", "query", "(", "\"", "SELECT", "from", "Test", "where", "name", "=", "'", "initial", "'", "\"", ")", ";", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "ODocument", "fetchedDoc", "=", "resultSet", ".", "next", "(", ")", ".", "getVertex", "(", ")", ".", "orElse", "(", "null", ")", ";", "assertNotNull", "(", "fetchedDoc", ")", ";", "fetchedDoc", ".", "field", "(", "\"", "name", "\"", ",", "\"", "updated", "\"", ")", ";", "fetchedDoc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "resultSet", "=", "database", ".", "query", "(", "\"", "SELECT", "from", "Test", "where", "name", "=", "'", "updated", "'", "\"", ")", ";", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 261, 262, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 460, 21, 315, 262, 274, 997, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 775, 261, 531, 13198, 3597, 273, 2063, 263, 843, 261, 315, 2027, 628, 7128, 1625, 7128, 273, 296, 460, 21, 296, 315, 262, 262, 288, 1815, 5510, 261, 3597, 263, 4564, 261, 262, 262, 274, 531, 1253, 761, 273, 3597, 263, 1024, 261, 262, 274, 1815, 8867, 261, 315, 460, 21, 315, 269, 761, 263, 3911, 261, 315, 7128, 315, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 460, 22, 315, 262, 274, 997, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 289, 775, 261, 531, 13198, 3597, 273, 2063, 263, 843, 261, 315, 2027, 628, 7128, 1625, 7128, 273, 296, 460, 22, 296, 315, 262, 262, 288, 1815, 5510, 261, 3597, 263, 4564, 261, 262, 262, 274, 531, 1253, 761, 273, 3597, 263, 1024, 261, 262, 274, 1815, 8867, 261, 315, 460, 22, 315, 269, 761, 263, 3911, 261, 315, 7128, 315, 262, 262, 274, 289, 289, 2], "score": -0.5091025233268738, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTx", "(", ")", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "value1", "\"", ")", ";", "doc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "try", "(", "OResultSet", "rs", "=", "database", ".", "query", "(", "\"", "select", "from", "STR", "where", "STR", "=", "'", "value1", "'", "\"", ")", ")", "{", "assertTrue", "(", "rs", ".", "hasNext", "(", ")", ")", ";", "OResult", "item", "=", "rs", ".", "next", "(", ")", ";", "assertEquals", "(", "\"", "value1", "\"", ",", "item", ".", "getProperty", "(", "\"", "STR", "\"", ")", ")", ";", "database", ".", "begin", "(", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "value2", "\"", ")", ";", "doc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "}", "try", "(", "OResultSet", "rs", "=", "database", ".", "query", "(", "\"", "select", "from", "STR", "where", "STR", "=", "'", "value2", "'", "\"", ")", ")", "{", "assertTrue", "(", "rs", ".", "hasNext", "(", ")", ")", ";", "OResult", "item", "=", "rs", ".", "next", "(", ")", ";", "assertEquals", "(", "\"", "value2", "\"", ",", "item", ".", "getProperty", "(", "\"", "STR", "\"", ")", ")", ";", "}", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1410, 1685, 4254, 261, 262, 288, 25395, 261, 2063, 262, 274, 289, 2], "score": -0.5186693072319031, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "shouldStartDatabase", "(", ")", "{", "assertNotNull", "(", "database", ")", ";", "}", "</s>"]}, {"tids": [1, 1788, 279, 3296, 1409, 471, 1089, 518, 3470, 279, 2492, 263, 2], "score": -0.5282163023948669, "weight": 1, "toks": ["<s>", "Create", "a", "sample", "record", "and", "update", "it", "within", "a", "transaction", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 460, 315, 262, 274, 997, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 775, 261, 531, 13198, 12168, 273, 2063, 263, 843, 261, 315, 9111, 4571, 7128, 4852, 7128, 273, 296, 460, 296, 315, 262, 262, 288, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 531, 2519, 563, 273, 12168, 263, 1024, 261, 262, 263, 358, 1046, 261, 262, 274, 1815, 8867, 261, 315, 460, 315, 269, 563, 263, 652, 261, 315, 7128, 315, 262, 262, 274, 289, 289, 2], "score": -0.5516980290412903, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "value", "\"", ")", ";", "doc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "try", "(", "OResultSet", "resultSet", "=", "database", ".", "query", "(", "\"", "SELECT", "FROM", "STR", "WHERE", "STR", "=", "'", "value", "'", "\"", ")", ")", "{", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "ODocument", "result", "=", "resultSet", ".", "next", "(", ")", ".", "toElement", "(", ")", ";", "assertEquals", "(", "\"", "value", "\"", ",", "result", ".", "field", "(", "\"", "STR", "\"", ")", ")", ";", "}", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 288, 342, 342, 3603, 279, 2492, 2063, 263, 2376, 261, 262, 274, 342, 342, 1788, 392, 1241, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 460, 21, 315, 262, 274, 997, 263, 1923, 261, 262, 274, 342, 342, 2770, 471, 1089, 326, 2522, 1241, 3470, 326, 1967, 2492, 531, 13198, 12168, 273, 2063, 263, 843, 261, 315, 9111, 4571, 7128, 4852, 7128, 273, 296, 460, 21, 296, 315, 262, 274, 309, 261, 12168, 263, 4564, 261, 262, 262, 288, 531, 2519, 997, 21267, 273, 12168, 263, 1024, 261, 262, 263, 358, 1046, 261, 262, 274, 997, 21267, 263, 652, 261, 315, 7128, 315, 269, 315, 460, 22, 315, 262, 274, 997, 21267, 263, 1923, 261, 262, 274, 289, 12168, 263, 1746, 261, 262, 274, 342, 342, 10269, 2492, 2063, 263, 3294, 261, 262, 274, 342, 342, 8553, 326, 1089, 531, 13198, 11805, 1253, 273, 2063, 263, 843, 261, 315, 9111, 4571, 7128, 4852, 7128, 273, 296, 460, 22, 296, 315, 262, 274, 1815, 5510, 261, 11805, 1253, 263, 4564, 261, 262, 262, 274, 11805, 1253, 263, 1746, 261, 262, 274, 289, 2], "score": -0.5516980886459351, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "{", "/", "/", "Start", "a", "transaction", "database", ".", "begin", "(", ")", ";", "/", "/", "Create", "an", "entry", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "value1", "\"", ")", ";", "doc", ".", "save", "(", ")", ";", "/", "/", "Query", "and", "update", "the", "created", "entry", "within", "the", "same", "transaction", "OResultSet", "resultSet", "=", "database", ".", "query", "(", "\"", "SELECT", "FROM", "STR", "WHERE", "STR", "=", "'", "value1", "'", "\"", ")", ";", "if", "(", "resultSet", ".", "hasNext", "(", ")", ")", "{", "ODocument", "docToUpdate", "=", "resultSet", ".", "next", "(", ")", ".", "toElement", "(", ")", ";", "docToUpdate", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "value2", "\"", ")", ";", "docToUpdate", ".", "save", "(", ")", ";", "}", "resultSet", ".", "close", "(", ")", ";", "/", "/", "Commit", "transaction", "database", ".", "commit", "(", ")", ";", "/", "/", "Verify", "the", "update", "OResultSet", "verificationResult", "=", "database", ".", "query", "(", "\"", "SELECT", "FROM", "STR", "WHERE", "STR", "=", "'", "value2", "'", "\"", ")", ";", "assertTrue", "(", "verificationResult", ".", "hasNext", "(", ")", ")", ";", "verificationResult", ".", "close", "(", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 19.729406277958837, "bleu-max": 28.606242122742575, "bleu-min": 15.22930738810392, "bleu-avg": 20.018198458444772, "code-bleu": 18.59020147422515, "code-bleu-max": 19.65074535479063, "code-bleu-min": 2.8271333840742834, "code-bleu-avg": 14.887612854373469, "edit-sim": 25, "edit-sim-max": 35, "edit-sim-min": 24, "edit-sim-avg": 28.0, "rouge-p": 33.33333333333333, "rouge-p-max": 37.5, "rouge-p-min": 20.0, "rouge-p-avg": 31.5, "rouge-r": 60.0, "rouge-r-max": 60.0, "rouge-r-min": 20.0, "rouge-r-avg": 56.0, "rouge-f": 42.85714239795918, "rouge-f-max": 46.153845680473374, "rouge-f-min": 19.999999500000015, "rouge-f-avg": 40.087911627704656, "num-seq": 10}, "time": 0.8139421939849854, "misc": {}}
{"id": 90, "data_id": "csn-97962", "input_stids": [1, 32315, 531, 4254, 411, 399, 405, 2376, 261, 262, 274, 32315, 6304, 3342, 6289, 4709, 32315, 531, 13198, 32315, 11263, 261, 262, 263, 15674, 261, 262, 263, 444, 7736, 1343, 261, 1947, 263, 353, 3727, 1343, 261, 262, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 2], "topk": [{"tids": [1, 2063, 263, 18416, 261, 262, 274, 2], "score": -0.4040209949016571, "weight": 1, "toks": ["<s>", "database", ".", "beginTransaction", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.42993035912513733, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 2376, 261, 262, 274, 2], "score": -0.4318488836288452, "weight": 1, "toks": ["<s>", "database", ".", "begin", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 2376, 261, 262, 274, 2], "score": -0.4567350447177887, "weight": 1, "toks": ["<s>", "database", ".", "begin", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.4610573351383209, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 2376, 261, 262, 274, 2], "score": -0.4619706869125366, "weight": 1, "toks": ["<s>", "database", ".", "begin", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 2376, 261, 262, 274, 2], "score": -0.4720386564731598, "weight": 1, "toks": ["<s>", "database", ".", "begin", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 2376, 261, 262, 274, 2], "score": -0.4781200885772705, "weight": 1, "toks": ["<s>", "database", ".", "begin", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 288, 2063, 263, 2376, 261, 262, 274, 289, 2], "score": -0.4791472256183624, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "{", "database", ".", "begin", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.48466360569000244, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 35.93041119630843, "bleu-max": 40.56497243308253, "bleu-min": 14.209029452944888, "bleu-avg": 27.35391756077637, "code-bleu": 35.807683796948965, "code-bleu-max": 45.262003342571035, "code-bleu-min": 9.84733918163565, "code-bleu-avg": 30.250185722059125, "edit-sim": 52, "edit-sim-max": 56, "edit-sim-min": 35, "edit-sim-avg": 47.1, "rouge-p": 55.55555555555556, "rouge-p-max": 62.5, "rouge-p-min": 45.45454545454545, "rouge-p-avg": 55.68434343434343, "rouge-r": 62.5, "rouge-r-max": 62.5, "rouge-r-min": 37.5, "rouge-r-avg": 60.0, "rouge-f": 58.82352891349482, "rouge-f-max": 62.4999995, "rouge-f-min": 46.153845680473374, "rouge-f-avg": 57.30501260347709, "num-seq": 10}, "time": 0.7726438045501709, "misc": {}}
{"id": 91, "data_id": "csn-97962", "input_stids": [1, 32315, 1071, 531, 2519, 261, 727, 514, 277, 3834, 262, 288, 3875, 261, 262, 274, 444, 3834, 261, 277, 3834, 262, 274, 289, 32315, 6304, 3342, 6289, 4709, 531, 2519, 32315, 531, 13198, 32315, 2633, 263, 679, 921, 261, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.09317249804735184, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.19876235723495483, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 289, 2], "score": -0.21490126848220825, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc1", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2519, 9906, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 289, 2], "score": -0.24810650944709778, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testDocumentCreation", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 1436, 471, 1842, 9702, 279, 1668, 316, 279, 2492, 263, 2], "score": -0.3321918547153473, "weight": 1, "toks": ["<s>", "Add", "and", "test", "updating", "a", "document", "in", "a", "transaction", ".", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.35008227825164795, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 2], "score": -0.3918476104736328, "weight": 1, "toks": ["<s>", "database", ".", "begin", "(", ")", ";", "ODocument", "doc1", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 997, 21, 263, 444, 3834, 261, 315, 1166, 3834, 315, 262, 274, 2], "score": -0.3926246166229248, "weight": 1, "toks": ["<s>", "doc1", ".", "setClassName", "(", "\"", "NewClassName", "\"", ")", ";", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 531, 2519, 1375, 3885, 707, 716, 1678, 326, 667, 508, 269, 1045, 279, 4143, 2836, 1842, 716, 20761, 2856, 326, 733, 353, 2522, 598, 326, 3434, 667, 508, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1212, 504, 650, 6293, 2785, 3834, 261, 262, 288, 514, 2665, 3834, 273, 315, 7766, 797, 315, 274, 531, 2519, 1668, 273, 394, 531, 2519, 261, 2665, 3834, 262, 274, 1815, 8867, 261, 2665, 3834, 269, 1668, 263, 11819, 261, 262, 269, 315, 531, 2519, 3885, 1410, 444, 667, 508, 8783, 315, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3945545256137848, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "ODocument", "`", "constructor", "method", "that", "sets", "the", "class", "name", ",", "write", "a", "simple", "unit", "test", "that", "verifies", "whether", "the", "object", "is", "created", "with", "the", "correct", "class", "name", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testODocumentConstructorSetsClassName", "(", ")", "{", "String", "expectedClassName", "=", "\"", "TestClass", "\"", ";", "ODocument", "document", "=", "new", "ODocument", "(", "expectedClassName", ")", ";", "assertEquals", "(", "expectedClassName", ",", "document", ".", "getClassName", "(", ")", ",", "\"", "ODocument", "constructor", "should", "set", "class", "name", "correctly", "\"", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 2063, 263, 1923, 261, 997, 21, 262, 274, 2063, 263, 3294, 261, 262, 274, 289, 2], "score": -0.41404372453689575, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc1", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "database", ".", "save", "(", "doc1", ")", ";", "database", ".", "commit", "(", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 28.981391462999422, "bleu-max": 70.49141756270427, "bleu-min": 28.981391462999422, "bleu-avg": 56.82886189089682, "code-bleu": 9.40932795385985, "code-bleu-max": 77.37552424018409, "code-bleu-min": 9.40932795385985, "code-bleu-avg": 54.13000571915516, "edit-sim": 52, "edit-sim-max": 96, "edit-sim-min": 52, "edit-sim-avg": 74.8, "rouge-p": 50.0, "rouge-p-max": 85.71428571428571, "rouge-p-min": 50.0, "rouge-p-avg": 79.76190476190474, "rouge-r": 57.14285714285714, "rouge-r-max": 85.71428571428571, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 81.42857142857142, "rouge-f": 53.33333283555556, "rouge-f-max": 85.71428521428571, "rouge-f-min": 53.33333283555556, "rouge-f-avg": 80.454211955175, "num-seq": 10}, "time": 0.7628531455993652, "misc": {}}
{"id": 92, "data_id": "csn-97962", "input_stids": [1, 32315, 1071, 918, 7486, 261, 727, 514, 277, 7287, 269, 1033, 277, 16107, 262, 288, 309, 261, 277, 16107, 1276, 531, 1046, 597, 401, 261, 261, 531, 1046, 262, 277, 16107, 262, 263, 11088, 559, 261, 262, 263, 12469, 261, 262, 597, 401, 261, 261, 531, 1046, 262, 277, 16107, 262, 263, 20066, 261, 262, 263, 4908, 261, 262, 262, 288, 7486, 261, 277, 7287, 269, 277, 16107, 269, 531, 559, 263, 7141, 22235, 7660, 262, 274, 289, 469, 288, 7486, 261, 277, 7287, 269, 277, 16107, 269, 531, 6517, 9661, 263, 8984, 67, 10564, 67, 8552, 262, 274, 289, 289, 32315, 6304, 3342, 6289, 4709, 531, 2519, 32315, 531, 13198, 32315, 997, 263, 7486, 261, 315, 3902, 6, 269, 2063, 263, 1723, 261, 262, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 21, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 997, 263, 7486, 261, 315, 7128, 315, 269, 315, 1166, 1445, 315, 262, 274, 2], "score": -0.057181403040885925, "weight": 1, "toks": ["<s>", "doc", ".", "setProperty", "(", "\"", "STR", "\"", ",", "\"", "New", "Value", "\"", ")", ";", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 7486, 1375, 707, 316, 1375, 531, 2519, 1375, 269, 279, 4143, 1842, 358, 866, 2097, 6885, 1347, 3637, 279, 1375, 514, 1375, 1272, 1410, 272, 3809, 1812, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 780, 1396, 261, 262, 288, 531, 2519, 1668, 273, 394, 531, 2519, 261, 262, 274, 1668, 263, 7486, 261, 315, 4289, 315, 269, 315, 19721, 315, 262, 274, 1815, 8867, 261, 315, 19721, 315, 269, 1668, 263, 652, 261, 315, 4289, 315, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.09823794662952423, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "setProperty", "`", "method", "in", "`", "ODocument", "`", ",", "a", "simple", "test", "to", "check", "its", "behavior", "when", "setting", "a", "`", "String", "`", "property", "should", "suffice", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetStringProperty", "(", ")", "{", "ODocument", "document", "=", "new", "ODocument", "(", ")", ";", "document", ".", "setProperty", "(", "\"", "fieldName", "\"", ",", "\"", "stringValue", "\"", ")", ";", "assertEquals", "(", "\"", "stringValue", "\"", ",", "document", ".", "field", "(", "\"", "fieldName", "\"", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 997, 21, 263, 1923, 261, 262, 274, 2], "score": -0.3516295254230499, "weight": 1, "toks": ["<s>", "doc1", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 997, 21, 263, 7486, 261, 315, 7128, 315, 269, 315, 32298, 67, 4051, 315, 262, 274, 2], "score": -0.35498863458633423, "weight": 1, "toks": ["<s>", "doc1", ".", "setProperty", "(", "\"", "STR", "\"", ",", "\"", "NEW_VALUE", "\"", ")", ";", "</s>"]}, {"tids": [1, 1375, 997, 263, 7486, 261, 315, 508, 315, 269, 315, 3454, 315, 262, 274, 1375, 2], "score": -0.41372591257095337, "weight": 1, "toks": ["<s>", "`", "doc", ".", "setProperty", "(", "\"", "name", "\"", ",", "\"", "example", "\"", ")", ";", "`", "</s>"]}, {"tids": [1, 997, 21, 263, 1923, 261, 262, 274, 2], "score": -0.4146786332130432, "weight": 1, "toks": ["<s>", "doc1", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 997, 263, 7486, 261, 315, 4289, 315, 269, 394, 531, 1046, 261, 262, 262, 274, 2], "score": -0.4295305609703064, "weight": 1, "toks": ["<s>", "doc", ".", "setProperty", "(", "\"", "fieldName", "\"", ",", "new", "OElement", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1375, 997, 21, 263, 1923, 261, 262, 274, 1375, 2], "score": -0.43409138917922974, "weight": 1, "toks": ["<s>", "`", "doc1", ".", "save", "(", ")", ";", "`", "</s>"]}, {"tids": [1, 997, 21, 263, 1923, 261, 262, 274, 2], "score": -0.46689099073410034, "weight": 1, "toks": ["<s>", "doc1", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 1000, 326, 1272, 434, 279, 1668, 791, 4982, 279, 2492, 263, 2], "score": -0.46790891885757446, "weight": 1, "toks": ["<s>", "Set", "the", "property", "of", "a", "document", "instance", "during", "a", "transaction", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 18.337887025749254, "bleu-max": 19.389954773246817, "bleu-min": 9.754226655135787, "bleu-avg": 16.63107764514961, "code-bleu": 15.176060583118705, "code-bleu-max": 27.220789198795735, "code-bleu-min": 2.079969987765294, "code-bleu-avg": 7.634298033385131, "edit-sim": 44, "edit-sim-max": 54, "edit-sim-min": 27, "edit-sim-avg": 37.6, "rouge-p": 50.0, "rouge-p-max": 57.14285714285714, "rouge-p-min": 36.36363636363637, "rouge-p-avg": 47.23953823953824, "rouge-r": 44.44444444444444, "rouge-r-max": 55.55555555555556, "rouge-r-min": 44.44444444444444, "rouge-r-avg": 45.55555555555556, "rouge-f": 47.05882303114187, "rouge-f-max": 55.55555505555557, "rouge-f-min": 39.999999505, "rouge-f-avg": 46.21706176544068, "num-seq": 10}, "time": 1.1834888458251953, "misc": {}}
{"id": 93, "data_id": "csn-97962", "input_stids": [1, 32315, 411, 32305, 3231, 399, 405, 32305, 1923, 261, 399, 277, 921, 262, 274, 32315, 6304, 3342, 6289, 4709, 531, 2519, 531, 6106, 8424, 32315, 531, 13198, 32315, 997, 263, 7486, 261, 315, 3902, 6, 269, 2658, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 21, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 2], "topk": [{"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.08836302161216736, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 2974, 1161, 266, 76, 773, 4492, 5956, 326, 1375, 1923, 1375, 707, 316, 279, 2492, 819, 269, 11247, 598, 3294, 1787, 326, 2492, 471, 3929, 310, 326, 9756, 434, 3478, 294, 1375, 1375, 1375, 2252, 2063, 263, 3294, 261, 262, 274, 1815, 5510, 261, 2063, 263, 1704, 261, 612, 263, 20066, 261, 262, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.31960582733154297, "weight": 1, "toks": ["<s>", "To", "comprehensively", "evaluate", "the", "`", "save", "`", "method", "in", "a", "transaction", "context", ",", "proceed", "with", "committing", "the", "transaction", "and", "verifying", "the", "persistence", "of", "changes", ":", "`", "`", "`", "java", "database", ".", "commit", "(", ")", ";", "assertTrue", "(", "database", ".", "exists", "(", "id", ".", "getIdentity", "(", ")", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 4755, 1305, 261, 262, 288, 2063, 263, 1923, 261, 997, 21, 262, 274, 289, 2], "score": -0.3210977017879486, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSaveMethod", "(", ")", "{", "database", ".", "save", "(", "doc1", ")", ";", "}", "</s>"]}, {"tids": [1, 1788, 279, 394, 531, 2519, 269, 6490, 518, 598, 279, 1272, 269, 471, 1923, 518, 358, 326, 2063, 3470, 279, 2492, 263, 2], "score": -0.42448294162750244, "weight": 1, "toks": ["<s>", "Create", "a", "new", "ODocument", ",", "populate", "it", "with", "a", "property", ",", "and", "save", "it", "to", "the", "database", "within", "a", "transaction", ".", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.4263969659805298, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 2672, 1375, 2063, 263, 3294, 261, 262, 274, 1375, 263, 2], "score": -0.4665507376194, "weight": 1, "toks": ["<s>", "Use", "`", "database", ".", "commit", "(", ")", ";", "`", ".", "</s>"]}, {"tids": [1, 997, 21, 263, 7486, 261, 315, 7128, 315, 269, 315, 460, 315, 262, 274, 2], "score": -0.4742840528488159, "weight": 1, "toks": ["<s>", "doc1", ".", "setProperty", "(", "\"", "STR", "\"", ",", "\"", "value", "\"", ")", ";", "</s>"]}, {"tids": [1, 2672, 1375, 612, 263, 20066, 261, 262, 1375, 358, 1954, 326, 5198, 1668, 263, 2], "score": -0.48644623160362244, "weight": 1, "toks": ["<s>", "Use", "`", "id", ".", "getIdentity", "(", ")", "`", "to", "validate", "the", "saved", "document", ".", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.4964908957481384, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 14373, 326, 1375, 3294, 1375, 707, 603, 326, 2063, 358, 3387, 326, 3478, 7165, 316, 326, 2492, 854, 5198, 263, 2], "score": -0.5143986940383911, "weight": 1, "toks": ["<s>", "Invoke", "the", "`", "commit", "`", "method", "on", "the", "database", "to", "ensure", "the", "changes", "made", "in", "the", "transaction", "are", "saved", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 78.01157731069053, "bleu-max": 78.01157731069053, "bleu-min": 17.542198478193427, "bleu-avg": 27.312799508595702, "code-bleu": 87.70908552479399, "code-bleu-max": 87.70908552479399, "code-bleu-min": 6.747080609733655, "code-bleu-avg": 28.403893370726944, "edit-sim": 98, "edit-sim-max": 98, "edit-sim-min": 42, "edit-sim-avg": 54.2, "rouge-p": 87.5, "rouge-p-max": 87.5, "rouge-p-min": 44.44444444444444, "rouge-p-avg": 52.77741702741703, "rouge-r": 87.5, "rouge-r-max": 87.5, "rouge-r-min": 50.0, "rouge-r-avg": 60.0, "rouge-f": 87.4999995, "rouge-f-max": 87.4999995, "rouge-f-min": 47.05882303114187, "rouge-f-avg": 55.916838169488315, "num-seq": 10}, "time": 0.9905359745025635, "misc": {}}
{"id": 94, "data_id": "csn-97962", "input_stids": [1, 32315, 1071, 531, 2519, 261, 727, 514, 277, 3834, 262, 288, 3875, 261, 262, 274, 444, 3834, 261, 277, 3834, 262, 274, 289, 32315, 6304, 3342, 6289, 4709, 531, 2519, 531, 6106, 8424, 531, 2519, 32315, 531, 13198, 32315, 727, 1033, 460, 21, 273, 997, 21, 263, 652, 261, 1057, 18236, 263, 3579, 261, 262, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 21, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 531, 2519, 997, 92, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 14323, 279, 2492, 269, 752, 471, 1923, 279, 1668, 269, 1508, 866, 2097, 15782, 263, 2], "score": -0.016175368800759315, "weight": 1, "toks": ["<s>", "Begin", "a", "transaction", ",", "create", "and", "save", "a", "document", ",", "then", "check", "its", "existence", ".", "</s>"]}, {"tids": [1, 7766, 326, 1375, 531, 2519, 1375, 3885, 716, 8104, 279, 667, 508, 635, 3929, 310, 518, 22698, 326, 667, 508, 8783, 263, 2], "score": -0.33059942722320557, "weight": 1, "toks": ["<s>", "Test", "the", "`", "ODocument", "`", "constructor", "that", "accepts", "a", "class", "name", "by", "verifying", "it", "assigns", "the", "class", "name", "correctly", ".", "</s>"]}, {"tids": [1, 26492, 326, 1375, 531, 2519, 1375, 667, 471, 444, 279, 1272, 263, 2], "score": -0.36239317059516907, "weight": 1, "toks": ["<s>", "Instantiate", "the", "`", "ODocument", "`", "class", "and", "set", "a", "property", ".", "</s>"]}, {"tids": [1, 14291, 279, 16745, 1842, 358, 3929, 326, 6710, 434, 279, 1668, 316, 279, 2492, 471, 2097, 10815, 5337, 855, 1674, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 2519, 9906, 382, 3342, 261, 262, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7766, 797, 315, 262, 274, 997, 263, 7486, 261, 315, 508, 315, 269, 315, 1842, 461, 315, 262, 274, 2063, 263, 1923, 261, 997, 262, 274, 2063, 263, 3294, 261, 262, 274, 25395, 261, 997, 263, 20066, 261, 262, 262, 274, 1815, 8867, 261, 315, 1842, 461, 315, 269, 997, 263, 652, 261, 315, 508, 315, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3818070590496063, "weight": 1, "toks": ["<s>", "Construct", "a", "minimal", "test", "to", "verify", "the", "creation", "of", "a", "document", "in", "a", "transaction", "and", "its", "subsequent", "basic", "read", "operation", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testDocumentCreationInTransaction", "(", ")", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "TestClass", "\"", ")", ";", "doc", ".", "setProperty", "(", "\"", "name", "\"", ",", "\"", "testName", "\"", ")", ";", "database", ".", "save", "(", "doc", ")", ";", "database", ".", "commit", "(", ")", ";", "assertNotNull", "(", "doc", ".", "getIdentity", "(", ")", ")", ";", "assertEquals", "(", "\"", "testName", "\"", ",", "doc", ".", "field", "(", "\"", "name", "\"", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 997, 92, 263, 7486, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 1375, 1375, 1375, 2], "score": -0.40706905722618103, "weight": 1, "toks": ["<s>", "`", "`", "`", "docx", ".", "setProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.41258859634399414, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 20482, 294, 14312, 1846, 927, 297, 1164, 3433, 590, 578, 16499, 3433, 3021, 269, 9582, 692, 2], "score": -0.4539230167865753, "weight": 1, "toks": ["<s>", "@", "simplified", ":", "Could", "you", "clarify", "your", "request", "or", "simplify", "your", "statement", ",", "please", "?", "</s>"]}, {"tids": [1, 14373, 326, 2063, 263, 3294, 261, 262, 316, 326, 1842, 1138, 1891, 6119, 382, 4188, 3342, 707, 263, 2], "score": -0.45956355333328247, "weight": 1, "toks": ["<s>", "Invoke", "the", "database", ".", "commit", "(", ")", "in", "the", "testQueryUpdateCreatedInTxTransaction", "method", ".", "</s>"]}, {"tids": [1, 1436, 279, 1272, 358, 1375, 997, 92, 1375, 269, 1923, 518, 269, 471, 3294, 326, 2492, 263, 2], "score": -0.46514692902565, "weight": 1, "toks": ["<s>", "Add", "a", "property", "to", "`", "docx", "`", ",", "save", "it", ",", "and", "commit", "the", "transaction", ".", "</s>"]}, {"tids": [1, 2672, 326, 2063, 1339, 358, 1089, 326, 1668, 1375, 997, 92, 1375, 471, 3294, 326, 2492, 3470, 326, 1842, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 288, 342, 342, 14323, 2492, 2063, 263, 2376, 261, 262, 274, 342, 342, 1788, 471, 1923, 279, 1668, 269, 997, 21, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 19811, 315, 262, 274, 997, 21, 263, 7486, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 342, 342, 1788, 4042, 1668, 269, 997, 92, 531, 2519, 997, 92, 273, 394, 531, 2519, 261, 315, 19811, 315, 262, 274, 997, 92, 263, 7486, 261, 315, 498, 315, 269, 315, 394, 460, 315, 262, 274, 342, 342, 7074, 997, 92, 358, 2063, 2063, 263, 1923, 261, 997, 92, 262, 274, 342, 342, 10269, 326, 2492, 2063, 263, 3294, 261, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.508215606212616, "weight": 1, "toks": ["<s>", "Use", "the", "database", "session", "to", "update", "the", "document", "`", "docx", "`", "and", "commit", "the", "transaction", "within", "the", "test", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "{", "/", "/", "Begin", "transaction", "database", ".", "begin", "(", ")", ";", "/", "/", "Create", "and", "save", "a", "document", ",", "doc1", "ODocument", "doc1", "=", "new", "ODocument", "(", "\"", "ClassName", "\"", ")", ";", "doc1", ".", "setProperty", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "OIdentifiable", "id", "=", "database", ".", "save", "(", "doc1", ")", ";", "/", "/", "Create", "another", "document", ",", "docx", "ODocument", "docx", "=", "new", "ODocument", "(", "\"", "ClassName", "\"", ")", ";", "docx", ".", "setProperty", "(", "\"", "key", "\"", ",", "\"", "new", "value", "\"", ")", ";", "/", "/", "Save", "docx", "to", "database", "database", ".", "save", "(", "docx", ")", ";", "/", "/", "Commit", "the", "transaction", "database", ".", "commit", "(", ")", ";", "}", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 28.981391462999422, "bleu-avg": 76.08347445054235, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 9.40932795385985, "code-bleu-avg": 65.85865489620087, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 52, "edit-sim-avg": 90.7, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 83.4920634920635, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 89.99999999999999, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 53.33333283555556, "rouge-f-avg": 86.46428521595585, "num-seq": 10}, "time": 0.6216223239898682, "misc": {}}
{"id": 95, "data_id": "csn-97962", "input_stids": [1, 32315, 1071, 918, 7486, 261, 727, 514, 277, 7287, 269, 1033, 277, 16107, 262, 288, 309, 261, 277, 16107, 1276, 531, 1046, 597, 401, 261, 261, 531, 1046, 262, 277, 16107, 262, 263, 11088, 559, 261, 262, 263, 12469, 261, 262, 597, 401, 261, 261, 531, 1046, 262, 277, 16107, 262, 263, 20066, 261, 262, 263, 4908, 261, 262, 262, 288, 7486, 261, 277, 7287, 269, 277, 16107, 269, 531, 559, 263, 7141, 22235, 7660, 262, 274, 289, 469, 288, 7486, 261, 277, 7287, 269, 277, 16107, 269, 531, 6517, 9661, 263, 8984, 67, 10564, 67, 8552, 262, 274, 289, 289, 32315, 6304, 3342, 6289, 4709, 531, 2519, 531, 6106, 8424, 531, 2519, 32315, 531, 13198, 32315, 2063, 263, 1696, 261, 315, 3902, 6, 269, 2063, 3004, 263, 17397, 261, 262, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 21, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 531, 2519, 997, 92, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 92, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 14373, 1375, 2063, 263, 1923, 261, 997, 92, 262, 274, 1375, 316, 326, 1375, 1842, 1138, 1891, 6119, 382, 4188, 3342, 1375, 707, 358, 1842, 12392, 326, 394, 1668, 358, 326, 2063, 3470, 326, 2492, 263, 2], "score": -0.11562339216470718, "weight": 1, "toks": ["<s>", "Invoke", "`", "database", ".", "save", "(", "docx", ")", ";", "`", "in", "the", "`", "testQueryUpdateCreatedInTxTransaction", "`", "method", "to", "test", "saving", "the", "new", "document", "to", "the", "database", "within", "the", "transaction", ".", "</s>"]}, {"tids": [1, 1375, 2063, 263, 3294, 261, 262, 274, 1375, 2], "score": -0.13930147886276245, "weight": 1, "toks": ["<s>", "`", "database", ".", "commit", "(", ")", ";", "`", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.14492999017238617, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 8553, 326, 2492, 1089, 471, 843, 326, 1668, 3470, 326, 1967, 2492, 263, 2], "score": -0.22194376587867737, "weight": 1, "toks": ["<s>", "Verify", "the", "transaction", "update", "and", "query", "the", "document", "within", "the", "same", "transaction", ".", "</s>"]}, {"tids": [1, 1788, 279, 1842, 716, 20996, 2856, 392, 1375, 531, 2519, 1375, 791, 353, 8214, 3526, 3470, 279, 2492, 263, 2], "score": -0.2261199802160263, "weight": 1, "toks": ["<s>", "Create", "a", "test", "that", "evaluates", "whether", "an", "`", "ODocument", "`", "instance", "is", "properly", "updated", "within", "a", "transaction", ".", "</s>"]}, {"tids": [1, 2974, 5213, 1230, 1842, 326, 1375, 7486, 1375, 707, 316, 25155, 269, 1846, 1410, 276, 5015, 279, 1842, 716, 20761, 3937, 11483, 261, 11139, 2953, 262, 3470, 326, 707, 263, 13743, 296, 272, 326, 9330, 395, 4031, 358, 1842, 326, 4636, 3470, 326, 1375, 7486, 1375, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 1396, 1190, 1046, 261, 262, 288, 531, 2519, 1668, 273, 5416, 261, 531, 2519, 263, 667, 262, 274, 531, 1046, 930, 273, 5416, 261, 531, 1046, 263, 667, 262, 274, 531, 3078, 559, 1963, 559, 273, 5416, 261, 531, 3078, 559, 263, 667, 262, 274, 4869, 734, 10911, 273, 5416, 261, 4869, 734, 263, 667, 262, 274, 342, 342, 10939, 15895, 358, 327, 6049, 924, 1347, 261, 930, 263, 11088, 559, 261, 262, 262, 263, 1508, 990, 261, 4055, 263, 434, 261, 1963, 559, 262, 262, 274, 1347, 261, 930, 263, 20066, 261, 262, 262, 263, 1508, 990, 261, 10911, 262, 274, 1347, 261, 10911, 263, 4908, 261, 262, 262, 263, 1508, 990, 261, 629, 262, 274, 342, 342, 7903, 326, 707, 598, 279, 2923, 3803, 2269, 1668, 263, 7486, 261, 315, 4289, 315, 269, 930, 262, 274, 342, 342, 8553, 716, 7486, 1703, 2566, 598, 531, 559, 263, 7141, 22235, 7660, 3929, 261, 1668, 262, 263, 7486, 261, 315, 4289, 315, 269, 930, 269, 531, 559, 263, 7141, 22235, 7660, 262, 274, 289, 1375, 1375, 1375, 1220, 2836, 1842, 13041, 716, 326, 1375, 531, 2519, 1375, 667, 471, 3746, 3318, 261, 1375, 531, 1046, 1375, 269, 1375, 531, 3078, 559, 1375, 269, 471, 1375, 4869, 734, 1375, 262, 854, 1087, 434, 392, 17441, 578, 2063, 13581, 3018, 1625, 5416, 310, 353, 3323, 263, 1021, 1842, 21195, 4271, 326, 10766, 1625, 326, 1375, 277, 16107, 1375, 353, 392, 791, 434, 1375, 531, 1046, 1375, 269, 1496, 328, 22098, 279, 923, 1963, 618, 269, 29468, 326, 1272, 358, 506, 444, 598, 326, 618, 1375, 531, 559, 263, 7141, 22235, 7660, 1375, 263, 17720, 10095, 471, 5416, 310, 22538, 8353, 603, 326, 3214, 7769, 8257, 471, 5416, 310, 14732, 1846, 854, 1450, 261, 425, 263, 314, 263, 269, 7867, 11250, 262, 263, 2], "score": -0.24844275414943695, "weight": 1, "toks": ["<s>", "To", "optimally", "test", "the", "`", "setProperty", "`", "method", "in", "isolation", ",", "you", "should", "craft", "a", "test", "that", "verifies", "both", "branches", "(", "conditional", "paths", ")", "within", "the", "method", ".", "Here", "'", "s", "the", "simplest", "way", "to", "test", "the", "conditions", "within", "the", "`", "setProperty", "`", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetPropertyWithElement", "(", ")", "{", "ODocument", "document", "=", "mock", "(", "ODocument", ".", "class", ")", ";", "OElement", "element", "=", "mock", "(", "OElement", ".", "class", ")", ";", "OSchemaType", "schemaType", "=", "mock", "(", "OSchemaType", ".", "class", ")", ";", "ORID", "rid", "=", "mock", "(", "ORID", ".", "class", ")", ";", "/", "/", "Setup", "mocks", "to", "return", "desired", "values", "when", "(", "element", ".", "getSchemaType", "(", ")", ")", ".", "thenReturn", "(", "Optional", ".", "of", "(", "schemaType", ")", ")", ";", "when", "(", "element", ".", "getIdentity", "(", ")", ")", ".", "thenReturn", "(", "rid", ")", ";", "when", "(", "rid", ".", "isValid", "(", ")", ")", ".", "thenReturn", "(", "false", ")", ";", "/", "/", "Execute", "the", "method", "with", "a", "specific", "branch", "condition", "document", ".", "setProperty", "(", "\"", "fieldName", "\"", ",", "element", ")", ";", "/", "/", "Verify", "that", "setProperty", "was", "called", "with", "OType", ".", "EMBEDDED", "verify", "(", "document", ")", ".", "setProperty", "(", "\"", "fieldName", "\"", ",", "element", ",", "OType", ".", "EMBEDDED", ")", ";", "}", "`", "`", "`", "This", "unit", "test", "assumes", "that", "the", "`", "ODocument", "`", "class", "and", "related", "classes", "(", "`", "OElement", "`", ",", "`", "OSchemaType", "`", ",", "and", "`", "ORID", "`", ")", "are", "part", "of", "an", "ORM", "or", "database", "interaction", "layer", "where", "mocking", "is", "possible", ".", "The", "test", "specifically", "checks", "the", "scenario", "where", "the", "`", "iPropertyValue", "`", "is", "an", "instance", "of", "`", "OElement", "`", ",", "but", "lacks", "a", "valid", "schema", "type", ",", "requiring", "the", "property", "to", "be", "set", "with", "the", "type", "`", "OType", ".", "EMBEDDED", "`", ".", "Adjust", "imports", "and", "mocking", "utilities", "depending", "on", "the", "actual", "testing", "framework", "and", "mocking", "libraries", "you", "are", "using", "(", "e", ".", "g", ".", ",", "Mockito", ")", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 7486, 1375, 707, 23500, 269, 1846, 3377, 1045, 279, 1842, 648, 716, 20761, 3937, 6088, 596, 22316, 316, 326, 707, 225, 163, 227, 246, 5057, 434, 1375, 531, 1046, 1375, 2887, 279, 1963, 618, 471, 279, 923, 4215, 269, 471, 5057, 777, 1308, 22456, 263, 13743, 296, 272, 279, 20570, 784, 3454, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 1396, 14980, 67, 6904, 67, 3989, 14980, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 514, 4289, 273, 315, 4289, 315, 274, 531, 1046, 930, 8073, 3078, 1876, 4334, 273, 394, 531, 1046, 261, 262, 288, 632, 1439, 1071, 4055, 411, 531, 797, 405, 11088, 559, 261, 262, 288, 327, 4055, 263, 1008, 261, 262, 274, 289, 632, 1439, 1071, 4869, 734, 20066, 261, 262, 288, 327, 394, 4869, 734, 261, 262, 288, 632, 1439, 1071, 1250, 4908, 261, 262, 288, 327, 629, 274, 289, 289, 274, 289, 289, 274, 342, 342, 31741, 531, 1046, 2887, 1963, 618, 471, 923, 4215, 269, 342, 342, 4489, 716, 7486, 364, 7141, 22235, 7660, 618, 353, 1399, 263, 997, 263, 7486, 261, 4289, 269, 930, 8073, 3078, 1876, 4334, 262, 274, 1815, 8867, 261, 531, 559, 263, 7141, 22235, 7660, 269, 997, 263, 652, 261, 4289, 262, 263, 3130, 261, 262, 262, 274, 342, 342, 31741, 279, 2212, 533, 269, 4489, 716, 7486, 598, 8984, 67, 10564, 67, 8552, 353, 1399, 263, 997, 263, 7486, 261, 4289, 269, 315, 19721, 315, 262, 274, 1815, 8867, 261, 531, 559, 263, 9469, 269, 997, 263, 652, 261, 4289, 262, 263, 3130, 261, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 4143, 1842, 6138, 326, 5337, 14176, 434, 2109, 10415, 1492, 3372, 434, 326, 2713, 1375, 7486, 1375, 1410, 506, 1709, 1235, 2511, 603, 2112, 810, 1953, 263, 7693, 716, 1375, 531, 2519, 1375, 471, 3746, 7168, 87, 342, 15895, 854, 8783, 8249, 358, 2865, 333, 7769, 10766, 263, 2], "score": -0.3293510675430298, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "setProperty", "`", "method", "effectively", ",", "you", "could", "write", "a", "test", "case", "that", "verifies", "both", "cases", "outlined", "in", "the", "method", "\u2013", "handling", "of", "`", "OElement", "`", "without", "a", "schema", "type", "and", "a", "valid", "identity", ",", "and", "handling", "all", "other", "scenarios", ".", "Here", "'", "s", "a", "concise", "example", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetPropertyEmbedded_vs_NonEmbedded", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "String", "fieldName", "=", "\"", "fieldName", "\"", ";", "OElement", "elementWithoutSchemaAndIdentity", "=", "new", "OElement", "(", ")", "{", "@", "Override", "public", "Optional", "<", "OClass", ">", "getSchemaType", "(", ")", "{", "return", "Optional", ".", "empty", "(", ")", ";", "}", "@", "Override", "public", "ORID", "getIdentity", "(", ")", "{", "return", "new", "ORID", "(", ")", "{", "@", "Override", "public", "boolean", "isValid", "(", ")", "{", "return", "false", ";", "}", "}", ";", "}", "}", ";", "/", "/", "Passing", "OElement", "without", "schema", "type", "and", "valid", "identity", ",", "/", "/", "expect", "that", "setProperty", "for", "EMBEDDED", "type", "is", "used", ".", "doc", ".", "setProperty", "(", "fieldName", ",", "elementWithoutSchemaAndIdentity", ")", ";", "assertEquals", "(", "OType", ".", "EMBEDDED", ",", "doc", ".", "field", "(", "fieldName", ")", ".", "getType", "(", ")", ")", ";", "/", "/", "Passing", "a", "normal", "string", ",", "expect", "that", "setProperty", "with", "EMPTY_TYPES_ARRAY", "is", "used", ".", "doc", ".", "setProperty", "(", "fieldName", ",", "\"", "stringValue", "\"", ")", ";", "assertEquals", "(", "OType", ".", "STRING", ",", "doc", ".", "field", "(", "fieldName", ")", ".", "getType", "(", ")", ")", ";", "}", "`", "`", "`", "This", "simple", "test", "addresses", "the", "basic", "functionality", "of", "deciding", "which", "signature", "of", "the", "internal", "`", "setProperty", "`", "should", "be", "utilized", "based", "on", "provided", "input", "types", ".", "Ensure", "that", "`", "ODocument", "`", "and", "related", "stubs", "/", "mocks", "are", "correctly", "implemented", "to", "support", "this", "testing", "scenario", ".", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.3700374662876129, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.38844239711761475, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.42313265800476074, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 67.21964423124626, "bleu-max": 100.0, "bleu-min": 21.66864420114564, "bleu-avg": 67.31086051873841, "code-bleu": 71.29810347487575, "code-bleu-max": 100.0, "code-bleu-min": 5.053439437837126, "code-bleu-avg": 68.38863840716597, "edit-sim": 73, "edit-sim-max": 100, "edit-sim-min": 41, "edit-sim-avg": 75.3, "rouge-p": 66.66666666666666, "rouge-p-max": 100.0, "rouge-p-min": 55.55555555555556, "rouge-p-avg": 70.43650793650792, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 93.33333333333334, "rouge-f": 79.99999952, "rouge-f-max": 99.9999995, "rouge-f-min": 61.53846104142012, "rouge-f-avg": 79.72527423859098, "num-seq": 10}, "time": 0.592451810836792, "misc": {}}
{"id": 96, "data_id": "csn-97962", "input_stids": [1, 32315, 411, 32305, 3231, 399, 405, 32305, 1923, 261, 399, 277, 921, 262, 274, 32315, 6304, 3342, 6289, 4709, 531, 2519, 531, 6106, 8424, 531, 2519, 32315, 531, 13198, 32315, 12168, 263, 527, 261, 652, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 21, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 531, 2519, 997, 92, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 92, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 1923, 261, 997, 92, 262, 274, 2], "topk": [{"tids": [1, 2672, 326, 1375, 632, 7766, 1375, 3204, 358, 4426, 716, 326, 707, 5712, 353, 279, 1842, 707, 263, 4554, 1410, 3387, 716, 8938, 3470, 326, 2063, 1640, 4533, 8783, 263, 1021, 1842, 29876, 3324, 4979, 279, 1668, 269, 12392, 518, 269, 9702, 518, 3470, 279, 2492, 269, 471, 3929, 310, 716, 326, 3478, 3898, 1603, 300, 3294, 263, 1220, 848, 506, 21043, 7694, 715, 18432, 635, 6728, 326, 14297, 434, 326, 1241, 622, 1517, 2235, 263, 13743, 296, 272, 279, 6941, 28003, 1177, 434, 326, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 1185, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 1659, 315, 262, 274, 997, 21, 263, 7486, 261, 315, 1929, 315, 269, 315, 1445, 315, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 997, 21, 263, 7486, 261, 315, 1929, 315, 269, 315, 19301, 620, 315, 262, 274, 2063, 263, 1923, 261, 997, 21, 262, 274, 2063, 263, 3294, 261, 262, 274, 531, 2519, 4203, 1759, 273, 2063, 263, 1262, 261, 394, 531, 2115, 548, 261, 612, 263, 20066, 261, 262, 262, 262, 274, 1815, 8867, 261, 315, 19301, 620, 315, 269, 4203, 1759, 263, 3911, 261, 315, 1929, 315, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.24817532300949097, "weight": 1, "toks": ["<s>", "Use", "the", "`", "@", "Test", "`", "annotation", "to", "define", "that", "the", "method", "below", "is", "a", "test", "method", ".", "You", "should", "ensure", "that", "transactions", "within", "the", "database", "handle", "updates", "correctly", ".", "The", "test", "involves", "creating", "a", "document", ",", "saving", "it", ",", "updating", "it", "within", "a", "transaction", ",", "and", "verifying", "that", "the", "changes", "persist", "post", "-", "commit", ".", "This", "can", "be", "succinctly", "tested", "by", "checking", "the", "consistency", "of", "the", "entry", "at", "each", "step", ".", "Here", "'", "s", "a", "condensed", "version", "of", "the", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "Exception", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc1", "=", "new", "ODocument", "(", "\"", "Class", "\"", ")", ";", "doc1", ".", "setProperty", "(", "\"", "Key", "\"", ",", "\"", "Value", "\"", ")", ";", "OIdentifiable", "id", "=", "database", ".", "save", "(", "doc1", ")", ";", "doc1", ".", "setProperty", "(", "\"", "Key", "\"", ",", "\"", "UpdatedValue", "\"", ")", ";", "database", ".", "save", "(", "doc1", ")", ";", "database", ".", "commit", "(", ")", ";", "ODocument", "loadedDoc", "=", "database", ".", "load", "(", "new", "ORecordId", "(", "id", ".", "getIdentity", "(", ")", ")", ")", ";", "assertEquals", "(", "\"", "UpdatedValue", "\"", ",", "loadedDoc", ".", "getProperty", "(", "\"", "Key", "\"", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 2063, 263, 3294, 261, 262, 274, 1375, 2], "score": -0.2830509543418884, "weight": 1, "toks": ["<s>", "`", "database", ".", "commit", "(", ")", ";", "`", "</s>"]}, {"tids": [1, 1939, 326, 2063, 2492, 358, 3929, 4533, 263, 2], "score": -0.31715846061706543, "weight": 1, "toks": ["<s>", "Run", "the", "database", "transaction", "to", "verify", "updates", ".", "</s>"]}, {"tids": [1, 14373, 279, 843, 716, 4533, 326, 1375, 531, 2519, 1375, 2522, 3470, 326, 2492, 471, 3929, 326, 3478, 3898, 1603, 300, 3294, 263, 2], "score": -0.3405178189277649, "weight": 1, "toks": ["<s>", "Invoke", "a", "query", "that", "updates", "the", "`", "ODocument", "`", "created", "within", "the", "transaction", "and", "verify", "the", "changes", "persist", "post", "-", "commit", ".", "</s>"]}, {"tids": [1, 14373, 279, 843, 358, 3929, 326, 1790, 434, 326, 5198, 7429, 3470, 326, 2492, 263, 2], "score": -0.36770275235176086, "weight": 1, "toks": ["<s>", "Invoke", "a", "query", "to", "verify", "the", "properties", "of", "the", "saved", "documents", "within", "the", "transaction", ".", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.37503430247306824, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 2376, 279, 2492, 269, 1923, 279, 1668, 269, 471, 866, 309, 326, 1599, 1703, 4374, 8783, 263, 2], "score": -0.3971464931964874, "weight": 1, "toks": ["<s>", "begin", "a", "transaction", ",", "save", "a", "document", ",", "and", "check", "if", "the", "ID", "was", "generated", "correctly", ".", "</s>"]}, {"tids": [1, 2974, 4486, 23500, 1842, 326, 707, 1375, 1923, 261, 262, 1375, 316, 279, 2492, 3330, 269, 2348, 326, 3751, 1842, 3021, 294, 1375, 1375, 1375, 2252, 25395, 261, 612, 262, 274, 1375, 1375, 1375, 2], "score": -0.42886650562286377, "weight": 1, "toks": ["<s>", "To", "most", "effectively", "test", "the", "method", "`", "save", "(", ")", "`", "in", "a", "transaction", "environment", ",", "implement", "the", "following", "test", "statement", ":", "`", "`", "`", "java", "assertNotNull", "(", "id", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.4320697784423828, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 9190, 326, 2063, 471, 787, 279, 2492, 263, 2], "score": -0.4327029287815094, "weight": 1, "toks": ["<s>", "Initialize", "the", "database", "and", "start", "a", "transaction", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 36.088772259506875, "bleu-max": 48.05622828269509, "bleu-min": 19.081654556856687, "bleu-avg": 30.81870797316875, "code-bleu": 31.50429520717083, "code-bleu-max": 69.64073254502566, "code-bleu-min": 22.029713665326618, "code-bleu-avg": 32.40078517965283, "edit-sim": 54, "edit-sim-max": 85, "edit-sim-min": 51, "edit-sim-avg": 73.6, "rouge-p": 62.5, "rouge-p-max": 77.77777777777779, "rouge-p-min": 54.54545454545454, "rouge-p-avg": 64.520202020202, "rouge-r": 55.55555555555556, "rouge-r-max": 77.77777777777779, "rouge-r-min": 55.55555555555556, "rouge-r-avg": 70.00000000000001, "rouge-f": 58.82352891349482, "rouge-f-max": 77.77777727777779, "rouge-f-min": 58.82352891349482, "rouge-f-avg": 66.87581649631008, "num-seq": 10}, "time": 0.5845239162445068, "misc": {}}
{"id": 97, "data_id": "csn-97962", "input_stids": [1, 32315, 805, 531, 13198, 1296, 261, 514, 843, 269, 1033, 1372, 833, 262, 1216, 531, 2189, 3997, 13963, 503, 269, 531, 2189, 14576, 288, 604, 394, 13172, 261, 262, 274, 289, 32315, 6304, 3342, 6289, 4709, 531, 2519, 531, 6106, 8424, 531, 2519, 531, 13198, 32315, 531, 13198, 32315, 783, 4254, 263, 6993, 1649, 261, 262, 263, 11587, 261, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 21, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 531, 2519, 997, 92, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 92, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 1923, 261, 997, 92, 262, 274, 531, 13198, 563, 273, 2063, 263, 1296, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 14373, 1375, 2063, 263, 3294, 261, 262, 274, 1375, 358, 1842, 326, 2492, 3294, 263, 2], "score": -0.05498753860592842, "weight": 1, "toks": ["<s>", "Invoke", "`", "database", ".", "commit", "(", ")", ";", "`", "to", "test", "the", "transaction", "commit", ".", "</s>"]}, {"tids": [1, 14373, 1375, 2063, 263, 3294, 261, 262, 1375, 358, 3912, 326, 2492, 471, 1842, 326, 25078, 6885, 263, 2], "score": -0.14830876886844635, "weight": 1, "toks": ["<s>", "Invoke", "`", "database", ".", "commit", "(", ")", "`", "to", "complete", "the", "transaction", "and", "test", "the", "transactional", "behavior", ".", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.20236600935459137, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 7693, 326, 2063, 2492, 4533, 854, 16015, 471, 6021, 1603, 300, 1674, 263, 2], "score": -0.2477402687072754, "weight": 1, "toks": ["<s>", "Ensure", "the", "database", "transaction", "updates", "are", "committed", "and", "visible", "post", "-", "operation", ".", "</s>"]}, {"tids": [1, 1021, 16745, 1024, 3021, 358, 1842, 326, 707, 1375, 2063, 263, 1296, 261, 315, 7128, 315, 262, 1375, 3377, 506, 294, 1375, 1375, 1375, 2252, 25395, 261, 563, 262, 274, 1375, 1375, 1375, 2], "score": -0.2508583664894104, "weight": 1, "toks": ["<s>", "The", "minimal", "next", "statement", "to", "test", "the", "method", "`", "database", ".", "command", "(", "\"", "STR", "\"", ")", "`", "could", "be", ":", "`", "`", "`", "java", "assertNotNull", "(", "result", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.26475220918655396, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 14373, 326, 1375, 2063, 263, 3294, 261, 262, 1375, 707, 358, 3387, 3478, 854, 14249, 316, 326, 2492, 263, 2], "score": -0.34563830494880676, "weight": 1, "toks": ["<s>", "Invoke", "the", "`", "database", ".", "commit", "(", ")", "`", "method", "to", "ensure", "changes", "are", "persisted", "in", "the", "transaction", ".", "</s>"]}, {"tids": [1, 1021, 1375, 2063, 263, 3294, 261, 262, 1375, 707, 848, 506, 1399, 358, 1842, 309, 3478, 2522, 3470, 279, 2492, 854, 14249, 19361, 5173, 263, 2], "score": -0.3979659974575043, "weight": 1, "toks": ["<s>", "The", "`", "database", ".", "commit", "(", ")", "`", "method", "can", "be", "used", "to", "test", "if", "changes", "created", "within", "a", "transaction", "are", "persisted", "accurately", ".", "</s>"]}, {"tids": [1, 25395, 261, 563, 262, 274, 2], "score": -0.4304492771625519, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "result", ")", ";", "</s>"]}, {"tids": [1, 14373, 1375, 2063, 263, 3294, 261, 262, 1375, 358, 3387, 326, 2492, 353, 4985, 5951, 471, 326, 3478, 854, 5198, 358, 326, 2063, 263, 2], "score": -0.44810163974761963, "weight": 1, "toks": ["<s>", "Invoke", "`", "database", ".", "commit", "(", ")", "`", "to", "ensure", "the", "transaction", "is", "successfully", "completed", "and", "the", "changes", "are", "saved", "to", "the", "database", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 47.342657917802875, "bleu-avg": 65.73376598791725, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 49.72451899983773, "code-bleu-avg": 64.88002987860959, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 72, "edit-sim-avg": 83.3, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 55.55555555555556, "rouge-p-avg": 70.01984126984127, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 83.33333333333334, "rouge-r-avg": 88.33333333333334, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 66.66666618666667, "rouge-f-avg": 77.63736214799519, "num-seq": 10}, "time": 0.6910321712493896, "misc": {}}
{"id": 98, "data_id": "csn-97962", "input_stids": [1, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 6304, 3342, 6289, 4709, 531, 2519, 531, 6106, 8424, 531, 2519, 531, 13198, 32315, 32315, 1815, 563, 263, 3911, 261, 315, 3902, 6, 262, 480, 446, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 21, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 531, 2519, 997, 92, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 92, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 1923, 261, 997, 92, 262, 274, 531, 13198, 563, 273, 2063, 263, 1296, 261, 315, 3902, 6, 262, 274, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 3603, 326, 1438, 471, 4046, 326, 2063, 263, 2], "score": -0.19106245040893555, "weight": 1, "toks": ["<s>", "Start", "the", "server", "and", "initialize", "the", "database", ".", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 4564, 261, 262, 1375, 707, 269, 1846, 3377, 3695, 3433, 1842, 358, 866, 309, 326, 563, 444, 1914, 1281, 3222, 1839, 3549, 279, 2063, 1296, 263, 9587, 412, 939, 269, 326, 1842, 4102, 2324, 3007, 333, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 5582, 2134, 261, 262, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7766, 315, 262, 274, 997, 263, 7486, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 2063, 263, 1923, 261, 997, 262, 274, 531, 13198, 563, 273, 2063, 263, 1296, 261, 315, 9111, 4571, 7766, 315, 262, 274, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 563, 263, 1746, 261, 262, 274, 2063, 263, 8006, 261, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.24000197649002075, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "hasNext", "(", ")", "`", "method", ",", "you", "could", "structure", "your", "test", "to", "check", "if", "the", "result", "set", "contains", "any", "entries", "after", "running", "a", "database", "command", ".", "Simplified", ",", "the", "test", "would", "look", "like", "this", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testHasNext", "(", ")", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "Test", "\"", ")", ";", "doc", ".", "setProperty", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "database", ".", "save", "(", "doc", ")", ";", "OResultSet", "result", "=", "database", ".", "command", "(", "\"", "SELECT", "FROM", "Test", "\"", ")", ";", "assertTrue", "(", "result", ".", "hasNext", "(", ")", ")", ";", "result", ".", "close", "(", ")", ";", "database", ".", "rollback", "(", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 4564, 1375, 707, 316, 326, 819, 864, 269, 1846, 4825, 999, 326, 3751, 2202, 980, 434, 1842, 981, 294, 1375, 1375, 1375, 2252, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.2845594584941864, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "hasNext", "`", "method", "in", "the", "context", "given", ",", "you", "might", "use", "the", "following", "single", "line", "of", "test", "code", ":", "`", "`", "`", "java", "assertTrue", "(", "result", ".", "hasNext", "(", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 2063, 263, 2376, 261, 262, 274, 2], "score": -0.31046855449676514, "weight": 1, "toks": ["<s>", "database", ".", "begin", "(", ")", ";", "</s>"]}, {"tids": [1, 9190, 326, 2063, 471, 2492, 269, 1508, 3073, 326, 5295, 1846, 509, 409, 358, 1842, 263, 2457, 791, 294, 1375, 1375, 1375, 2252, 632, 11672, 1071, 918, 24292, 261, 262, 288, 342, 342, 1000, 731, 3330, 4046, 4254, 261, 262, 274, 289, 632, 7766, 1071, 918, 1842, 3342, 261, 262, 288, 342, 342, 3603, 2492, 787, 3342, 261, 262, 274, 342, 342, 11217, 5295, 3073, 4254, 9343, 261, 262, 274, 342, 342, 5452, 4636, 3929, 2988, 3447, 261, 262, 274, 289, 1375, 1375, 1375, 4344, 3071, 358, 3455, 3433, 1842, 20570, 784, 471, 5122, 3746, 358, 326, 14176, 1846, 2545, 358, 3929, 263, 2], "score": -0.3145224452018738, "weight": 1, "toks": ["<s>", "Initialize", "the", "database", "and", "transaction", ",", "then", "perform", "the", "operations", "you", "intend", "to", "test", ".", "For", "instance", ":", "`", "`", "`", "java", "@", "Before", "public", "void", "setUp", "(", ")", "{", "/", "/", "Set", "up", "environment", "initializeDatabase", "(", ")", ";", "}", "@", "Test", "public", "void", "testTransaction", "(", ")", "{", "/", "/", "Start", "transaction", "startTransaction", "(", ")", ";", "/", "/", "Perform", "operations", "performDatabaseOperations", "(", ")", ";", "/", "/", "Assert", "conditions", "verifyOperationResults", "(", ")", ";", "}", "`", "`", "`", "Make", "sure", "to", "keep", "your", "test", "concise", "and", "directly", "related", "to", "the", "functionality", "you", "want", "to", "verify", ".", "</s>"]}, {"tids": [1, 3049, 1375, 563, 263, 4564, 261, 262, 1375, 358, 866, 309, 326, 843, 2106, 1281, 1686, 263, 2], "score": -0.3601834177970886, "weight": 1, "toks": ["<s>", "Call", "`", "result", ".", "hasNext", "(", ")", "`", "to", "check", "if", "the", "query", "returned", "any", "results", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 997, 21, 263, 7486, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 1815, 5510, 261, 612, 401, 273, 446, 262, 274, 289, 2], "score": -0.3692830502986908, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc1", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "doc1", ".", "setProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "OIdentifiable", "id", "=", "database", ".", "save", "(", "doc1", ")", ";", "assertTrue", "(", "id", "!", "=", "null", ")", ";", "}", "</s>"]}, {"tids": [1, 2063, 263, 2376, 261, 262, 274, 2], "score": -0.379830002784729, "weight": 1, "toks": ["<s>", "database", ".", "begin", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 997, 21, 263, 7486, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 1815, 5510, 261, 612, 401, 273, 446, 262, 274, 289, 2], "score": -0.413479208946228, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc1", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "doc1", ".", "setProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "OIdentifiable", "id", "=", "database", ".", "save", "(", "doc1", ")", ";", "assertTrue", "(", "id", "!", "=", "null", ")", ";", "}", "</s>"]}, {"tids": [1, 7801, 16499, 326, 1842, 3875, 358, 7155, 1338, 603, 326, 11239, 2186, 3577, 364, 326, 2923, 1842, 707, 1375, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1375, 263, 1375, 1375, 1375, 2252, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 7488, 294, 3778, 315, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 514, 15158, 273, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 274, 7891, 2290, 263, 752, 261, 15158, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 15158, 269, 315, 3981, 315, 269, 315, 3981, 315, 262, 274, 2063, 263, 752, 797, 261, 315, 7766, 797, 315, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 289, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 7766, 797, 315, 262, 274, 997, 21, 263, 7486, 261, 315, 498, 315, 269, 315, 460, 21, 315, 262, 274, 2063, 263, 1923, 261, 997, 21, 262, 274, 531, 2519, 997, 92, 273, 394, 531, 2519, 261, 315, 7766, 797, 315, 262, 274, 997, 92, 263, 7486, 261, 315, 498, 315, 269, 315, 460, 22, 315, 262, 274, 2063, 263, 1923, 261, 997, 92, 262, 274, 531, 13198, 563, 273, 2063, 263, 1296, 261, 315, 2027, 628, 7766, 797, 1625, 498, 273, 296, 460, 21, 296, 315, 262, 274, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.44604888558387756, "weight": 1, "toks": ["<s>", "Please", "simplify", "the", "test", "setup", "to", "focus", "only", "on", "the", "critical", "elements", "needed", "for", "the", "specific", "test", "method", "`", "testQueryUpdateCreatedInTxTransaction", "(", ")", "`", ".", "`", "`", "`", "java", "@", "Before", "public", "void", "before", "(", ")", "throws", "Exception", "{", "orientDB", "=", "new", "OrientDB", "(", "\"", "embedded", ":", "memory", "\"", ",", "OrientDBConfig", ".", "defaultConfig", "(", ")", ")", ";", "String", "dbName", "=", "RemoteTransactionSupportTest", ".", "class", ".", "getSimpleName", "(", ")", ";", "orientDB", ".", "create", "(", "dbName", ",", "ODatabaseType", ".", "MEMORY", ")", ";", "database", "=", "orientDB", ".", "open", "(", "dbName", ",", "\"", "admin", "\"", ",", "\"", "admin", "\"", ")", ";", "database", ".", "createClass", "(", "\"", "TestClass", "\"", ")", ";", "}", "@", "After", "public", "void", "after", "(", ")", "{", "database", ".", "close", "(", ")", ";", "orientDB", ".", "close", "(", ")", ";", "}", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc1", "=", "new", "ODocument", "(", "\"", "TestClass", "\"", ")", ";", "doc1", ".", "setProperty", "(", "\"", "key", "\"", ",", "\"", "value1", "\"", ")", ";", "database", ".", "save", "(", "doc1", ")", ";", "ODocument", "docx", "=", "new", "ODocument", "(", "\"", "TestClass", "\"", ")", ";", "docx", ".", "setProperty", "(", "\"", "key", "\"", ",", "\"", "value2", "\"", ")", ";", "database", ".", "save", "(", "docx", ")", ";", "OResultSet", "result", "=", "database", ".", "command", "(", "\"", "select", "from", "TestClass", "where", "key", "=", "'", "value1", "'", "\"", ")", ";", "assertTrue", "(", "result", ".", "hasNext", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 28.355593218699504, "bleu-max": 28.355593218699504, "bleu-min": 9.540470846535309, "bleu-avg": 22.04747721885366, "code-bleu": 20.02985088504366, "code-bleu-max": 23.01889748267131, "code-bleu-min": 6.7865790946451625, "code-bleu-avg": 16.21034589236211, "edit-sim": 78, "edit-sim-max": 78, "edit-sim-min": 41, "edit-sim-avg": 66.0, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 75.41666666666666, "rouge-r": 72.72727272727273, "rouge-r-max": 72.72727272727273, "rouge-r-min": 36.36363636363637, "rouge-r-avg": 57.27272727272727, "rouge-f": 84.21052582825486, "rouge-f-max": 84.21052582825486, "rouge-f-min": 42.10526267036012, "rouge-f-avg": 65.0526310884266, "num-seq": 10}, "time": 0.6659889221191406, "misc": {}}
{"id": 99, "data_id": "csn-97962", "input_stids": [1, 32315, 411, 399, 405, 399, 3911, 261, 514, 508, 262, 274, 32315, 6304, 3342, 6289, 4709, 531, 2519, 531, 6106, 8424, 531, 2519, 531, 13198, 32315, 32315, 531, 1253, 563, 273, 12168, 263, 1024, 261, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 21, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 531, 2519, 997, 92, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 92, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 1923, 261, 997, 92, 262, 274, 531, 13198, 563, 273, 2063, 263, 1296, 261, 315, 3902, 6, 262, 274, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 1815, 8867, 261, 261, 1525, 262, 563, 263, 1024, 261, 262, 263, 3911, 261, 315, 3902, 6, 262, 269, 404, 48, 262, 274, 2], "topk": [{"tids": [1, 2672, 326, 1375, 4564, 261, 262, 1375, 707, 358, 3387, 716, 1915, 353, 4042, 563, 358, 1207, 1865, 4440, 1375, 1024, 261, 262, 1375, 263, 2], "score": -0.17439879477024078, "weight": 1, "toks": ["<s>", "Use", "the", "`", "hasNext", "(", ")", "`", "method", "to", "ensure", "that", "there", "is", "another", "result", "to", "process", "before", "calling", "`", "next", "(", ")", "`", ".", "</s>"]}, {"tids": [1, 2063, 263, 18416, 261, 262, 274, 2], "score": -0.20514334738254547, "weight": 1, "toks": ["<s>", "database", ".", "beginTransaction", "(", ")", ";", "</s>"]}, {"tids": [1, 20471, 1842, 648, 848, 506, 20482, 635, 7155, 310, 5122, 603, 326, 6710, 471, 23936, 3470, 279, 2492, 263, 5444, 381, 1230, 269, 1846, 848, 5459, 444, 300, 731, 21610, 471, 5122, 1842, 326, 2492, 6885, 487, 13040, 294, 1375, 1375, 1375, 2252, 632, 11672, 1071, 918, 24292, 261, 262, 288, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 2632, 294, 17365, 315, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 315, 7766, 2290, 315, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 315, 7766, 2290, 315, 269, 315, 3981, 315, 269, 315, 3981, 315, 262, 274, 2063, 263, 752, 797, 261, 315, 7766, 797, 315, 262, 274, 289, 632, 7766, 1071, 918, 1842, 3342, 1190, 1138, 261, 262, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7766, 797, 315, 262, 274, 997, 263, 7486, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 2063, 263, 1923, 261, 997, 262, 274, 2063, 263, 3294, 261, 262, 274, 531, 13198, 12168, 273, 2063, 263, 843, 261, 315, 9111, 628, 7766, 797, 1625, 498, 273, 296, 460, 296, 315, 262, 274, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 1815, 8867, 261, 12168, 263, 1024, 261, 262, 263, 3911, 261, 315, 498, 315, 262, 269, 315, 460, 315, 262, 274, 289, 632, 7360, 1071, 918, 268, 2091, 4164, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 1552, 8950, 4121, 353, 4573, 294, 518, 1678, 731, 326, 2063, 269, 11199, 279, 2492, 598, 1668, 6710, 269, 6218, 358, 866, 326, 12626, 269, 471, 1508, 7372, 2721, 300, 731, 263, 1220, 20948, 326, 7155, 26066, 269, 9299, 2822, 326, 8555, 364, 10825, 471, 555, 316, 1898, 7233, 444, 300, 731, 8463, 263, 2], "score": -0.21553978323936462, "weight": 1, "toks": ["<s>", "Your", "test", "case", "can", "be", "simplified", "by", "focusing", "directly", "on", "the", "creation", "and", "querying", "within", "a", "transaction", ".", "Minimally", ",", "you", "can", "reduce", "set", "-", "up", "complexity", "and", "directly", "test", "the", "transaction", "behavior", "as", "follows", ":", "`", "`", "`", "java", "@", "Before", "public", "void", "setUp", "(", ")", "{", "orientDB", "=", "new", "OrientDB", "(", "\"", "remote", ":", "localhost", "\"", ",", "OrientDBConfig", ".", "defaultConfig", "(", ")", ")", ";", "orientDB", ".", "create", "(", "\"", "TestDB", "\"", ",", "ODatabaseType", ".", "MEMORY", ")", ";", "database", "=", "orientDB", ".", "open", "(", "\"", "TestDB", "\"", ",", "\"", "admin", "\"", ",", "\"", "admin", "\"", ")", ";", "database", ".", "createClass", "(", "\"", "TestClass", "\"", ")", ";", "}", "@", "Test", "public", "void", "testTransactionWithQuery", "(", ")", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "TestClass", "\"", ")", ";", "doc", ".", "setProperty", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "database", ".", "save", "(", "doc", ")", ";", "database", ".", "commit", "(", ")", ";", "OResultSet", "resultSet", "=", "database", ".", "query", "(", "\"", "SELECT", "from", "TestClass", "where", "key", "=", "'", "value", "'", "\"", ")", ";", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "assertEquals", "(", "resultSet", ".", "next", "(", ")", ".", "getProperty", "(", "\"", "key", "\"", ")", ",", "\"", "value", "\"", ")", ";", "}", "@", "After", "public", "void", "tearDown", "(", ")", "{", "database", ".", "close", "(", ")", ";", "orientDB", ".", "close", "(", ")", ";", "}", "`", "`", "`", "This", "test", "does", "exactly", "what", "is", "necessary", ":", "it", "sets", "up", "the", "database", ",", "performs", "a", "transaction", "with", "document", "creation", ",", "queries", "to", "check", "the", "insertion", ",", "and", "then", "handles", "clean", "-", "up", ".", "This", "keeps", "the", "focus", "tight", ",", "reducing", "the", "potential", "for", "noise", "and", "error", "in", "more", "complex", "set", "-", "up", "sequences", ".", "</s>"]}, {"tids": [1, 14373, 1375, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1375, 358, 1842, 326, 2492, 4533, 263, 2], "score": -0.23205678164958954, "weight": 1, "toks": ["<s>", "Invoke", "`", "testQueryUpdateCreatedInTxTransaction", "(", ")", "`", "to", "test", "the", "transaction", "updates", ".", "</s>"]}, {"tids": [1, 1375, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 1375, 2], "score": -0.23732231557369232, "weight": 1, "toks": ["<s>", "`", "assertTrue", "(", "result", ".", "hasNext", "(", ")", ")", ";", "`", "</s>"]}, {"tids": [1, 1021, 1375, 1842, 1138, 1891, 6119, 382, 4188, 3342, 1375, 707, 353, 23500, 7769, 326, 6710, 434, 7429, 3470, 279, 2492, 471, 24831, 716, 279, 1296, 7120, 3470, 326, 1967, 2492, 848, 843, 471, 4614, 2665, 924, 263, 2], "score": -0.2527812123298645, "weight": 1, "toks": ["<s>", "The", "`", "testQueryUpdateCreatedInTxTransaction", "`", "method", "is", "effectively", "testing", "the", "creation", "of", "documents", "within", "a", "transaction", "and", "ensuring", "that", "a", "command", "executed", "within", "the", "same", "transaction", "can", "query", "and", "retrieve", "expected", "values", ".", "</s>"]}, {"tids": [1, 1788, 279, 707, 716, 20761, 309, 326, 1375, 4564, 261, 262, 1375, 707, 8783, 25283, 326, 13395, 434, 326, 1024, 761, 316, 1375, 531, 13198, 1375, 263, 2], "score": -0.25530898571014404, "weight": 1, "toks": ["<s>", "Create", "a", "method", "that", "verifies", "if", "the", "`", "hasNext", "(", ")", "`", "method", "correctly", "identifies", "the", "availability", "of", "the", "next", "item", "in", "`", "OResultSet", "`", ".", "</s>"]}, {"tids": [1, 14373, 1375, 3911, 261, 315, 508, 315, 262, 1375, 603, 392, 791, 434, 1375, 531, 2519, 1375, 358, 4614, 279, 1272, 460, 263, 2], "score": -0.2802829146385193, "weight": 1, "toks": ["<s>", "Invoke", "`", "getProperty", "(", "\"", "name", "\"", ")", "`", "on", "an", "instance", "of", "`", "ODocument", "`", "to", "retrieve", "a", "property", "value", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1396, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 997, 263, 7486, 261, 315, 508, 315, 269, 315, 804, 22223, 315, 262, 274, 1815, 8867, 261, 315, 804, 22223, 315, 269, 997, 263, 3911, 261, 315, 508, 315, 262, 262, 274, 289, 2], "score": -0.28456416726112366, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProperty", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "doc", ".", "setProperty", "(", "\"", "name", "\"", ",", "\"", "John", "\"", ")", ";", "assertEquals", "(", "\"", "John", "\"", ",", "doc", ".", "getProperty", "(", "\"", "name", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 2672, 1375, 1815, 8867, 261, 404, 48, 269, 563, 263, 1024, 261, 262, 263, 411, 3407, 405, 3911, 261, 315, 7128, 315, 262, 262, 274, 1375, 316, 3433, 1842, 648, 263, 2], "score": -0.3040793836116791, "weight": 1, "toks": ["<s>", "Use", "`", "assertEquals", "(", "1L", ",", "result", ".", "next", "(", ")", ".", "<", "Long", ">", "getProperty", "(", "\"", "STR", "\"", ")", ")", ";", "`", "in", "your", "test", "case", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 11.742151152282464, "bleu-max": 24.218522766731308, "bleu-min": 11.742151152282464, "bleu-avg": 15.489510216215047, "code-bleu": 9.246810087659242, "code-bleu-max": 20.37103523387025, "code-bleu-min": 2.364991946284033, "code-bleu-avg": 8.987099703014401, "edit-sim": 45, "edit-sim-max": 49, "edit-sim-min": 40, "edit-sim-avg": 45.3, "rouge-p": 27.27272727272727, "rouge-p-max": 50.0, "rouge-p-min": 27.27272727272727, "rouge-p-avg": 35.57575757575757, "rouge-r": 30.0, "rouge-r-max": 40.0, "rouge-r-min": 30.0, "rouge-r-avg": 33.0, "rouge-f": 28.57142807256236, "rouge-f-max": 44.44444395061729, "rouge-f-min": 28.57142807256236, "rouge-f-avg": 33.93880485117289, "num-seq": 10}, "time": 0.8649578094482422, "misc": {}}
{"id": 100, "data_id": "csn-97962", "input_stids": [1, 32315, 411, 32305, 3231, 399, 405, 32305, 1262, 261, 4869, 734, 1409, 548, 262, 274, 32315, 6304, 3342, 6289, 4709, 531, 2519, 531, 6106, 8424, 531, 2519, 531, 13198, 531, 2519, 32315, 32315, 612, 273, 563, 263, 3911, 261, 315, 3902, 6, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 21, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 531, 2519, 997, 92, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 92, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 1923, 261, 997, 92, 262, 274, 531, 13198, 563, 273, 2063, 263, 1296, 261, 315, 3902, 6, 262, 274, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 1815, 8867, 261, 261, 1525, 262, 563, 263, 1024, 261, 262, 263, 3911, 261, 315, 3902, 6, 262, 269, 404, 48, 262, 274, 531, 2519, 997, 22, 273, 2063, 263, 1262, 261, 612, 263, 20066, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.11759888380765915, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 997, 22, 263, 3911, 261, 315, 7128, 315, 262, 269, 315, 7128, 315, 262, 274, 2], "score": -0.1293557733297348, "weight": 1, "toks": ["<s>", "assertEquals", "(", "doc2", ".", "getProperty", "(", "\"", "STR", "\"", ")", ",", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 5452, 716, 326, 1375, 997, 22, 1375, 733, 353, 486, 446, 1839, 7153, 518, 628, 326, 2063, 263, 2], "score": -0.21064700186252594, "weight": 1, "toks": ["<s>", "Assert", "that", "the", "`", "doc2", "`", "object", "is", "not", "null", "after", "loading", "it", "from", "the", "database", ".", "</s>"]}, {"tids": [1, 1815, 8867, 261, 997, 22, 263, 3911, 261, 315, 7128, 315, 262, 269, 315, 7128, 315, 262, 274, 2], "score": -0.2223866879940033, "weight": 1, "toks": ["<s>", "assertEquals", "(", "doc2", ".", "getProperty", "(", "\"", "STR", "\"", ")", ",", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.24564243853092194, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 997, 22, 263, 3911, 261, 315, 7128, 315, 262, 269, 315, 7128, 315, 262, 274, 2], "score": -0.25486138463020325, "weight": 1, "toks": ["<s>", "assertEquals", "(", "doc2", ".", "getProperty", "(", "\"", "STR", "\"", ")", ",", "\"", "STR", "\"", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 997, 22, 262, 274, 2], "score": -0.29309794306755066, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "doc2", ")", ";", "</s>"]}, {"tids": [1, 7693, 326, 4203, 1668, 353, 326, 1967, 487, 326, 2282, 263, 2], "score": -0.3067223131656647, "weight": 1, "toks": ["<s>", "Ensure", "the", "loaded", "document", "is", "the", "same", "as", "the", "original", ".", "</s>"]}, {"tids": [1, 7766, 326, 1375, 4564, 1375, 707, 628, 326, 1375, 531, 13198, 1375, 667, 358, 3387, 518, 8783, 25283, 1347, 279, 563, 444, 711, 1898, 3222, 263, 2], "score": -0.32240939140319824, "weight": 1, "toks": ["<s>", "Test", "the", "`", "hasNext", "`", "method", "from", "the", "`", "OResultSet", "`", "class", "to", "ensure", "it", "correctly", "identifies", "when", "a", "result", "set", "has", "more", "entries", ".", "</s>"]}, {"tids": [1, 7693, 716, 326, 1668, 4203, 1885, 326, 2282, 1668, 5198, 635, 17553, 279, 2923, 1272, 460, 263, 2], "score": -0.32812076807022095, "weight": 1, "toks": ["<s>", "Ensure", "that", "the", "document", "loaded", "matches", "the", "original", "document", "saved", "by", "comparing", "a", "specific", "property", "value", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 16.25033142170902, "bleu-avg": 57.967771534076554, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 3.174267365268845, "code-bleu-avg": 49.99751840859051, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 50, "edit-sim-avg": 83.7, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 80.0595238095238, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 37.5, "rouge-r-avg": 77.5, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 42.85714236734694, "rouge-f-avg": 78.5945373167639, "num-seq": 10}, "time": 0.8341195583343506, "misc": {}}
{"id": 101, "data_id": "csn-97962", "input_stids": [1, 32315, 411, 32305, 3231, 399, 405, 32305, 1262, 261, 4869, 734, 1409, 548, 262, 274, 32315, 6304, 3342, 6289, 4709, 531, 2519, 531, 6106, 8424, 531, 2519, 531, 13198, 531, 2519, 32315, 32315, 1191, 4254, 263, 14365, 261, 394, 531, 1299, 261, 729, 1759, 262, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 21, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 531, 2519, 997, 92, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 92, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 1923, 261, 997, 92, 262, 274, 531, 13198, 563, 273, 2063, 263, 1296, 261, 315, 3902, 6, 262, 274, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 1815, 8867, 261, 261, 1525, 262, 563, 263, 1024, 261, 262, 263, 3911, 261, 315, 3902, 6, 262, 269, 404, 48, 262, 274, 531, 2519, 997, 22, 273, 2063, 263, 1262, 261, 612, 263, 20066, 261, 262, 262, 274, 1815, 8867, 261, 997, 22, 263, 3911, 261, 315, 3902, 6, 262, 269, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 14373, 326, 1375, 1262, 1375, 707, 358, 1842, 17146, 279, 1668, 635, 2097, 1409, 2756, 263, 2], "score": -0.09405999630689621, "weight": 1, "toks": ["<s>", "Invoke", "the", "`", "load", "`", "method", "to", "test", "retrieving", "a", "document", "by", "its", "record", "identifier", ".", "</s>"]}, {"tids": [1, 2063, 263, 2376, 261, 262, 274, 2], "score": -0.27079057693481445, "weight": 1, "toks": ["<s>", "database", ".", "begin", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 2376, 261, 262, 274, 2], "score": -0.2890448570251465, "weight": 1, "toks": ["<s>", "database", ".", "begin", "(", ")", ";", "</s>"]}, {"tids": [1, 7766, 326, 1375, 1262, 1375, 707, 635, 17146, 279, 7243, 5198, 1668, 628, 326, 2063, 471, 6728, 309, 518, 1885, 326, 2282, 1790, 444, 4982, 6710, 263, 2], "score": -0.30909791588783264, "weight": 1, "toks": ["<s>", "Test", "the", "`", "load", "`", "method", "by", "retrieving", "a", "previously", "saved", "document", "from", "the", "database", "and", "checking", "if", "it", "matches", "the", "original", "properties", "set", "during", "creation", ".", "</s>"]}, {"tids": [1, 3049, 1375, 2063, 263, 2376, 261, 262, 1375, 358, 2376, 326, 2492, 263, 2], "score": -0.3168865740299225, "weight": 1, "toks": ["<s>", "Call", "`", "database", ".", "begin", "(", ")", "`", "to", "begin", "the", "transaction", ".", "</s>"]}, {"tids": [1, 1375, 2063, 263, 2376, 261, 262, 274, 1375, 2], "score": -0.3183385133743286, "weight": 1, "toks": ["<s>", "`", "database", ".", "begin", "(", ")", ";", "`", "</s>"]}, {"tids": [1, 2063, 263, 2376, 261, 262, 274, 2], "score": -0.3237188458442688, "weight": 1, "toks": ["<s>", "database", ".", "begin", "(", ")", ";", "</s>"]}, {"tids": [1, 14373, 1375, 2063, 263, 1262, 261, 612, 263, 20066, 261, 262, 262, 1375, 263, 2], "score": -0.3313997983932495, "weight": 1, "toks": ["<s>", "Invoke", "`", "database", ".", "load", "(", "id", ".", "getIdentity", "(", ")", ")", "`", ".", "</s>"]}, {"tids": [1, 2063, 263, 2376, 261, 262, 274, 2], "score": -0.3330143690109253, "weight": 1, "toks": ["<s>", "database", ".", "begin", "(", ")", ";", "</s>"]}, {"tids": [1, 14373, 1375, 2063, 263, 3294, 261, 262, 1375, 358, 12409, 326, 8938, 263, 2], "score": -0.33794793486595154, "weight": 1, "toks": ["<s>", "Invoke", "`", "database", ".", "commit", "(", ")", "`", "to", "finalize", "the", "transactions", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 16.590387014219715, "bleu-max": 87.73826753016615, "bleu-min": 16.590387014219715, "bleu-avg": 26.32617324272628, "code-bleu": 3.804899659639873, "code-bleu-max": 90.88933475803003, "code-bleu-min": 3.7794791771600713, "code-bleu-avg": 16.86354530478178, "edit-sim": 54, "edit-sim-max": 91, "edit-sim-min": 44, "edit-sim-avg": 55.4, "rouge-p": 37.5, "rouge-p-max": 83.33333333333334, "rouge-p-min": 30.0, "rouge-p-avg": 41.86904761904761, "rouge-r": 50.0, "rouge-r-max": 83.33333333333334, "rouge-r-min": 50.0, "rouge-r-avg": 55.0, "rouge-f": 42.85714236734694, "rouge-f-max": 83.33333283333334, "rouge-f-min": 37.49999953125, "rouge-f-avg": 47.27014603364902, "num-seq": 10}, "time": 0.7824068069458008, "misc": {}}
{"id": 102, "data_id": "csn-97962", "input_stids": [1, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 6304, 3342, 6289, 4709, 531, 2519, 531, 6106, 8424, 531, 2519, 531, 13198, 531, 2519, 32315, 32315, 531, 1253, 563, 273, 12168, 263, 1024, 261, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 261, 262, 1216, 1185, 288, 531, 5160, 1750, 263, 7383, 67, 6236, 18605, 67, 5017, 5996, 11367, 263, 5524, 261, 404, 262, 274, 1438, 273, 394, 531, 2081, 261, 629, 262, 274, 1438, 263, 444, 2081, 2375, 2853, 261, 15061, 67, 17229, 262, 274, 1438, 263, 11850, 261, 2900, 261, 262, 263, 20216, 261, 315, 3902, 6, 262, 262, 274, 1438, 263, 10235, 261, 262, 274, 7891, 2290, 273, 394, 531, 10977, 2290, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 10977, 2290, 809, 263, 26161, 261, 262, 262, 274, 7891, 2290, 263, 752, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 531, 4254, 559, 263, 18990, 3964, 262, 274, 2063, 273, 7891, 2290, 263, 1696, 261, 6304, 3342, 6289, 4709, 263, 667, 263, 8590, 261, 262, 269, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 531, 797, 7352, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 7352, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 4269, 16879, 262, 274, 531, 797, 3089, 797, 273, 2063, 263, 752, 797, 261, 315, 3902, 6, 262, 274, 3089, 797, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 263, 25207, 261, 531, 797, 263, 12425, 67, 2399, 263, 26623, 262, 274, 289, 632, 7360, 1071, 918, 1839, 261, 262, 288, 2063, 263, 1746, 261, 262, 274, 7891, 2290, 263, 1746, 261, 262, 274, 1438, 263, 5731, 261, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 5731, 261, 262, 274, 531, 812, 1989, 263, 1430, 12474, 261, 394, 1387, 261, 15061, 67, 17229, 262, 262, 274, 531, 10977, 263, 791, 261, 262, 263, 11850, 261, 262, 274, 289, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 32315, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 21, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 997, 21, 262, 274, 531, 2519, 997, 92, 273, 394, 531, 2519, 261, 315, 3902, 6, 262, 274, 997, 92, 263, 7486, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 1923, 261, 997, 92, 262, 274, 531, 13198, 563, 273, 2063, 263, 1296, 261, 315, 3902, 6, 262, 274, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 1815, 8867, 261, 261, 1525, 262, 563, 263, 1024, 261, 262, 263, 3911, 261, 315, 3902, 6, 262, 269, 404, 48, 262, 274, 531, 2519, 997, 22, 273, 2063, 263, 1262, 261, 612, 263, 20066, 261, 262, 262, 274, 1815, 8867, 261, 997, 22, 263, 3911, 261, 315, 3902, 6, 262, 269, 315, 3902, 6, 262, 274, 1815, 8381, 261, 563, 263, 4564, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 3049, 1375, 563, 263, 4564, 261, 262, 1375, 358, 866, 309, 326, 531, 13198, 711, 1898, 2186, 263, 2], "score": -0.07881484180688858, "weight": 1, "toks": ["<s>", "Call", "`", "result", ".", "hasNext", "(", ")", "`", "to", "check", "if", "the", "OResultSet", "has", "more", "elements", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 4564, 1375, 707, 20570, 291, 2357, 269, 999, 326, 2112, 525, 4873, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 5582, 2134, 261, 262, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1668, 273, 394, 531, 2519, 261, 315, 10548, 797, 315, 262, 274, 1668, 263, 7486, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 531, 6106, 8424, 612, 273, 2063, 263, 1923, 261, 1668, 262, 274, 531, 13198, 12168, 273, 2063, 263, 843, 261, 315, 9111, 4571, 10548, 797, 4852, 498, 273, 296, 460, 296, 315, 262, 274, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 12168, 263, 1746, 261, 262, 274, 2063, 263, 8006, 261, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.09517832845449448, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "hasNext", "`", "method", "concisely", ",", "use", "the", "provided", "junit", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testHasNext", "(", ")", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "document", "=", "new", "ODocument", "(", "\"", "SomeClass", "\"", ")", ";", "document", ".", "setProperty", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "OIdentifiable", "id", "=", "database", ".", "save", "(", "document", ")", ";", "OResultSet", "resultSet", "=", "database", ".", "query", "(", "\"", "SELECT", "FROM", "SomeClass", "WHERE", "key", "=", "'", "value", "'", "\"", ")", ";", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "resultSet", ".", "close", "(", ")", ";", "database", ".", "rollback", "(", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 16499, 326, 1842, 10766, 471, 7155, 603, 326, 707, 487, 324, 17802, 715, 487, 3323, 269, 326, 1024, 3021, 848, 506, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 5582, 2134, 1305, 261, 262, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1668, 273, 394, 531, 2519, 261, 315, 5090, 797, 315, 262, 274, 1668, 263, 7486, 261, 315, 3454, 974, 315, 269, 315, 7766, 751, 315, 262, 274, 2063, 263, 1923, 261, 1668, 262, 274, 531, 13198, 12168, 273, 2063, 263, 1296, 261, 315, 9111, 4571, 5090, 797, 315, 262, 274, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.13490353524684906, "weight": 1, "toks": ["<s>", "To", "simplify", "the", "test", "scenario", "and", "focus", "on", "the", "method", "as", "briefly", "as", "possible", ",", "the", "next", "statement", "can", "be", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testHasNextMethod", "(", ")", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "document", "=", "new", "ODocument", "(", "\"", "ExampleClass", "\"", ")", ";", "document", ".", "setProperty", "(", "\"", "exampleField", "\"", ",", "\"", "TestData", "\"", ")", ";", "database", ".", "save", "(", "document", ")", ";", "OResultSet", "resultSet", "=", "database", ".", "command", "(", "\"", "SELECT", "FROM", "ExampleClass", "\"", ")", ";", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 2], "score": -0.19380152225494385, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 4564, 261, 262, 1375, 707, 269, 999, 326, 3751, 1842, 981, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 5582, 2134, 261, 262, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 315, 7128, 315, 262, 274, 997, 263, 7486, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 2063, 263, 1923, 261, 997, 262, 274, 531, 13198, 12168, 273, 2063, 263, 843, 261, 315, 9111, 4571, 7128, 315, 262, 274, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 342, 342, 2073, 309, 1915, 353, 622, 4520, 1245, 563, 12168, 263, 1746, 261, 262, 274, 342, 342, 19968, 1839, 1842, 289, 1375, 1375, 1375, 2], "score": -0.19665156304836273, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "hasNext", "(", ")", "`", "method", ",", "use", "the", "following", "test", "code", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testHasNext", "(", ")", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc", "=", "new", "ODocument", "(", "\"", "STR", "\"", ")", ";", "doc", ".", "setProperty", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "database", ".", "save", "(", "doc", ")", ";", "OResultSet", "resultSet", "=", "database", ".", "query", "(", "\"", "SELECT", "FROM", "STR", "\"", ")", ";", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "/", "/", "Check", "if", "there", "is", "at", "least", "one", "result", "resultSet", ".", "close", "(", ")", ";", "/", "/", "Cleanup", "after", "test", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2672, 326, 1375, 4564, 1375, 707, 358, 3387, 716, 1915, 353, 279, 1024, 761, 316, 326, 1375, 531, 13198, 1375, 1865, 4440, 1375, 1024, 1375, 263, 2], "score": -0.2258387953042984, "weight": 1, "toks": ["<s>", "Use", "the", "`", "hasNext", "`", "method", "to", "ensure", "that", "there", "is", "a", "next", "item", "in", "the", "`", "OResultSet", "`", "before", "calling", "`", "next", "`", ".", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.2322196513414383, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "assertTrue", "(", "result", ".", "hasNext", "(", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1138, 1891, 6119, 382, 4188, 3342, 261, 262, 1216, 7558, 288, 2063, 263, 2376, 261, 262, 274, 289, 2], "score": -0.24840028584003448, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testQueryUpdateCreatedInTxTransaction", "(", ")", "throws", "InterruptedException", "{", "database", ".", "begin", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 1220, 5110, 1842, 707, 11932, 279, 25078, 1089, 353, 8783, 7681, 471, 5198, 316, 392, 531, 10977, 2290, 2063, 263, 16053, 1643, 269, 518, 11964, 326, 6873, 1089, 471, 22613, 434, 3222, 3470, 279, 2492, 2489, 819, 263, 23043, 1230, 269, 326, 707, 11643, 279, 2492, 269, 3414, 2795, 7429, 269, 471, 14649, 2182, 358, 326, 2063, 263, 9697, 269, 518, 11997, 279, 1296, 598, 7820, 358, 3929, 716, 326, 563, 444, 628, 326, 1296, 1914, 326, 2665, 924, 269, 18518, 11220, 7769, 326, 2063, 296, 272, 25078, 24425, 471, 6885, 3613, 1089, 5295, 263, 2], "score": -0.25241997838020325, "weight": 1, "toks": ["<s>", "This", "Java", "test", "method", "ensures", "a", "transactional", "update", "is", "correctly", "handled", "and", "saved", "in", "an", "OrientDB", "database", ".", "Moreover", ",", "it", "validates", "the", "successful", "update", "and", "retrieval", "of", "entries", "within", "a", "transaction", "bound", "context", ".", "Specifically", ",", "the", "method", "initializes", "a", "transaction", ",", "creates", "two", "documents", ",", "and", "saves", "them", "to", "the", "database", ".", "Then", ",", "it", "executes", "a", "command", "with", "assertions", "to", "verify", "that", "the", "result", "set", "from", "the", "command", "contains", "the", "expected", "values", ",", "essentially", "testing", "the", "database", "'", "s", "transactional", "integrity", "and", "behavior", "under", "update", "operations", ".", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 4564, 1375, 707, 316, 333, 819, 269, 1846, 848, 16499, 471, 7155, 326, 1842, 635, 16249, 1776, 518, 628, 1308, 5030, 578, 1207, 300, 4203, 3875, 87, 263, 24907, 543, 353, 392, 3454, 434, 3661, 326, 1842, 3377, 506, 19788, 358, 5122, 1018, 326, 1375, 4564, 1375, 707, 316, 279, 20570, 784, 21296, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 5582, 2134, 382, 13198, 261, 262, 288, 342, 342, 14323, 279, 2492, 2063, 263, 2376, 261, 262, 274, 342, 342, 1788, 471, 1923, 279, 1668, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 315, 10548, 797, 315, 262, 274, 997, 21, 263, 7486, 261, 315, 2690, 974, 315, 269, 315, 460, 21, 315, 262, 274, 2063, 263, 1923, 261, 997, 21, 262, 274, 342, 342, 2770, 358, 336, 279, 563, 444, 531, 13198, 12168, 273, 2063, 263, 843, 261, 315, 9111, 628, 10548, 797, 315, 262, 274, 342, 342, 5452, 716, 4564, 1135, 638, 269, 6932, 310, 326, 9805, 434, 622, 4520, 1245, 563, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 342, 342, 9645, 731, 635, 7647, 326, 563, 444, 12168, 263, 1746, 261, 262, 274, 342, 342, 4403, 326, 2492, 2063, 263, 8006, 261, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 11643, 279, 16745, 3330, 269, 11199, 4573, 5295, 358, 6490, 501, 4123, 716, 1375, 4564, 1375, 848, 506, 12256, 4095, 2566, 269, 471, 1508, 4271, 326, 3434, 4496, 434, 1375, 4564, 1375, 316, 333, 3875, 263, 1220, 17504, 11932, 716, 326, 2923, 707, 3613, 1842, 353, 24375, 2887, 19908, 21610, 263, 2], "score": -0.33841168880462646, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "hasNext", "`", "method", "in", "this", "context", ",", "you", "can", "simplify", "and", "focus", "the", "test", "by", "isolating", "it", "from", "other", "dependencies", "or", "process", "-", "loaded", "setups", ".", "Below", "is", "an", "example", "of", "how", "the", "test", "could", "be", "structured", "to", "directly", "target", "the", "`", "hasNext", "`", "method", "in", "a", "concise", "manner", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testHasNextInResultSet", "(", ")", "{", "/", "/", "Begin", "a", "transaction", "database", ".", "begin", "(", ")", ";", "/", "/", "Create", "and", "save", "a", "document", "ODocument", "doc1", "=", "new", "ODocument", "(", "\"", "SomeClass", "\"", ")", ";", "doc1", ".", "setProperty", "(", "\"", "someField", "\"", ",", "\"", "value1", "\"", ")", ";", "database", ".", "save", "(", "doc1", ")", ";", "/", "/", "Query", "to", "get", "a", "result", "set", "OResultSet", "resultSet", "=", "database", ".", "query", "(", "\"", "SELECT", "from", "SomeClass", "\"", ")", ";", "/", "/", "Assert", "that", "hasNext", "returns", "true", ",", "confirming", "the", "presence", "of", "at", "least", "one", "result", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "/", "/", "Clean", "up", "by", "closing", "the", "result", "set", "resultSet", ".", "close", "(", ")", ";", "/", "/", "End", "the", "transaction", "database", ".", "rollback", "(", ")", ";", "}", "`", "`", "`", "This", "test", "initializes", "a", "minimal", "environment", ",", "performs", "necessary", "operations", "to", "populate", "data", "such", "that", "`", "hasNext", "`", "can", "be", "meaningfully", "called", ",", "and", "then", "checks", "the", "correctness", "of", "`", "hasNext", "`", "in", "this", "setup", ".", "This", "approach", "ensures", "that", "the", "specific", "method", "under", "test", "is", "highlighted", "without", "unnecessary", "complexity", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 11.59979573963667, "bleu-max": 11.59979573963667, "bleu-min": 10.452061402298128, "bleu-avg": 11.424645880132482, "code-bleu": 22.616893329013156, "code-bleu-max": 22.616893329013156, "code-bleu-min": 22.494639164209037, "code-bleu-avg": 22.598222960070334, "edit-sim": 36, "edit-sim-max": 36, "edit-sim-min": 34, "edit-sim-avg": 35.5, "rouge-p": 36.36363636363637, "rouge-p-max": 36.36363636363637, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 35.757575757575765, "rouge-r": 80.0, "rouge-r-max": 80.0, "rouge-r-min": 80.0, "rouge-r-avg": 80.0, "rouge-f": 49.99999957031251, "rouge-f-max": 49.99999957031251, "rouge-f-min": 47.05882311418686, "rouge-f-avg": 49.411764279087386, "num-seq": 10}, "time": 0.9599869251251221, "misc": {}}
{"id": 103, "data_id": "csn-98008", "input_stids": [1, 2319, 3205, 1198, 907, 426, 3110, 2665, 12222, 727, 1253, 6708, 277, 3205, 277, 691, 2199, 442, 1397, 774, 1986, 31488, 2385, 31403, 31854, 31854, 23646, 766, 1380, 1686, 14145, 4859, 7051, 4859, 7051, 5480, 329, 2021, 32315, 32315, 7766, 1908, 1669, 11050, 1064, 1318, 32315, 531, 1908, 1669, 11050, 1064, 1318, 1033, 514, 32315, 32315, 32315, 632, 1439, 1071, 3852, 1250, 27970, 1253, 261, 514, 1191, 18948, 269, 1033, 1191, 1253, 262, 288, 1198, 907, 426, 3110, 263, 527, 261, 1191, 18948, 262, 274, 327, 527, 1253, 261, 1191, 18948, 269, 261, 531, 3342, 1253, 6110, 262, 1191, 1253, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 32315, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 2], "score": -0.152383953332901, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSimpleFinishLocal", "(", ")", "</s>"]}, {"tids": [1, 14373, 27970, 1253, 707, 598, 279, 1191, 756, 508, 471, 279, 5416, 531, 3342, 1253, 6110, 358, 1842, 563, 2719, 471, 1198, 2907, 6885, 263, 2], "score": -0.15421634912490845, "weight": 1, "toks": ["<s>", "Invoke", "setLocalResult", "method", "with", "a", "local", "node", "name", "and", "a", "mock", "OTransactionResultPayload", "to", "test", "result", "addition", "and", "debug", "logging", "behavior", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 288, 531, 1908, 1669, 11050, 1064, 1318, 3301, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 262, 274, 1815, 5510, 261, 3301, 263, 27970, 1253, 261, 315, 2029, 21, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 262, 274, 289, 2], "score": -0.25312539935112, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSimpleFinishLocal", "(", ")", "{", "ONewDistributedResponseManager", "manager", "=", "new", "ONewDistributedResponseManager", "(", ")", ";", "assertTrue", "(", "manager", ".", "setLocalResult", "(", "\"", "Node1", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1788, 471, 1842, 279, 4143, 10766, 1625, 279, 1191, 563, 353, 444, 471, 31854, 353, 20186, 2155, 7636, 263, 2], "score": -0.2661663293838501, "weight": 1, "toks": ["<s>", "Create", "and", "test", "a", "simple", "scenario", "where", "a", "local", "result", "is", "set", "and", "quorum", "is", "achieved", "immediately", ".", "</s>"]}, {"tids": [1, 657, 3433, 1842, 1375, 1842, 5784, 11641, 2042, 1375, 269, 1846, 1410, 752, 392, 791, 434, 1375, 1166, 1669, 11050, 1064, 1318, 1375, 269, 20089, 279, 1191, 563, 269, 471, 1551, 403, 2856, 1375, 27970, 1253, 1375, 8783, 8488, 471, 9064, 333, 563, 269, 27504, 715, 26704, 309, 518, 8783, 7372, 326, 9702, 1207, 364, 326, 1375, 1198, 907, 426, 3110, 1375, 666, 471, 326, 31854, 12860, 309, 12008, 263, 1220, 903, 5615, 279, 21251, 11565, 1842, 648, 7155, 310, 603, 326, 5337, 14176, 471, 24425, 434, 326, 1375, 27970, 1253, 1375, 707, 263, 2], "score": -0.27125096321105957, "weight": 1, "toks": ["<s>", "In", "your", "test", "`", "testSimpleFinishLocal", "`", ",", "you", "should", "create", "an", "instance", "of", "`", "NewDistributedResponseManager", "`", ",", "simulate", "a", "local", "result", ",", "and", "assess", "whether", "`", "setLocalResult", "`", "correctly", "processes", "and", "stores", "this", "result", ",", "simultaneously", "evaluating", "if", "it", "correctly", "handles", "the", "updating", "process", "for", "the", "`", "debugNodeReplied", "`", "list", "and", "the", "quorum", "mechanism", "if", "applicable", ".", "This", "will", "provide", "a", "straightforward", "test", "case", "focusing", "on", "the", "basic", "functionality", "and", "integrity", "of", "the", "`", "setLocalResult", "`", "method", ".", "</s>"]}, {"tids": [1, 2974, 14382, 715, 1842, 326, 1375, 27970, 1253, 1375, 707, 3470, 1375, 1166, 1669, 11050, 1064, 1318, 1375, 269, 3387, 326, 1842, 20761, 326, 563, 2719, 471, 1198, 11093, 18699, 1961, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 2042, 1253, 261, 262, 288, 514, 1191, 18948, 273, 315, 2029, 21, 315, 274, 531, 3342, 1253, 6110, 1191, 1253, 273, 394, 531, 3342, 1253, 6110, 261, 262, 274, 1166, 1669, 11050, 1064, 1318, 3301, 273, 394, 1166, 1669, 11050, 1064, 1318, 261, 262, 274, 1250, 563, 273, 3301, 263, 27970, 1253, 261, 1191, 18948, 269, 1191, 1253, 262, 274, 1815, 5510, 261, 563, 262, 274, 1815, 5510, 261, 3301, 263, 1198, 907, 426, 3110, 263, 1914, 261, 1191, 18948, 262, 262, 274, 1815, 8867, 261, 1191, 1253, 269, 3301, 263, 1686, 14145, 263, 336, 261, 1191, 18948, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.29719194769859314, "weight": 1, "toks": ["<s>", "To", "efficiently", "test", "the", "`", "setLocalResult", "`", "method", "within", "`", "NewDistributedResponseManager", "`", ",", "ensure", "the", "test", "verifies", "the", "result", "addition", "and", "debug", "tracking", "functionalities", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetLocalResult", "(", ")", "{", "String", "localNodeName", "=", "\"", "Node1", "\"", ";", "OTransactionResultPayload", "localResult", "=", "new", "OTransactionResultPayload", "(", ")", ";", "NewDistributedResponseManager", "manager", "=", "new", "NewDistributedResponseManager", "(", ")", ";", "boolean", "result", "=", "manager", ".", "setLocalResult", "(", "localNodeName", ",", "localResult", ")", ";", "assertTrue", "(", "result", ")", ";", "assertTrue", "(", "manager", ".", "debugNodeReplied", ".", "contains", "(", "localNodeName", ")", ")", ";", "assertEquals", "(", "localResult", ",", "manager", ".", "resultsByType", ".", "get", "(", "localNodeName", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1342, 2], "score": -0.2989443242549896, "weight": 1, "toks": ["<s>", "pass", "</s>"]}, {"tids": [1, 23047, 7769, 326, 6885, 1347, 279, 2202, 1191, 563, 353, 5204, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 288, 342, 342, 9190, 326, 3301, 1166, 1669, 11050, 1064, 1318, 3301, 273, 394, 1166, 1669, 11050, 1064, 1318, 261, 262, 274, 342, 342, 1788, 471, 444, 279, 1191, 563, 514, 1191, 18948, 273, 315, 2029, 21, 315, 274, 531, 3342, 1253, 6110, 1191, 1253, 273, 394, 531, 3342, 1253, 6110, 261, 315, 3438, 559, 315, 269, 315, 11958, 315, 262, 274, 3301, 263, 27970, 1253, 261, 1191, 18948, 269, 1191, 1253, 262, 274, 342, 342, 5452, 716, 326, 1191, 563, 353, 8783, 7681, 1815, 5510, 261, 3301, 263, 21955, 14145, 261, 262, 263, 5724, 261, 315, 11958, 315, 262, 262, 274, 1815, 8867, 261, 315, 11958, 315, 269, 3301, 263, 21955, 14145, 261, 262, 263, 336, 261, 315, 3438, 559, 315, 262, 263, 8601, 261, 262, 262, 274, 1815, 5510, 261, 3301, 263, 29264, 907, 426, 3110, 261, 262, 263, 1914, 261, 1191, 18948, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.30896496772766113, "weight": 1, "toks": ["<s>", "Consider", "testing", "the", "behavior", "when", "a", "single", "local", "result", "is", "processed", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSimpleFinishLocal", "(", ")", "{", "/", "/", "Initialize", "the", "manager", "NewDistributedResponseManager", "manager", "=", "new", "NewDistributedResponseManager", "(", ")", ";", "/", "/", "Create", "and", "set", "a", "local", "result", "String", "localNodeName", "=", "\"", "Node1", "\"", ";", "OTransactionResultPayload", "localResult", "=", "new", "OTransactionResultPayload", "(", "\"", "ResultType", "\"", ",", "\"", "Success", "\"", ")", ";", "manager", ".", "setLocalResult", "(", "localNodeName", ",", "localResult", ")", ";", "/", "/", "Assert", "that", "the", "local", "result", "is", "correctly", "handled", "assertTrue", "(", "manager", ".", "getResultsByType", "(", ")", ".", "containsKey", "(", "\"", "Success", "\"", ")", ")", ";", "assertEquals", "(", "\"", "Success", "\"", ",", "manager", ".", "getResultsByType", "(", ")", ".", "get", "(", "\"", "ResultType", "\"", ")", ".", "getResult", "(", ")", ")", ";", "assertTrue", "(", "manager", ".", "getDebugNodeReplied", "(", ")", ".", "contains", "(", "localNodeName", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 14373, 1375, 27970, 1253, 1375, 598, 279, 5416, 1375, 1191, 18948, 1375, 471, 279, 5416, 1375, 1191, 1253, 1375, 358, 3387, 518, 8488, 487, 2665, 263, 2], "score": -0.3141215145587921, "weight": 1, "toks": ["<s>", "Invoke", "`", "setLocalResult", "`", "with", "a", "mock", "`", "localNodeName", "`", "and", "a", "mock", "`", "localResult", "`", "to", "ensure", "it", "processes", "as", "expected", ".", "</s>"]}, {"tids": [1, 1788, 279, 4143, 1842, 10766, 1625, 1245, 756, 27609, 13760, 471, 3929, 326, 3301, 7372, 518, 8783, 263, 2], "score": -0.32711896300315857, "weight": 1, "toks": ["<s>", "Create", "a", "simple", "test", "scenario", "where", "one", "node", "finishes", "locally", "and", "verify", "the", "manager", "handles", "it", "correctly", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 34.92671028290049, "bleu-max": 34.92671028290049, "bleu-min": 16.590387014219715, "bleu-avg": 24.66390729645276, "code-bleu": 58.84455382833009, "code-bleu-max": 58.84455382833009, "code-bleu-min": 13.505145768011575, "code-bleu-avg": 31.959805985979386, "edit-sim": 46, "edit-sim-max": 47, "edit-sim-min": 36, "edit-sim-avg": 40.9, "rouge-p": 62.5, "rouge-p-max": 71.42857142857143, "rouge-p-min": 44.44444444444444, "rouge-p-avg": 56.01190476190477, "rouge-r": 71.42857142857143, "rouge-r-max": 71.42857142857143, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 64.28571428571428, "rouge-f": 66.6666661688889, "rouge-f-max": 71.42857092857143, "rouge-f-min": 49.99999950781251, "rouge-f-avg": 59.67857093292213, "num-seq": 10}, "time": 0.9356508255004883, "misc": {}}
{"id": 104, "data_id": "csn-98008", "input_stids": [1, 2319, 3205, 1198, 907, 426, 3110, 2665, 12222, 727, 1253, 6708, 277, 3205, 277, 691, 2199, 442, 1397, 774, 1986, 31488, 2385, 31403, 31854, 31854, 23646, 766, 1380, 1686, 14145, 4859, 7051, 4859, 7051, 5480, 329, 2021, 32315, 1071, 531, 3342, 11406, 21, 2174, 261, 262, 288, 6727, 273, 394, 2407, 411, 405, 261, 262, 274, 5295, 273, 394, 2407, 411, 405, 261, 262, 274, 289, 32315, 7766, 1908, 1669, 11050, 1064, 1318, 531, 3342, 11406, 21, 2174, 32315, 531, 1908, 1669, 11050, 1064, 1318, 1033, 514, 32315, 2229, 2174, 263, 1208, 261, 2492, 262, 274, 32315, 32315, 632, 1439, 1071, 3852, 1250, 27970, 1253, 261, 514, 1191, 18948, 269, 1033, 1191, 1253, 262, 288, 1198, 907, 426, 3110, 263, 527, 261, 1191, 18948, 262, 274, 327, 527, 1253, 261, 1191, 18948, 269, 261, 531, 3342, 1253, 6110, 262, 1191, 1253, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 32315, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 2], "topk": [{"tids": [1, 2492, 263, 27970, 1253, 261, 315, 756, 21, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.20763738453388214, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "node1", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 756, 21, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.2429017722606659, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "node1", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 756, 21, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.2785264849662781, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "node1", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2229, 2174, 263, 1208, 261, 2492, 262, 274, 2], "score": -0.2948172986507416, "weight": 1, "toks": ["<s>", "txTask", ".", "init", "(", "transaction", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 1208, 261, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 262, 262, 274, 2], "score": -0.31565189361572266, "weight": 1, "toks": ["<s>", "transaction", ".", "init", "(", "new", "ONewDistributedResponseManager", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1788, 392, 791, 434, 1375, 531, 1908, 1669, 11050, 1064, 1318, 1375, 471, 999, 518, 316, 326, 1375, 27970, 1253, 1375, 707, 358, 3929, 5057, 434, 279, 1191, 563, 263, 2], "score": -0.3221149146556854, "weight": 1, "toks": ["<s>", "Create", "an", "instance", "of", "`", "ONewDistributedResponseManager", "`", "and", "use", "it", "in", "the", "`", "setLocalResult", "`", "method", "to", "verify", "handling", "of", "a", "local", "result", ".", "</s>"]}, {"tids": [1, 531, 1669, 11050, 1064, 1318, 3301, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 262, 274, 3301, 263, 27970, 1253, 261, 315, 756, 21, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 1815, 5510, 261, 3301, 263, 31854, 23646, 261, 262, 262, 274, 2], "score": -0.33169063925743103, "weight": 1, "toks": ["<s>", "ODistributedResponseManager", "manager", "=", "new", "ONewDistributedResponseManager", "(", ")", ";", "manager", ".", "setLocalResult", "(", "\"", "node1", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "assertTrue", "(", "manager", ".", "quorumReached", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 756, 21, 315, 269, 394, 531, 3342, 1253, 6110, 261, 638, 269, 446, 262, 262, 274, 2], "score": -0.3357226252555847, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "node1", "\"", ",", "new", "OTransactionResultPayload", "(", "true", ",", "null", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 1208, 261, 394, 531, 3342, 261, 262, 262, 274, 2], "score": -0.34058621525764465, "weight": 1, "toks": ["<s>", "transaction", ".", "init", "(", "new", "OTransaction", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 756, 21, 315, 269, 394, 531, 3342, 1253, 6110, 261, 638, 269, 446, 262, 262, 274, 2], "score": -0.34200039505958557, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "node1", "\"", ",", "new", "OTransactionResultPayload", "(", "true", ",", "null", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 18.694920839494223, "bleu-max": 18.694920839494223, "bleu-min": 13.761232669480913, "bleu-avg": 15.480926141710379, "code-bleu": 32.70925044450602, "code-bleu-max": 32.70925044450602, "code-bleu-min": 2.0631626034518837, "code-bleu-avg": 10.761665490698755, "edit-sim": 38, "edit-sim-max": 39, "edit-sim-min": 35, "edit-sim-avg": 37.1, "rouge-p": 71.42857142857143, "rouge-p-max": 71.42857142857143, "rouge-p-min": 40.0, "rouge-p-avg": 52.027777777777786, "rouge-r": 45.45454545454545, "rouge-r-max": 45.45454545454545, "rouge-r-min": 36.36363636363637, "rouge-r-avg": 39.09090909090909, "rouge-f": 55.55555508024692, "rouge-f-max": 55.55555508024692, "rouge-f-min": 38.09523759637189, "rouge-f-avg": 44.43776058022072, "num-seq": 10}, "time": 0.8652665615081787, "misc": {}}
{"id": 105, "data_id": "csn-98008", "input_stids": [1, 2319, 3205, 1198, 907, 426, 3110, 2665, 12222, 727, 1253, 6708, 277, 3205, 277, 691, 2199, 442, 1397, 774, 1986, 31488, 2385, 31403, 31854, 31854, 23646, 766, 1380, 1686, 14145, 4859, 7051, 4859, 7051, 5480, 329, 2021, 32315, 1071, 531, 3342, 11406, 21, 2174, 261, 262, 288, 6727, 273, 394, 2407, 411, 405, 261, 262, 274, 5295, 273, 394, 2407, 411, 405, 261, 262, 274, 289, 32315, 7766, 1908, 1669, 11050, 1064, 1318, 531, 3342, 11406, 21, 2174, 6847, 32315, 531, 1908, 1669, 11050, 1064, 1318, 1033, 514, 32315, 2229, 2174, 263, 1208, 261, 2492, 262, 274, 32315, 32315, 632, 1439, 1071, 3852, 1250, 27970, 1253, 261, 514, 1191, 18948, 269, 1033, 1191, 1253, 262, 288, 1198, 907, 426, 3110, 263, 527, 261, 1191, 18948, 262, 274, 327, 527, 1253, 261, 1191, 18948, 269, 261, 531, 3342, 1253, 6110, 262, 1191, 1253, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 32315, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2], "topk": [{"tids": [1, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 2492, 263, 1208, 261, 2199, 262, 274, 1250, 563, 273, 2492, 263, 27970, 1253, 261, 315, 2029, 21, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 1815, 5510, 261, 563, 262, 274, 1815, 5510, 261, 2492, 263, 31854, 23646, 261, 262, 262, 274, 2], "score": -0.00690130889415741, "weight": 1, "toks": ["<s>", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "transaction", ".", "init", "(", "nodes", ")", ";", "boolean", "result", "=", "transaction", ".", "setLocalResult", "(", "\"", "Node1", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "assertTrue", "(", "result", ")", ";", "assertTrue", "(", "transaction", ".", "quorumReached", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 2], "score": -0.4093465507030487, "weight": 1, "toks": ["<s>", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "</s>"]}, {"tids": [1, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 2], "score": -0.4371803402900696, "weight": 1, "toks": ["<s>", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "</s>"]}, {"tids": [1, 2199, 263, 527, 261, 315, 756, 21, 315, 262, 274, 2], "score": -0.4508834183216095, "weight": 1, "toks": ["<s>", "nodes", ".", "add", "(", "\"", "node1", "\"", ")", ";", "</s>"]}, {"tids": [1, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 2], "score": -0.48216989636421204, "weight": 1, "toks": ["<s>", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "</s>"]}, {"tids": [1, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 2], "score": -0.48440104722976685, "weight": 1, "toks": ["<s>", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "</s>"]}, {"tids": [1, 2199, 263, 527, 261, 315, 3566, 907, 21, 315, 262, 274, 2], "score": -0.49655216932296753, "weight": 1, "toks": ["<s>", "nodes", ".", "add", "(", "\"", "LocalNode1", "\"", ")", ";", "</s>"]}, {"tids": [1, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 2], "score": -0.5014622807502747, "weight": 1, "toks": ["<s>", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "</s>"]}, {"tids": [1, 2199, 263, 527, 261, 315, 756, 21, 315, 262, 274, 2], "score": -0.5085995197296143, "weight": 1, "toks": ["<s>", "nodes", ".", "add", "(", "\"", "node1", "\"", ")", ";", "</s>"]}, {"tids": [1, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 2], "score": -0.5236238837242126, "weight": 1, "toks": ["<s>", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 11.567107377520932, "bleu-avg": 32.211123393106774, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 5.1195977596216, "code-bleu-avg": 29.478602842403482, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 44, "edit-sim-avg": 62.0, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 35.714285714285715, "rouge-p-avg": 58.33028083028082, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 88.33333333333334, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 49.999999531250005, "rouge-f-avg": 68.94630761126041, "num-seq": 10}, "time": 0.9139590263366699, "misc": {}}
{"id": 106, "data_id": "csn-98008", "input_stids": [1, 2319, 3205, 1198, 907, 426, 3110, 2665, 12222, 727, 1253, 6708, 277, 3205, 277, 691, 2199, 442, 1397, 774, 1986, 31488, 2385, 31403, 31854, 31854, 23646, 766, 1380, 1686, 14145, 4859, 7051, 4859, 7051, 5480, 329, 2021, 32315, 1071, 531, 3342, 11406, 21, 2174, 261, 262, 288, 6727, 273, 394, 2407, 411, 405, 261, 262, 274, 5295, 273, 394, 2407, 411, 405, 261, 262, 274, 289, 32315, 7766, 1908, 1669, 11050, 1064, 1318, 531, 3342, 11406, 21, 2174, 6847, 32315, 531, 1908, 1669, 11050, 1064, 1318, 1033, 514, 32315, 327, 2199, 274, 32315, 32315, 632, 1439, 1071, 3852, 1250, 27970, 1253, 261, 514, 1191, 18948, 269, 1033, 1191, 1253, 262, 288, 1198, 907, 426, 3110, 263, 527, 261, 1191, 18948, 262, 274, 327, 527, 1253, 261, 1191, 18948, 269, 261, 531, 3342, 1253, 6110, 262, 1191, 1253, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 32315, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.011689228005707264, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.3758135437965393, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.39998650550842285, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.43483588099479675, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.4423019587993622, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.44612905383110046, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.4515879452228546, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.46777263283729553, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.48165246844291687, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.4849271774291992, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 16.463248243504296, "bleu-avg": 27.27663808013039, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 4.349207578096977, "code-bleu-avg": 15.076981469658866, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 22, "edit-sim-avg": 39.7, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 40.0, "rouge-p-avg": 53.28571428571429, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 50.0, "rouge-r-avg": 76.66666666666667, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 46.153845656804734, "rouge-f-avg": 62.329669850611594, "num-seq": 10}, "time": 0.9223883152008057, "misc": {}}
{"id": 107, "data_id": "csn-98008", "input_stids": [1, 2319, 3205, 1198, 907, 426, 3110, 2665, 12222, 727, 1253, 6708, 277, 3205, 277, 691, 2199, 442, 1397, 774, 1986, 31488, 2385, 31403, 31854, 31854, 23646, 766, 1380, 1686, 14145, 4859, 7051, 4859, 7051, 5480, 329, 2021, 32315, 1071, 531, 3342, 11406, 21, 2174, 261, 262, 288, 6727, 273, 394, 2407, 411, 405, 261, 262, 274, 5295, 273, 394, 2407, 411, 405, 261, 262, 274, 289, 32315, 7766, 1908, 1669, 11050, 1064, 1318, 531, 3342, 11406, 21, 2174, 6847, 32315, 531, 1908, 1669, 11050, 1064, 1318, 1033, 514, 32315, 327, 5242, 9516, 13290, 261, 341, 3335, 269, 341, 11710, 262, 692, 300, 404, 294, 404, 274, 32315, 32315, 632, 1439, 1071, 3852, 1250, 27970, 1253, 261, 514, 1191, 18948, 269, 1033, 1191, 1253, 262, 288, 1198, 907, 426, 3110, 263, 527, 261, 1191, 18948, 262, 274, 327, 527, 1253, 261, 1191, 18948, 269, 261, 531, 3342, 1253, 6110, 262, 1191, 1253, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 32315, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.03064914420247078, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.3430493474006653, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.37380459904670715, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.37865063548088074, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 14373, 1375, 27970, 1253, 1375, 707, 471, 3929, 309, 518, 8783, 8488, 471, 9064, 1191, 1686, 269, 24831, 326, 707, 1135, 1375, 638, 1375, 309, 326, 1674, 353, 6873, 263, 2], "score": -0.3966240882873535, "weight": 1, "toks": ["<s>", "Invoke", "`", "setLocalResult", "`", "method", "and", "verify", "if", "it", "correctly", "processes", "and", "stores", "local", "results", ",", "ensuring", "the", "method", "returns", "`", "true", "`", "if", "the", "operation", "is", "successful", ".", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.40975940227508545, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 14373, 1375, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 1375, 2], "score": -0.4198002815246582, "weight": 1, "toks": ["<s>", "Invoke", "`", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", "`", "</s>"]}, {"tids": [1, 1021, 707, 1375, 1842, 5784, 11641, 2042, 261, 262, 1375, 353, 26584, 358, 1842, 326, 5337, 445, 310, 434, 4076, 310, 279, 1191, 2492, 3470, 392, 791, 434, 326, 1375, 531, 3342, 11406, 21, 2174, 1375, 263, 1021, 1842, 21195, 11643, 326, 1375, 531, 3342, 11406, 21, 2174, 1375, 733, 269, 1508, 1678, 731, 279, 1375, 6847, 1375, 434, 2199, 1492, 854, 3096, 358, 326, 666, 263, 657, 333, 2923, 1842, 10766, 269, 326, 756, 4141, 315, 7128, 315, 353, 3096, 13605, 269, 1496, 6541, 358, 326, 1790, 434, 279, 1375, 6847, 1375, 269, 6751, 3222, 854, 6635, 5105, 269, 471, 315, 7128, 315, 903, 9788, 1338, 3647, 316, 326, 444, 263, 1021, 1842, 353, 4075, 379, 6906, 12613, 358, 866, 309, 326, 1375, 531, 3342, 11406, 21, 2174, 1375, 848, 1640, 326, 2719, 434, 2199, 8783, 471, 10016, 358, 1842, 326, 2172, 3875, 434, 326, 1562, 263, 10724, 269, 326, 864, 2606, 1552, 486, 11247, 17940, 6534, 2199, 358, 326, 444, 269, 1492, 19816, 87, 716, 3344, 326, 1842, 353, 14715, 578, 9271, 4209, 471, 7820, 261, 358, 866, 326, 919, 434, 326, 2492, 578, 326, 5426, 434, 6534, 2199, 262, 854, 3577, 358, 7418, 1954, 326, 14176, 3832, 18432, 263, 2], "score": -0.4263857305049896, "weight": 1, "toks": ["<s>", "The", "method", "`", "testSimpleFinishLocal", "(", ")", "`", "is", "designed", "to", "test", "the", "basic", "functioning", "of", "finishing", "a", "local", "transaction", "within", "an", "instance", "of", "the", "`", "OTransactionPhase1Task", "`", ".", "The", "test", "specifically", "initializes", "the", "`", "OTransactionPhase1Task", "`", "object", ",", "then", "sets", "up", "a", "`", "HashSet", "`", "of", "nodes", "which", "are", "added", "to", "the", "list", ".", "In", "this", "specific", "test", "scenario", ",", "the", "node", "named", "\"", "STR", "\"", "is", "added", "twice", ",", "but", "due", "to", "the", "properties", "of", "a", "`", "HashSet", "`", ",", "duplicate", "entries", "are", "automatically", "filtered", ",", "and", "\"", "STR", "\"", "will", "appear", "only", "once", "in", "the", "set", ".", "The", "test", "is", "presumably", "intended", "to", "check", "if", "the", "`", "OTransactionPhase1Task", "`", "can", "handle", "the", "addition", "of", "nodes", "correctly", "and", "possibly", "to", "test", "the", "initial", "setup", "of", "the", "task", ".", "However", ",", "the", "given", "trace", "does", "not", "proceed", "beyond", "adding", "nodes", "to", "the", "set", ",", "which", "suggests", "that", "either", "the", "test", "is", "incomplete", "or", "further", "actions", "and", "assertions", "(", "to", "check", "the", "state", "of", "the", "transaction", "or", "the", "effect", "of", "adding", "nodes", ")", "are", "needed", "to", "fully", "validate", "the", "functionality", "being", "tested", ".", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.4398958086967468, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.45155230164527893, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 16.463248243504296, "bleu-avg": 27.276638080130386, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 4.349207578096977, "code-bleu-avg": 15.076981469658866, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 22, "edit-sim-avg": 39.7, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 40.0, "rouge-p-avg": 53.28571428571429, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 50.0, "rouge-r-avg": 76.66666666666667, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 46.153845656804734, "rouge-f-avg": 62.329669850611594, "num-seq": 10}, "time": 0.9074969291687012, "misc": {}}
{"id": 108, "data_id": "csn-98008", "input_stids": [1, 2319, 3205, 1198, 907, 426, 3110, 2665, 12222, 727, 1253, 6708, 277, 3205, 277, 691, 2199, 442, 1397, 774, 1986, 31488, 2385, 31403, 31854, 31854, 23646, 766, 1380, 1686, 14145, 4859, 7051, 4859, 7051, 5480, 329, 2021, 32315, 1071, 531, 3342, 11406, 21, 2174, 261, 262, 288, 6727, 273, 394, 2407, 411, 405, 261, 262, 274, 5295, 273, 394, 2407, 411, 405, 261, 262, 274, 289, 32315, 7766, 1908, 1669, 11050, 1064, 1318, 531, 3342, 11406, 21, 2174, 6847, 32315, 531, 1908, 1669, 11050, 1064, 1318, 1033, 514, 32315, 4104, 907, 5911, 263, 13497, 261, 4104, 3205, 1265, 3629, 263, 652, 261, 315, 3902, 6, 269, 531, 559, 263, 7141, 22235, 7660, 8352, 262, 262, 274, 32315, 32315, 632, 1439, 1071, 3852, 1250, 27970, 1253, 261, 514, 1191, 18948, 269, 1033, 1191, 1253, 262, 288, 1198, 907, 426, 3110, 263, 527, 261, 1191, 18948, 262, 274, 327, 527, 1253, 261, 1191, 18948, 269, 261, 531, 3342, 1253, 6110, 262, 1191, 1253, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 32315, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 1815, 5510, 261, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 262, 274, 2], "score": -0.03940064460039139, "weight": 1, "toks": ["<s>", "assertTrue", "(", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 1021, 1842, 707, 1410, 4356, 1375, 27970, 1253, 1375, 358, 3929, 326, 6885, 1347, 279, 1191, 563, 353, 444, 263, 13743, 353, 3661, 1846, 4825, 4872, 518, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 2042, 1253, 261, 262, 288, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 262, 274, 531, 3342, 1253, 6110, 3296, 6110, 273, 394, 531, 3342, 1253, 6110, 261, 262, 274, 1250, 563, 273, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 3296, 6110, 262, 274, 1815, 5510, 261, 563, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.29817575216293335, "weight": 1, "toks": ["<s>", "The", "test", "method", "should", "invoke", "`", "setLocalResult", "`", "to", "verify", "the", "behavior", "when", "a", "local", "result", "is", "set", ".", "Here", "is", "how", "you", "might", "construct", "it", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetLocalResult", "(", ")", "{", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", ")", ";", "OTransactionResultPayload", "samplePayload", "=", "new", "OTransactionResultPayload", "(", ")", ";", "boolean", "result", "=", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "samplePayload", ")", ";", "assertTrue", "(", "result", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 25395, 261, 2492, 262, 274, 2], "score": -0.3495523929595947, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "transaction", ")", ";", "</s>"]}, {"tids": [1, 2199, 263, 963, 261, 262, 1410, 506, 404, 263, 2], "score": -0.36698973178863525, "weight": 1, "toks": ["<s>", "nodes", ".", "size", "(", ")", "should", "be", "1", ".", "</s>"]}, {"tids": [1, 1788, 279, 1191, 563, 471, 3929, 326, 1191, 563, 353, 444, 8783, 263, 2], "score": -0.37663063406944275, "weight": 1, "toks": ["<s>", "Create", "a", "local", "result", "and", "verify", "the", "local", "result", "is", "set", "correctly", ".", "</s>"]}, {"tids": [1, 1788, 279, 1842, 10766, 716, 11932, 1347, 4440, 1375, 27970, 1253, 1375, 364, 279, 3089, 756, 3229, 4124, 269, 518, 1338, 6880, 3647, 23248, 9287, 310, 279, 31854, 263, 2], "score": -0.38511690497398376, "weight": 1, "toks": ["<s>", "Create", "a", "test", "scenario", "that", "ensures", "when", "calling", "`", "setLocalResult", "`", "for", "a", "unique", "node", "multiple", "times", ",", "it", "only", "counts", "once", "towards", "reaching", "a", "quorum", ".", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.3873107135295868, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2492, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 342, 380, 1775, 487, 3577, 380, 342, 262, 262, 274, 2], "score": -0.38802626729011536, "weight": 1, "toks": ["<s>", "transaction", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", "/", "*", "arguments", "as", "needed", "*", "/", ")", ")", ";", "</s>"]}, {"tids": [1, 17602, 310, 1375, 1842, 5784, 11641, 2042, 1375, 1410, 4046, 471, 1836, 326, 707, 358, 1954, 4143, 2719, 434, 1191, 1686, 358, 326, 16859, 766, 3301, 316, 326, 2492, 1562, 269, 6932, 310, 326, 2619, 296, 272, 7123, 358, 8783, 1640, 28474, 1625, 1245, 578, 1898, 2199, 356, 887, 326, 1967, 756, 3229, 4124, 263, 1220, 7434, 326, 1755, 29088, 5057, 434, 756, 26260, 358, 326, 1674, 263, 2], "score": -0.41412532329559326, "weight": 1, "toks": ["<s>", "Invoking", "`", "testSimpleFinishLocal", "`", "should", "initialize", "and", "execute", "the", "method", "to", "validate", "simple", "addition", "of", "local", "results", "to", "the", "distributed", "response", "manager", "in", "the", "transaction", "task", ",", "confirming", "the", "system", "'", "s", "ability", "to", "correctly", "handle", "situations", "where", "one", "or", "more", "nodes", "contribute", "the", "same", "node", "multiple", "times", ".", "This", "tests", "the", "redundancy", "handling", "of", "node", "additions", "to", "the", "operation", ".", "</s>"]}, {"tids": [1, 7693, 326, 1375, 27970, 1253, 1375, 707, 8783, 8488, 471, 9064, 279, 1191, 2492, 563, 263, 2], "score": -0.4231221377849579, "weight": 1, "toks": ["<s>", "Ensure", "the", "`", "setLocalResult", "`", "method", "correctly", "processes", "and", "stores", "a", "local", "transaction", "result", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 4.89145809109788, "bleu-max": 20.069139434380386, "bleu-min": 4.89145809109788, "bleu-avg": 14.04679629348279, "code-bleu": 0.9843346987938654, "code-bleu-max": 17.92751323809871, "code-bleu-min": 0.9843346987938654, "code-bleu-avg": 9.460030639631656, "edit-sim": 21, "edit-sim-max": 81, "edit-sim-min": 21, "edit-sim-avg": 63.1, "rouge-p": 66.66666666666666, "rouge-p-max": 87.5, "rouge-p-min": 55.55555555555556, "rouge-p-avg": 75.32142857142857, "rouge-r": 33.33333333333333, "rouge-r-max": 66.66666666666666, "rouge-r-min": 33.33333333333333, "rouge-r-avg": 55.83333333333333, "rouge-f": 44.444444000000004, "rouge-f-max": 72.72727223140495, "rouge-f-min": 44.444444000000004, "rouge-f-avg": 63.73425940727973, "num-seq": 10}, "time": 0.8773560523986816, "misc": {}}
{"id": 109, "data_id": "csn-98008", "input_stids": [1, 727, 1253, 766, 1380, 32315, 1071, 531, 1908, 1669, 11050, 1064, 1318, 261, 531, 3342, 11406, 21, 2174, 277, 691, 269, 2200, 411, 514, 405, 277, 3205, 269, 1000, 411, 514, 405, 2199, 442, 1397, 774, 1986, 31488, 269, 509, 2319, 3205, 269, 509, 2665, 12222, 269, 509, 31854, 262, 288, 333, 263, 277, 691, 273, 277, 691, 274, 333, 263, 277, 3205, 273, 277, 3205, 274, 333, 263, 2199, 442, 1397, 774, 1986, 31488, 273, 2199, 442, 1397, 774, 1986, 31488, 274, 333, 263, 2319, 3205, 273, 2319, 3205, 274, 333, 263, 2665, 12222, 273, 2665, 12222, 274, 333, 263, 31854, 273, 31854, 274, 2021, 273, 277, 691, 263, 1322, 7121, 2694, 261, 2665, 12222, 262, 274, 289, 32315, 7766, 1908, 1669, 11050, 1064, 1318, 531, 3342, 11406, 21, 2174, 6847, 531, 1908, 1669, 11050, 1064, 1318, 32315, 531, 1908, 1669, 11050, 1064, 1318, 1033, 514, 32315, 727, 1033, 2385, 273, 766, 480, 446, 692, 766, 263, 19275, 261, 262, 294, 446, 274, 32315, 32315, 632, 1439, 1071, 3852, 1250, 27970, 1253, 261, 514, 1191, 18948, 269, 1033, 1191, 1253, 262, 288, 1198, 907, 426, 3110, 263, 527, 261, 1191, 18948, 262, 274, 327, 527, 1253, 261, 1191, 18948, 269, 261, 531, 3342, 1253, 6110, 262, 1191, 1253, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 32315, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 890, 269, 890, 269, 576, 262, 274, 2], "topk": [{"tids": [1, 1021, 1375, 1842, 5784, 11641, 2042, 261, 262, 1375, 707, 1410, 4356, 1375, 27970, 1253, 261, 262, 1375, 358, 1842, 2097, 6885, 263, 2], "score": -0.1982472836971283, "weight": 1, "toks": ["<s>", "The", "`", "testSimpleFinishLocal", "(", ")", "`", "method", "should", "invoke", "`", "setLocalResult", "(", ")", "`", "to", "test", "its", "behavior", ".", "</s>"]}, {"tids": [1, 1021, 1842, 1410, 3929, 716, 1375, 27970, 1253, 1375, 8783, 7372, 471, 9064, 326, 1191, 756, 296, 272, 563, 263, 2], "score": -0.22583383321762085, "weight": 1, "toks": ["<s>", "The", "test", "should", "verify", "that", "`", "setLocalResult", "`", "correctly", "handles", "and", "stores", "the", "local", "node", "'", "s", "result", ".", "</s>"]}, {"tids": [1, 632, 20482, 17992, 830, 4941, 12795, 560, 2], "score": -0.25026604533195496, "weight": 1, "toks": ["<s>", "@", "simplifiedCyclomaticComplexity", "</s>"]}, {"tids": [1, 4554, 848, 1842, 326, 707, 635, 6728, 309, 326, 1375, 27970, 1253, 1375, 707, 8488, 326, 1191, 563, 8783, 471, 4533, 326, 2713, 919, 487, 2665, 263, 2], "score": -0.2635285556316376, "weight": 1, "toks": ["<s>", "You", "can", "test", "the", "method", "by", "checking", "if", "the", "`", "setLocalResult", "`", "method", "processes", "the", "local", "result", "correctly", "and", "updates", "the", "internal", "state", "as", "expected", ".", "</s>"]}, {"tids": [1, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 638, 269, 446, 262, 262, 274, 2], "score": -0.2892839014530182, "weight": 1, "toks": ["<s>", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", "true", ",", "null", ")", ")", ";", "</s>"]}, {"tids": [1, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.31263789534568787, "weight": 1, "toks": ["<s>", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.3130333125591278, "weight": 1, "toks": ["<s>", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.319396048784256, "weight": 1, "toks": ["<s>", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 5510, 261, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 262, 274, 2], "score": -0.3237939476966858, "weight": 1, "toks": ["<s>", "assertTrue", "(", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 274, 2], "score": -0.34255629777908325, "weight": 1, "toks": ["<s>", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 36.191500521567086, "bleu-max": 60.0194869573765, "bleu-min": 36.191500521567086, "bleu-avg": 43.54144719389706, "code-bleu": 22.747503235221167, "code-bleu-max": 37.044469158206724, "code-bleu-min": 22.747503235221167, "code-bleu-avg": 26.94130436328311, "edit-sim": 74, "edit-sim-max": 83, "edit-sim-min": 72, "edit-sim-avg": 75.6, "rouge-p": 87.5, "rouge-p-max": 100.0, "rouge-p-min": 70.0, "rouge-p-avg": 83.52777777777779, "rouge-r": 70.0, "rouge-r-max": 80.0, "rouge-r-min": 70.0, "rouge-r-avg": 71.0, "rouge-f": 77.77777728395063, "rouge-f-max": 82.35294069204151, "rouge-f-min": 69.9999995, "rouge-f-avg": 76.49260356394954, "num-seq": 10}, "time": 0.8414745330810547, "misc": {}}
{"id": 110, "data_id": "csn-98008", "input_stids": [1, 727, 1253, 32315, 632, 1439, 1071, 3852, 1250, 27970, 1253, 261, 514, 1191, 18948, 269, 1033, 1191, 1253, 262, 288, 1198, 907, 426, 3110, 263, 527, 261, 1191, 18948, 262, 274, 327, 527, 1253, 261, 1191, 18948, 269, 261, 531, 3342, 1253, 6110, 262, 1191, 1253, 262, 274, 289, 32315, 7766, 1908, 1669, 11050, 1064, 1318, 531, 3342, 11406, 21, 2174, 6847, 531, 1908, 1669, 11050, 1064, 1318, 32315, 1033, 514, 32315, 509, 31854, 273, 374, 274, 32315, 32315, 632, 1439, 1071, 3852, 1250, 27970, 1253, 261, 514, 1191, 18948, 269, 1033, 1191, 1253, 262, 288, 1198, 907, 426, 3110, 263, 527, 261, 1191, 18948, 262, 274, 327, 527, 1253, 261, 1191, 18948, 269, 261, 531, 3342, 1253, 6110, 262, 1191, 1253, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 32315, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 890, 269, 890, 269, 576, 262, 274, 1815, 8381, 261, 766, 1318, 263, 27970, 1253, 261, 315, 3902, 6, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 694, 2042, 1253, 261, 262, 288, 531, 1908, 1669, 11050, 1064, 1318, 3301, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 394, 531, 3342, 11406, 21, 2174, 261, 262, 269, 394, 6847, 411, 405, 261, 5647, 263, 8528, 261, 315, 2029, 21, 315, 262, 262, 269, 394, 6847, 411, 405, 261, 5647, 263, 8528, 261, 315, 2029, 21, 315, 262, 262, 269, 404, 269, 404, 269, 404, 262, 274, 1815, 5510, 261, 3301, 263, 27970, 1253, 261, 315, 2029, 21, 315, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 289, 2], "score": -0.19775491952896118, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLocalResult", "(", ")", "{", "ONewDistributedResponseManager", "manager", "=", "new", "ONewDistributedResponseManager", "(", "new", "OTransactionPhase1Task", "(", ")", ",", "new", "HashSet", "<", ">", "(", "Arrays", ".", "asList", "(", "\"", "Node1", "\"", ")", ")", ",", "new", "HashSet", "<", ">", "(", "Arrays", ".", "asList", "(", "\"", "Node1", "\"", ")", ")", ",", "1", ",", "1", ",", "1", ")", ";", "assertTrue", "(", "manager", ".", "setLocalResult", "(", "\"", "Node1", "\"", ",", "new", "OTxSuccess", "(", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 657, 326, 1842, 707, 1375, 1842, 5784, 11641, 2042, 261, 262, 1375, 269, 752, 392, 791, 434, 1375, 531, 1908, 1669, 11050, 1064, 1318, 1375, 598, 279, 2492, 471, 279, 444, 434, 756, 1257, 263, 1436, 6751, 756, 1257, 358, 3387, 326, 444, 3415, 2182, 269, 23500, 15086, 1245, 3089, 756, 263, 1000, 31854, 8433, 471, 4395, 358, 444, 279, 1191, 563, 263, 1021, 2665, 6885, 353, 716, 3637, 326, 1191, 563, 903, 486, 18866, 326, 31854, 12405, 269, 20356, 1375, 1815, 8381, 1375, 1410, 506, 5505, 358, 1815, 326, 707, 296, 272, 327, 460, 263, 2], "score": -0.21416334807872772, "weight": 1, "toks": ["<s>", "In", "the", "test", "method", "`", "testSimpleFinishLocal", "(", ")", "`", ",", "create", "an", "instance", "of", "`", "ONewDistributedResponseManager", "`", "with", "a", "transaction", "and", "a", "set", "of", "node", "names", ".", "Add", "duplicate", "node", "names", "to", "ensure", "the", "set", "filters", "them", ",", "effectively", "leaving", "one", "unique", "node", ".", "Set", "quorum", "requirements", "and", "attempt", "to", "set", "a", "local", "result", ".", "The", "expected", "behavior", "is", "that", "setting", "the", "local", "result", "will", "not", "satisfy", "the", "quorum", "requirement", ",", "hence", "`", "assertFalse", "`", "should", "be", "appropriate", "to", "assert", "the", "method", "'", "s", "return", "value", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 2042, 1253, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 404, 269, 404, 269, 404, 262, 274, 1815, 5510, 261, 766, 1318, 263, 27970, 1253, 261, 315, 2029, 21, 315, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 289, 2], "score": -0.23009268939495087, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLocalResult", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "1", ",", "1", ",", "1", ")", ";", "assertTrue", "(", "responseManager", ".", "setLocalResult", "(", "\"", "Node1", "\"", ",", "new", "OTxSuccess", "(", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 5452, 716, 1375, 27970, 1253, 1375, 8783, 1135, 1375, 629, 1375, 1347, 279, 2492, 31854, 711, 486, 2118, 5100, 263, 2], "score": -0.23437410593032837, "weight": 1, "toks": ["<s>", "Assert", "that", "`", "setLocalResult", "`", "correctly", "returns", "`", "false", "`", "when", "a", "transaction", "quorum", "has", "not", "been", "met", ".", "</s>"]}, {"tids": [1, 4554, 1410, 866, 309, 326, 563, 353, 8783, 3096, 471, 3387, 716, 326, 707, 1375, 27970, 1253, 1375, 12433, 6606, 487, 2665, 1347, 6534, 279, 1191, 563, 263, 2], "score": -0.2508707344532013, "weight": 1, "toks": ["<s>", "You", "should", "check", "if", "the", "result", "is", "correctly", "added", "and", "ensure", "that", "the", "method", "`", "setLocalResult", "`", "behaves", "as", "expected", "when", "adding", "a", "local", "result", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 2], "score": -0.26098519563674927, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSimpleFinishLocal", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 7128, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 404, 269, 404, 269, 404, 262, 274, 1815, 5510, 261, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 289, 2], "score": -0.26534950733184814, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSimpleFinishLocal", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "STR", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "1", ",", "1", ",", "1", ")", ";", "assertTrue", "(", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTxSuccess", "(", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 2042, 1253, 261, 262, 288, 531, 1908, 1669, 11050, 1064, 1318, 3301, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 446, 269, 394, 6847, 411, 405, 261, 262, 269, 394, 6847, 411, 405, 261, 262, 269, 404, 269, 404, 269, 404, 262, 274, 1815, 5510, 261, 3301, 263, 27970, 1253, 261, 315, 2029, 21, 315, 269, 394, 531, 3342, 1253, 6110, 261, 262, 262, 262, 274, 289, 2], "score": -0.26783162355422974, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLocalResult", "(", ")", "{", "ONewDistributedResponseManager", "manager", "=", "new", "ONewDistributedResponseManager", "(", "null", ",", "new", "HashSet", "<", ">", "(", ")", ",", "new", "HashSet", "<", ">", "(", ")", ",", "1", ",", "1", ",", "1", ")", ";", "assertTrue", "(", "manager", ".", "setLocalResult", "(", "\"", "Node1", "\"", ",", "new", "OTransactionResultPayload", "(", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 27970, 1253, 1375, 707, 316, 326, 1375, 531, 1908, 1669, 11050, 1064, 1318, 1375, 667, 269, 326, 1842, 1375, 1842, 5784, 11641, 2042, 1375, 1410, 15610, 10243, 7155, 603, 24831, 716, 326, 707, 12433, 6606, 8783, 1347, 326, 1967, 756, 4332, 353, 3096, 3229, 4124, 269, 471, 866, 309, 518, 7372, 326, 31854, 8214, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 404, 269, 404, 269, 404, 262, 274, 1815, 5510, 261, 766, 1318, 263, 27970, 1253, 261, 315, 2029, 21, 315, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 4271, 326, 14176, 434, 1375, 27970, 1253, 1375, 1347, 279, 923, 1191, 563, 353, 2112, 471, 1410, 327, 1375, 638, 1375, 487, 326, 31854, 353, 5100, 598, 326, 2202, 756, 296, 272, 766, 263, 7693, 716, 1375, 531, 4188, 4510, 1375, 353, 279, 923, 563, 618, 2665, 635, 1375, 27970, 1253, 1375, 263, 17720, 563, 6728, 261, 1375, 1815, 5510, 1375, 578, 1375, 1815, 8381, 1375, 262, 2511, 603, 326, 4471, 3189, 434, 1375, 27970, 1253, 1375, 471, 2665, 29867, 263, 2], "score": -0.29778048396110535, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "setLocalResult", "`", "method", "in", "the", "`", "ONewDistributedResponseManager", "`", "class", ",", "the", "test", "`", "testSimpleFinishLocal", "`", "should", "primarily", "focus", "on", "ensuring", "that", "the", "method", "behaves", "correctly", "when", "the", "same", "node", "reply", "is", "added", "multiple", "times", ",", "and", "check", "if", "it", "handles", "the", "quorum", "properly", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testSimpleFinishLocal", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "1", ",", "1", ",", "1", ")", ";", "assertTrue", "(", "responseManager", ".", "setLocalResult", "(", "\"", "Node1", "\"", ",", "new", "OTxSuccess", "(", ")", ")", ")", ";", "}", "`", "`", "`", "This", "test", "checks", "the", "functionality", "of", "`", "setLocalResult", "`", "when", "a", "valid", "local", "result", "is", "provided", "and", "should", "return", "`", "true", "`", "as", "the", "quorum", "is", "met", "with", "the", "single", "node", "'", "s", "response", ".", "Ensure", "that", "`", "OTxSuccess", "`", "is", "a", "valid", "result", "type", "expected", "by", "`", "setLocalResult", "`", ".", "Adjust", "result", "checking", "(", "`", "assertTrue", "`", "or", "`", "assertFalse", "`", ")", "based", "on", "the", "implementation", "details", "of", "`", "setLocalResult", "`", "and", "expected", "outcomes", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 756, 21, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 404, 269, 404, 269, 404, 262, 274, 1815, 5510, 261, 766, 1318, 263, 27970, 1253, 261, 315, 756, 21, 315, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 289, 2], "score": -0.31098902225494385, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSimpleFinishLocal", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "node1", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "1", ",", "1", ",", "1", ")", ";", "assertTrue", "(", "responseManager", ".", "setLocalResult", "(", "\"", "node1", "\"", ",", "new", "OTxSuccess", "(", ")", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 36.47449211709174, "bleu-max": 42.60358821798408, "bleu-min": 4.676845221753115, "bleu-avg": 24.16567981860462, "code-bleu": 28.059483345019707, "code-bleu-max": 32.608947048249725, "code-bleu-min": 4.9668367355367815, "code-bleu-avg": 18.12178219565243, "edit-sim": 66, "edit-sim-max": 70, "edit-sim-min": 38, "edit-sim-avg": 58.9, "rouge-p": 60.0, "rouge-p-max": 80.0, "rouge-p-min": 50.0, "rouge-p-avg": 60.33333333333333, "rouge-r": 54.54545454545454, "rouge-r-max": 63.63636363636363, "rouge-r-min": 36.36363636363637, "rouge-r-avg": 49.090909090909086, "rouge-f": 57.142856643990925, "rouge-f-max": 66.66666616780046, "rouge-f-min": 47.619047120181406, "rouge-f-avg": 53.61904712864576, "num-seq": 10}, "time": 0.8168785572052002, "misc": {}}
{"id": 111, "data_id": "csn-98008", "input_stids": [1, 727, 1253, 32315, 1071, 3852, 1250, 3274, 1064, 261, 531, 3342, 11406, 21, 2174, 1253, 766, 269, 514, 5793, 18948, 262, 288, 309, 261, 766, 263, 8601, 6110, 261, 262, 1276, 531, 4188, 510, 737, 7051, 262, 288, 4859, 7051, 965, 274, 327, 629, 274, 289, 1198, 907, 426, 3110, 263, 527, 261, 5793, 18948, 262, 274, 327, 527, 1253, 261, 5793, 18948, 269, 766, 263, 8601, 6110, 261, 262, 262, 274, 289, 32315, 7766, 1908, 1669, 11050, 1064, 1318, 531, 3342, 11406, 21, 2174, 6847, 531, 1908, 1669, 11050, 1064, 1318, 32315, 32315, 327, 2229, 2174, 274, 32315, 32315, 632, 1439, 1071, 3852, 1250, 27970, 1253, 261, 514, 1191, 18948, 269, 1033, 1191, 1253, 262, 288, 1198, 907, 426, 3110, 263, 527, 261, 1191, 18948, 262, 274, 327, 527, 1253, 261, 1191, 18948, 269, 261, 531, 3342, 1253, 6110, 262, 1191, 1253, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 32315, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 890, 269, 890, 269, 576, 262, 274, 1815, 8381, 261, 766, 1318, 263, 27970, 1253, 261, 315, 3902, 6, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 1815, 8381, 261, 766, 1318, 263, 3274, 1064, 261, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 4510, 261, 262, 262, 269, 315, 3902, 6, 262, 262, 274, 2], "topk": [{"tids": [1, 2974, 16499, 326, 1842, 1375, 1842, 5784, 11641, 2042, 261, 262, 1375, 269, 326, 3751, 3021, 1410, 279, 323, 372, 5173, 1842, 326, 1375, 27970, 1253, 261, 262, 1375, 707, 294, 1375, 1375, 1375, 2252, 1815, 8381, 261, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.13118809461593628, "weight": 1, "toks": ["<s>", "To", "simplify", "the", "test", "`", "testSimpleFinishLocal", "(", ")", "`", ",", "the", "following", "statement", "should", "adequately", "test", "the", "`", "setLocalResult", "(", ")", "`", "method", ":", "`", "`", "`", "java", "assertFalse", "(", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTxSuccess", "(", ")", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 7128, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 890, 269, 890, 269, 576, 262, 274, 1815, 8381, 261, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 289, 2], "score": -0.16161896288394928, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSimpleFinishLocal", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "STR", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "3", ",", "3", ",", "2", ")", ";", "assertFalse", "(", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTxSuccess", "(", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 2042, 1253, 5784, 261, 262, 288, 531, 1908, 1669, 11050, 1064, 1318, 3301, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 446, 269, 394, 6847, 411, 405, 261, 262, 269, 394, 6847, 411, 405, 261, 262, 269, 404, 269, 404, 269, 404, 262, 274, 1815, 5510, 261, 3301, 263, 27970, 1253, 261, 315, 1191, 907, 315, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 289, 2], "score": -0.16937103867530823, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLocalResultSimple", "(", ")", "{", "ONewDistributedResponseManager", "manager", "=", "new", "ONewDistributedResponseManager", "(", "null", ",", "new", "HashSet", "<", ">", "(", ")", ",", "new", "HashSet", "<", ">", "(", ")", ",", "1", ",", "1", ",", "1", ")", ";", "assertTrue", "(", "manager", ".", "setLocalResult", "(", "\"", "localNode", "\"", ",", "new", "OTxSuccess", "(", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 2042, 1253, 261, 262, 288, 531, 3342, 1253, 6110, 1191, 1253, 273, 394, 531, 4188, 4510, 261, 262, 274, 514, 1191, 18948, 273, 315, 1191, 907, 315, 274, 1815, 8381, 261, 766, 1318, 263, 27970, 1253, 261, 1191, 18948, 269, 1191, 1253, 262, 262, 274, 289, 2], "score": -0.18374018371105194, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLocalResult", "(", ")", "{", "OTransactionResultPayload", "localResult", "=", "new", "OTxSuccess", "(", ")", ";", "String", "localNodeName", "=", "\"", "localNode", "\"", ";", "assertFalse", "(", "responseManager", ".", "setLocalResult", "(", "localNodeName", ",", "localResult", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 10808, 1064, 510, 737, 7051, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 404, 269, 404, 269, 404, 262, 274, 1815, 8381, 261, 766, 1318, 263, 3274, 1064, 261, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 510, 737, 7051, 261, 262, 262, 269, 315, 2029, 21, 315, 262, 262, 274, 289, 2], "score": -0.18666628003120422, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCollectResponseStillRunning", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "1", ",", "1", ",", "1", ")", ";", "assertFalse", "(", "responseManager", ".", "collectResponse", "(", "new", "OTransactionPhase1TaskResult", "(", "new", "OTxStillRunning", "(", ")", ")", ",", "\"", "Node1", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 7128, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 890, 269, 890, 269, 576, 262, 274, 1815, 8381, 261, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 289, 2], "score": -0.19439280033111572, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSimpleFinishLocal", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "STR", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "3", ",", "3", ",", "2", ")", ";", "assertFalse", "(", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTxSuccess", "(", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 10808, 1064, 1190, 510, 737, 7051, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 756, 21, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 890, 269, 890, 269, 576, 262, 274, 1815, 8381, 261, 766, 1318, 263, 3274, 1064, 261, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 510, 737, 7051, 261, 262, 262, 269, 315, 756, 21, 315, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.19668781757354736, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testCollectResponseWithStillRunning", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "node1", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "3", ",", "3", ",", "2", ")", ";", "assertFalse", "(", "responseManager", ".", "collectResponse", "(", "new", "OTransactionPhase1TaskResult", "(", "new", "OTxStillRunning", "(", ")", ")", ",", "\"", "node1", "\"", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 10808, 1064, 1190, 510, 737, 7051, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 404, 269, 404, 269, 404, 262, 274, 531, 3342, 11406, 21, 2174, 1253, 563, 273, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 510, 737, 7051, 261, 262, 262, 274, 1815, 8381, 261, 766, 1318, 263, 3274, 1064, 261, 563, 269, 315, 2029, 21, 315, 262, 262, 274, 1815, 8867, 261, 404, 269, 766, 1318, 263, 4859, 7051, 262, 274, 289, 2], "score": -0.2088041752576828, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCollectResponseWithStillRunning", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "1", ",", "1", ",", "1", ")", ";", "OTransactionPhase1TaskResult", "result", "=", "new", "OTransactionPhase1TaskResult", "(", "new", "OTxStillRunning", "(", ")", ")", ";", "assertFalse", "(", "responseManager", ".", "collectResponse", "(", "result", ",", "\"", "Node1", "\"", ")", ")", ";", "assertEquals", "(", "1", ",", "responseManager", ".", "stillRunning", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 3852, 1071, 1250, 527, 1253, 261, 514, 7553, 269, 1033, 563, 6110, 262, 288, 7220, 263, 1378, 261, 7553, 269, 563, 6110, 262, 274, 327, 19130, 6322, 261, 262, 274, 289, 2], "score": -0.28414273262023926, "weight": 1, "toks": ["<s>", "@", "synchronized", "public", "boolean", "addResult", "(", "String", "nodeName", ",", "Object", "resultPayload", ")", "{", "responses", ".", "put", "(", "nodeName", ",", "resultPayload", ")", ";", "return", "checkIfComplete", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 10808, 1064, 1190, 1974, 92, 510, 737, 7051, 261, 262, 288, 531, 3342, 11406, 21, 2174, 1253, 766, 273, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 510, 737, 7051, 261, 262, 262, 274, 514, 5793, 18948, 273, 315, 2029, 21, 315, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 446, 269, 394, 6847, 411, 405, 261, 262, 269, 394, 6847, 411, 405, 261, 262, 269, 404, 269, 404, 269, 374, 262, 274, 1250, 563, 273, 766, 1318, 263, 3274, 1064, 261, 766, 269, 5793, 18948, 262, 274, 1815, 8381, 261, 563, 262, 274, 1815, 8867, 261, 404, 269, 766, 1318, 263, 21491, 737, 7051, 1380, 261, 262, 262, 274, 289, 2], "score": -0.29041147232055664, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCollectResponseWithOTxStillRunning", "(", ")", "{", "OTransactionPhase1TaskResult", "response", "=", "new", "OTransactionPhase1TaskResult", "(", "new", "OTxStillRunning", "(", ")", ")", ";", "String", "senderNodeName", "=", "\"", "Node1", "\"", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "null", ",", "new", "HashSet", "<", ">", "(", ")", ",", "new", "HashSet", "<", ">", "(", ")", ",", "1", ",", "1", ",", "0", ")", ";", "boolean", "result", "=", "responseManager", ".", "collectResponse", "(", "response", ",", "senderNodeName", ")", ";", "assertFalse", "(", "result", ")", ";", "assertEquals", "(", "1", ",", "responseManager", ".", "getStillRunningCount", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 94.50859818438448, "bleu-max": 100.0, "bleu-min": 23.052046182826516, "bleu-avg": 51.54887706792873, "code-bleu": 96.30285508309126, "code-bleu-max": 100.0, "code-bleu-min": 14.8075321086617, "code-bleu-avg": 46.61423156627616, "edit-sim": 97, "edit-sim-max": 100, "edit-sim-min": 59, "edit-sim-avg": 74.7, "rouge-p": 90.9090909090909, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 70.93939393939394, "rouge-r": 90.9090909090909, "rouge-r-max": 100.0, "rouge-r-min": 45.45454545454545, "rouge-r-avg": 66.36363636363637, "rouge-f": 90.90909040909091, "rouge-f-max": 99.9999995, "rouge-f-min": 47.619047120181406, "rouge-f-avg": 68.51082201200279, "num-seq": 10}, "time": 1.1059684753417969, "misc": {}}
{"id": 112, "data_id": "csn-98008", "input_stids": [1, 727, 1253, 32315, 1071, 3852, 1250, 3274, 1064, 261, 531, 3342, 11406, 21, 2174, 1253, 766, 269, 514, 5793, 18948, 262, 288, 309, 261, 766, 263, 8601, 6110, 261, 262, 1276, 531, 4188, 510, 737, 7051, 262, 288, 4859, 7051, 965, 274, 327, 629, 274, 289, 1198, 907, 426, 3110, 263, 527, 261, 5793, 18948, 262, 274, 327, 527, 1253, 261, 5793, 18948, 269, 766, 263, 8601, 6110, 261, 262, 262, 274, 289, 32315, 7766, 1908, 1669, 11050, 1064, 1318, 531, 3342, 11406, 21, 2174, 6847, 531, 1908, 1669, 11050, 1064, 1318, 32315, 32315, 327, 2229, 2174, 274, 32315, 32315, 632, 1439, 1071, 3852, 1250, 27970, 1253, 261, 514, 1191, 18948, 269, 1033, 1191, 1253, 262, 288, 1198, 907, 426, 3110, 263, 527, 261, 1191, 18948, 262, 274, 327, 527, 1253, 261, 1191, 18948, 269, 261, 531, 3342, 1253, 6110, 262, 1191, 1253, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 32315, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 2199, 263, 527, 261, 315, 3902, 6, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 890, 269, 890, 269, 576, 262, 274, 1815, 8381, 261, 766, 1318, 263, 27970, 1253, 261, 315, 3902, 6, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 1815, 8381, 261, 766, 1318, 263, 3274, 1064, 261, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 4510, 261, 262, 262, 269, 315, 3902, 6, 262, 262, 274, 1815, 5510, 261, 766, 1318, 263, 3274, 1064, 261, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 4510, 261, 262, 262, 269, 315, 3902, 6, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 10808, 1064, 4510, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 756, 21, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 404, 269, 404, 269, 404, 262, 274, 1815, 5510, 261, 766, 1318, 263, 3274, 1064, 261, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 4510, 261, 262, 262, 269, 315, 756, 21, 315, 262, 262, 274, 289, 2], "score": -0.04803287610411644, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCollectResponseSuccess", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "node1", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "1", ",", "1", ",", "1", ")", ";", "assertTrue", "(", "responseManager", ".", "collectResponse", "(", "new", "OTransactionPhase1TaskResult", "(", "new", "OTxSuccess", "(", ")", ")", ",", "\"", "node1", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 10808, 1064, 1190, 510, 737, 7051, 261, 262, 288, 531, 3342, 11406, 21, 2174, 1253, 4859, 7051, 1253, 273, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 510, 737, 7051, 261, 262, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 446, 269, 394, 6847, 411, 405, 261, 262, 269, 394, 6847, 411, 405, 261, 262, 269, 404, 269, 404, 269, 404, 262, 274, 1815, 8381, 261, 766, 1318, 263, 3274, 1064, 261, 4859, 7051, 1253, 269, 315, 756, 21, 315, 262, 262, 274, 289, 2], "score": -0.12012515217065811, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCollectResponseWithStillRunning", "(", ")", "{", "OTransactionPhase1TaskResult", "stillRunningResult", "=", "new", "OTransactionPhase1TaskResult", "(", "new", "OTxStillRunning", "(", ")", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "null", ",", "new", "HashSet", "<", ">", "(", ")", ",", "new", "HashSet", "<", ">", "(", ")", ",", "1", ",", "1", ",", "1", ")", ";", "assertFalse", "(", "responseManager", ".", "collectResponse", "(", "stillRunningResult", ",", "\"", "node1", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 7128, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 890, 269, 890, 269, 576, 262, 274, 1815, 8381, 261, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 289, 2], "score": -0.15055958926677704, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSimpleFinishLocal", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "STR", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "3", ",", "3", ",", "2", ")", ";", "assertFalse", "(", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTxSuccess", "(", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 13743, 296, 272, 279, 3025, 471, 2657, 1842, 648, 364, 7769, 326, 1375, 3274, 1064, 1375, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 10808, 1064, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 404, 269, 404, 269, 404, 262, 274, 1250, 563, 273, 766, 1318, 263, 3274, 1064, 261, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 4510, 261, 262, 262, 269, 315, 2029, 21, 315, 262, 274, 1815, 5510, 261, 563, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.15718314051628113, "weight": 1, "toks": ["<s>", "Here", "'", "s", "a", "short", "and", "direct", "test", "case", "for", "testing", "the", "`", "collectResponse", "`", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testCollectResponse", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "1", ",", "1", ",", "1", ")", ";", "boolean", "result", "=", "responseManager", ".", "collectResponse", "(", "new", "OTransactionPhase1TaskResult", "(", "new", "OTxSuccess", "(", ")", ")", ",", "\"", "Node1", "\"", ")", ";", "assertTrue", "(", "result", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1021, 20579, 3323, 923, 1842, 3021, 3377, 506, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 10808, 1064, 1190, 4188, 510, 737, 7051, 261, 262, 288, 531, 1908, 1669, 11050, 1064, 1318, 3301, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 394, 531, 3342, 11406, 21, 2174, 261, 262, 269, 394, 6847, 411, 405, 261, 262, 269, 394, 6847, 411, 405, 261, 262, 269, 404, 269, 404, 269, 404, 262, 274, 1815, 8381, 261, 3301, 263, 3274, 1064, 261, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 510, 737, 7051, 261, 262, 262, 269, 315, 2029, 21, 315, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.16897308826446533, "weight": 1, "toks": ["<s>", "The", "shortest", "possible", "valid", "test", "statement", "could", "be", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testCollectResponseWithTxStillRunning", "(", ")", "{", "ONewDistributedResponseManager", "manager", "=", "new", "ONewDistributedResponseManager", "(", "new", "OTransactionPhase1Task", "(", ")", ",", "new", "HashSet", "<", ">", "(", ")", ",", "new", "HashSet", "<", ">", "(", ")", ",", "1", ",", "1", ",", "1", ")", ";", "assertFalse", "(", "manager", ".", "collectResponse", "(", "new", "OTransactionPhase1TaskResult", "(", "new", "OTxStillRunning", "(", ")", ")", ",", "\"", "Node1", "\"", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 288, 342, 342, 9190, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 342, 342, 1788, 279, 766, 3301, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 404, 269, 404, 269, 404, 262, 274, 342, 342, 1000, 1191, 563, 471, 3929, 1815, 8381, 261, 766, 1318, 263, 27970, 1253, 261, 315, 2029, 21, 315, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 289, 2], "score": -0.17913296818733215, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSimpleFinishLocal", "(", ")", "{", "/", "/", "Initialize", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "/", "/", "Create", "a", "response", "manager", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "1", ",", "1", ",", "1", ")", ";", "/", "/", "Set", "local", "result", "and", "verify", "assertFalse", "(", "responseManager", ".", "setLocalResult", "(", "\"", "Node1", "\"", ",", "new", "OTxSuccess", "(", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 1842, 707, 1375, 1842, 5784, 11641, 2042, 261, 262, 1375, 1410, 23500, 1842, 326, 766, 1849, 4058, 316, 279, 16859, 2492, 3301, 1347, 5057, 3937, 1191, 471, 2632, 1686, 263, 1220, 29876, 3324, 6534, 1686, 364, 1191, 471, 2632, 2199, 471, 3929, 310, 326, 3434, 6885, 1347, 2199, 6846, 598, 2216, 263, 13743, 296, 272, 279, 20482, 21285, 294, 404, 263, 9190, 279, 16859, 766, 3301, 598, 25036, 2199, 471, 19983, 263, 576, 263, 1000, 279, 1191, 563, 471, 866, 326, 1674, 296, 272, 2216, 263, 890, 263, 9587, 6243, 3903, 7220, 635, 4440, 1375, 3274, 1064, 1375, 707, 3229, 4124, 471, 1954, 1517, 745, 225, 163, 227, 252, 272, 12884, 598, 7820, 263, 1220, 20761, 3661, 326, 3301, 7372, 12533, 1686, 628, 326, 1967, 756, 269, 6728, 3937, 326, 31201, 5057, 471, 326, 5573, 4271, 364, 2109, 10415, 2492, 2216, 578, 5166, 263, 2], "score": -0.20124293863773346, "weight": 1, "toks": ["<s>", "The", "test", "method", "`", "testSimpleFinishLocal", "(", ")", "`", "should", "effectively", "test", "the", "response", "collection", "logic", "in", "a", "distributed", "transaction", "manager", "when", "handling", "both", "local", "and", "remote", "results", ".", "This", "involves", "adding", "results", "for", "local", "and", "remote", "nodes", "and", "verifying", "the", "correct", "behavior", "when", "nodes", "respond", "with", "success", ".", "Here", "'", "s", "a", "simplified", "explanation", ":", "1", ".", "Initialize", "a", "distributed", "response", "manager", "with", "simulated", "nodes", "and", "thresholds", ".", "2", ".", "Set", "a", "local", "result", "and", "check", "the", "operation", "'", "s", "success", ".", "3", ".", "Simulate", "external", "responses", "by", "calling", "`", "collectResponse", "`", "method", "multiple", "times", "and", "validate", "each", "call", "\u2019", "s", "outcome", "with", "assertions", ".", "This", "verifies", "how", "the", "manager", "handles", "repeated", "results", "from", "the", "same", "node", ",", "checking", "both", "the", "duplication", "handling", "and", "the", "threshold", "checks", "for", "deciding", "transaction", "success", "or", "failure", ".", "</s>"]}, {"tids": [1, 2974, 752, 279, 20570, 784, 1842, 364, 326, 1375, 3274, 1064, 1375, 707, 269, 1846, 1410, 3387, 518, 711, 326, 5224, 3875, 4573, 358, 1954, 2097, 6885, 269, 6826, 715, 7155, 310, 603, 3661, 518, 7372, 3775, 1953, 434, 7220, 471, 4533, 2713, 5493, 263, 13743, 225, 163, 227, 252, 272, 279, 1407, 22316, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 10808, 1064, 261, 262, 288, 342, 342, 10939, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 404, 269, 404, 269, 374, 262, 274, 342, 342, 7766, 5057, 434, 326, 531, 4188, 510, 737, 7051, 766, 618, 531, 3342, 11406, 21, 2174, 1253, 3549, 1253, 273, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 510, 737, 7051, 261, 262, 262, 274, 1815, 8381, 261, 766, 1318, 263, 3274, 1064, 261, 3549, 1253, 269, 315, 2029, 21, 315, 262, 262, 274, 342, 342, 7766, 5057, 434, 326, 531, 4188, 4510, 766, 618, 531, 3342, 11406, 21, 2174, 1253, 2216, 1253, 273, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 4510, 261, 262, 262, 274, 1815, 5510, 261, 766, 1318, 263, 3274, 1064, 261, 2216, 1253, 269, 315, 2029, 21, 315, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 4271, 294, 404, 263, 9017, 1375, 3274, 1064, 1375, 7372, 279, 766, 11193, 326, 2492, 353, 4859, 3549, 263, 576, 263, 9017, 1375, 3274, 1064, 1375, 7372, 279, 6873, 2492, 8364, 263, 1220, 1410, 506, 18662, 358, 1954, 326, 6885, 434, 326, 1375, 3274, 1064, 1375, 707, 316, 13417, 310, 358, 3775, 1953, 434, 7220, 263, 2], "score": -0.20180635154247284, "weight": 1, "toks": ["<s>", "To", "create", "a", "concise", "test", "for", "the", "`", "collectResponse", "`", "method", ",", "you", "should", "ensure", "it", "has", "the", "minimum", "setup", "necessary", "to", "validate", "its", "behavior", ",", "particularly", "focusing", "on", "how", "it", "handles", "different", "types", "of", "responses", "and", "updates", "internal", "states", ".", "Here", "\u2019", "s", "a", "streamlined", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testCollectResponse", "(", ")", "{", "/", "/", "Setup", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "1", ",", "1", ",", "0", ")", ";", "/", "/", "Test", "handling", "of", "the", "OTxStillRunning", "response", "type", "OTransactionPhase1TaskResult", "runningResult", "=", "new", "OTransactionPhase1TaskResult", "(", "new", "OTxStillRunning", "(", ")", ")", ";", "assertFalse", "(", "responseManager", ".", "collectResponse", "(", "runningResult", ",", "\"", "Node1", "\"", ")", ")", ";", "/", "/", "Test", "handling", "of", "the", "OTxSuccess", "response", "type", "OTransactionPhase1TaskResult", "successResult", "=", "new", "OTransactionPhase1TaskResult", "(", "new", "OTxSuccess", "(", ")", ")", ";", "assertTrue", "(", "responseManager", ".", "collectResponse", "(", "successResult", ",", "\"", "Node1", "\"", ")", ")", ";", "}", "`", "`", "`", "This", "test", "checks", ":", "1", ".", "How", "`", "collectResponse", "`", "handles", "a", "response", "indicating", "the", "transaction", "is", "still", "running", ".", "2", ".", "How", "`", "collectResponse", "`", "handles", "a", "successful", "transaction", "completion", ".", "This", "should", "be", "sufficient", "to", "validate", "the", "behavior", "of", "the", "`", "collectResponse", "`", "method", "in", "reacting", "to", "different", "types", "of", "responses", ".", "</s>"]}, {"tids": [1, 1788, 279, 2836, 1842, 716, 4271, 326, 6885, 1347, 279, 1375, 531, 4188, 510, 737, 7051, 1375, 563, 353, 5079, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1064, 1190, 1974, 92, 510, 737, 7051, 261, 262, 288, 342, 342, 10939, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 2029, 21, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 404, 269, 404, 269, 404, 262, 274, 342, 342, 4382, 1250, 563, 273, 766, 1318, 263, 3274, 1064, 261, 394, 531, 3342, 11406, 21, 2174, 1253, 261, 394, 531, 4188, 510, 737, 7051, 261, 262, 262, 269, 315, 2029, 21, 315, 262, 274, 342, 342, 9067, 1815, 8381, 261, 563, 262, 274, 1815, 8867, 261, 404, 269, 766, 1318, 263, 21491, 737, 7051, 1380, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.20487326383590698, "weight": 1, "toks": ["<s>", "Create", "a", "unit", "test", "that", "checks", "the", "behavior", "when", "a", "`", "OTxStillRunning", "`", "result", "is", "received", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testResponseWithOTxStillRunning", "(", ")", "{", "/", "/", "Setup", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "Node1", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "1", ",", "1", ",", "1", ")", ";", "/", "/", "Action", "boolean", "result", "=", "responseManager", ".", "collectResponse", "(", "new", "OTransactionPhase1TaskResult", "(", "new", "OTxStillRunning", "(", ")", ")", ",", "\"", "Node1", "\"", ")", ";", "/", "/", "Assertion", "assertFalse", "(", "result", ")", ";", "assertEquals", "(", "1", ",", "responseManager", ".", "getStillRunningCount", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5784, 11641, 2042, 261, 262, 288, 531, 3342, 11406, 21, 2174, 2492, 273, 394, 531, 3342, 11406, 21, 2174, 261, 262, 274, 1000, 411, 514, 405, 2199, 273, 394, 6847, 411, 405, 261, 262, 274, 2199, 263, 527, 261, 315, 7128, 315, 262, 274, 531, 1908, 1669, 11050, 1064, 1318, 766, 1318, 273, 394, 531, 1908, 1669, 11050, 1064, 1318, 261, 2492, 269, 2199, 269, 2199, 269, 890, 269, 890, 269, 576, 262, 274, 1815, 8381, 261, 766, 1318, 263, 27970, 1253, 261, 315, 7128, 315, 269, 394, 531, 4188, 4510, 261, 262, 262, 262, 274, 289, 2], "score": -0.20722176134586334, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSimpleFinishLocal", "(", ")", "{", "OTransactionPhase1Task", "transaction", "=", "new", "OTransactionPhase1Task", "(", ")", ";", "Set", "<", "String", ">", "nodes", "=", "new", "HashSet", "<", ">", "(", ")", ";", "nodes", ".", "add", "(", "\"", "STR", "\"", ")", ";", "ONewDistributedResponseManager", "responseManager", "=", "new", "ONewDistributedResponseManager", "(", "transaction", ",", "nodes", ",", "nodes", ",", "3", ",", "3", ",", "2", ")", ";", "assertFalse", "(", "responseManager", ".", "setLocalResult", "(", "\"", "STR", "\"", ",", "new", "OTxSuccess", "(", ")", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 26.683319086423996, "bleu-max": 33.932513407933634, "bleu-min": 19.74786562264319, "bleu-avg": 26.31317994721553, "code-bleu": 29.392826041911917, "code-bleu-max": 29.392826041911917, "code-bleu-min": 17.082880670938234, "code-bleu-avg": 26.67947427296638, "edit-sim": 53, "edit-sim-max": 64, "edit-sim-min": 50, "edit-sim-avg": 54.2, "rouge-p": 45.45454545454545, "rouge-p-max": 45.45454545454545, "rouge-p-min": 36.36363636363637, "rouge-p-avg": 43.520202020202014, "rouge-r": 83.33333333333334, "rouge-r-max": 83.33333333333334, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 78.33333333333334, "rouge-f": 58.82352895501731, "rouge-f-max": 58.82352895501731, "rouge-f-min": 47.05882307266437, "rouge-f-avg": 55.88888842984627, "num-seq": 10}, "time": 1.2998111248016357, "misc": {}}
{"id": 113, "data_id": "csn-98027", "input_stids": [1, 394, 6499, 5713, 3585, 5351, 1089, 6499, 32315, 32315, 531, 10785, 1318, 4709, 32315, 531, 10785, 1318, 32315, 32315, 32315, 1071, 1000, 411, 531, 2115, 405, 12654, 6499, 261, 262, 288, 327, 12361, 261, 262, 263, 394, 6499, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 32315, 2], "topk": [{"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1410, 1891, 1908, 6499, 694, 261, 262, 288, 342, 342, 10371, 726, 531, 10785, 1318, 3301, 273, 394, 531, 10785, 1318, 261, 262, 274, 531, 2115, 1409, 273, 394, 531, 2115, 261, 262, 274, 1000, 411, 531, 2115, 405, 2665, 6499, 273, 394, 6847, 411, 405, 261, 5737, 263, 22163, 261, 1409, 262, 262, 274, 3301, 263, 12654, 6499, 261, 262, 263, 527, 261, 1409, 262, 274, 342, 342, 4603, 1000, 411, 531, 2115, 405, 3214, 6499, 273, 3301, 263, 12654, 6499, 261, 262, 274, 342, 342, 5452, 1815, 8867, 261, 2665, 6499, 269, 3214, 6499, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.15241581201553345, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "shouldUpdateNewRecordsSet", "(", ")", "{", "/", "/", "Arrange", "ODirtyManager", "manager", "=", "new", "ODirtyManager", "(", ")", ";", "ORecord", "record", "=", "new", "ORecord", "(", ")", ";", "Set", "<", "ORecord", ">", "expectedRecords", "=", "new", "HashSet", "<", ">", "(", "Collections", ".", "singletonList", "(", "record", ")", ")", ";", "manager", ".", "getNewRecords", "(", ")", ".", "add", "(", "record", ")", ";", "/", "/", "Act", "Set", "<", "ORecord", ">", "actualRecords", "=", "manager", ".", "getNewRecords", "(", ")", ";", "/", "/", "Assert", "assertEquals", "(", "expectedRecords", ",", "actualRecords", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 288, 531, 10785, 1318, 9603, 1318, 273, 394, 531, 10785, 1318, 261, 262, 274, 1815, 5510, 261, 9603, 1318, 263, 12654, 6499, 261, 262, 263, 2709, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.18131305277347565, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testBasic", "(", ")", "{", "ODirtyManager", "dirtyManager", "=", "new", "ODirtyManager", "(", ")", ";", "assertTrue", "(", "dirtyManager", ".", "getNewRecords", "(", ")", ".", "isEmpty", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1908, 6499, 261, 262, 288, 531, 10785, 1318, 9603, 1318, 273, 394, 531, 10785, 1318, 261, 262, 274, 1000, 411, 531, 2115, 405, 3853, 273, 9603, 1318, 263, 12654, 6499, 261, 262, 274, 25395, 261, 3853, 262, 274, 1815, 5510, 261, 3853, 263, 2709, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3117762804031372, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetNewRecords", "(", ")", "{", "ODirtyManager", "dirtyManager", "=", "new", "ODirtyManager", "(", ")", ";", "Set", "<", "ORecord", ">", "records", "=", "dirtyManager", ".", "getNewRecords", "(", ")", ";", "assertNotNull", "(", "records", ")", ";", "assertTrue", "(", "records", ".", "isEmpty", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1908, 6499, 261, 262, 288, 531, 10785, 1318, 9603, 1318, 273, 394, 531, 10785, 1318, 261, 262, 274, 1000, 411, 531, 2115, 405, 3853, 273, 9603, 1318, 263, 12654, 6499, 261, 262, 274, 25395, 261, 3853, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.34811997413635254, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetNewRecords", "(", ")", "{", "ODirtyManager", "dirtyManager", "=", "new", "ODirtyManager", "(", ")", ";", "Set", "<", "ORecord", ">", "records", "=", "dirtyManager", ".", "getNewRecords", "(", ")", ";", "assertNotNull", "(", "records", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 12654, 6499, 1375, 707, 316, 326, 1375, 531, 10785, 1318, 1375, 667, 269, 999, 326, 3751, 17504, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1908, 6499, 261, 262, 288, 531, 10785, 1318, 9603, 1318, 273, 394, 531, 10785, 1318, 261, 262, 274, 1000, 411, 531, 2115, 405, 2665, 6499, 273, 394, 6847, 411, 405, 261, 262, 274, 5685, 4709, 1989, 263, 16331, 261, 9603, 1318, 269, 315, 394, 6499, 315, 269, 2665, 6499, 262, 274, 1000, 411, 531, 2115, 405, 3214, 6499, 273, 9603, 1318, 263, 12654, 6499, 261, 262, 274, 1815, 8867, 261, 2665, 6499, 269, 3214, 6499, 269, 315, 1021, 2106, 394, 6499, 1410, 845, 326, 2665, 444, 315, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.36415526270866394, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "getNewRecords", "`", "method", "in", "the", "`", "ODirtyManager", "`", "class", ",", "use", "the", "following", "approach", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetNewRecords", "(", ")", "{", "ODirtyManager", "dirtyManager", "=", "new", "ODirtyManager", "(", ")", ";", "Set", "<", "ORecord", ">", "expectedRecords", "=", "new", "HashSet", "<", ">", "(", ")", ";", "ReflectionTestUtils", ".", "setField", "(", "dirtyManager", ",", "\"", "newRecords", "\"", ",", "expectedRecords", ")", ";", "Set", "<", "ORecord", ">", "actualRecords", "=", "dirtyManager", ".", "getNewRecords", "(", ")", ";", "assertEquals", "(", "expectedRecords", ",", "actualRecords", ",", "\"", "The", "returned", "newRecords", "should", "match", "the", "expected", "set", "\"", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1908, 6499, 5962, 261, 262, 288, 25395, 261, 9603, 1318, 263, 12654, 6499, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.37359049916267395, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testNewRecordsNotNull", "(", ")", "{", "assertNotNull", "(", "dirtyManager", ".", "getNewRecords", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 632, 7766, 1071, 918, 1842, 967, 1908, 6499, 261, 262, 288, 531, 10785, 1318, 9603, 1318, 273, 394, 531, 10785, 1318, 261, 262, 274, 1000, 411, 531, 2115, 405, 3853, 273, 9603, 1318, 263, 12654, 6499, 261, 262, 274, 25395, 261, 3853, 262, 274, 1815, 5510, 261, 3853, 263, 2709, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.39289265871047974, "weight": 1, "toks": ["<s>", "`", "`", "`", "@", "Test", "public", "void", "testGetNewRecords", "(", ")", "{", "ODirtyManager", "dirtyManager", "=", "new", "ODirtyManager", "(", ")", ";", "Set", "<", "ORecord", ">", "records", "=", "dirtyManager", ".", "getNewRecords", "(", ")", ";", "assertNotNull", "(", "records", ")", ";", "assertTrue", "(", "records", ".", "isEmpty", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1908, 6499, 261, 262, 288, 531, 10785, 1318, 9603, 1318, 273, 394, 531, 10785, 1318, 261, 262, 274, 1000, 411, 531, 2115, 405, 563, 273, 9603, 1318, 263, 12654, 6499, 261, 262, 274, 25395, 261, 563, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.394975483417511, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetNewRecords", "(", ")", "{", "ODirtyManager", "dirtyManager", "=", "new", "ODirtyManager", "(", ")", ";", "Set", "<", "ORecord", ">", "result", "=", "dirtyManager", ".", "getNewRecords", "(", ")", ";", "assertNotNull", "(", "result", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1908, 6499, 261, 262, 288, 531, 10785, 1318, 9603, 1318, 273, 394, 531, 10785, 1318, 261, 262, 274, 1000, 411, 531, 2115, 405, 2665, 6499, 273, 9603, 1318, 263, 12654, 6499, 261, 262, 274, 1815, 8867, 261, 2665, 6499, 269, 9603, 1318, 263, 12654, 6499, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3991388976573944, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetNewRecords", "(", ")", "{", "ODirtyManager", "dirtyManager", "=", "new", "ODirtyManager", "(", ")", ";", "Set", "<", "ORecord", ">", "expectedRecords", "=", "dirtyManager", ".", "getNewRecords", "(", ")", ";", "assertEquals", "(", "expectedRecords", ",", "dirtyManager", ".", "getNewRecords", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 288, 531, 10785, 1318, 9603, 1318, 273, 394, 531, 10785, 1318, 261, 262, 274, 1000, 411, 531, 2115, 405, 2665, 273, 394, 6847, 411, 405, 261, 262, 274, 1815, 8867, 261, 2665, 269, 9603, 1318, 263, 12654, 6499, 261, 262, 262, 274, 289, 2], "score": -0.44377601146698, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testBasic", "(", ")", "{", "ODirtyManager", "dirtyManager", "=", "new", "ODirtyManager", "(", ")", ";", "Set", "<", "ORecord", ">", "expected", "=", "new", "HashSet", "<", ">", "(", ")", ";", "assertEquals", "(", "expected", ",", "dirtyManager", ".", "getNewRecords", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 34.92671028290049, "bleu-max": 34.92671028290049, "bleu-min": 19.070828081828378, "bleu-avg": 32.090640462991296, "code-bleu": 58.84455382833009, "code-bleu-max": 58.84455382833009, "code-bleu-min": 2.871542854751236, "code-bleu-avg": 48.959102146049766, "edit-sim": 49, "edit-sim-max": 55, "edit-sim-min": 38, "edit-sim-avg": 47.9, "rouge-p": 71.42857142857143, "rouge-p-max": 71.42857142857143, "rouge-p-min": 42.857142857142854, "rouge-p-avg": 65.35714285714286, "rouge-r": 71.42857142857143, "rouge-r-max": 71.42857142857143, "rouge-r-min": 42.857142857142854, "rouge-r-avg": 67.14285714285714, "rouge-f": 71.42857092857143, "rouge-f-max": 71.42857092857143, "rouge-f-min": 42.857142357142855, "rouge-f-avg": 66.19047569092064, "num-seq": 10}, "time": 0.5272955894470215, "misc": {}}
{"id": 114, "data_id": "csn-98027", "input_stids": [1, 394, 6499, 5713, 3585, 5351, 1089, 6499, 32315, 1071, 531, 2519, 261, 262, 288, 3875, 261, 262, 274, 289, 32315, 531, 10785, 1318, 4709, 531, 2519, 32315, 531, 10785, 1318, 32315, 997, 263, 652, 261, 315, 3902, 6, 269, 2332, 263, 8102, 261, 262, 262, 274, 32315, 32315, 1071, 1000, 411, 531, 2115, 405, 12654, 6499, 261, 262, 288, 327, 12361, 261, 262, 263, 394, 6499, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 32315, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 2], "topk": [{"tids": [1, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 7766, 620, 315, 262, 274, 2], "score": -0.2081512212753296, "weight": 1, "toks": ["<s>", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "TestValue", "\"", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 2332, 263, 8102, 261, 262, 262, 274, 25395, 261, 997, 263, 12654, 6499, 261, 262, 262, 274, 289, 2], "score": -0.24068932235240936, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testBasic", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "System", ".", "currentTimeMillis", "(", ")", ")", ";", "assertNotNull", "(", "doc", ".", "getNewRecords", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 2332, 263, 8102, 261, 262, 262, 274, 1000, 411, 531, 2115, 405, 394, 6499, 273, 997, 263, 12654, 6499, 261, 262, 274, 25395, 261, 394, 6499, 262, 274, 289, 2], "score": -0.26526668667793274, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testBasic", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "System", ".", "currentTimeMillis", "(", ")", ")", ";", "Set", "<", "ORecord", ">", "newRecords", "=", "doc", ".", "getNewRecords", "(", ")", ";", "assertNotNull", "(", "newRecords", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 289, 2], "score": -0.28889885544776917, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testBasic", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 2332, 263, 8102, 261, 262, 262, 274, 1815, 8381, 261, 997, 263, 12654, 6499, 261, 262, 263, 2709, 261, 262, 262, 274, 289, 2], "score": -0.2958163619041443, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testBasic", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "System", ".", "currentTimeMillis", "(", ")", ")", ";", "assertFalse", "(", "doc", ".", "getNewRecords", "(", ")", ".", "isEmpty", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 289, 2], "score": -0.3056930899620056, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testBasic", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 1525, 6680, 273, 2332, 263, 8102, 261, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 6680, 262, 274, 1000, 411, 531, 2115, 405, 394, 6499, 273, 997, 263, 12654, 6499, 261, 262, 274, 25395, 261, 394, 6499, 262, 274, 1815, 5510, 261, 394, 6499, 263, 1914, 261, 997, 262, 262, 274, 289, 2], "score": -0.3326876759529114, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testBasic", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "long", "currentTime", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "currentTime", ")", ";", "Set", "<", "ORecord", ">", "newRecords", "=", "doc", ".", "getNewRecords", "(", ")", ";", "assertNotNull", "(", "newRecords", ")", ";", "assertTrue", "(", "newRecords", ".", "contains", "(", "doc", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 1525, 6680, 273, 2332, 263, 8102, 261, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 6680, 262, 274, 1815, 8867, 261, 6680, 269, 997, 263, 652, 261, 315, 7128, 315, 262, 262, 274, 289, 2], "score": -0.3494192957878113, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testBasic", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "long", "currentTime", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "currentTime", ")", ";", "assertEquals", "(", "currentTime", ",", "doc", ".", "field", "(", "\"", "STR", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 997, 263, 652, 261, 315, 7128, 315, 269, 2332, 263, 8102, 261, 262, 262, 274, 2], "score": -0.3554118275642395, "weight": 1, "toks": ["<s>", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "System", ".", "currentTimeMillis", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 2332, 263, 8102, 261, 262, 262, 274, 25395, 261, 997, 263, 12654, 6499, 261, 262, 262, 274, 289, 2], "score": -0.35743796825408936, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testBasic", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "System", ".", "currentTimeMillis", "(", ")", ")", ";", "assertNotNull", "(", "doc", ".", "getNewRecords", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 20.492938431708815, "bleu-max": 70.49141756270427, "bleu-min": 17.407765595569785, "bleu-avg": 28.230777198416604, "code-bleu": 4.020483573605179, "code-bleu-max": 77.37552424018409, "code-bleu-min": 3.7964314698454937, "code-bleu-avg": 14.762752151410254, "edit-sim": 27, "edit-sim-max": 92, "edit-sim-min": 27, "edit-sim-avg": 49.3, "rouge-p": 50.0, "rouge-p-max": 85.71428571428571, "rouge-p-min": 50.0, "rouge-p-avg": 60.404761904761905, "rouge-r": 57.14285714285714, "rouge-r-max": 85.71428571428571, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 75.71428571428571, "rouge-f": 53.33333283555556, "rouge-f-max": 85.71428521428571, "rouge-f-min": 53.33333283555556, "rouge-f-avg": 66.94397709949395, "num-seq": 10}, "time": 0.6815814971923828, "misc": {}}
{"id": 115, "data_id": "csn-98027", "input_stids": [1, 394, 6499, 5713, 3585, 5351, 1089, 6499, 32315, 1071, 531, 2519, 652, 261, 727, 514, 277, 7287, 269, 1033, 277, 16107, 262, 288, 327, 652, 261, 277, 7287, 269, 277, 16107, 269, 531, 6517, 9661, 263, 8984, 67, 10564, 67, 8552, 262, 274, 289, 32315, 531, 10785, 1318, 4709, 531, 2519, 32315, 531, 10785, 1318, 32315, 997, 263, 652, 261, 315, 3902, 6, 269, 1446, 263, 336, 6801, 261, 262, 262, 274, 32315, 32315, 1071, 1000, 411, 531, 2115, 405, 12654, 6499, 261, 262, 288, 327, 12361, 261, 262, 263, 394, 6499, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 32315, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 997, 263, 652, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 25395, 261, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 262, 274, 2], "score": -0.14426462352275848, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1908, 6499, 261, 262, 288, 531, 10785, 1318, 9603, 1318, 273, 394, 531, 10785, 1318, 261, 262, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 9603, 1318, 263, 394, 6499, 263, 527, 261, 997, 262, 274, 1815, 8867, 261, 404, 269, 9603, 1318, 263, 12654, 6499, 261, 262, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.21307888627052307, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetNewRecords", "(", ")", "{", "ODirtyManager", "dirtyManager", "=", "new", "ODirtyManager", "(", ")", ";", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "dirtyManager", ".", "newRecords", ".", "add", "(", "doc", ")", ";", "assertEquals", "(", "1", ",", "dirtyManager", ".", "getNewRecords", "(", ")", ".", "size", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 2], "score": -0.2730202376842499, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testBasic", "(", ")", "</s>"]}, {"tids": [1, 1021, 1024, 3021, 716, 7434, 326, 707, 3613, 1842, 487, 3025, 715, 487, 3323, 353, 294, 1375, 1375, 1375, 2252, 1815, 8867, 261, 315, 7128, 315, 269, 997, 263, 652, 261, 315, 7128, 315, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.282111793756485, "weight": 1, "toks": ["<s>", "The", "next", "statement", "that", "tests", "the", "method", "under", "test", "as", "shortly", "as", "possible", "is", ":", "`", "`", "`", "java", "assertEquals", "(", "\"", "STR", "\"", ",", "doc", ".", "field", "(", "\"", "STR", "\"", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 1021, 707, 1375, 1842, 8252, 261, 262, 1375, 12001, 358, 8783, 444, 731, 471, 28286, 392, 1375, 531, 2519, 1375, 733, 269, 21195, 7769, 326, 1375, 652, 1375, 707, 635, 3637, 279, 533, 652, 263, 1021, 3021, 1375, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 1375, 23500, 11964, 326, 14176, 434, 28639, 279, 4143, 533, 460, 358, 279, 1668, 296, 272, 652, 263, 2], "score": -0.285224050283432, "weight": 1, "toks": ["<s>", "The", "method", "`", "testBasic", "(", ")", "`", "seems", "to", "correctly", "set", "up", "and", "manipulate", "an", "`", "ODocument", "`", "object", ",", "specifically", "testing", "the", "`", "field", "`", "method", "by", "setting", "a", "string", "field", ".", "The", "statement", "`", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "`", "effectively", "validates", "the", "functionality", "of", "assigning", "a", "simple", "string", "value", "to", "a", "document", "'", "s", "field", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 288, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 997, 263, 652, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 289, 2], "score": -0.2859610617160797, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testBasic", "(", ")", "{", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "doc", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 7693, 1375, 1842, 8252, 261, 262, 1375, 8783, 4533, 326, 1375, 7128, 1375, 652, 471, 353, 16332, 635, 1375, 531, 10785, 1318, 1375, 263, 2], "score": -0.2967647910118103, "weight": 1, "toks": ["<s>", "Ensure", "`", "testBasic", "(", ")", "`", "correctly", "updates", "the", "`", "STR", "`", "field", "and", "is", "recognized", "by", "`", "ODirtyManager", "`", ".", "</s>"]}, {"tids": [1, 7693, 326, 1375, 12654, 6499, 261, 262, 1375, 707, 8783, 9023, 394, 3853, 1839, 21920, 392, 1375, 531, 2519, 1375, 263, 2], "score": -0.3239210546016693, "weight": 1, "toks": ["<s>", "Ensure", "the", "`", "getNewRecords", "(", ")", "`", "method", "correctly", "retrieves", "new", "records", "after", "modifying", "an", "`", "ODocument", "`", ".", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 315, 7128, 315, 269, 997, 263, 652, 261, 315, 7128, 315, 262, 262, 274, 2], "score": -0.33094364404678345, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "\"", "STR", "\"", ",", "doc", ".", "field", "(", "\"", "STR", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 1021, 3526, 1177, 434, 326, 1375, 12654, 6499, 1375, 707, 598, 11000, 1375, 394, 6499, 1375, 848, 506, 18432, 487, 12188, 2674, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1908, 6499, 261, 262, 288, 531, 10785, 1318, 9603, 1318, 273, 394, 531, 10785, 1318, 261, 997, 262, 274, 531, 2115, 1409, 273, 394, 531, 2115, 261, 262, 274, 9603, 1318, 263, 394, 6499, 263, 527, 261, 1409, 262, 274, 1000, 411, 531, 2115, 405, 394, 6499, 273, 9603, 1318, 263, 12654, 6499, 261, 262, 274, 1815, 5510, 261, 394, 6499, 263, 1914, 261, 1409, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3602420687675476, "weight": 1, "toks": ["<s>", "The", "updated", "version", "of", "the", "`", "getNewRecords", "`", "method", "with", "overridden", "`", "newRecords", "`", "can", "be", "tested", "as", "shown", "here", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetNewRecords", "(", ")", "{", "ODirtyManager", "dirtyManager", "=", "new", "ODirtyManager", "(", "doc", ")", ";", "ORecord", "record", "=", "new", "ORecord", "(", ")", ";", "dirtyManager", ".", "newRecords", ".", "add", "(", "record", ")", ";", "Set", "<", "ORecord", ">", "newRecords", "=", "dirtyManager", ".", "getNewRecords", "(", ")", ";", "assertTrue", "(", "newRecords", ".", "contains", "(", "record", ")", ")", ";", "}", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 46.68330721298284, "bleu-max": 46.68330721298284, "bleu-min": 19.389954773246817, "bleu-avg": 30.273649454673954, "code-bleu": 36.65482850691537, "code-bleu-max": 36.65482850691537, "code-bleu-min": 2.829589559815719, "code-bleu-avg": 22.390293476765155, "edit-sim": 83, "edit-sim-max": 83, "edit-sim-min": 26, "edit-sim-avg": 68.0, "rouge-p": 87.5, "rouge-p-max": 87.5, "rouge-p-min": 57.14285714285714, "rouge-p-avg": 71.74999999999999, "rouge-r": 77.77777777777779, "rouge-r-max": 77.77777777777779, "rouge-r-min": 44.44444444444444, "rouge-r-avg": 67.77777777777779, "rouge-f": 82.35294067820071, "rouge-f-max": 82.35294067820071, "rouge-f-min": 49.99999950781251, "rouge-f-avg": 69.3266248904137, "num-seq": 10}, "time": 0.7227005958557129, "misc": {}}
{"id": 116, "data_id": "csn-98027", "input_stids": [1, 394, 6499, 5713, 3585, 5351, 1089, 6499, 32315, 1071, 760, 531, 10785, 1318, 336, 10785, 1318, 261, 531, 2115, 1409, 262, 288, 309, 261, 401, 261, 1409, 1276, 531, 2115, 7469, 262, 262, 288, 1409, 273, 1409, 263, 11674, 261, 262, 274, 289, 327, 261, 261, 531, 2115, 7469, 262, 1409, 262, 263, 336, 10785, 1318, 261, 262, 274, 289, 32315, 531, 10785, 1318, 4709, 531, 2519, 531, 10785, 1318, 32315, 531, 10785, 1318, 32315, 1000, 411, 531, 2115, 405, 3526, 6499, 273, 3301, 263, 23866, 6499, 261, 262, 274, 32315, 32315, 1071, 1000, 411, 531, 2115, 405, 12654, 6499, 261, 262, 288, 327, 12361, 261, 262, 263, 394, 6499, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 8252, 261, 262, 32315, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 997, 263, 652, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 10785, 1318, 3301, 273, 531, 2115, 3061, 263, 336, 10785, 1318, 261, 997, 262, 274, 2], "topk": [{"tids": [1, 1000, 411, 531, 2115, 405, 394, 6499, 273, 3301, 263, 12654, 6499, 261, 262, 274, 2], "score": -0.16838553547859192, "weight": 1, "toks": ["<s>", "Set", "<", "ORecord", ">", "newRecords", "=", "manager", ".", "getNewRecords", "(", ")", ";", "</s>"]}, {"tids": [1, 997, 263, 652, 261, 315, 508, 315, 269, 315, 460, 315, 262, 274, 2], "score": -0.21868783235549927, "weight": 1, "toks": ["<s>", "doc", ".", "field", "(", "\"", "name", "\"", ",", "\"", "value", "\"", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 1815, 5510, 261, 3301, 263, 12654, 6499, 261, 262, 263, 1914, 261, 997, 262, 262, 274, 2], "score": -0.21875977516174316, "weight": 1, "toks": ["<s>", "Assert", ".", "assertTrue", "(", "manager", ".", "getNewRecords", "(", ")", ".", "contains", "(", "doc", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 3301, 263, 12654, 6499, 261, 262, 262, 274, 2], "score": -0.21885758638381958, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "manager", ".", "getNewRecords", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 404, 269, 3301, 263, 12654, 6499, 261, 262, 263, 963, 261, 262, 262, 274, 2], "score": -0.24416178464889526, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "1", ",", "manager", ".", "getNewRecords", "(", ")", ".", "size", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1000, 411, 531, 2115, 405, 394, 6499, 273, 3301, 263, 12654, 6499, 261, 262, 274, 2], "score": -0.26599356532096863, "weight": 1, "toks": ["<s>", "Set", "<", "ORecord", ">", "newRecords", "=", "manager", ".", "getNewRecords", "(", ")", ";", "</s>"]}, {"tids": [1, 7693, 1375, 12654, 6499, 261, 262, 1375, 9023, 1338, 10894, 3096, 3853, 471, 1552, 486, 2341, 3526, 5945, 263, 2], "score": -0.2685490548610687, "weight": 1, "toks": ["<s>", "Ensure", "`", "getNewRecords", "(", ")", "`", "retrieves", "only", "newly", "added", "records", "and", "does", "not", "include", "updated", "ones", ".", "</s>"]}, {"tids": [1, 1436, 279, 1409, 358, 1375, 394, 6499, 1375, 471, 1815, 518, 1704, 1450, 1375, 12654, 6499, 261, 262, 1375, 263, 2], "score": -0.2695382833480835, "weight": 1, "toks": ["<s>", "Add", "a", "record", "to", "`", "newRecords", "`", "and", "assert", "it", "exists", "using", "`", "getNewRecords", "(", ")", "`", ".", "</s>"]}, {"tids": [1, 25395, 261, 3301, 263, 12654, 6499, 261, 262, 262, 274, 2], "score": -0.27326226234436035, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "manager", ".", "getNewRecords", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 1815, 5510, 261, 3301, 263, 12654, 6499, 261, 262, 263, 1914, 261, 997, 262, 262, 274, 2], "score": -0.2846617102622986, "weight": 1, "toks": ["<s>", "Assert", ".", "assertTrue", "(", "manager", ".", "getNewRecords", "(", ")", ".", "contains", "(", "doc", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 31.648892842762987, "bleu-max": 100.0, "bleu-min": 31.648892842762987, "bleu-avg": 58.570915746486506, "code-bleu": 30.683216684639707, "code-bleu-max": 100.0, "code-bleu-min": 30.683216684639707, "code-bleu-avg": 55.207264786448185, "edit-sim": 59, "edit-sim-max": 100, "edit-sim-min": 59, "edit-sim-avg": 80.6, "rouge-p": 45.45454545454545, "rouge-p-max": 100.0, "rouge-p-min": 45.45454545454545, "rouge-p-avg": 67.011544011544, "rouge-r": 55.55555555555556, "rouge-r-max": 100.0, "rouge-r-min": 55.55555555555556, "rouge-r-avg": 68.88888888888889, "rouge-f": 49.99999950500001, "rouge-f-max": 99.9999995, "rouge-f-min": 49.99999950500001, "rouge-f-avg": 67.71198780615182, "num-seq": 10}, "time": 0.693183422088623, "misc": {}}
{"id": 117, "data_id": "csn-98259", "input_stids": [1, 2658, 4508, 340, 1668, 652, 14867, 446, 1972, 15596, 32315, 32315, 531, 1396, 682, 1016, 1852, 4709, 32315, 531, 5002, 620, 20930, 1635, 32315, 32315, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1272, 1016, 273, 394, 531, 1396, 682, 1016, 1852, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 559, 263, 16481, 262, 274, 289, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 32315, 2], "topk": [{"tids": [1, 288, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 2549, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 404, 269, 576, 269, 890, 262, 274, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 1207, 20930, 261, 2549, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 289, 2], "score": -0.2847501337528229, "weight": 1, "toks": ["<s>", "{", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "changeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "1", ",", "2", ",", "3", ")", ";", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "processChangeEvent", "(", "changeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 342, 342, 16803, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 1089, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 404, 269, 576, 269, 404, 262, 274, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 342, 342, 5203, 1207, 20930, 261, 1089, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 342, 342, 9697, 1815, 8867, 261, 404, 269, 1311, 12765, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 12765, 263, 5724, 261, 404, 262, 262, 274, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 5724, 261, 576, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2915763854980469, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "/", "/", "Given", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "updateEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "1", ",", "2", ",", "1", ")", ";", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "/", "/", "When", "processChangeEvent", "(", "updateEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "/", "/", "Then", "assertEquals", "(", "1", ",", "keysToRemove", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToRemove", ".", "containsKey", "(", "1", ")", ")", ";", "assertEquals", "(", "1", ",", "keysToAdd", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsKey", "(", "2", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 342, 342, 1000, 731, 326, 2172, 919, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 2549, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 404, 269, 576, 269, 404, 262, 274, 342, 342, 7903, 326, 707, 3613, 1842, 1207, 20930, 261, 2549, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 342, 342, 8553, 326, 29867, 1815, 5510, 261, 1311, 13786, 263, 1914, 620, 261, 576, 262, 262, 274, 1815, 5510, 261, 1311, 12765, 263, 1914, 620, 261, 404, 262, 262, 274, 289, 2], "score": -0.29563066363334656, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "/", "/", "Set", "up", "the", "initial", "state", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "changeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "1", ",", "2", ",", "1", ")", ";", "/", "/", "Execute", "the", "method", "under", "test", "processChangeEvent", "(", "changeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "/", "/", "Verify", "the", "outcomes", "assertTrue", "(", "keysToAdd", ".", "containsValue", "(", "2", ")", ")", ";", "assertTrue", "(", "keysToRemove", ".", "containsValue", "(", "1", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 986, 261, 262, 288, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 871, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 5002, 620, 3043, 559, 263, 11689, 269, 404, 269, 446, 269, 1728, 262, 274, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 1207, 20930, 261, 871, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 5724, 261, 1728, 262, 262, 274, 1815, 8867, 261, 374, 269, 1311, 12765, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.3046132028102875, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventAdd", "(", ")", "{", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "event", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OMultiValueChangeType", ".", "ADD", ",", "1", ",", "null", ",", "10", ")", ";", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "processChangeEvent", "(", "event", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertEquals", "(", "1", ",", "keysToAdd", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsKey", "(", "10", ")", ")", ";", "assertEquals", "(", "0", ",", "keysToRemove", ".", "size", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 3387, 326, 1375, 1207, 20930, 1375, 707, 353, 18432, 286, 280, 4966, 715, 364, 326, 11028, 648, 269, 279, 20570, 784, 1842, 3021, 848, 506, 2112, 487, 13040, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 1089, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 404, 269, 576, 269, 890, 262, 274, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 1207, 20930, 261, 1089, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 963, 261, 262, 262, 274, 1815, 8867, 261, 404, 269, 1311, 12765, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 5724, 261, 890, 262, 262, 274, 1815, 5510, 261, 1311, 12765, 263, 5724, 261, 576, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.34357455372810364, "weight": 1, "toks": ["<s>", "To", "ensure", "the", "`", "processChangeEvent", "`", "method", "is", "tested", "thoroughly", "for", "the", "UPDATE", "case", ",", "a", "concise", "test", "statement", "can", "be", "provided", "as", "follows", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "updateEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "1", ",", "2", ",", "3", ")", ";", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "processChangeEvent", "(", "updateEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertEquals", "(", "1", ",", "keysToAdd", ".", "size", "(", ")", ")", ";", "assertEquals", "(", "1", ",", "keysToRemove", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsKey", "(", "3", ")", ")", ";", "assertTrue", "(", "keysToRemove", ".", "containsKey", "(", "2", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 14373, 1375, 1207, 20930, 1375, 598, 392, 1375, 11028, 1375, 618, 1375, 531, 5002, 620, 20930, 1375, 263, 2], "score": -0.3592749536037445, "weight": 1, "toks": ["<s>", "Invoke", "`", "processChangeEvent", "`", "with", "an", "`", "UPDATE", "`", "type", "`", "OMultiValueChangeEvent", "`", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 342, 342, 26483, 326, 2549, 871, 487, 392, 1089, 871, 531, 5002, 620, 20930, 411, 1033, 269, 1033, 405, 2549, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 315, 498, 315, 269, 315, 20957, 315, 269, 315, 1592, 3053, 315, 262, 274, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 342, 342, 3049, 326, 707, 3613, 1842, 1207, 20930, 261, 2549, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 342, 342, 5452, 716, 1592, 460, 353, 3723, 471, 394, 460, 353, 3096, 1815, 5510, 261, 1311, 12765, 263, 1914, 620, 261, 315, 1592, 3053, 315, 262, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 1914, 620, 261, 315, 20957, 315, 262, 262, 274, 289, 2], "score": -0.36809220910072327, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "/", "/", "Stub", "the", "change", "event", "as", "an", "update", "event", "OMultiValueChangeEvent", "<", "Object", ",", "Object", ">", "changeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "\"", "key", "\"", ",", "\"", "newVal", "\"", ",", "\"", "oldVal", "\"", ")", ";", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "/", "/", "Call", "the", "method", "under", "test", "processChangeEvent", "(", "changeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "/", "/", "Assert", "that", "old", "value", "is", "removed", "and", "new", "value", "is", "added", "assertTrue", "(", "keysToRemove", ".", "containsValue", "(", "\"", "oldVal", "\"", ")", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsValue", "(", "\"", "newVal", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1436, 279, 1842, 648, 358, 3929, 326, 2549, 871, 434, 618, 11028, 353, 5204, 8783, 635, 24831, 3937, 326, 14817, 471, 2719, 4209, 854, 5926, 24012, 596, 8214, 263, 2], "score": -0.3759176731109619, "weight": 1, "toks": ["<s>", "Add", "a", "test", "case", "to", "verify", "the", "change", "event", "of", "type", "UPDATE", "is", "processed", "correctly", "by", "ensuring", "both", "the", "removal", "and", "addition", "actions", "are", "carried", "out", "properly", ".", "</s>"]}, {"tids": [1, 1436, 279, 1842, 364, 326, 11689, 648, 316, 326, 1620, 3021, 263, 2], "score": -0.3896443247795105, "weight": 1, "toks": ["<s>", "Add", "a", "test", "for", "the", "ADD", "case", "in", "the", "switch", "statement", ".", "</s>"]}, {"tids": [1, 1788, 279, 5416, 531, 5002, 620, 20930, 733, 598, 392, 11028, 2549, 618, 269, 471, 3929, 716, 3937, 1207, 24543, 471, 1207, 986, 2590, 854, 2566, 598, 326, 3434, 1472, 263, 2], "score": -0.39446792006492615, "weight": 1, "toks": ["<s>", "Create", "a", "mock", "OMultiValueChangeEvent", "object", "with", "an", "UPDATE", "change", "type", ",", "and", "verify", "that", "both", "processRemoval", "and", "processAdd", "methods", "are", "called", "with", "the", "correct", "parameters", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 23.400359804955364, "bleu-max": 23.400359804955364, "bleu-min": 12.72939088224683, "bleu-avg": 15.867008947051222, "code-bleu": 38.739416659964746, "code-bleu-max": 38.739416659964746, "code-bleu-min": 21.5456336936619, "code-bleu-avg": 32.44380190476163, "edit-sim": 46, "edit-sim-max": 48, "edit-sim-min": 36, "edit-sim-avg": 43.3, "rouge-p": 72.72727272727273, "rouge-p-max": 72.72727272727273, "rouge-p-min": 36.36363636363637, "rouge-p-avg": 60.27972027972028, "rouge-r": 57.14285714285714, "rouge-r-max": 57.14285714285714, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 57.142857142857125, "rouge-f": 63.9999995072, "rouge-f-max": 63.9999995072, "rouge-f-min": 44.444443969135804, "rouge-f-avg": 57.92820463567674, "num-seq": 10}, "time": 1.379664421081543, "misc": {}}
{"id": 118, "data_id": "csn-98259", "input_stids": [1, 2658, 4508, 340, 1668, 652, 14867, 446, 1972, 15596, 32315, 32315, 531, 1396, 682, 1016, 1852, 4709, 4317, 32315, 531, 5002, 620, 20930, 1635, 32315, 327, 24589, 6671, 17428, 274, 32315, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1272, 1016, 273, 394, 531, 1396, 682, 1016, 1852, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 559, 263, 16481, 262, 274, 289, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 32315, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 2], "topk": [{"tids": [1, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 2], "score": -0.0847971960902214, "weight": 1, "toks": ["<s>", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", "Object", ",", "Integer", ">", "(", ")", ";", "</s>"]}, {"tids": [1, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 2], "score": -0.09082853049039841, "weight": 1, "toks": ["<s>", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "</s>"]}, {"tids": [1, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 2], "score": -0.16825196146965027, "weight": 1, "toks": ["<s>", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", "Object", ",", "Integer", ">", "(", ")", ";", "</s>"]}, {"tids": [1, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 7576, 559, 263, 11028, 269, 315, 498, 315, 269, 315, 11144, 315, 269, 315, 6129, 315, 262, 274, 1207, 20930, 261, 2549, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 2], "score": -0.25024062395095825, "weight": 1, "toks": ["<s>", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "OMultiValueChangeEvent", "<", "?", ",", "?", ">", "changeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "ChangeType", ".", "UPDATE", ",", "\"", "key", "\"", ",", "\"", "oldValue", "\"", ",", "\"", "newValue", "\"", ")", ";", "processChangeEvent", "(", "changeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "</s>"]}, {"tids": [1, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 2], "score": -0.2512894868850708, "weight": 1, "toks": ["<s>", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", "Object", ",", "Integer", ">", "(", ")", ";", "</s>"]}, {"tids": [1, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 2], "score": -0.26069575548171997, "weight": 1, "toks": ["<s>", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "</s>"]}, {"tids": [1, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 2], "score": -0.28448864817619324, "weight": 1, "toks": ["<s>", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", "Object", ",", "Integer", ">", "(", ")", ";", "</s>"]}, {"tids": [1, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 2], "score": -0.29903504252433777, "weight": 1, "toks": ["<s>", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 26267, 263, 11028, 269, 315, 498, 315, 269, 404, 269, 576, 262, 274, 1207, 20930, 261, 2549, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 963, 261, 262, 262, 274, 1815, 8867, 261, 404, 269, 1311, 12765, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.31424933671951294, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "OMultiValueChangeEvent", "<", "?", ",", "?", ">", "changeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "CHANGE", ".", "UPDATE", ",", "\"", "key", "\"", ",", "1", ",", "2", ")", ";", "processChangeEvent", "(", "changeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertEquals", "(", "1", ",", "keysToAdd", ".", "size", "(", ")", ")", ";", "assertEquals", "(", "1", ",", "keysToRemove", ".", "size", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 2549, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 404, 269, 576, 269, 890, 262, 274, 1207, 20930, 261, 2549, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 963, 261, 262, 262, 274, 1815, 8867, 261, 404, 269, 1311, 12765, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.3215785324573517, "weight": 1, "toks": ["<s>", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "changeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "1", ",", "2", ",", "3", ")", ";", "processChangeEvent", "(", "changeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertEquals", "(", "1", ",", "keysToAdd", ".", "size", "(", ")", ")", ";", "assertEquals", "(", "1", ",", "keysToRemove", ".", "size", "(", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 6.746131631297679, "bleu-avg": 24.465364608201423, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 1.0826637826222023, "code-bleu-avg": 20.37129520474458, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 31, "edit-sim-avg": 45.6, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 37.5, "rouge-p-avg": 51.25, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 21.428571428571427, "rouge-r-avg": 37.142857142857146, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 27.27272680991736, "rouge-f-avg": 42.35690188672301, "num-seq": 10}, "time": 0.7133827209472656, "misc": {}}
{"id": 119, "data_id": "csn-98259", "input_stids": [1, 2658, 4508, 340, 1668, 652, 14867, 446, 1972, 15596, 32315, 32315, 531, 1396, 682, 1016, 1852, 4709, 4317, 4317, 32315, 531, 5002, 620, 20930, 1635, 32315, 6808, 263, 12787, 261, 23511, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1272, 1016, 273, 394, 531, 1396, 682, 1016, 1852, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 559, 263, 16481, 262, 274, 289, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 32315, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 2], "topk": [{"tids": [1, 14373, 1375, 1207, 20930, 1375, 707, 598, 392, 1375, 531, 5002, 620, 20930, 1375, 11193, 392, 1375, 11028, 1375, 269, 471, 1954, 326, 6885, 635, 1815, 310, 3478, 316, 1375, 1311, 13786, 1375, 471, 1375, 1311, 12765, 1375, 263, 2], "score": -0.23363091051578522, "weight": 1, "toks": ["<s>", "Invoke", "`", "processChangeEvent", "`", "method", "with", "an", "`", "OMultiValueChangeEvent", "`", "indicating", "an", "`", "UPDATE", "`", ",", "and", "validate", "the", "behavior", "by", "asserting", "changes", "in", "`", "keysToAdd", "`", "and", "`", "keysToRemove", "`", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.2827233672142029, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 2549, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 26267, 67, 2399, 263, 11028, 269, 404, 269, 576, 269, 890, 262, 274, 1207, 20930, 261, 2549, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 963, 261, 262, 262, 274, 1815, 8867, 261, 404, 269, 1311, 12765, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.30636152625083923, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "changeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "CHANGE_TYPE", ".", "UPDATE", ",", "1", ",", "2", ",", "3", ")", ";", "processChangeEvent", "(", "changeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertEquals", "(", "1", ",", "keysToAdd", ".", "size", "(", ")", ")", ";", "assertEquals", "(", "1", ",", "keysToRemove", ".", "size", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1207, 20930, 1375, 707, 21195, 1347, 5057, 392, 1375, 11028, 1375, 871, 269, 1846, 848, 2805, 333, 20482, 3102, 294, 404, 263, 7730, 279, 3875, 1625, 326, 707, 848, 506, 18432, 261, 1818, 864, 316, 326, 1375, 632, 11672, 1375, 707, 262, 263, 576, 263, 1788, 392, 1089, 618, 1375, 531, 5002, 620, 20930, 1375, 733, 598, 279, 394, 460, 471, 392, 1592, 460, 263, 890, 263, 3049, 1375, 1207, 20930, 1375, 598, 333, 871, 471, 1221, 7820, 358, 3929, 716, 1375, 1311, 13786, 1375, 471, 1375, 1311, 12765, 1375, 854, 8783, 13441, 11799, 263, 2457, 791, 294, 1375, 1375, 1375, 2252, 342, 342, 1788, 392, 2172, 1375, 531, 5002, 620, 20930, 1375, 733, 3142, 27967, 392, 11028, 1674, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 2549, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 7576, 559, 263, 11028, 269, 404, 269, 1728, 269, 4200, 262, 274, 342, 342, 14373, 326, 707, 3613, 1842, 1272, 1016, 263, 1207, 20930, 261, 2549, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 342, 342, 5452, 326, 2665, 29867, 358, 6932, 3434, 6885, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 1914, 620, 261, 4200, 262, 262, 274, 1815, 8867, 261, 404, 269, 1311, 12765, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 12765, 263, 1914, 620, 261, 1728, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.3151912987232208, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "processChangeEvent", "`", "method", "specifically", "when", "handling", "an", "`", "UPDATE", "`", "event", ",", "you", "can", "follow", "this", "simplified", "sequence", ":", "1", ".", "Prepare", "a", "setup", "where", "the", "method", "can", "be", "tested", "(", "already", "given", "in", "the", "`", "@", "Before", "`", "method", ")", ".", "2", ".", "Create", "an", "update", "type", "`", "OMultiValueChangeEvent", "`", "object", "with", "a", "new", "value", "and", "an", "old", "value", ".", "3", ".", "Call", "`", "processChangeEvent", "`", "with", "this", "event", "and", "make", "assertions", "to", "verify", "that", "`", "keysToAdd", "`", "and", "`", "keysToRemove", "`", "are", "correctly", "manipulated", ".", "For", "instance", ":", "`", "`", "`", "java", "/", "/", "Create", "an", "initial", "`", "OMultiValueChangeEvent", "`", "object", "simulating", "an", "UPDATE", "operation", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "changeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "ChangeType", ".", "UPDATE", ",", "1", ",", "10", ",", "20", ")", ";", "/", "/", "Invoke", "the", "method", "under", "test", "propertyIndex", ".", "processChangeEvent", "(", "changeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "/", "/", "Assert", "the", "expected", "outcomes", "to", "confirm", "correct", "behavior", "assertEquals", "(", "1", ",", "keysToAdd", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsValue", "(", "20", ")", ")", ";", "assertEquals", "(", "1", ",", "keysToRemove", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToRemove", ".", "containsValue", "(", "10", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 11028, 269, 315, 18613, 620, 315, 269, 315, 30276, 315, 262, 274, 1207, 20930, 261, 2549, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 289, 2], "score": -0.3211381733417511, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "OMultiValueChangeEvent", "<", "?", ",", "?", ">", "changeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "UPDATE", ",", "\"", "OldValue", "\"", ",", "\"", "NewValue", "\"", ")", ";", "processChangeEvent", "(", "changeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "}", "</s>"]}, {"tids": [1, 1220, 3021, 3414, 791, 3152, 1375, 1311, 13786, 1375, 471, 1375, 1311, 12765, 1375, 1492, 854, 5137, 13441, 11799, 316, 326, 1375, 1207, 20930, 1375, 707, 4982, 3775, 2549, 871, 6088, 261, 11689, 269, 26056, 269, 11028, 262, 263, 1220, 3875, 353, 331, 7053, 364, 326, 1842, 1375, 1842, 2227, 20930, 1891, 1375, 487, 518, 4271, 3661, 1311, 854, 3096, 578, 3723, 1347, 392, 1089, 871, 9938, 263, 2], "score": -0.3222101330757141, "weight": 1, "toks": ["<s>", "This", "statement", "creates", "instance", "variables", "`", "keysToAdd", "`", "and", "`", "keysToRemove", "`", "which", "are", "later", "manipulated", "in", "the", "`", "processChangeEvent", "`", "method", "during", "different", "change", "event", "cases", "(", "ADD", ",", "REMOVE", ",", "UPDATE", ")", ".", "This", "setup", "is", "vital", "for", "the", "test", "`", "testProcessChangeEventUpdate", "`", "as", "it", "checks", "how", "keys", "are", "added", "or", "removed", "when", "an", "update", "event", "occurs", ".", "</s>"]}, {"tids": [1, 7693, 716, 326, 1207, 20930, 707, 8783, 7372, 392, 11028, 871, 635, 6534, 471, 9427, 326, 5505, 1311, 2511, 603, 326, 2549, 871, 296, 272, 924, 263, 2], "score": -0.331635981798172, "weight": 1, "toks": ["<s>", "Ensure", "that", "the", "processChangeEvent", "method", "correctly", "handles", "an", "UPDATE", "event", "by", "adding", "and", "removing", "the", "appropriate", "keys", "based", "on", "the", "change", "event", "'", "s", "values", ".", "</s>"]}, {"tids": [1, 1021, 707, 1375, 1842, 2227, 20930, 1891, 261, 262, 1375, 14606, 358, 506, 26584, 364, 7769, 326, 5057, 434, 392, 1375, 11028, 1375, 871, 316, 326, 1375, 1207, 20930, 1375, 707, 434, 326, 3627, 667, 263, 2974, 23500, 1842, 333, 707, 269, 326, 1024, 3021, 1410, 10572, 1230, 4356, 1375, 1207, 20930, 1375, 598, 279, 5416, 1375, 531, 5002, 620, 20930, 1375, 716, 3142, 17099, 392, 1089, 871, 263, 1021, 1311, 471, 924, 24589, 316, 326, 1089, 1410, 506, 444, 731, 358, 866, 309, 2898, 854, 8783, 3096, 471, 3723, 316, 326, 17613, 7565, 261, 1375, 1311, 13786, 1375, 269, 1375, 1311, 12765, 1375, 262, 263, 13743, 353, 279, 20482, 4471, 434, 4121, 326, 1024, 3021, 3377, 2324, 3007, 294, 1375, 1375, 1375, 2252, 531, 5002, 620, 20930, 411, 1033, 269, 1033, 405, 1089, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 315, 498, 315, 269, 315, 20957, 315, 269, 315, 1592, 3053, 315, 262, 274, 1207, 20930, 261, 1089, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 18163, 261, 1311, 13786, 263, 5724, 261, 315, 20957, 315, 262, 269, 353, 261, 638, 262, 262, 274, 1815, 18163, 261, 1311, 12765, 263, 5724, 261, 315, 1592, 3053, 315, 262, 269, 353, 261, 638, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.332845538854599, "weight": 1, "toks": ["<s>", "The", "method", "`", "testProcessChangeEventUpdate", "(", ")", "`", "appears", "to", "be", "designed", "for", "testing", "the", "handling", "of", "an", "`", "UPDATE", "`", "event", "in", "the", "`", "processChangeEvent", "`", "method", "of", "the", "associated", "class", ".", "To", "effectively", "test", "this", "method", ",", "the", "next", "statement", "should", "ideally", "invoke", "`", "processChangeEvent", "`", "with", "a", "mock", "`", "OMultiValueChangeEvent", "`", "that", "simulates", "an", "update", "event", ".", "The", "keys", "and", "values", "involved", "in", "the", "update", "should", "be", "set", "up", "to", "check", "if", "they", "are", "correctly", "added", "and", "removed", "in", "the", "respective", "maps", "(", "`", "keysToAdd", "`", ",", "`", "keysToRemove", "`", ")", ".", "Here", "is", "a", "simplified", "implementation", "of", "what", "the", "next", "statement", "could", "look", "like", ":", "`", "`", "`", "java", "OMultiValueChangeEvent", "<", "Object", ",", "Object", ">", "updateEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "\"", "key", "\"", ",", "\"", "newVal", "\"", ",", "\"", "oldVal", "\"", ")", ";", "processChangeEvent", "(", "updateEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertThat", "(", "keysToAdd", ".", "containsKey", "(", "\"", "newVal", "\"", ")", ",", "is", "(", "true", ")", ")", ";", "assertThat", "(", "keysToRemove", ".", "containsKey", "(", "\"", "oldVal", "\"", ")", ",", "is", "(", "true", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 2549, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 404, 269, 576, 262, 274, 1207, 20930, 261, 2549, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 2], "score": -0.3361954689025879, "weight": 1, "toks": ["<s>", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "changeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "1", ",", "2", ")", ";", "processChangeEvent", "(", "changeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "</s>"]}, {"tids": [1, 7693, 1375, 1207, 20930, 1375, 7372, 1375, 11028, 1375, 2549, 8783, 263, 2], "score": -0.3407772183418274, "weight": 1, "toks": ["<s>", "Ensure", "`", "processChangeEvent", "`", "handles", "`", "UPDATE", "`", "change", "correctly", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 7.894780166934959, "bleu-max": 16.057338140034293, "bleu-min": 2.101251069138722, "bleu-avg": 9.24950374594579, "code-bleu": 4.539762614800934, "code-bleu-max": 16.866796300650815, "code-bleu-min": 0.5458877970707997, "code-bleu-avg": 11.923344568248755, "edit-sim": 44, "edit-sim-max": 52, "edit-sim-min": 19, "edit-sim-avg": 44.1, "rouge-p": 60.0, "rouge-p-max": 60.0, "rouge-p-min": 32.0, "rouge-p-avg": 40.87826086956522, "rouge-r": 35.294117647058826, "rouge-r-max": 52.94117647058824, "rouge-r-min": 23.52941176470588, "rouge-r-avg": 45.88235294117647, "rouge-f": 44.44444397805213, "rouge-f-max": 56.24999950195313, "rouge-f-min": 31.999999564800003, "rouge-f-avg": 41.555158252204166, "num-seq": 10}, "time": 1.8642573356628418, "misc": {}}
{"id": 120, "data_id": "csn-98259", "input_stids": [1, 2658, 4508, 340, 1668, 652, 14867, 446, 1972, 15596, 32315, 1071, 531, 5002, 620, 20930, 261, 531, 3043, 559, 2549, 559, 269, 1475, 498, 269, 776, 460, 269, 776, 11144, 262, 288, 333, 263, 2549, 559, 273, 2549, 559, 274, 333, 263, 498, 273, 498, 274, 333, 263, 460, 273, 460, 274, 333, 263, 11144, 273, 11144, 274, 289, 32315, 531, 1396, 682, 1016, 1852, 4709, 4317, 4317, 531, 5002, 620, 20930, 32315, 531, 5002, 620, 20930, 1635, 32315, 32315, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1272, 1016, 273, 394, 531, 1396, 682, 1016, 1852, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 559, 263, 16481, 262, 274, 289, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 32315, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 2], "topk": [{"tids": [1, 14373, 1375, 1207, 20930, 1375, 598, 1375, 3309, 620, 20930, 1375, 269, 1375, 1311, 13786, 1375, 269, 471, 1375, 1311, 12765, 1375, 358, 1842, 326, 1089, 10766, 263, 2], "score": -0.01385438721626997, "weight": 1, "toks": ["<s>", "Invoke", "`", "processChangeEvent", "`", "with", "`", "multiValueChangeEvent", "`", ",", "`", "keysToAdd", "`", ",", "and", "`", "keysToRemove", "`", "to", "test", "the", "update", "scenario", ".", "</s>"]}, {"tids": [1, 14373, 1375, 1207, 20930, 1375, 598, 326, 2522, 871, 471, 7565, 269, 1508, 1815, 716, 1375, 1311, 13786, 1375, 471, 1375, 1311, 12765, 1375, 854, 4358, 8783, 263, 2], "score": -0.2149241417646408, "weight": 1, "toks": ["<s>", "Invoke", "`", "processChangeEvent", "`", "with", "the", "created", "event", "and", "maps", ",", "then", "assert", "that", "`", "keysToAdd", "`", "and", "`", "keysToRemove", "`", "are", "modified", "correctly", ".", "</s>"]}, {"tids": [1, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 2], "score": -0.2780008614063263, "weight": 1, "toks": ["<s>", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "</s>"]}, {"tids": [1, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 2], "score": -0.3394336402416229, "weight": 1, "toks": ["<s>", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "</s>"]}, {"tids": [1, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 2], "score": -0.34716346859931946, "weight": 1, "toks": ["<s>", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "</s>"]}, {"tids": [1, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 2], "score": -0.34971103072166443, "weight": 1, "toks": ["<s>", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "</s>"]}, {"tids": [1, 14373, 1375, 1207, 20930, 1375, 707, 598, 326, 6454, 1375, 3309, 620, 20930, 1375, 269, 1375, 1311, 13786, 1375, 269, 471, 1375, 1311, 12765, 1375, 358, 1842, 326, 1375, 11028, 1375, 648, 263, 2], "score": -0.37339580059051514, "weight": 1, "toks": ["<s>", "Invoke", "`", "processChangeEvent", "`", "method", "with", "the", "initialized", "`", "multiValueChangeEvent", "`", ",", "`", "keysToAdd", "`", ",", "and", "`", "keysToRemove", "`", "to", "test", "the", "`", "UPDATE", "`", "case", ".", "</s>"]}, {"tids": [1, 3049, 1375, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1375, 2], "score": -0.39086899161338806, "weight": 1, "toks": ["<s>", "Call", "`", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "`", "</s>"]}, {"tids": [1, 1842, 2227, 20930, 1891, 261, 262, 274, 2], "score": -0.3922272324562073, "weight": 1, "toks": ["<s>", "testProcessChangeEventUpdate", "(", ")", ";", "</s>"]}, {"tids": [1, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 2], "score": -0.4412953853607178, "weight": 1, "toks": ["<s>", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 14.882560178972213, "bleu-avg": 49.290064169420425, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 3.324279430535456, "code-bleu-avg": 43.55592409650956, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 47, "edit-sim-avg": 72.4, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 74.0, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 44.44444444444444, "rouge-r-avg": 68.8888888888889, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 47.05882303114187, "rouge-f-avg": 70.92466410734072, "num-seq": 10}, "time": 0.810969352722168, "misc": {}}
{"id": 121, "data_id": "csn-98259", "input_stids": [1, 2658, 4508, 340, 1668, 652, 14867, 446, 1972, 15596, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 531, 1396, 682, 1016, 1852, 4709, 4317, 4317, 531, 5002, 620, 20930, 32315, 1635, 32315, 531, 3342, 13930, 5846, 1227, 2229, 273, 261, 531, 3342, 13930, 5846, 1227, 262, 15674, 261, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1272, 1016, 273, 394, 531, 1396, 682, 1016, 1852, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 559, 263, 16481, 262, 274, 289, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 32315, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 289, 2], "score": -0.18896451592445374, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "41", ",", "42", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.24266020953655243, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}, {"tids": [1, 7693, 716, 326, 3478, 854, 8783, 21591, 316, 1375, 1311, 13786, 1375, 471, 1375, 1311, 12765, 1375, 7565, 1839, 4929, 392, 1089, 871, 263, 2], "score": -0.2491120547056198, "weight": 1, "toks": ["<s>", "Ensure", "that", "the", "changes", "are", "correctly", "reflected", "in", "`", "keysToAdd", "`", "and", "`", "keysToRemove", "`", "maps", "after", "processing", "an", "update", "event", ".", "</s>"]}, {"tids": [1, 3049, 1375, 1842, 2227, 20930, 1891, 1375, 707, 263, 2], "score": -0.25631237030029297, "weight": 1, "toks": ["<s>", "Call", "`", "testProcessChangeEventUpdate", "`", "method", ".", "</s>"]}, {"tids": [1, 632, 272, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.2843802571296692, "weight": 1, "toks": ["<s>", "@", "s", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}, {"tids": [1, 14373, 326, 1375, 1207, 20930, 1375, 707, 598, 392, 1375, 531, 5002, 620, 20930, 1375, 434, 618, 1375, 26056, 1375, 263, 2], "score": -0.29318541288375854, "weight": 1, "toks": ["<s>", "Invoke", "the", "`", "processChangeEvent", "`", "method", "with", "an", "`", "OMultiValueChangeEvent", "`", "of", "type", "`", "REMOVE", "`", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 986, 261, 262, 2], "score": -0.31562137603759766, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventAdd", "(", ")", "</s>"]}, {"tids": [1, 14373, 1375, 1865, 1305, 261, 262, 1375, 358, 3387, 1375, 1272, 1016, 1375, 353, 6454, 1865, 3549, 1375, 1842, 2227, 20930, 1891, 261, 262, 1375, 263, 2], "score": -0.3204289972782135, "weight": 1, "toks": ["<s>", "Invoke", "`", "beforeMethod", "(", ")", "`", "to", "ensure", "`", "propertyIndex", "`", "is", "initialized", "before", "running", "`", "testProcessChangeEventUpdate", "(", ")", "`", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 289, 2], "score": -0.3741311728954315, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "41", ",", "42", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.4370099902153015, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 8.80415762396937, "bleu-max": 9.055181473849501, "bleu-min": 8.36556455026262, "bleu-avg": 8.766643779204047, "code-bleu": 3.8783390631463495, "code-bleu-max": 3.8783390631463495, "code-bleu-min": 1.1839482166912036, "code-bleu-avg": 2.8083647814945043, "edit-sim": 32, "edit-sim-max": 37, "edit-sim-min": 32, "edit-sim-avg": 33.1, "rouge-p": 37.5, "rouge-p-max": 40.0, "rouge-p-min": 37.5, "rouge-p-avg": 38.0, "rouge-r": 21.428571428571427, "rouge-r-max": 28.57142857142857, "rouge-r-min": 21.428571428571427, "rouge-r-avg": 22.85714285714285, "rouge-f": 27.27272680991736, "rouge-f-max": 33.33333284722222, "rouge-f-min": 27.27272680991736, "rouge-f-avg": 28.484848017378322, "num-seq": 10}, "time": 0.777451753616333, "misc": {}}
{"id": 122, "data_id": "csn-98259", "input_stids": [1, 2658, 4508, 340, 1668, 652, 14867, 446, 1972, 15596, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 531, 1396, 682, 1016, 1852, 4709, 4317, 4317, 531, 5002, 620, 20930, 4317, 32315, 32315, 277, 620, 273, 394, 531, 9400, 653, 261, 1311, 262, 274, 32315, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1272, 1016, 273, 394, 531, 1396, 682, 1016, 1852, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 559, 263, 16481, 262, 274, 289, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 32315, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 3096, 2396, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 2], "topk": [{"tids": [1, 727, 1635, 411, 1033, 269, 2144, 405, 3723, 2396, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 2], "score": -0.16441625356674194, "weight": 1, "toks": ["<s>", "final", "Map", "<", "Object", ",", "Integer", ">", "removedKeys", "=", "new", "HashMap", "<", "Object", ",", "Integer", ">", "(", ")", ";", "</s>"]}, {"tids": [1, 727, 1635, 411, 1033, 269, 2144, 405, 2665, 2396, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 2665, 2396, 13786, 263, 1378, 261, 14856, 269, 404, 262, 274, 342, 342, 4725, 21249, 296, 752, 25965, 296, 8616, 1135, 2097, 810, 471, 326, 8156, 460, 353, 296, 14856, 296, 1815, 8867, 261, 2665, 2396, 13786, 269, 1311, 13786, 262, 274, 2], "score": -0.17341765761375427, "weight": 1, "toks": ["<s>", "final", "Map", "<", "Object", ",", "Integer", ">", "expectedKeysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "expectedKeysToAdd", ".", "put", "(", "42", ",", "1", ")", ";", "/", "/", "Assuming", "'", "createSingleValue", "'", "simply", "returns", "its", "input", "and", "the", "resulting", "value", "is", "'", "42", "'", "assertEquals", "(", "expectedKeysToAdd", ",", "keysToAdd", ")", ";", "</s>"]}, {"tids": [1, 14373, 1375, 1842, 2227, 20930, 1891, 1375, 358, 3929, 3661, 1375, 1207, 20930, 1375, 7372, 1375, 11028, 1375, 2549, 2641, 263, 2], "score": -0.25986620783805847, "weight": 1, "toks": ["<s>", "Invoke", "`", "testProcessChangeEventUpdate", "`", "to", "verify", "how", "`", "processChangeEvent", "`", "handles", "`", "UPDATE", "`", "change", "events", ".", "</s>"]}, {"tids": [1, 1788, 279, 1842, 358, 3929, 326, 1375, 1207, 20930, 1375, 707, 1347, 5057, 392, 1375, 11689, 1375, 871, 263, 2], "score": -0.29116740822792053, "weight": 1, "toks": ["<s>", "Create", "a", "test", "to", "verify", "the", "`", "processChangeEvent", "`", "method", "when", "handling", "an", "`", "ADD", "`", "event", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1207, 20930, 1375, 707, 23500, 269, 326, 1842, 1410, 7155, 603, 3929, 310, 716, 3937, 326, 1375, 1207, 986, 1375, 471, 1375, 1207, 24543, 1375, 2590, 854, 2566, 598, 326, 3434, 1472, 1347, 392, 1089, 871, 9938, 263, 1220, 6104, 6728, 716, 326, 1311, 358, 527, 471, 1206, 854, 3526, 8783, 316, 326, 17613, 7565, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 342, 342, 10939, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 342, 342, 7903, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 342, 342, 5452, 1815, 8867, 261, 2144, 263, 4323, 261, 404, 262, 269, 1311, 13786, 263, 336, 261, 14856, 262, 262, 274, 1815, 8867, 261, 2144, 263, 4323, 261, 404, 262, 269, 1311, 12765, 263, 336, 261, 20170, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2929873764514923, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "processChangeEvent", "`", "method", "effectively", ",", "the", "test", "should", "focus", "on", "verifying", "that", "both", "the", "`", "processAdd", "`", "and", "`", "processRemoval", "`", "methods", "are", "called", "with", "the", "correct", "parameters", "when", "an", "update", "event", "occurs", ".", "This", "includes", "checking", "that", "the", "keys", "to", "add", "and", "remove", "are", "updated", "correctly", "in", "the", "respective", "maps", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "/", "/", "Setup", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "41", ",", "42", ")", ";", "/", "/", "Execute", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "/", "/", "Assert", "assertEquals", "(", "Integer", ".", "valueOf", "(", "1", ")", ",", "keysToAdd", ".", "get", "(", "42", ")", ")", ";", "assertEquals", "(", "Integer", ".", "valueOf", "(", "1", ")", ",", "keysToRemove", ".", "get", "(", "41", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 1207, 20930, 1375, 707, 29440, 364, 5057, 392, 315, 11028, 315, 2549, 618, 269, 333, 1842, 1410, 3929, 716, 294, 404, 262, 326, 707, 8214, 7157, 326, 1592, 460, 269, 471, 576, 262, 518, 4831, 326, 394, 460, 358, 326, 5505, 1678, 263, 13743, 296, 272, 279, 324, 17802, 471, 20715, 4031, 358, 1045, 333, 2836, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 342, 342, 10939, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 871, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 404, 269, 404, 269, 576, 262, 274, 342, 342, 7903, 707, 3613, 1842, 1272, 1016, 263, 1207, 20930, 261, 871, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 342, 342, 5452, 1686, 1815, 5510, 261, 1311, 12765, 263, 5724, 261, 404, 262, 473, 473, 1311, 12765, 263, 336, 261, 404, 262, 263, 1606, 261, 404, 262, 262, 274, 342, 342, 18613, 460, 3723, 1815, 5510, 261, 1311, 13786, 263, 5724, 261, 576, 262, 473, 473, 1311, 13786, 263, 336, 261, 576, 262, 263, 1606, 261, 404, 262, 262, 274, 342, 342, 1166, 460, 3096, 289, 1375, 1375, 1375, 1220, 1842, 903, 866, 309, 326, 1592, 460, 353, 3832, 3723, 471, 394, 460, 353, 3832, 3096, 3613, 326, 315, 11028, 315, 871, 269, 24831, 3937, 5295, 3912, 4985, 263, 2], "score": -0.2965063154697418, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "processChangeEvent", "`", "method", "especially", "for", "handling", "an", "\"", "UPDATE", "\"", "change", "type", ",", "this", "test", "should", "verify", "that", ":", "1", ")", "the", "method", "properly", "removes", "the", "old", "value", ",", "and", "2", ")", "it", "adds", "the", "new", "value", "to", "the", "appropriate", "sets", ".", "Here", "'", "s", "a", "brief", "and", "targeted", "way", "to", "write", "this", "unit", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "/", "/", "Setup", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "event", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "1", ",", "1", ",", "2", ")", ";", "/", "/", "Execute", "method", "under", "test", "propertyIndex", ".", "processChangeEvent", "(", "event", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "/", "/", "Assert", "results", "assertTrue", "(", "keysToRemove", ".", "containsKey", "(", "1", ")", "&", "&", "keysToRemove", ".", "get", "(", "1", ")", ".", "equals", "(", "1", ")", ")", ";", "/", "/", "Old", "value", "removed", "assertTrue", "(", "keysToAdd", ".", "containsKey", "(", "2", ")", "&", "&", "keysToAdd", ".", "get", "(", "2", ")", ".", "equals", "(", "1", ")", ")", ";", "/", "/", "New", "value", "added", "}", "`", "`", "`", "This", "test", "will", "check", "if", "the", "old", "value", "is", "being", "removed", "and", "new", "value", "is", "being", "added", "under", "the", "\"", "UPDATE", "\"", "event", ",", "ensuring", "both", "operations", "complete", "successfully", ".", "</s>"]}, {"tids": [1, 7766, 326, 1375, 1207, 20930, 1375, 707, 364, 5057, 392, 1375, 11028, 1375, 871, 618, 263, 2], "score": -0.2996532917022705, "weight": 1, "toks": ["<s>", "Test", "the", "`", "processChangeEvent", "`", "method", "for", "handling", "an", "`", "UPDATE", "`", "event", "type", ".", "</s>"]}, {"tids": [1, 7693, 716, 326, 498, 9427, 471, 6534, 1207, 6330, 8783, 1347, 9702, 279, 460, 628, 20170, 358, 14856, 316, 392, 791, 434, 1375, 531, 5002, 620, 20930, 1375, 263, 2], "score": -0.3241194188594818, "weight": 1, "toks": ["<s>", "Ensure", "that", "the", "key", "removing", "and", "adding", "process", "works", "correctly", "when", "updating", "a", "value", "from", "41", "to", "42", "in", "an", "instance", "of", "`", "OMultiValueChangeEvent", "`", ".", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1207, 20930, 1375, 707, 269, 6932, 518, 7372, 392, 1089, 871, 21419, 635, 6534, 326, 394, 460, 471, 9427, 326, 1592, 1245, 628, 326, 7565, 1375, 1311, 13786, 1375, 471, 1375, 1311, 12765, 1375, 263, 1220, 848, 506, 2731, 3007, 333, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 342, 342, 1000, 731, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 342, 342, 1312, 20603, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 342, 342, 8553, 1815, 5510, 261, 315, 13219, 394, 460, 358, 506, 3096, 315, 269, 1311, 13786, 263, 1914, 620, 261, 14856, 262, 262, 274, 1815, 5510, 261, 315, 13219, 1592, 460, 358, 506, 3723, 315, 269, 1311, 12765, 263, 1914, 620, 261, 20170, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 2202, 11240, 4271, 326, 5337, 3434, 4496, 434, 326, 1375, 11028, 1375, 648, 3470, 326, 707, 263, 2], "score": -0.32809606194496155, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "processChangeEvent", "`", "method", ",", "confirm", "it", "handles", "an", "update", "event", "appropriately", "by", "adding", "the", "new", "value", "and", "removing", "the", "old", "one", "from", "the", "maps", "`", "keysToAdd", "`", "and", "`", "keysToRemove", "`", ".", "This", "can", "be", "done", "like", "this", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "/", "/", "Set", "up", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "41", ",", "42", ")", ";", "/", "/", "Exercise", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "/", "/", "Verify", "assertTrue", "(", "\"", "Expected", "new", "value", "to", "be", "added", "\"", ",", "keysToAdd", ".", "containsValue", "(", "42", ")", ")", ";", "assertTrue", "(", "\"", "Expected", "old", "value", "to", "be", "removed", "\"", ",", "keysToRemove", ".", "containsValue", "(", "41", ")", ")", ";", "}", "`", "`", "`", "This", "single", "assertion", "checks", "the", "basic", "correctness", "of", "the", "`", "UPDATE", "`", "case", "within", "the", "method", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 986, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11689, 269, 446, 269, 446, 269, 404, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 5724, 261, 404, 262, 262, 274, 289, 2], "score": -0.3485899567604065, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventAdd", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "ADD", ",", "null", ",", "null", ",", "1", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsKey", "(", "1", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 46.38596139522901, "bleu-max": 65.59965570884768, "bleu-min": 46.38596139522901, "bleu-avg": 50.38616347079526, "code-bleu": 24.592931548896036, "code-bleu-max": 73.12994528013097, "code-bleu-min": 24.592931548896036, "code-bleu-avg": 34.38381821783054, "edit-sim": 85, "edit-sim-max": 95, "edit-sim-min": 83, "edit-sim-avg": 87.7, "rouge-p": 75.0, "rouge-p-max": 87.5, "rouge-p-min": 75.0, "rouge-p-avg": 77.5, "rouge-r": 75.0, "rouge-r-max": 87.5, "rouge-r-min": 75.0, "rouge-r-avg": 77.5, "rouge-f": 74.9999995, "rouge-f-max": 87.4999995, "rouge-f-min": 74.9999995, "rouge-f-avg": 77.49999950000002, "num-seq": 10}, "time": 0.4908909797668457, "misc": {}}
{"id": 123, "data_id": "csn-98259", "input_stids": [1, 2658, 4508, 340, 1668, 652, 14867, 446, 1972, 15596, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 531, 1396, 682, 1016, 1852, 4709, 4317, 4317, 531, 5002, 620, 20930, 4317, 32315, 32315, 327, 852, 274, 32315, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1272, 1016, 273, 394, 531, 1396, 682, 1016, 1852, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 559, 263, 16481, 262, 274, 289, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 32315, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 3096, 2396, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 3096, 2396, 263, 1378, 261, 20170, 269, 404, 262, 274, 2], "topk": [{"tids": [1, 2974, 23500, 1842, 326, 1375, 1207, 20930, 1375, 707, 1347, 279, 1375, 11028, 1375, 618, 871, 9938, 269, 518, 296, 272, 11239, 358, 3929, 716, 326, 707, 7372, 3937, 14817, 434, 326, 1592, 460, 471, 2719, 434, 326, 394, 460, 8783, 263, 432, 16745, 1842, 4102, 3387, 716, 1839, 4440, 1375, 1207, 20930, 1375, 598, 392, 1375, 11028, 1375, 871, 269, 326, 1375, 1311, 13786, 1375, 852, 1914, 326, 394, 460, 28859, 8783, 471, 326, 1375, 1311, 12765, 1375, 852, 1914, 326, 1592, 460, 263, 13743, 353, 392, 3454, 434, 4123, 279, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 2227, 20930, 1190, 1891, 261, 262, 288, 342, 342, 10371, 726, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 342, 342, 1788, 279, 2549, 871, 1625, 326, 460, 3478, 628, 1728, 358, 4200, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 2549, 1133, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 1728, 269, 4200, 269, 1728, 262, 274, 342, 342, 4603, 1272, 1016, 263, 1207, 20930, 261, 2549, 1133, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 342, 342, 5452, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 336, 261, 4200, 262, 263, 9307, 261, 262, 262, 274, 1815, 8867, 261, 404, 269, 1311, 12765, 263, 336, 261, 1728, 262, 263, 9307, 261, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 26124, 716, 294, 404, 263, 1021, 1375, 1311, 13786, 1375, 852, 1914, 326, 394, 460, 598, 326, 2145, 5504, 263, 576, 263, 1021, 1375, 1311, 12765, 1375, 852, 1914, 326, 3723, 1592, 460, 8783, 28859, 263, 1021, 1842, 3875, 6104, 2172, 7565, 261, 1375, 1311, 13786, 1375, 471, 1375, 1311, 12765, 1375, 262, 269, 279, 5416, 1089, 871, 269, 15387, 326, 707, 3613, 1842, 269, 471, 7820, 358, 866, 326, 852, 2939, 263, 2], "score": -0.02832639217376709, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "processChangeEvent", "`", "method", "when", "a", "`", "UPDATE", "`", "type", "event", "occurs", ",", "it", "'", "s", "critical", "to", "verify", "that", "the", "method", "handles", "both", "removal", "of", "the", "old", "value", "and", "addition", "of", "the", "new", "value", "correctly", ".", "A", "minimal", "test", "would", "ensure", "that", "after", "calling", "`", "processChangeEvent", "`", "with", "an", "`", "UPDATE", "`", "event", ",", "the", "`", "keysToAdd", "`", "map", "contains", "the", "new", "value", "incremented", "correctly", "and", "the", "`", "keysToRemove", "`", "map", "contains", "the", "old", "value", ".", "Here", "is", "an", "example", "of", "such", "a", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testProcessChangeEventWithUpdate", "(", ")", "{", "/", "/", "Arrange", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "/", "/", "Create", "a", "change", "event", "where", "the", "value", "changes", "from", "10", "to", "20", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "changeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "10", ",", "20", ",", "10", ")", ";", "/", "/", "Act", "propertyIndex", ".", "processChangeEvent", "(", "changeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "/", "/", "Assert", "assertEquals", "(", "1", ",", "keysToAdd", ".", "get", "(", "20", ")", ".", "intValue", "(", ")", ")", ";", "assertEquals", "(", "1", ",", "keysToRemove", ".", "get", "(", "10", ")", ".", "intValue", "(", ")", ")", ";", "}", "`", "`", "`", "This", "test", "asserts", "that", ":", "1", ".", "The", "`", "keysToAdd", "`", "map", "contains", "the", "new", "value", "with", "the", "right", "increment", ".", "2", ".", "The", "`", "keysToRemove", "`", "map", "contains", "the", "removed", "old", "value", "correctly", "incremented", ".", "The", "test", "setup", "includes", "initial", "maps", "(", "`", "keysToAdd", "`", "and", "`", "keysToRemove", "`", ")", ",", "a", "mock", "update", "event", ",", "invoking", "the", "method", "under", "test", ",", "and", "assertions", "to", "check", "the", "map", "contents", ".", "</s>"]}, {"tids": [1, 14373, 1375, 1207, 20930, 1375, 707, 598, 392, 1375, 11028, 1375, 618, 871, 471, 866, 309, 518, 8783, 8488, 26260, 471, 2797, 1031, 364, 326, 871, 924, 263, 2], "score": -0.2821047902107239, "weight": 1, "toks": ["<s>", "Invoke", "`", "processChangeEvent", "`", "method", "with", "an", "`", "UPDATE", "`", "type", "event", "and", "check", "if", "it", "correctly", "processes", "additions", "and", "removals", "for", "the", "event", "values", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 5724, 261, 14856, 262, 262, 274, 1815, 8867, 261, 404, 269, 1311, 12765, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 12765, 263, 5724, 261, 20170, 262, 262, 274, 289, 2], "score": -0.28387027978897095, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "41", ",", "42", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertEquals", "(", "1", ",", "keysToAdd", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsKey", "(", "42", ")", ")", ";", "assertEquals", "(", "1", ",", "keysToRemove", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToRemove", ".", "containsKey", "(", "41", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 14856, 269, 20170, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 289, 2], "score": -0.2917385697364807, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "42", ",", "41", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 289, 2], "score": -0.31354406476020813, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "41", ",", "42", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 1375, 1842, 2227, 20930, 1891, 1375, 707, 21043, 7694, 715, 7434, 326, 5057, 434, 392, 1375, 11028, 1375, 871, 316, 326, 1375, 1207, 20930, 1375, 445, 263, 2597, 20761, 716, 1311, 854, 8783, 3096, 471, 3723, 628, 7565, 1347, 392, 761, 316, 279, 3309, 300, 460, 1478, 3478, 628, 1245, 460, 358, 4042, 263, 1220, 1842, 707, 353, 20570, 784, 471, 5122, 5774, 326, 2923, 648, 434, 392, 1375, 11028, 1375, 2549, 871, 269, 10480, 518, 392, 14382, 1087, 434, 326, 2836, 7769, 11371, 263, 2], "score": -0.3167605996131897, "weight": 1, "toks": ["<s>", "The", "`", "testProcessChangeEventUpdate", "`", "method", "succinctly", "tests", "the", "handling", "of", "an", "`", "UPDATE", "`", "event", "in", "the", "`", "processChangeEvent", "`", "function", ".", "It", "verifies", "that", "keys", "are", "correctly", "added", "and", "removed", "from", "maps", "when", "an", "item", "in", "a", "multi", "-", "value", "container", "changes", "from", "one", "value", "to", "another", ".", "This", "test", "method", "is", "concise", "and", "directly", "targets", "the", "specific", "case", "of", "an", "`", "UPDATE", "`", "change", "event", ",", "making", "it", "an", "efficient", "part", "of", "the", "unit", "testing", "suite", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 342, 342, 10371, 726, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 14856, 269, 20170, 262, 274, 342, 342, 4603, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 342, 342, 5452, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 5724, 261, 20170, 262, 262, 274, 1815, 8867, 261, 404, 269, 1311, 12765, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 12765, 263, 5724, 261, 14856, 262, 262, 274, 289, 2], "score": -0.31711095571517944, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "/", "/", "Arrange", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "42", ",", "41", ")", ";", "/", "/", "Act", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "/", "/", "Assert", "assertEquals", "(", "1", ",", "keysToAdd", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsKey", "(", "41", ")", ")", ";", "assertEquals", "(", "1", ",", "keysToRemove", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToRemove", ".", "containsKey", "(", "42", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 5098, 326, 315, 11028, 315, 648, 434, 326, 1620, 3021, 316, 326, 1375, 1207, 20930, 1375, 707, 353, 3577, 358, 506, 18432, 2674, 263, 1021, 8281, 434, 326, 1842, 353, 8783, 22397, 603, 3929, 310, 326, 6885, 434, 326, 707, 1347, 392, 761, 353, 3526, 269, 6728, 3937, 326, 2719, 434, 326, 394, 460, 471, 326, 14817, 434, 326, 1592, 460, 263, 1021, 3875, 471, 11240, 854, 5505, 364, 333, 10766, 263, 2], "score": -0.32118335366249084, "weight": 1, "toks": ["<s>", "Only", "the", "\"", "UPDATE", "\"", "case", "of", "the", "switch", "statement", "in", "the", "`", "processChangeEvent", "`", "method", "is", "needed", "to", "be", "tested", "here", ".", "The", "design", "of", "the", "test", "is", "correctly", "focused", "on", "verifying", "the", "behavior", "of", "the", "method", "when", "an", "item", "is", "updated", ",", "checking", "both", "the", "addition", "of", "the", "new", "value", "and", "the", "removal", "of", "the", "old", "value", ".", "The", "setup", "and", "assertion", "are", "appropriate", "for", "this", "scenario", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 1914, 620, 261, 14856, 262, 262, 274, 289, 2], "score": -0.32196977734565735, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "41", ",", "42", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsValue", "(", "42", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.3219747245311737, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 6.746131631297679, "bleu-max": 19.581063807358557, "bleu-min": 6.746131631297679, "bleu-avg": 12.799631925737785, "code-bleu": 1.0826637826222023, "code-bleu-max": 21.63639941681195, "code-bleu-min": 1.0826637826222023, "code-bleu-avg": 14.097254753731756, "edit-sim": 34, "edit-sim-max": 37, "edit-sim-min": 31, "edit-sim-avg": 32.4, "rouge-p": 37.5, "rouge-p-max": 45.0, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 41.05701754385965, "rouge-r": 21.428571428571427, "rouge-r-max": 64.28571428571429, "rouge-r-min": 21.428571428571427, "rouge-r-avg": 50.71428571428571, "rouge-f": 27.27272680991736, "rouge-f-max": 52.94117598615917, "rouge-f-min": 26.086956045368627, "rouge-f-avg": 44.569479481573346, "num-seq": 10}, "time": 1.5917832851409912, "misc": {}}
{"id": 124, "data_id": "csn-98259", "input_stids": [1, 2658, 4508, 340, 1668, 652, 14867, 446, 1972, 15596, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 531, 1396, 682, 1016, 1852, 4709, 4317, 4317, 531, 5002, 620, 20930, 4317, 4317, 32315, 32315, 327, 852, 274, 32315, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1272, 1016, 273, 394, 531, 1396, 682, 1016, 1852, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 559, 263, 16481, 262, 274, 289, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 32315, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 3096, 2396, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 3096, 2396, 263, 1378, 261, 20170, 269, 404, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 3723, 2396, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 2], "topk": [{"tids": [1, 2974, 3929, 326, 707, 1375, 1207, 20930, 1375, 4985, 8488, 392, 1375, 11028, 1375, 871, 269, 6534, 471, 9427, 326, 3434, 1311, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 5724, 261, 14856, 262, 262, 274, 1815, 8867, 261, 2144, 263, 4323, 261, 404, 262, 269, 1311, 13786, 263, 336, 261, 14856, 262, 262, 274, 1815, 8867, 261, 404, 269, 1311, 12765, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 12765, 263, 5724, 261, 20170, 262, 262, 274, 1815, 8867, 261, 2144, 263, 4323, 261, 404, 262, 269, 1311, 12765, 263, 336, 261, 20170, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.07166194170713425, "weight": 1, "toks": ["<s>", "To", "verify", "the", "method", "`", "processChangeEvent", "`", "successfully", "processes", "an", "`", "UPDATE", "`", "event", ",", "adding", "and", "removing", "the", "correct", "keys", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "41", ",", "42", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertEquals", "(", "1", ",", "keysToAdd", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsKey", "(", "42", ")", ")", ";", "assertEquals", "(", "Integer", ".", "valueOf", "(", "1", ")", ",", "keysToAdd", ".", "get", "(", "42", ")", ")", ";", "assertEquals", "(", "1", ",", "keysToRemove", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToRemove", ".", "containsKey", "(", "41", ")", ")", ";", "assertEquals", "(", "Integer", ".", "valueOf", "(", "1", ")", ",", "keysToRemove", ".", "get", "(", "41", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.18684329092502594, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}, {"tids": [1, 1021, 707, 1375, 1842, 2227, 20930, 1891, 261, 262, 1375, 23500, 7434, 326, 1375, 11028, 1375, 648, 316, 326, 1375, 1207, 20930, 1375, 707, 263, 1220, 353, 5505, 487, 518, 20761, 3937, 326, 14817, 434, 326, 1592, 460, 471, 326, 2719, 434, 326, 394, 460, 269, 18291, 358, 326, 1375, 11028, 1375, 14176, 263, 2], "score": -0.20805297791957855, "weight": 1, "toks": ["<s>", "The", "method", "`", "testProcessChangeEventUpdate", "(", ")", "`", "effectively", "tests", "the", "`", "UPDATE", "`", "case", "in", "the", "`", "processChangeEvent", "`", "method", ".", "This", "is", "appropriate", "as", "it", "verifies", "both", "the", "removal", "of", "the", "old", "value", "and", "the", "addition", "of", "the", "new", "value", ",", "central", "to", "the", "`", "UPDATE", "`", "functionality", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.2863979637622833, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}, {"tids": [1, 1220, 3021, 7434, 326, 1375, 1207, 20930, 1375, 707, 364, 326, 1375, 11028, 1375, 10766, 316, 1492, 392, 1592, 460, 353, 3723, 471, 279, 394, 460, 353, 3096, 358, 326, 501, 3695, 263, 2], "score": -0.326604425907135, "weight": 1, "toks": ["<s>", "This", "statement", "tests", "the", "`", "processChangeEvent", "`", "method", "for", "the", "`", "UPDATE", "`", "scenario", "in", "which", "an", "old", "value", "is", "removed", "and", "a", "new", "value", "is", "added", "to", "the", "data", "structure", ".", "</s>"]}, {"tids": [1, 1021, 2112, 1842, 4271, 309, 326, 1375, 1207, 20930, 1375, 707, 8783, 7372, 392, 1375, 11028, 1375, 871, 635, 24831, 716, 1592, 924, 854, 3723, 471, 394, 924, 854, 3096, 21419, 316, 326, 7565, 1375, 1311, 13786, 1375, 471, 1375, 1311, 12765, 1375, 263, 2], "score": -0.35079342126846313, "weight": 1, "toks": ["<s>", "The", "provided", "test", "checks", "if", "the", "`", "processChangeEvent", "`", "method", "correctly", "handles", "an", "`", "UPDATE", "`", "event", "by", "ensuring", "that", "old", "values", "are", "removed", "and", "new", "values", "are", "added", "appropriately", "in", "the", "maps", "`", "keysToAdd", "`", "and", "`", "keysToRemove", "`", ".", "</s>"]}, {"tids": [1, 14373, 326, 707, 471, 866, 309, 1311, 854, 3526, 8783, 263, 2], "score": -0.4002053141593933, "weight": 1, "toks": ["<s>", "Invoke", "the", "method", "and", "check", "if", "keys", "are", "updated", "correctly", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 289, 2], "score": -0.4120436906814575, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "41", ",", "42", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 632, 7766, 1071, 918, 1842, 2227, 20930, 986, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11689, 269, 446, 269, 446, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 289, 1375, 2], "score": -0.4270620346069336, "weight": 1, "toks": ["<s>", "`", "@", "Test", "public", "void", "testProcessChangeEventAdd", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "ADD", ",", "null", ",", "null", ",", "42", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "}", "`", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 3096, 2396, 269, 1311, 13786, 262, 274, 2], "score": -0.4388330578804016, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "addedKeys", ",", "keysToAdd", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 70.49141756270427, "bleu-max": 100.0, "bleu-min": 46.38596139522901, "bleu-avg": 63.57597284663386, "code-bleu": 77.37552424018409, "code-bleu-max": 100.0, "code-bleu-min": 46.85704656956188, "code-bleu-avg": 68.54883025529129, "edit-sim": 97, "edit-sim-max": 100, "edit-sim-min": 92, "edit-sim-avg": 95.5, "rouge-p": 87.5, "rouge-p-max": 100.0, "rouge-p-min": 75.0, "rouge-p-avg": 83.88888888888889, "rouge-r": 87.5, "rouge-r-max": 100.0, "rouge-r-min": 75.0, "rouge-r-avg": 85.0, "rouge-f": 87.4999995, "rouge-f-max": 99.9999995, "rouge-f-min": 74.9999995, "rouge-f-avg": 84.41176420605537, "num-seq": 10}, "time": 0.4797377586364746, "misc": {}}
{"id": 125, "data_id": "csn-98259", "input_stids": [1, 2658, 4508, 340, 1668, 652, 14867, 446, 1972, 15596, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 531, 1396, 682, 1016, 1852, 4709, 4317, 4317, 531, 5002, 620, 20930, 4317, 4317, 32315, 32315, 327, 852, 274, 32315, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1272, 1016, 273, 394, 531, 1396, 682, 1016, 1852, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 559, 263, 16481, 262, 274, 289, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 32315, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 3096, 2396, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 3096, 2396, 263, 1378, 261, 20170, 269, 404, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 3723, 2396, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 3723, 2396, 263, 1378, 261, 14856, 269, 404, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.06507351249456406, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.19609731435775757, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 963, 261, 262, 262, 274, 1815, 8867, 261, 404, 269, 1311, 12765, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.20072267949581146, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "41", ",", "42", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertEquals", "(", "1", ",", "keysToAdd", ".", "size", "(", ")", ")", ";", "assertEquals", "(", "1", ",", "keysToRemove", ".", "size", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.2037627100944519, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 8867, 261, 404, 269, 1311, 13786, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 5724, 261, 20170, 262, 262, 274, 1815, 8867, 261, 404, 269, 261, 509, 262, 1311, 13786, 263, 336, 261, 20170, 262, 262, 274, 1815, 8867, 261, 404, 269, 1311, 12765, 263, 963, 261, 262, 262, 274, 1815, 5510, 261, 1311, 12765, 263, 5724, 261, 14856, 262, 262, 274, 1815, 8867, 261, 404, 269, 261, 509, 262, 1311, 12765, 263, 336, 261, 14856, 262, 262, 274, 289, 2], "score": -0.2094346284866333, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "41", ",", "42", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertEquals", "(", "1", ",", "keysToAdd", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsKey", "(", "41", ")", ")", ";", "assertEquals", "(", "1", ",", "(", "int", ")", "keysToAdd", ".", "get", "(", "41", ")", ")", ";", "assertEquals", "(", "1", ",", "keysToRemove", ".", "size", "(", ")", ")", ";", "assertTrue", "(", "keysToRemove", ".", "containsKey", "(", "42", ")", ")", ";", "assertEquals", "(", "1", ",", "(", "int", ")", "keysToRemove", ".", "get", "(", "42", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 4554, 1410, 1842, 716, 1839, 326, 1375, 1207, 20930, 1375, 707, 598, 1375, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 1375, 269, 326, 3434, 1516, 854, 3096, 471, 3723, 628, 326, 7565, 1375, 1311, 13786, 1375, 471, 1375, 1311, 12765, 1375, 263, 2], "score": -0.2099718153476715, "weight": 1, "toks": ["<s>", "You", "should", "test", "that", "after", "the", "`", "processChangeEvent", "`", "method", "with", "`", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", "`", ",", "the", "correct", "items", "are", "added", "and", "removed", "from", "the", "maps", "`", "keysToAdd", "`", "and", "`", "keysToRemove", "`", ".", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 3096, 2396, 269, 1311, 13786, 262, 274, 5452, 263, 1815, 8867, 261, 3723, 2396, 269, 1311, 12765, 262, 274, 2], "score": -0.21164892613887787, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "addedKeys", ",", "keysToAdd", ")", ";", "Assert", ".", "assertEquals", "(", "removedKeys", ",", "keysToRemove", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 871, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 871, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 5724, 261, 20170, 262, 473, 473, 1311, 13786, 263, 336, 261, 20170, 262, 263, 1606, 261, 404, 262, 262, 274, 1815, 5510, 261, 1311, 12765, 263, 5724, 261, 14856, 262, 473, 473, 1311, 12765, 263, 336, 261, 14856, 262, 263, 1606, 261, 404, 262, 262, 274, 289, 2], "score": -0.21526087820529938, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "event", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "UPDATE", ",", "0", ",", "41", ",", "42", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "event", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsKey", "(", "41", ")", "&", "&", "keysToAdd", ".", "get", "(", "41", ")", ".", "equals", "(", "1", ")", ")", ";", "assertTrue", "(", "keysToRemove", ".", "containsKey", "(", "42", ")", "&", "&", "keysToRemove", ".", "get", "(", "42", ")", ".", "equals", "(", "1", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 986, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11689, 269, 446, 269, 446, 269, 404, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 5724, 261, 404, 262, 262, 274, 1815, 5510, 261, 1311, 13786, 263, 336, 261, 404, 262, 273, 273, 404, 262, 274, 1815, 5510, 261, 1311, 12765, 263, 2709, 261, 262, 262, 274, 289, 2], "score": -0.22072051465511322, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventAdd", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "ADD", ",", "null", ",", "null", ",", "1", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "assertTrue", "(", "keysToAdd", ".", "containsKey", "(", "1", ")", ")", ";", "assertTrue", "(", "keysToAdd", ".", "get", "(", "1", ")", "=", "=", "1", ")", ";", "assertTrue", "(", "keysToRemove", ".", "isEmpty", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.22615253925323486, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 20.16327885267847, "bleu-max": 33.91045781395671, "bleu-min": 6.593597005998758, "bleu-avg": 10.682251271462524, "code-bleu": 4.725288999401239, "code-bleu-max": 19.66566735784715, "code-bleu-min": 3.2893015068842244, "code-bleu-avg": 5.070536841232218, "edit-sim": 45, "edit-sim-max": 50, "edit-sim-min": 28, "edit-sim-avg": 32.5, "rouge-p": 55.55555555555556, "rouge-p-max": 55.55555555555556, "rouge-p-min": 25.0, "rouge-p-avg": 32.47076023391813, "rouge-r": 62.5, "rouge-r-max": 62.5, "rouge-r-min": 62.5, "rouge-r-avg": 62.5, "rouge-f": 58.82352891349482, "rouge-f-max": 58.82352891349482, "rouge-f-min": 35.71428530612245, "rouge-f-avg": 41.68941037197307, "num-seq": 10}, "time": 1.693375825881958, "misc": {}}
{"id": 126, "data_id": "csn-98259", "input_stids": [1, 2658, 4508, 340, 1668, 652, 14867, 446, 1972, 15596, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 531, 1396, 682, 1016, 1852, 4709, 4317, 4317, 531, 5002, 620, 20930, 4317, 4317, 32315, 32315, 327, 400, 274, 32315, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1272, 1016, 273, 394, 531, 1396, 682, 1016, 1852, 261, 315, 3902, 6, 269, 315, 3902, 6, 269, 531, 559, 263, 16481, 262, 274, 289, 32315, 1071, 918, 1207, 20930, 261, 727, 531, 5002, 620, 20930, 411, 692, 269, 692, 405, 2549, 1133, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 269, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 262, 288, 1620, 261, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 288, 648, 11689, 294, 288, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 26056, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 648, 11028, 294, 288, 1207, 24543, 261, 752, 25965, 261, 2549, 1133, 263, 336, 7617, 620, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 1207, 986, 261, 752, 25965, 261, 2549, 1133, 263, 2366, 261, 262, 262, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 898, 274, 289, 805, 294, 604, 394, 2754, 261, 315, 3902, 6, 397, 2549, 1133, 263, 336, 3043, 559, 261, 262, 262, 274, 289, 289, 32315, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 32315, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11028, 269, 374, 269, 20170, 269, 14856, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 3096, 2396, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 3096, 2396, 263, 1378, 261, 20170, 269, 404, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 3723, 2396, 273, 394, 4317, 411, 1033, 269, 2144, 405, 261, 262, 274, 3723, 2396, 263, 1378, 261, 14856, 269, 404, 262, 274, 5452, 263, 1815, 8867, 261, 1311, 13786, 269, 3096, 2396, 262, 274, 2], "topk": [{"tids": [1, 7693, 716, 326, 1375, 1207, 20930, 1375, 707, 7372, 1375, 11028, 1375, 2549, 618, 8783, 635, 4440, 3937, 1375, 1207, 24543, 1375, 471, 1375, 1207, 986, 1375, 263, 2], "score": -0.006172195542603731, "weight": 1, "toks": ["<s>", "Ensure", "that", "the", "`", "processChangeEvent", "`", "method", "handles", "`", "UPDATE", "`", "change", "type", "correctly", "by", "calling", "both", "`", "processRemoval", "`", "and", "`", "processAdd", "`", ".", "</s>"]}, {"tids": [1, 1375, 6279, 555, 1375, 2], "score": -0.34445393085479736, "weight": 1, "toks": ["<s>", "`", "syntax", "error", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.39775964617729187, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.40894126892089844, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 986, 261, 262, 288, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 1311, 12765, 273, 394, 4317, 411, 405, 261, 262, 274, 727, 531, 5002, 620, 20930, 411, 2144, 269, 2144, 405, 3309, 620, 20930, 273, 394, 531, 5002, 620, 20930, 411, 405, 261, 531, 5002, 620, 20930, 263, 531, 3043, 559, 263, 11689, 269, 446, 269, 446, 269, 5196, 262, 274, 1272, 1016, 263, 1207, 20930, 261, 3309, 620, 20930, 269, 1311, 13786, 269, 1311, 12765, 262, 274, 727, 1635, 411, 1033, 269, 2144, 405, 2665, 2396, 13786, 273, 394, 4317, 411, 405, 261, 262, 274, 2665, 2396, 13786, 263, 1378, 261, 5196, 269, 404, 262, 274, 5452, 263, 1815, 8867, 261, 2665, 2396, 13786, 269, 1311, 13786, 262, 274, 289, 2], "score": -0.4193546772003174, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventAdd", "(", ")", "{", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "keysToRemove", "=", "new", "HashMap", "<", ">", "(", ")", ";", "final", "OMultiValueChangeEvent", "<", "Integer", ",", "Integer", ">", "multiValueChangeEvent", "=", "new", "OMultiValueChangeEvent", "<", ">", "(", "OMultiValueChangeEvent", ".", "OChangeType", ".", "ADD", ",", "null", ",", "null", ",", "30", ")", ";", "propertyIndex", ".", "processChangeEvent", "(", "multiValueChangeEvent", ",", "keysToAdd", ",", "keysToRemove", ")", ";", "final", "Map", "<", "Object", ",", "Integer", ">", "expectedKeysToAdd", "=", "new", "HashMap", "<", ">", "(", ")", ";", "expectedKeysToAdd", ".", "put", "(", "30", ",", "1", ")", ";", "Assert", ".", "assertEquals", "(", "expectedKeysToAdd", ",", "keysToAdd", ")", ";", "}", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 1311, 12765, 269, 3723, 2396, 262, 274, 2], "score": -0.4215269386768341, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "keysToRemove", ",", "removedKeys", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.44056206941604614, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}, {"tids": [1, 7766, 1375, 1207, 20930, 1375, 1347, 11028, 9938, 269, 24831, 716, 1516, 854, 8783, 3096, 471, 3723, 263, 2], "score": -0.48453086614608765, "weight": 1, "toks": ["<s>", "Test", "`", "processChangeEvent", "`", "when", "UPDATE", "occurs", ",", "ensuring", "that", "items", "are", "correctly", "added", "and", "removed", ".", "</s>"]}, {"tids": [1, 1021, 2836, 1842, 1375, 1842, 2227, 20930, 1891, 1375, 353, 6650, 358, 3929, 326, 1375, 1207, 20930, 1375, 707, 316, 766, 358, 392, 1375, 11028, 1375, 2549, 618, 263, 1220, 707, 1297, 1640, 326, 14817, 434, 326, 1592, 460, 471, 2719, 434, 326, 394, 460, 8783, 263, 380, 380, 7766, 25379, 294, 380, 380, 404, 263, 9190, 1008, 7565, 1375, 1311, 13786, 1375, 471, 1375, 1311, 12765, 1375, 358, 20089, 326, 2062, 919, 434, 1311, 1865, 4929, 326, 871, 263, 576, 263, 1788, 279, 1375, 3309, 620, 20930, 1375, 598, 1375, 11028, 1375, 618, 269, 9331, 310, 1592, 460, 1375, 14856, 1375, 471, 394, 460, 1375, 20170, 1375, 263, 890, 263, 3049, 1375, 1207, 20930, 1375, 358, 1207, 333, 5416, 871, 269, 9588, 326, 6454, 7565, 487, 1775, 263, 1059, 263, 7360, 4588, 269, 326, 1375, 1311, 13786, 1375, 1410, 1240, 1245, 1241, 1375, 288, 20170, 273, 404, 289, 1375, 269, 5123, 716, 326, 1300, 1375, 20170, 1375, 711, 2118, 3096, 3647, 269, 1323, 1375, 1311, 12765, 1375, 1410, 1240, 1245, 1241, 1375, 288, 14856, 273, 404, 289, 1375, 269, 5123, 716, 326, 1300, 1375, 14856, 1375, 711, 2118, 3723, 3647, 263, 1381, 263, 5452, 716, 3937, 7565, 269, 1375, 1311, 13786, 1375, 471, 1375, 1311, 12765, 1375, 269, 845, 326, 2665, 924, 1450, 1375, 5452, 263, 1815, 8867, 1375, 263, 2597, 7434, 2856, 1375, 1207, 20930, 1375, 4985, 4533, 326, 11093, 7565, 261, 1375, 1311, 13786, 1375, 471, 1375, 1311, 12765, 1375, 262, 487, 1534, 326, 3478, 1269, 316, 1375, 3309, 620, 20930, 1375, 263, 1220, 11932, 326, 707, 14382, 715, 7372, 26260, 471, 2797, 1031, 316, 392, 1375, 11028, 1375, 10766, 263, 2], "score": -0.5308892130851746, "weight": 1, "toks": ["<s>", "The", "unit", "test", "`", "testProcessChangeEventUpdate", "`", "is", "built", "to", "verify", "the", "`", "processChangeEvent", "`", "method", "in", "response", "to", "an", "`", "UPDATE", "`", "change", "type", ".", "This", "method", "must", "handle", "the", "removal", "of", "the", "old", "value", "and", "addition", "of", "the", "new", "value", "correctly", ".", "*", "*", "Test", "Implementation", ":", "*", "*", "1", ".", "Initialize", "empty", "maps", "`", "keysToAdd", "`", "and", "`", "keysToRemove", "`", "to", "simulate", "the", "existing", "state", "of", "keys", "before", "processing", "the", "event", ".", "2", ".", "Create", "a", "`", "multiValueChangeEvent", "`", "with", "`", "UPDATE", "`", "type", ",", "carrying", "old", "value", "`", "42", "`", "and", "new", "value", "`", "41", "`", ".", "3", ".", "Call", "`", "processChangeEvent", "`", "to", "process", "this", "mock", "event", ",", "passing", "the", "initialized", "maps", "as", "arguments", ".", "4", ".", "After", "execution", ",", "the", "`", "keysToAdd", "`", "should", "have", "one", "entry", "`", "{", "41", "=", "1", "}", "`", ",", "representing", "that", "the", "number", "`", "41", "`", "has", "been", "added", "once", ",", "while", "`", "keysToRemove", "`", "should", "have", "one", "entry", "`", "{", "42", "=", "1", "}", "`", ",", "representing", "that", "the", "number", "`", "42", "`", "has", "been", "removed", "once", ".", "5", ".", "Assert", "that", "both", "maps", ",", "`", "keysToAdd", "`", "and", "`", "keysToRemove", "`", ",", "match", "the", "expected", "values", "using", "`", "Assert", ".", "assertEquals", "`", ".", "It", "tests", "whether", "`", "processChangeEvent", "`", "successfully", "updates", "the", "tracking", "maps", "(", "`", "keysToAdd", "`", "and", "`", "keysToRemove", "`", ")", "as", "per", "the", "changes", "specified", "in", "`", "multiValueChangeEvent", "`", ".", "This", "ensures", "the", "method", "efficiently", "handles", "additions", "and", "removals", "in", "an", "`", "UPDATE", "`", "scenario", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2227, 20930, 1891, 261, 262, 2], "score": -0.5370543599128723, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testProcessChangeEventUpdate", "(", ")", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 16.738157226536703, "bleu-avg": 49.42302184582284, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 5.007529563943821, "code-bleu-avg": 48.8477483624735, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 63, "edit-sim-avg": 84.4, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 78.25, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 62.5, "rouge-r-avg": 81.25, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 55.5555550617284, "rouge-f-avg": 79.58333283456791, "num-seq": 10}, "time": 0.6471619606018066, "misc": {}}
{"id": 127, "data_id": "csn-98610", "input_stids": [1, 32315, 32315, 531, 18144, 1396, 3406, 3210, 4709, 32315, 531, 1396, 514, 32315, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 7766, 797, 315, 262, 263, 3911, 261, 315, 1842, 1396, 315, 262, 263, 26723, 261, 315, 1131, 315, 269, 315, 1728, 315, 262, 274, 1815, 8867, 261, 315, 1728, 315, 269, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 7766, 797, 315, 262, 263, 3911, 261, 315, 1842, 1396, 315, 262, 263, 12736, 261, 315, 1131, 315, 262, 262, 274, 289, 2], "score": -0.31869685649871826, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "TestClass", "\"", ")", ".", "getProperty", "(", "\"", "testProperty", "\"", ")", ".", "setCustom", "(", "\"", "min", "\"", ",", "\"", "10", "\"", ")", ";", "assertEquals", "(", "\"", "10", "\"", ",", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "TestClass", "\"", ")", ".", "getProperty", "(", "\"", "testProperty", "\"", ")", ".", "getCustom", "(", "\"", "min", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 498, 273, 315, 1842, 653, 315, 274, 514, 460, 273, 315, 1842, 620, 315, 274, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 8005, 797, 315, 262, 263, 3911, 261, 315, 5470, 315, 262, 263, 26723, 261, 498, 269, 460, 262, 274, 1815, 8867, 261, 460, 269, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 8005, 797, 315, 262, 263, 3911, 261, 315, 5470, 315, 262, 263, 12736, 261, 498, 262, 262, 274, 289, 2], "score": -0.35002973675727844, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "key", "=", "\"", "testKey", "\"", ";", "String", "value", "=", "\"", "testValue", "\"", ";", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "MyClass", "\"", ")", ".", "getProperty", "(", "\"", "propertyName", "\"", ")", ".", "setCustom", "(", "key", ",", "value", ")", ";", "assertEquals", "(", "value", ",", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "MyClass", "\"", ")", ".", "getProperty", "(", "\"", "propertyName", "\"", ")", ".", "getCustom", "(", "key", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 498, 273, 315, 1842, 653, 315, 274, 514, 460, 273, 315, 1842, 620, 315, 274, 1319, 263, 12736, 261, 498, 269, 460, 262, 274, 1815, 8867, 261, 460, 269, 1319, 263, 12736, 261, 498, 262, 262, 274, 289, 2], "score": -0.35587581992149353, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "key", "=", "\"", "testKey", "\"", ";", "String", "value", "=", "\"", "testValue", "\"", ";", "db", ".", "getCustom", "(", "key", ",", "value", ")", ";", "assertEquals", "(", "value", ",", "db", ".", "getCustom", "(", "key", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 1319, 263, 7486, 261, 315, 1679, 461, 315, 269, 315, 1679, 620, 315, 262, 274, 1815, 8867, 261, 315, 1679, 620, 315, 269, 1319, 263, 3911, 261, 315, 1679, 461, 315, 262, 262, 274, 289, 2], "score": -0.35952869057655334, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "db", ".", "setProperty", "(", "\"", "customName", "\"", ",", "\"", "customValue", "\"", ")", ";", "assertEquals", "(", "\"", "customValue", "\"", ",", "db", ".", "getProperty", "(", "\"", "customName", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 498, 273, 315, 1842, 653, 315, 274, 514, 460, 273, 315, 1842, 620, 315, 274, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 531, 1396, 315, 262, 263, 26723, 261, 498, 269, 460, 262, 274, 1815, 8867, 261, 460, 269, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 531, 1396, 315, 262, 263, 12736, 261, 498, 262, 262, 274, 289, 2], "score": -0.3766131103038788, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "key", "=", "\"", "testKey", "\"", ";", "String", "value", "=", "\"", "testValue", "\"", ";", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "OProperty", "\"", ")", ".", "setCustom", "(", "key", ",", "value", ")", ";", "assertEquals", "(", "value", ",", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "OProperty", "\"", ")", ".", "getCustom", "(", "key", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 498, 273, 315, 1842, 653, 315, 274, 514, 460, 273, 315, 1842, 620, 315, 274, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 6082, 797, 315, 262, 263, 3911, 261, 315, 1679, 1396, 315, 262, 263, 26723, 261, 498, 269, 460, 262, 274, 1815, 8867, 261, 460, 269, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 6082, 797, 315, 262, 263, 3911, 261, 315, 1679, 1396, 315, 262, 263, 12736, 261, 498, 262, 262, 274, 289, 2], "score": -0.38549259305000305, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "key", "=", "\"", "testKey", "\"", ";", "String", "value", "=", "\"", "testValue", "\"", ";", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "CustomClass", "\"", ")", ".", "getProperty", "(", "\"", "customProperty", "\"", ")", ".", "setCustom", "(", "key", ",", "value", ")", ";", "assertEquals", "(", "value", ",", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "CustomClass", "\"", ")", ".", "getProperty", "(", "\"", "customProperty", "\"", ")", ".", "getCustom", "(", "key", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 7766, 315, 262, 263, 26723, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 1815, 8867, 261, 315, 460, 315, 269, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 7766, 315, 262, 263, 12736, 261, 315, 498, 315, 262, 262, 274, 289, 2], "score": -0.38650262355804443, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "Test", "\"", ")", ".", "setCustom", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "assertEquals", "(", "\"", "value", "\"", ",", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "Test", "\"", ")", ".", "getCustom", "(", "\"", "key", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 315, 262, 274, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 7766, 315, 262, 263, 26723, 261, 315, 1679, 1396, 315, 269, 315, 460, 315, 262, 274, 1815, 8867, 261, 315, 460, 315, 269, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 7766, 315, 262, 263, 12736, 261, 315, 1679, 1396, 315, 262, 262, 274, 289, 2], "score": -0.38905560970306396, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "Test", "\"", ")", ";", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "Test", "\"", ")", ".", "setCustom", "(", "\"", "customProperty", "\"", ",", "\"", "value", "\"", ")", ";", "assertEquals", "(", "\"", "value", "\"", ",", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "Test", "\"", ")", ".", "getCustom", "(", "\"", "customProperty", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 8005, 797, 315, 262, 263, 3911, 261, 315, 3399, 1396, 315, 262, 263, 26723, 261, 315, 1679, 653, 315, 269, 315, 1679, 620, 315, 262, 274, 1815, 8867, 261, 315, 1679, 620, 315, 269, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 8005, 797, 315, 262, 263, 3911, 261, 315, 3399, 1396, 315, 262, 263, 12736, 261, 315, 1679, 653, 315, 262, 262, 274, 289, 2], "score": -0.3926840126514435, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "MyClass", "\"", ")", ".", "getProperty", "(", "\"", "myProperty", "\"", ")", ".", "setCustom", "(", "\"", "customKey", "\"", ",", "\"", "customValue", "\"", ")", ";", "assertEquals", "(", "\"", "customValue", "\"", ",", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "MyClass", "\"", ")", ".", "getProperty", "(", "\"", "myProperty", "\"", ")", ".", "getCustom", "(", "\"", "customKey", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 1679, 620, 273, 315, 460, 315, 274, 514, 5470, 273, 315, 1679, 1396, 315, 274, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 315, 262, 263, 31318, 261, 5470, 269, 531, 559, 263, 9469, 262, 274, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 7766, 315, 262, 263, 3911, 261, 5470, 262, 263, 26723, 261, 5470, 269, 1679, 620, 262, 274, 1815, 8867, 261, 1679, 620, 269, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 7766, 315, 262, 263, 3911, 261, 5470, 262, 263, 12736, 261, 5470, 262, 262, 274, 289, 2], "score": -0.3975338935852051, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "customValue", "=", "\"", "value", "\"", ";", "String", "propertyName", "=", "\"", "customProperty", "\"", ";", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "Test", "\"", ")", ".", "createProperty", "(", "propertyName", ",", "OType", ".", "STRING", ")", ";", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "Test", "\"", ")", ".", "getProperty", "(", "propertyName", ")", ".", "setCustom", "(", "propertyName", ",", "customValue", ")", ";", "assertEquals", "(", "customValue", ",", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "Test", "\"", ")", ".", "getProperty", "(", "propertyName", ")", ".", "getCustom", "(", "propertyName", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 16.515821590069034, "bleu-max": 16.515821590069034, "bleu-min": 9.941490945601677, "bleu-avg": 13.617519703573453, "code-bleu": 27.423148840119133, "code-bleu-max": 27.423148840119133, "code-bleu-min": 14.737724894149745, "code-bleu-avg": 19.89208084162459, "edit-sim": 27, "edit-sim-max": 39, "edit-sim-min": 24, "edit-sim-avg": 32.0, "rouge-p": 28.57142857142857, "rouge-p-max": 37.5, "rouge-p-min": 28.57142857142857, "rouge-p-avg": 31.78463203463203, "rouge-r": 40.0, "rouge-r-max": 80.0, "rouge-r-min": 40.0, "rouge-r-avg": 56.0, "rouge-f": 33.33333284722222, "rouge-f-max": 49.99999957031251, "rouge-f-min": 33.33333284722222, "rouge-f-avg": 40.23443177190576, "num-seq": 10}, "time": 0.805732250213623, "misc": {}}
{"id": 128, "data_id": "csn-98610", "input_stids": [1, 32315, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 32315, 531, 1396, 514, 32315, 2063, 263, 1296, 261, 1797, 262, 263, 1746, 261, 262, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 1319, 263, 1296, 261, 394, 531, 2189, 3997, 261, 315, 10182, 1272, 315, 397, 2658, 397, 315, 263, 1679, 461, 1679, 620, 296, 1842, 620, 296, 315, 262, 262, 263, 1836, 261, 262, 274, 1815, 8867, 261, 315, 1842, 620, 315, 269, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 2658, 262, 263, 3911, 261, 315, 1679, 461, 315, 262, 263, 12736, 261, 315, 1679, 620, 315, 262, 262, 274, 289, 2], "score": -0.2852029502391815, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "db", ".", "command", "(", "new", "OCommandSQL", "(", "\"", "alter", "property", "\"", "+", "className", "+", "\"", ".", "customName", "customValue", "'", "testValue", "'", "\"", ")", ")", ".", "execute", "(", ")", ";", "assertEquals", "(", "\"", "testValue", "\"", ",", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "className", ")", ".", "getProperty", "(", "\"", "customName", "\"", ")", ".", "getCustom", "(", "\"", "customValue", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 1319, 263, 1296, 261, 315, 7981, 2560, 9759, 315, 397, 2658, 397, 315, 263, 1679, 653, 296, 1679, 620, 296, 315, 262, 274, 289, 2], "score": -0.3229040801525116, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "db", ".", "command", "(", "\"", "ALTER", "PROPERTY", "\"", "+", "className", "+", "\"", ".", "customKey", "'", "customValue", "'", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 514, 1679, 620, 273, 315, 1679, 620, 315, 274, 2], "score": -0.35136550664901733, "weight": 1, "toks": ["<s>", "String", "customValue", "=", "\"", "customValue", "\"", ";", "</s>"]}, {"tids": [1, 1375, 1319, 263, 1296, 261, 394, 531, 2189, 3997, 261, 1797, 262, 262, 263, 1836, 261, 262, 274, 1375, 2], "score": -0.35407745838165283, "weight": 1, "toks": ["<s>", "`", "db", ".", "command", "(", "new", "OCommandSQL", "(", "cmd", ")", ")", ".", "execute", "(", ")", ";", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 531, 1396, 2270, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 2658, 262, 263, 3911, 261, 315, 1679, 315, 262, 274, 25395, 261, 2270, 262, 274, 289, 2], "score": -0.3596131503582001, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "OProperty", "prop", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "className", ")", ".", "getProperty", "(", "\"", "custom", "\"", ")", ";", "assertNotNull", "(", "prop", ")", ";", "}", "</s>"]}, {"tids": [1, 14373, 326, 1375, 12736, 1375, 707, 3470, 326, 1375, 1842, 694, 3802, 1375, 707, 358, 866, 326, 14176, 487, 21043, 7694, 715, 487, 3323, 263, 2457, 3454, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7128, 315, 274, 514, 563, 273, 12736, 261, 2658, 262, 274, 25395, 261, 563, 262, 274, 342, 342, 4725, 379, 375, 294, 12736, 1410, 486, 327, 446, 263, 289, 1375, 1375, 1375, 2], "score": -0.36058396100997925, "weight": 1, "toks": ["<s>", "Invoke", "the", "`", "getCustom", "`", "method", "within", "the", "`", "testSetCustom", "`", "method", "to", "check", "the", "functionality", "as", "succinctly", "as", "possible", ".", "For", "example", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "STR", "\"", ";", "String", "result", "=", "getCustom", "(", "className", ")", ";", "assertNotNull", "(", "result", ")", ";", "/", "/", "Assumption", ":", "getCustom", "should", "not", "return", "null", ".", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 342, 342, 10371, 726, 514, 2665, 273, 315, 460, 315, 274, 342, 342, 4603, 514, 563, 273, 12736, 261, 315, 7128, 315, 262, 274, 342, 342, 5452, 1815, 8867, 261, 2665, 269, 563, 262, 274, 289, 2], "score": -0.3635592460632324, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "/", "/", "Arrange", "String", "expected", "=", "\"", "value", "\"", ";", "/", "/", "Act", "String", "result", "=", "getCustom", "(", "\"", "STR", "\"", ")", ";", "/", "/", "Assert", "assertEquals", "(", "expected", ",", "result", ")", ";", "}", "</s>"]}, {"tids": [1, 1319, 263, 10235, 1398, 3935, 3830, 261, 262, 274, 2], "score": -0.3654978573322296, "weight": 1, "toks": ["<s>", "db", ".", "activateOnCurrentThread", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 1319, 263, 1296, 261, 394, 531, 2189, 3997, 261, 315, 10182, 667, 315, 397, 2658, 397, 315, 1679, 296, 5470, 273, 12337, 296, 315, 262, 262, 263, 1836, 261, 262, 274, 1815, 8867, 261, 315, 12337, 315, 269, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 2658, 262, 263, 12736, 261, 315, 5470, 315, 262, 262, 274, 289, 2], "score": -0.3803454339504242, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "db", ".", "command", "(", "new", "OCommandSQL", "(", "\"", "alter", "class", "\"", "+", "className", "+", "\"", "custom", "'", "propertyName", "=", "propertyValue", "'", "\"", ")", ")", ".", "execute", "(", ")", ";", "assertEquals", "(", "\"", "propertyValue", "\"", ",", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "className", ")", ".", "getCustom", "(", "\"", "propertyName", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7128, 315, 274, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 25395, 261, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 2658, 262, 262, 274, 289, 2], "score": -0.3817937672138214, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "STR", "\"", ";", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "assertNotNull", "(", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "className", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 10.195220641474824, "bleu-max": 19.049033194944677, "bleu-min": 7.405764422833546, "bleu-avg": 11.389667565556598, "code-bleu": 14.142657400945287, "code-bleu-max": 22.392557826129124, "code-bleu-min": 11.124883802677953, "code-bleu-avg": 15.43193030002467, "edit-sim": 40, "edit-sim-max": 43, "edit-sim-min": 30, "edit-sim-avg": 39.5, "rouge-p": 50.0, "rouge-p-max": 62.5, "rouge-p-min": 38.46153846153847, "rouge-p-avg": 49.90134865134865, "rouge-r": 45.45454545454545, "rouge-r-max": 45.45454545454545, "rouge-r-min": 36.36363636363637, "rouge-r-avg": 44.54545454545454, "rouge-f": 47.619047120181406, "rouge-f-max": 52.6315784598338, "rouge-f-min": 41.66666617013889, "rouge-f-avg": 46.77470141091064, "num-seq": 10}, "time": 0.7922437191009521, "misc": {}}
{"id": 129, "data_id": "csn-98610", "input_stids": [1, 32315, 531, 797, 752, 797, 261, 514, 277, 3834, 262, 274, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 32315, 531, 1396, 32315, 980, 780, 263, 31318, 261, 7910, 916, 21329, 1777, 55, 269, 531, 559, 263, 7141, 22235, 7660, 7085, 269, 531, 559, 263, 7141, 22235, 7660, 7085, 262, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 2], "topk": [{"tids": [1, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 315, 262, 274, 2], "score": -0.271697074174881, "weight": 1, "toks": ["<s>", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "Test", "\"", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1684, 1396, 261, 262, 288, 531, 1396, 1272, 273, 980, 780, 263, 31318, 261, 315, 7910, 916, 21329, 1777, 55, 315, 269, 531, 559, 263, 7141, 22235, 7660, 7085, 262, 274, 25395, 261, 1272, 262, 274, 289, 2], "score": -0.3236789405345917, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCreateProperty", "(", ")", "{", "OProperty", "property", "=", "lineString", ".", "createProperty", "(", "\"", "COORDINATES", "\"", ",", "OType", ".", "EMBEDDEDLIST", ")", ";", "assertNotNull", "(", "property", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 19534, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.34302324056625366, "weight": 1, "toks": ["<s>", "`", "`", "`", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "LineString", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 315, 262, 274, 4003, 263, 31318, 261, 315, 7766, 4658, 315, 269, 531, 559, 263, 9469, 262, 274, 2], "score": -0.34357208013534546, "weight": 1, "toks": ["<s>", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "Test", "\"", ")", ";", "clazz", ".", "createProperty", "(", "\"", "TestProp", "\"", ",", "OType", ".", "STRING", ")", ";", "</s>"]}, {"tids": [1, 4003, 263, 26723, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 2], "score": -0.3607834577560425, "weight": 1, "toks": ["<s>", "clazz", ".", "setCustom", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "</s>"]}, {"tids": [1, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 315, 262, 274, 4003, 263, 31318, 261, 315, 7766, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2], "score": -0.36316683888435364, "weight": 1, "toks": ["<s>", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "Test", "\"", ")", ";", "clazz", ".", "createProperty", "(", "\"", "TestProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "</s>"]}, {"tids": [1, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 1410, 4985, 752, 279, 394, 667, 316, 326, 1963, 598, 326, 1269, 508, 315, 7128, 315, 263, 2], "score": -0.400661438703537, "weight": 1, "toks": ["<s>", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", "should", "successfully", "create", "a", "new", "class", "in", "the", "schema", "with", "the", "specified", "name", "\"", "STR", "\"", ".", "</s>"]}, {"tids": [1, 1375, 514, 563, 273, 4003, 263, 26723, 261, 315, 1566, 315, 269, 315, 460, 315, 262, 274, 1375, 2], "score": -0.40575429797172546, "weight": 1, "toks": ["<s>", "`", "String", "result", "=", "clazz", ".", "setCustom", "(", "\"", "attribute", "\"", ",", "\"", "value", "\"", ")", ";", "`", "</s>"]}, {"tids": [1, 531, 1396, 1272, 273, 4003, 263, 31318, 261, 315, 980, 780, 315, 269, 531, 559, 263, 9469, 262, 274, 2], "score": -0.4156190752983093, "weight": 1, "toks": ["<s>", "OProperty", "property", "=", "clazz", ".", "createProperty", "(", "\"", "lineString", "\"", ",", "OType", ".", "STRING", ")", ";", "</s>"]}, {"tids": [1, 514, 2665, 273, 315, 533, 67, 1132, 315, 274, 4003, 263, 26723, 261, 315, 1679, 67, 856, 315, 269, 2665, 262, 274, 2], "score": -0.43068990111351013, "weight": 1, "toks": ["<s>", "String", "expected", "=", "\"", "string_value", "\"", ";", "clazz", ".", "setCustom", "(", "\"", "custom_key", "\"", ",", "expected", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 21.763141204756337, "bleu-max": 38.15746653492553, "bleu-min": 5.227209814737932, "bleu-avg": 19.280408864065663, "code-bleu": 17.845878836667534, "code-bleu-max": 30.171126379191204, "code-bleu-min": 4.928834519810247, "code-bleu-avg": 19.182470820361875, "edit-sim": 78, "edit-sim-max": 81, "edit-sim-min": 33, "edit-sim-avg": 63.3, "rouge-p": 77.77777777777779, "rouge-p-max": 88.88888888888889, "rouge-p-min": 54.54545454545454, "rouge-p-avg": 68.85353535353536, "rouge-r": 58.333333333333336, "rouge-r-max": 66.66666666666666, "rouge-r-min": 25.0, "rouge-r-avg": 52.5, "rouge-f": 66.66666617687076, "rouge-f-max": 76.19047570068028, "rouge-f-min": 35.29411723183391, "rouge-f-avg": 59.09839302256811, "num-seq": 10}, "time": 0.6315431594848633, "misc": {}}
{"id": 130, "data_id": "csn-98610", "input_stids": [1, 32315, 531, 1396, 31318, 261, 514, 277, 13073, 269, 531, 559, 277, 559, 262, 274, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 531, 1396, 32315, 531, 1396, 32315, 980, 780, 263, 31318, 261, 7910, 916, 21329, 1777, 55, 269, 531, 559, 263, 7141, 22235, 7660, 7085, 269, 531, 559, 263, 7141, 22235, 7660, 7085, 262, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 274, 2], "topk": [{"tids": [1, 657, 326, 2112, 981, 13016, 269, 326, 3354, 1301, 5588, 355, 3324, 6740, 7769, 326, 6710, 434, 279, 1272, 603, 279, 667, 3470, 279, 2063, 1963, 1450, 326, 531, 10977, 2290, 1491, 263, 2974, 3073, 333, 21043, 7694, 715, 269, 326, 3751, 3021, 628, 326, 315, 1842, 694, 3802, 261, 262, 315, 707, 848, 506, 1399, 487, 279, 2202, 1842, 648, 294, 1375, 1375, 1375, 2252, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7128, 315, 269, 531, 559, 263, 9469, 262, 274, 1375, 1375, 1375, 1220, 981, 13016, 7434, 326, 14176, 434, 4979, 279, 1272, 4141, 315, 7128, 315, 598, 279, 618, 434, 9469, 603, 279, 667, 3470, 326, 2063, 269, 6728, 309, 326, 707, 6330, 487, 2665, 316, 326, 9330, 395, 10766, 263, 2], "score": -0.16499310731887817, "weight": 1, "toks": ["<s>", "In", "the", "provided", "code", "snippet", ",", "the", "primary", "action", "revolves", "around", "testing", "the", "creation", "of", "a", "property", "on", "a", "class", "within", "a", "database", "schema", "using", "the", "OrientDB", "API", ".", "To", "perform", "this", "succinctly", ",", "the", "following", "statement", "from", "the", "\"", "testSetCustom", "(", ")", "\"", "method", "can", "be", "used", "as", "a", "single", "test", "case", ":", "`", "`", "`", "java", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "STR", "\"", ",", "OType", ".", "STRING", ")", ";", "`", "`", "`", "This", "code", "snippet", "tests", "the", "functionality", "of", "creating", "a", "property", "named", "\"", "STR", "\"", "with", "a", "type", "of", "STRING", "on", "a", "class", "within", "the", "database", ",", "checking", "if", "the", "method", "works", "as", "expected", "in", "the", "simplest", "scenario", ".", "</s>"]}, {"tids": [1, 10559, 296, 272, 30446, 326, 3021, 358, 7155, 21195, 603, 7769, 326, 1375, 31318, 1375, 707, 598, 4573, 3875, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1684, 1396, 261, 262, 288, 514, 2658, 273, 315, 980, 780, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7910, 916, 21329, 1777, 55, 315, 269, 531, 559, 263, 7141, 22235, 7660, 7085, 262, 274, 25395, 261, 2270, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.19091667234897614, "weight": 1, "toks": ["<s>", "Let", "'", "s", "refine", "the", "statement", "to", "focus", "specifically", "on", "testing", "the", "`", "createProperty", "`", "method", "with", "necessary", "setup", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testCreateProperty", "(", ")", "{", "String", "className", "=", "\"", "lineString", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "COORDINATES", "\"", ",", "OType", ".", "EMBEDDEDLIST", ")", ";", "assertNotNull", "(", "prop", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 1842, 326, 707, 1375, 31318, 1375, 269, 3387, 1846, 7155, 603, 1815, 310, 716, 326, 1272, 353, 2522, 8783, 3470, 326, 667, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1684, 1396, 261, 262, 288, 342, 342, 10939, 514, 2658, 273, 315, 7766, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 342, 342, 8687, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 1842, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 342, 342, 26961, 25395, 261, 2270, 262, 274, 1815, 8867, 261, 315, 1842, 1396, 315, 269, 2270, 263, 1723, 261, 262, 262, 274, 1815, 8867, 261, 531, 559, 263, 9469, 269, 2270, 263, 3130, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.264668732881546, "weight": 1, "toks": ["<s>", "To", "test", "the", "method", "`", "createProperty", "`", ",", "ensure", "you", "focus", "on", "asserting", "that", "the", "property", "is", "created", "correctly", "within", "the", "class", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testCreateProperty", "(", ")", "{", "/", "/", "Setup", "String", "className", "=", "\"", "TestClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "/", "/", "Execution", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "testProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "/", "/", "Verification", "assertNotNull", "(", "prop", ")", ";", "assertEquals", "(", "\"", "testProperty", "\"", ",", "prop", ".", "getName", "(", ")", ")", ";", "assertEquals", "(", "OType", ".", "STRING", ",", "prop", ".", "getType", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 2270, 263, 26723, 261, 315, 1679, 461, 315, 269, 315, 1679, 620, 315, 262, 274, 1375, 2], "score": -0.30813461542129517, "weight": 1, "toks": ["<s>", "`", "prop", ".", "setCustom", "(", "\"", "customName", "\"", ",", "\"", "customValue", "\"", ")", ";", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1684, 1396, 261, 262, 288, 514, 5470, 273, 315, 1842, 1396, 315, 274, 531, 559, 618, 273, 531, 559, 263, 9469, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 315, 262, 274, 531, 1396, 563, 273, 4003, 263, 31318, 261, 5470, 269, 618, 262, 274, 25395, 261, 563, 262, 274, 1815, 8867, 261, 5470, 269, 563, 263, 1723, 261, 262, 262, 274, 1815, 8867, 261, 618, 269, 563, 263, 3130, 261, 262, 262, 274, 289, 2], "score": -0.31566256284713745, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCreateProperty", "(", ")", "{", "String", "propertyName", "=", "\"", "testProperty", "\"", ";", "OType", "type", "=", "OType", ".", "STRING", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "Test", "\"", ")", ";", "OProperty", "result", "=", "clazz", ".", "createProperty", "(", "propertyName", ",", "type", ")", ";", "assertNotNull", "(", "result", ")", ";", "assertEquals", "(", "propertyName", ",", "result", ".", "getName", "(", ")", ")", ";", "assertEquals", "(", "type", ",", "result", ".", "getType", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1684, 1396, 261, 262, 288, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 1166, 797, 315, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 394, 1396, 315, 269, 531, 559, 263, 16481, 262, 274, 289, 2], "score": -0.3572101294994354, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCreateProperty", "(", ")", "{", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "NewClass", "\"", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "newProperty", "\"", ",", "OType", ".", "INTEGER", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1684, 1396, 261, 262, 288, 514, 2658, 273, 315, 5377, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 5513, 315, 269, 531, 559, 263, 7141, 22235, 7660, 7085, 262, 274, 289, 2], "score": -0.3584989905357361, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCreateProperty", "(", ")", "{", "String", "className", "=", "\"", "Line", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "coordinates", "\"", ",", "OType", ".", "EMBEDDEDLIST", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1684, 1396, 261, 262, 288, 514, 5470, 273, 315, 5513, 315, 274, 531, 797, 320, 797, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 19534, 315, 262, 274, 531, 1396, 1272, 273, 320, 797, 263, 31318, 261, 5470, 269, 531, 559, 263, 7141, 22235, 7660, 7085, 269, 531, 559, 263, 7141, 22235, 7660, 7085, 262, 274, 25395, 261, 1272, 262, 274, 289, 2], "score": -0.39287370443344116, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCreateProperty", "(", ")", "{", "String", "propertyName", "=", "\"", "coordinates", "\"", ";", "OClass", "oClass", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "LineString", "\"", ")", ";", "OProperty", "property", "=", "oClass", ".", "createProperty", "(", "propertyName", ",", "OType", ".", "EMBEDDEDLIST", ",", "OType", ".", "EMBEDDEDLIST", ")", ";", "assertNotNull", "(", "property", ")", ";", "}", "</s>"]}, {"tids": [1, 2270, 263, 26723, 261, 315, 508, 315, 269, 315, 460, 315, 262, 274, 2], "score": -0.39654484391212463, "weight": 1, "toks": ["<s>", "prop", ".", "setCustom", "(", "\"", "name", "\"", ",", "\"", "value", "\"", ")", ";", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 2270, 263, 26723, 261, 315, 1166, 3802, 620, 315, 262, 274, 1375, 1375, 1375, 2], "score": -0.4073052406311035, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "prop", ".", "setCustom", "(", "\"", "NewCustomValue", "\"", ")", ";", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 63.19145618915729, "bleu-max": 63.19145618915729, "bleu-min": 17.407765595569785, "bleu-avg": 31.183776386205825, "code-bleu": 39.16593879018329, "code-bleu-max": 39.16593879018329, "code-bleu-min": 3.7964314698454937, "code-bleu-avg": 12.854227369779258, "edit-sim": 88, "edit-sim-max": 88, "edit-sim-min": 31, "edit-sim-avg": 57.1, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 59.77777777777777, "rouge-r": 85.71428571428571, "rouge-r-max": 85.71428571428571, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 74.28571428571428, "rouge-f": 92.30769181065088, "rouge-f-max": 92.30769181065088, "rouge-f-min": 53.33333283555556, "rouge-f-avg": 65.81410207319819, "num-seq": 10}, "time": 0.7123298645019531, "misc": {}}
{"id": 131, "data_id": "csn-98610", "input_stids": [1, 32315, 1071, 531, 1396, 26723, 261, 727, 514, 277, 461, 269, 727, 514, 277, 620, 262, 274, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 531, 1396, 32315, 32315, 2270, 263, 444, 5962, 261, 638, 262, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7766, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 1842, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 1679, 653, 315, 269, 315, 1679, 620, 315, 262, 274, 289, 2], "score": -0.10230773687362671, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "TestClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "testProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "customKey", "\"", ",", "\"", "customValue", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 1815, 8867, 261, 315, 7128, 315, 269, 2270, 263, 12736, 261, 315, 7128, 315, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.2043834626674652, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "assertEquals", "(", "\"", "STR", "\"", ",", "prop", ".", "getCustom", "(", "\"", "STR", "\"", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 25395, 261, 2270, 263, 12736, 261, 315, 7128, 315, 262, 262, 274, 2], "score": -0.24447354674339294, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "prop", ".", "getCustom", "(", "\"", "STR", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 277, 461, 273, 315, 1679, 461, 315, 274, 514, 277, 620, 273, 315, 1679, 620, 315, 274, 2270, 263, 26723, 261, 277, 461, 269, 277, 620, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.26782140135765076, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "iName", "=", "\"", "customName", "\"", ";", "String", "iValue", "=", "\"", "customValue", "\"", ";", "prop", ".", "setCustom", "(", "iName", ",", "iValue", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 2270, 263, 26723, 261, 315, 508, 315, 269, 315, 460, 315, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3047969341278076, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "prop", ".", "setCustom", "(", "\"", "name", "\"", ",", "\"", "value", "\"", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 25395, 261, 2270, 263, 12736, 261, 315, 7128, 315, 262, 262, 274, 2], "score": -0.3145610988140106, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "prop", ".", "getCustom", "(", "\"", "STR", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 1815, 8867, 261, 315, 7128, 315, 269, 2270, 263, 12736, 261, 315, 7128, 315, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.31916049122810364, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "assertEquals", "(", "\"", "STR", "\"", ",", "prop", ".", "getCustom", "(", "\"", "STR", "\"", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 2364, 1776, 326, 6885, 434, 1375, 26723, 1375, 603, 1375, 531, 1396, 1375, 1347, 6534, 279, 1679, 1566, 1410, 506, 326, 7155, 434, 326, 1842, 707, 263, 2], "score": -0.33013349771499634, "weight": 1, "toks": ["<s>", "Validating", "the", "behavior", "of", "`", "setCustom", "`", "on", "`", "OProperty", "`", "when", "adding", "a", "custom", "attribute", "should", "be", "the", "focus", "of", "the", "test", "method", ".", "</s>"]}, {"tids": [1, 25395, 261, 2270, 263, 12736, 261, 315, 7128, 315, 262, 262, 274, 2], "score": -0.3475814759731293, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "prop", ".", "getCustom", "(", "\"", "STR", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 2270, 263, 12736, 261, 315, 7128, 315, 262, 262, 274, 2], "score": -0.35371512174606323, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "prop", ".", "getCustom", "(", "\"", "STR", "\"", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 16.700581857234305, "bleu-max": 21.048618325894093, "bleu-min": 12.533477254066447, "bleu-avg": 15.644267400042873, "code-bleu": 2.628263978000441, "code-bleu-max": 22.82818986917188, "code-bleu-min": 2.518348233285457, "code-bleu-avg": 13.132640249371843, "edit-sim": 48, "edit-sim-max": 54, "edit-sim-min": 32, "edit-sim-avg": 44.9, "rouge-p": 50.0, "rouge-p-max": 66.66666666666666, "rouge-p-min": 40.0, "rouge-p-avg": 51.02020202020203, "rouge-r": 36.36363636363637, "rouge-r-max": 54.54545454545454, "rouge-r-min": 36.36363636363637, "rouge-r-avg": 44.54545454545455, "rouge-f": 42.10526267036012, "rouge-f-max": 59.99999950500001, "rouge-f-min": 38.09523759637189, "rouge-f-avg": 47.452950061800394, "num-seq": 10}, "time": 0.852118968963623, "misc": {}}
{"id": 132, "data_id": "csn-98610", "input_stids": [1, 32315, 805, 531, 13198, 1296, 261, 514, 843, 269, 1033, 1372, 833, 262, 1216, 531, 2189, 3997, 13963, 503, 269, 531, 2189, 14576, 288, 604, 394, 13172, 261, 262, 274, 289, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 531, 1396, 531, 13198, 32315, 32315, 563, 263, 8601, 261, 262, 263, 1746, 261, 262, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 3902, 6, 397, 2658, 397, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 25395, 261, 563, 262, 274, 2], "score": -0.14034061133861542, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "result", ")", ";", "</s>"]}, {"tids": [1, 632, 11672, 797, 1071, 760, 918, 24292, 4649, 797, 261, 262, 1216, 1185, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 293, 3729, 294, 342, 16358, 342, 1842, 315, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 1216, 1185, 288, 514, 2658, 273, 315, 1842, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 1842, 4658, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 25395, 261, 2270, 263, 12736, 261, 315, 498, 315, 262, 262, 274, 289, 2], "score": -0.21134129166603088, "weight": 1, "toks": ["<s>", "@", "BeforeClass", "public", "static", "void", "setUpBeforeClass", "(", ")", "throws", "Exception", "{", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "plocal", ":", "/", "databases", "/", "test", "\"", ")", ";", "db", ".", "create", "(", ")", ";", "}", "@", "Test", "public", "void", "testSetCustom", "(", ")", "throws", "Exception", "{", "String", "className", "=", "\"", "testClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "testProp", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "assertNotNull", "(", "prop", ".", "getCustom", "(", "\"", "key", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 25395, 261, 563, 262, 274, 2], "score": -0.2258131057024002, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "result", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 342, 342, 5452, 1679, 1272, 460, 1815, 8867, 261, 315, 7128, 315, 269, 2270, 263, 12736, 261, 315, 7128, 315, 262, 262, 274, 289, 2], "score": -0.22778259217739105, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "/", "/", "Assert", "custom", "property", "value", "assertEquals", "(", "\"", "STR", "\"", ",", "prop", ".", "getCustom", "(", "\"", "STR", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7766, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7766, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 7981, 2560, 9759, 315, 397, 2658, 397, 315, 263, 7766, 1396, 21012, 498, 273, 296, 460, 296, 315, 262, 274, 289, 2], "score": -0.25958511233329773, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "TestClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "TestProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "OResultSet", "result", "=", "db", ".", "command", "(", "\"", "ALTER", "PROPERTY", "\"", "+", "className", "+", "\"", ".", "TestProperty", "CUSTOM", "key", "=", "'", "value", "'", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7766, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7766, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 289, 2], "score": -0.262123703956604, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "TestClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "TestProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7766, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7766, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 6082, 653, 315, 269, 315, 6082, 620, 315, 262, 274, 289, 2], "score": -0.26290276646614075, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "TestClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "TestProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "CustomKey", "\"", ",", "\"", "CustomValue", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 25395, 261, 563, 262, 274, 2], "score": -0.28103893995285034, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "result", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7128, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7128, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 7128, 315, 397, 2658, 397, 315, 7128, 315, 262, 274, 563, 263, 8601, 261, 262, 263, 1746, 261, 262, 274, 289, 2], "score": -0.2924019694328308, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "STR", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "STR", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "OResultSet", "result", "=", "db", ".", "command", "(", "\"", "STR", "\"", "+", "className", "+", "\"", "STR", "\"", ")", ";", "result", ".", "getResult", "(", ")", ".", "close", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 563, 263, 8601, 261, 262, 263, 1746, 261, 262, 274, 2], "score": -0.3002989888191223, "weight": 1, "toks": ["<s>", "result", ".", "getResult", "(", ")", ".", "close", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 12.924328848929262, "bleu-max": 27.48254571080018, "bleu-min": 11.42205734428228, "bleu-avg": 14.98207853941148, "code-bleu": 4.778447092065076, "code-bleu-max": 5.665920836331589, "code-bleu-min": 4.071466241288432, "code-bleu-avg": 4.772430311061039, "edit-sim": 40, "edit-sim-max": 47, "edit-sim-min": 37, "edit-sim-avg": 40.2, "rouge-p": 55.55555555555556, "rouge-p-max": 80.0, "rouge-p-min": 40.0, "rouge-p-avg": 54.222222222222214, "rouge-r": 71.42857142857143, "rouge-r-max": 71.42857142857143, "rouge-r-min": 57.14285714285714, "rouge-r-avg": 67.14285714285714, "rouge-f": 62.49999950781252, "rouge-f-max": 66.66666618055555, "rouge-f-min": 47.0588230449827, "rouge-f-avg": 59.35294068743508, "num-seq": 10}, "time": 0.8005068302154541, "misc": {}}
{"id": 133, "data_id": "csn-98610", "input_stids": [1, 32315, 1071, 760, 918, 1172, 3210, 5365, 261, 514, 843, 269, 531, 13198, 563, 262, 288, 309, 261, 843, 480, 446, 262, 288, 289, 289, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 531, 1396, 531, 13198, 32315, 32315, 563, 263, 8601, 261, 262, 263, 1746, 261, 262, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 3902, 6, 397, 2658, 397, 315, 3902, 6, 262, 274, 1172, 3210, 5365, 261, 446, 269, 563, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7128, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7128, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 7128, 315, 397, 2658, 397, 315, 7128, 315, 262, 274, 1172, 3210, 5365, 261, 446, 269, 563, 262, 274, 289, 2], "score": -0.13804107904434204, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "STR", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "STR", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "OResultSet", "result", "=", "db", ".", "command", "(", "\"", "STR", "\"", "+", "className", "+", "\"", "STR", "\"", ")", ";", "printExecutionPlan", "(", "null", ",", "result", ")", ";", "}", "</s>"]}, {"tids": [1, 5452, 263, 1815, 2041, 261, 843, 262, 274, 2], "score": -0.17157262563705444, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNull", "(", "query", ")", ";", "</s>"]}, {"tids": [1, 1021, 707, 1375, 1172, 3210, 5365, 1375, 848, 506, 18432, 598, 326, 1024, 3021, 434, 4979, 392, 791, 434, 1375, 531, 13198, 1375, 471, 15387, 326, 707, 269, 24831, 716, 326, 1375, 843, 1375, 1569, 353, 1375, 446, 1375, 471, 11805, 3377, 506, 22397, 603, 326, 5057, 578, 14398, 434, 333, 1375, 446, 1375, 1569, 2887, 1281, 1308, 14176, 4271, 263, 2], "score": -0.229255810379982, "weight": 1, "toks": ["<s>", "The", "method", "`", "printExecutionPlan", "`", "can", "be", "tested", "with", "the", "next", "statement", "of", "creating", "an", "instance", "of", "`", "OResultSet", "`", "and", "invoking", "the", "method", ",", "ensuring", "that", "the", "`", "query", "`", "parameter", "is", "`", "null", "`", "and", "verification", "could", "be", "focused", "on", "the", "handling", "or", "ignoring", "of", "this", "`", "null", "`", "parameter", "without", "any", "other", "functionality", "checks", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 2], "score": -0.2350771725177765, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "</s>"]}, {"tids": [1, 1375, 563, 263, 1746, 261, 262, 274, 1375, 2], "score": -0.2396503984928131, "weight": 1, "toks": ["<s>", "`", "result", ".", "close", "(", ")", ";", "`", "</s>"]}, {"tids": [1, 1021, 1024, 3021, 1931, 358, 1842, 326, 707, 1375, 1172, 3210, 5365, 1375, 353, 326, 745, 358, 326, 707, 6174, 269, 1492, 353, 1818, 3430, 316, 326, 2112, 1842, 981, 294, 1375, 1375, 1375, 2252, 1172, 3210, 5365, 261, 446, 269, 563, 262, 274, 1375, 1375, 1375, 1220, 3021, 353, 14549, 364, 15387, 1375, 1172, 3210, 5365, 1375, 598, 326, 1472, 1375, 446, 1375, 261, 364, 843, 262, 471, 1375, 563, 1375, 261, 563, 444, 628, 326, 2063, 1296, 262, 263, 7897, 326, 1842, 353, 19788, 358, 866, 326, 1674, 434, 1375, 1172, 3210, 5365, 1375, 2887, 279, 843, 533, 269, 333, 16745, 3021, 5853, 330, 305, 815, 716, 1842, 23500, 263, 2], "score": -0.24117930233478546, "weight": 1, "toks": ["<s>", "The", "next", "statement", "required", "to", "test", "the", "method", "`", "printExecutionPlan", "`", "is", "the", "call", "to", "the", "method", "itself", ",", "which", "is", "already", "present", "in", "the", "provided", "test", "code", ":", "`", "`", "`", "java", "printExecutionPlan", "(", "null", ",", "result", ")", ";", "`", "`", "`", "This", "statement", "is", "responsible", "for", "invoking", "`", "printExecutionPlan", "`", "with", "the", "parameters", "`", "null", "`", "(", "for", "query", ")", "and", "`", "result", "`", "(", "result", "set", "from", "the", "database", "command", ")", ".", "Since", "the", "test", "is", "structured", "to", "check", "the", "operation", "of", "`", "printExecutionPlan", "`", "without", "a", "query", "string", ",", "this", "minimal", "statement", "facilitates", "that", "test", "effectively", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7128, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 289, 2], "score": -0.26383697986602783, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "STR", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 2], "score": -0.2826441526412964, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 2], "score": -0.3094242215156555, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 1172, 3210, 5365, 1375, 707, 269, 3433, 1842, 1410, 7155, 603, 2097, 5057, 434, 3937, 1375, 446, 1375, 471, 1661, 300, 446, 6218, 269, 487, 5492, 487, 3775, 563, 5493, 263, 10724, 269, 364, 16745, 560, 269, 1846, 1410, 2911, 279, 20886, 29876, 6282, 279, 1661, 300, 446, 1375, 531, 13198, 1375, 487, 716, 296, 272, 10374, 326, 24917, 999, 648, 263, 20471, 1842, 1664, 1410, 279, 381, 358, 5122, 1954, 445, 6885, 9178, 2353, 2063, 13581, 4058, 263, 13743, 225, 163, 227, 252, 272, 279, 20482, 1024, 3021, 7155, 310, 603, 279, 2657, 17504, 2887, 3312, 2063, 3875, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 5108, 3210, 5365, 261, 262, 288, 531, 13198, 5416, 1253, 273, 5416, 261, 531, 13198, 263, 667, 262, 274, 1172, 3210, 5365, 261, 315, 9111, 380, 4571, 7766, 315, 269, 5416, 1253, 262, 274, 289, 1375, 1375, 1375, 1220, 3021, 13041, 716, 635, 7769, 598, 279, 5416, 1375, 531, 13198, 1375, 269, 732, 848, 3929, 309, 326, 445, 12433, 6606, 8783, 2887, 21964, 598, 3214, 2063, 6218, 578, 2863, 563, 1678, 269, 7155, 310, 3704, 2357, 603, 326, 445, 296, 272, 4588, 4058, 263, 2], "score": -0.31444433331489563, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "printExecutionPlan", "`", "method", ",", "your", "test", "should", "focus", "on", "its", "handling", "of", "both", "`", "null", "`", "and", "non", "-", "null", "queries", ",", "as", "well", "as", "different", "result", "states", ".", "However", ",", "for", "minimality", ",", "you", "should", "prepare", "a", "situation", "involving", "a", "non", "-", "null", "`", "OResultSet", "`", "as", "that", "'", "s", "likely", "the", "typical", "use", "case", ".", "Your", "test", "configuration", "should", "aim", "to", "directly", "validate", "function", "behavior", "rather", "than", "database", "interaction", "logic", ".", "Here", "\u2019", "s", "a", "simplified", "next", "statement", "focusing", "on", "a", "direct", "approach", "without", "additional", "database", "setup", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testPrintExecutionPlan", "(", ")", "{", "OResultSet", "mockResult", "=", "mock", "(", "OResultSet", ".", "class", ")", ";", "printExecutionPlan", "(", "\"", "SELECT", "*", "FROM", "Test", "\"", ",", "mockResult", ")", ";", "}", "`", "`", "`", "This", "statement", "assumes", "that", "by", "testing", "with", "a", "mock", "`", "OResultSet", "`", ",", "we", "can", "verify", "if", "the", "function", "behaves", "correctly", "without", "dealing", "with", "actual", "database", "queries", "or", "real", "result", "sets", ",", "focusing", "solely", "on", "the", "function", "'", "s", "execution", "logic", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 49.8732562684196, "bleu-max": 49.8732562684196, "bleu-min": 10.957783836479825, "bleu-avg": 24.59856547282574, "code-bleu": 35.40455281227776, "code-bleu-max": 35.40455281227776, "code-bleu-min": 2.6409783161290825, "code-bleu-avg": 19.143260946690294, "edit-sim": 68, "edit-sim-max": 68, "edit-sim-min": 40, "edit-sim-avg": 49.8, "rouge-p": 75.0, "rouge-p-max": 75.0, "rouge-p-min": 40.0, "rouge-p-avg": 51.277777777777786, "rouge-r": 66.66666666666666, "rouge-r-max": 66.66666666666666, "rouge-r-min": 44.44444444444444, "rouge-r-avg": 52.22222222222223, "rouge-f": 70.58823479584775, "rouge-f-max": 70.58823479584775, "rouge-f-min": 42.10526265927979, "rouge-f-avg": 51.647746319064005, "num-seq": 10}, "time": 0.8585174083709717, "misc": {}}
{"id": 134, "data_id": "csn-98610", "input_stids": [1, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 531, 1396, 531, 13198, 514, 32315, 32315, 563, 263, 1746, 261, 262, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 3902, 6, 397, 2658, 397, 315, 3902, 6, 262, 274, 1172, 3210, 5365, 261, 446, 269, 563, 262, 274, 1033, 14794, 273, 2270, 263, 12736, 261, 315, 3902, 6, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7766, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 1842, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 1815, 8867, 261, 315, 460, 315, 269, 2270, 263, 12736, 261, 315, 498, 315, 262, 262, 274, 289, 2], "score": -0.04621494188904762, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "Test", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "testProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "assertEquals", "(", "\"", "value", "\"", ",", "prop", ".", "getCustom", "(", "\"", "key", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 4486, 20570, 784, 646, 434, 326, 1842, 3377, 506, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 797, 315, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7766, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 1679, 653, 315, 269, 315, 1679, 620, 315, 262, 274, 1815, 8867, 261, 315, 1679, 620, 315, 269, 2270, 263, 12736, 261, 315, 1679, 653, 315, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.21853747963905334, "weight": 1, "toks": ["<s>", "The", "most", "concise", "form", "of", "the", "test", "could", "be", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "TestClass", "\"", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "TestProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "customKey", "\"", ",", "\"", "customValue", "\"", ")", ";", "assertEquals", "(", "\"", "customValue", "\"", ",", "prop", ".", "getCustom", "(", "\"", "customKey", "\"", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 14382, 715, 1842, 326, 1375, 12736, 1375, 707, 269, 326, 1024, 3021, 1410, 10572, 1230, 2158, 471, 1815, 326, 1679, 1272, 460, 358, 3929, 2097, 3434, 4496, 294, 1375, 1375, 1375, 2252, 1815, 8867, 261, 315, 7128, 315, 269, 14794, 262, 274, 1375, 1375, 1375, 2], "score": -0.24517229199409485, "weight": 1, "toks": ["<s>", "To", "efficiently", "test", "the", "`", "getCustom", "`", "method", ",", "the", "next", "statement", "should", "ideally", "fetch", "and", "assert", "the", "custom", "property", "value", "to", "verify", "its", "correctness", ":", "`", "`", "`", "java", "assertEquals", "(", "\"", "STR", "\"", ",", "currentValue", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 531, 1396, 263, 26723, 1375, 707, 269, 999, 326, 3751, 1842, 648, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 342, 342, 1788, 667, 471, 1272, 514, 2658, 273, 315, 7766, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 1842, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 342, 342, 1000, 1679, 1566, 471, 4614, 518, 514, 498, 273, 315, 1679, 653, 315, 274, 514, 460, 273, 315, 1679, 620, 315, 274, 2270, 263, 26723, 261, 498, 269, 460, 262, 274, 342, 342, 5452, 326, 1679, 1566, 353, 444, 8783, 1815, 8867, 261, 460, 269, 2270, 263, 12736, 261, 498, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2719705104827881, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "OProperty", ".", "setCustom", "`", "method", ",", "use", "the", "following", "test", "case", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "/", "/", "Create", "class", "and", "property", "String", "className", "=", "\"", "Test", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "testProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "/", "/", "Set", "custom", "attribute", "and", "retrieve", "it", "String", "key", "=", "\"", "customKey", "\"", ";", "String", "value", "=", "\"", "customValue", "\"", ";", "prop", ".", "setCustom", "(", "key", ",", "value", ")", ";", "/", "/", "Assert", "the", "custom", "attribute", "is", "set", "correctly", "assertEquals", "(", "value", ",", "prop", ".", "getCustom", "(", "key", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1021, 20579, 3021, 358, 1842, 326, 707, 296, 12736, 296, 4102, 506, 294, 1375, 1375, 1375, 2252, 1815, 8867, 261, 315, 7128, 315, 269, 2270, 263, 12736, 261, 315, 7128, 315, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.34652912616729736, "weight": 1, "toks": ["<s>", "The", "shortest", "statement", "to", "test", "the", "method", "'", "getCustom", "'", "would", "be", ":", "`", "`", "`", "java", "assertEquals", "(", "\"", "STR", "\"", ",", "prop", ".", "getCustom", "(", "\"", "STR", "\"", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 12736, 1375, 707, 23500, 471, 20570, 291, 2357, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 3802, 261, 262, 288, 514, 498, 273, 315, 1679, 653, 315, 274, 514, 30844, 273, 315, 1679, 620, 315, 274, 531, 1396, 1272, 273, 5416, 261, 531, 1396, 263, 667, 262, 274, 1347, 261, 1272, 263, 12736, 261, 498, 262, 262, 263, 1508, 990, 261, 30844, 262, 274, 514, 3214, 620, 273, 1272, 263, 12736, 261, 498, 262, 274, 1815, 8867, 261, 30844, 269, 3214, 620, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3520107865333557, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "getCustom", "`", "method", "effectively", "and", "concisely", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetCustom", "(", ")", "{", "String", "key", "=", "\"", "customKey", "\"", ";", "String", "expectedValue", "=", "\"", "customValue", "\"", ";", "OProperty", "property", "=", "mock", "(", "OProperty", ".", "class", ")", ";", "when", "(", "property", ".", "getCustom", "(", "key", ")", ")", ".", "thenReturn", "(", "expectedValue", ")", ";", "String", "actualValue", "=", "property", ".", "getCustom", "(", "key", ")", ";", "assertEquals", "(", "expectedValue", ",", "actualValue", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1815, 5510, 261, 315, 7128, 315, 263, 1606, 261, 14794, 262, 262, 274, 2], "score": -0.3572918772697449, "weight": 1, "toks": ["<s>", "assertTrue", "(", "\"", "STR", "\"", ".", "equals", "(", "currentValue", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 2], "score": -0.38551241159439087, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "</s>"]}, {"tids": [1, 25395, 261, 14794, 262, 274, 2], "score": -0.42572957277297974, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "currentValue", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 1679, 620, 273, 315, 1679, 460, 315, 274, 2270, 263, 26723, 261, 315, 498, 315, 269, 1679, 620, 262, 274, 289, 2], "score": -0.4628276526927948, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "customValue", "=", "\"", "custom", "value", "\"", ";", "prop", ".", "setCustom", "(", "\"", "key", "\"", ",", "customValue", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 25.276007695044328, "bleu-max": 25.276007695044328, "bleu-min": 14.991106946711685, "bleu-avg": 19.697532783779405, "code-bleu": 5.153701171292969, "code-bleu-max": 20.86354599398668, "code-bleu-min": 4.223311498018275, "code-bleu-avg": 8.04987667540144, "edit-sim": 49, "edit-sim-max": 65, "edit-sim-min": 42, "edit-sim-avg": 47.4, "rouge-p": 42.857142857142854, "rouge-p-max": 50.0, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 41.01190476190475, "rouge-r": 50.0, "rouge-r-max": 66.66666666666666, "rouge-r-min": 50.0, "rouge-r-avg": 51.666666666666664, "rouge-f": 46.153845656804734, "rouge-f-max": 57.14285665306124, "rouge-f-min": 39.99999952000001, "rouge-f-avg": 45.64835115591257, "num-seq": 10}, "time": 0.6492338180541992, "misc": {}}
{"id": 135, "data_id": "csn-98610", "input_stids": [1, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 531, 1396, 531, 13198, 514, 32315, 32315, 327, 612, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 3902, 6, 397, 2658, 397, 315, 3902, 6, 262, 274, 1172, 3210, 5365, 261, 446, 269, 563, 262, 274, 1033, 14794, 273, 2270, 263, 12736, 261, 315, 3902, 6, 262, 274, 5452, 263, 25395, 261, 563, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 967, 3802, 261, 262, 288, 531, 1396, 2270, 273, 394, 531, 1396, 261, 262, 274, 2270, 263, 26723, 261, 315, 508, 315, 269, 315, 460, 315, 262, 274, 514, 563, 273, 2270, 263, 12736, 261, 315, 508, 315, 262, 274, 1815, 8867, 261, 315, 460, 315, 269, 563, 262, 274, 289, 2], "score": -0.06608174741268158, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetCustom", "(", ")", "{", "OProperty", "prop", "=", "new", "OProperty", "(", ")", ";", "prop", ".", "setCustom", "(", "\"", "name", "\"", ",", "\"", "value", "\"", ")", ";", "String", "result", "=", "prop", ".", "getCustom", "(", "\"", "name", "\"", ")", ";", "assertEquals", "(", "\"", "value", "\"", ",", "result", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 12736, 1375, 707, 269, 1846, 848, 999, 326, 3751, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 3802, 261, 262, 288, 514, 1679, 620, 273, 315, 6082, 620, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 8005, 797, 315, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 8005, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 1679, 653, 315, 269, 1679, 620, 262, 274, 514, 2106, 620, 273, 2270, 263, 12736, 261, 315, 1679, 653, 315, 262, 274, 5452, 263, 1815, 8867, 261, 1679, 620, 269, 2106, 620, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.21060210466384888, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "getCustom", "`", "method", ",", "you", "can", "use", "the", "following", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetCustom", "(", ")", "{", "String", "customValue", "=", "\"", "CustomValue", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "MyClass", "\"", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "MyProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "customKey", "\"", ",", "customValue", ")", ";", "String", "returnedValue", "=", "prop", ".", "getCustom", "(", "\"", "customKey", "\"", ")", ";", "Assert", ".", "assertEquals", "(", "customValue", ",", "returnedValue", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 12736, 1375, 707, 269, 333, 2836, 1842, 1410, 5122, 4356, 1375, 12736, 1375, 603, 392, 1375, 531, 1396, 1375, 791, 471, 3929, 2097, 876, 263, 2457, 279, 16745, 331, 2214, 1842, 716, 21195, 7155, 281, 603, 1375, 12736, 1375, 269, 326, 675, 7091, 2101, 2063, 3875, 471, 7820, 1410, 506, 5122, 3746, 358, 333, 707, 1338, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 3802, 261, 262, 288, 514, 2658, 273, 315, 7766, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7766, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 1679, 653, 315, 269, 315, 1679, 620, 315, 262, 274, 514, 3214, 273, 2270, 263, 12736, 261, 315, 1679, 653, 315, 262, 274, 5452, 263, 1815, 8867, 261, 315, 1679, 620, 315, 269, 3214, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 11932, 716, 1375, 12736, 1375, 8783, 9023, 326, 460, 4656, 358, 326, 864, 498, 269, 1492, 1703, 7243, 444, 635, 1375, 26723, 1375, 263, 2597, 5122, 7434, 326, 12613, 14176, 2887, 3312, 640, 9243, 5295, 263, 2], "score": -0.2964337468147278, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "getCustom", "`", "method", ",", "this", "unit", "test", "should", "directly", "invoke", "`", "getCustom", "`", "on", "an", "`", "OProperty", "`", "instance", "and", "verify", "its", "output", ".", "For", "a", "minimal", "viable", "test", "that", "specifically", "focuses", "on", "`", "getCustom", "`", ",", "the", "preliminary", "database", "setup", "and", "assertions", "should", "be", "directly", "related", "to", "this", "method", "only", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetCustom", "(", ")", "{", "String", "className", "=", "\"", "TestClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "TestProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "customKey", "\"", ",", "\"", "customValue", "\"", ")", ";", "String", "actual", "=", "prop", ".", "getCustom", "(", "\"", "customKey", "\"", ")", ";", "Assert", ".", "assertEquals", "(", "\"", "customValue", "\"", ",", "actual", ")", ";", "}", "`", "`", "`", "This", "test", "ensures", "that", "`", "getCustom", "`", "correctly", "retrieves", "the", "value", "corresponding", "to", "the", "given", "key", ",", "which", "was", "previously", "set", "by", "`", "setCustom", "`", ".", "It", "directly", "tests", "the", "intended", "functionality", "without", "additional", "unrelated", "operations", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 277, 461, 273, 315, 3454, 315, 274, 514, 563, 273, 791, 263, 12736, 261, 277, 461, 262, 274, 25395, 261, 563, 262, 274, 289, 2], "score": -0.3169328272342682, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "iName", "=", "\"", "example", "\"", ";", "String", "result", "=", "instance", ".", "getCustom", "(", "iName", ")", ";", "assertNotNull", "(", "result", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 1842, 1410, 3929, 716, 326, 1375, 26723, 1375, 707, 8783, 1678, 1679, 1566, 924, 364, 1790, 316, 326, 2063, 263, 2597, 296, 272, 4422, 5286, 649, 358, 1815, 716, 326, 10295, 1679, 460, 261, 1375, 14794, 1375, 262, 1885, 326, 2665, 444, 460, 315, 7128, 315, 263, 2], "score": -0.32206568121910095, "weight": 1, "toks": ["<s>", "The", "test", "should", "verify", "that", "the", "`", "setCustom", "`", "method", "correctly", "sets", "custom", "attribute", "values", "for", "properties", "in", "the", "database", ".", "It", "'", "s", "crucial", "to", "assert", "that", "the", "retrieved", "custom", "value", "(", "`", "currentValue", "`", ")", "matches", "the", "expected", "set", "value", "\"", "STR", "\"", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 8005, 797, 315, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 8005, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 1679, 653, 315, 269, 315, 1679, 620, 315, 262, 274, 289, 2], "score": -0.3340620696544647, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "MyClass", "\"", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "MyProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "customKey", "\"", ",", "\"", "customValue", "\"", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 1679, 653, 273, 315, 1679, 67, 856, 315, 274, 514, 1679, 620, 273, 315, 1679, 67, 1132, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 797, 315, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7766, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 1679, 653, 269, 1679, 620, 262, 274, 1815, 8867, 261, 1679, 620, 269, 2270, 263, 12736, 261, 1679, 653, 262, 262, 274, 289, 2], "score": -0.3410361409187317, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "customKey", "=", "\"", "custom_key", "\"", ";", "String", "customValue", "=", "\"", "custom_value", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "TestClass", "\"", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "TestProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "customKey", ",", "customValue", ")", ";", "assertEquals", "(", "customValue", ",", "prop", ".", "getCustom", "(", "customKey", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7766, 3834, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 1842, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 514, 1679, 620, 273, 2270, 263, 12736, 261, 315, 498, 315, 262, 274, 1815, 8867, 261, 315, 460, 315, 269, 1679, 620, 262, 274, 289, 2], "score": -0.41516783833503723, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "TestClassName", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "testProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "String", "customValue", "=", "prop", ".", "getCustom", "(", "\"", "key", "\"", ")", ";", "assertEquals", "(", "\"", "value", "\"", ",", "customValue", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 3802, 261, 262, 288, 514, 1679, 620, 273, 315, 1679, 620, 315, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 9994, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 1679, 653, 315, 269, 1679, 620, 262, 274, 1815, 8867, 261, 1679, 620, 269, 2270, 263, 12736, 261, 315, 1679, 653, 315, 262, 262, 274, 289, 2], "score": -0.41918501257896423, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetCustom", "(", ")", "{", "String", "customValue", "=", "\"", "customValue", "\"", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "propName", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "customKey", "\"", ",", "customValue", ")", ";", "assertEquals", "(", "customValue", ",", "prop", ".", "getCustom", "(", "\"", "customKey", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 3802, 261, 262, 288, 531, 1396, 2270, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 2900, 261, 315, 7128, 315, 262, 263, 3911, 261, 315, 7128, 315, 262, 274, 514, 1679, 620, 273, 2270, 263, 12736, 261, 315, 7128, 315, 262, 274, 5452, 263, 1815, 8867, 261, 315, 7128, 315, 269, 1679, 620, 262, 274, 289, 2], "score": -0.4521900713443756, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetCustom", "(", ")", "{", "OProperty", "prop", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "\"", "STR", "\"", ")", ".", "getProperty", "(", "\"", "STR", "\"", ")", ";", "String", "customValue", "=", "prop", ".", "getCustom", "(", "\"", "STR", "\"", ")", ";", "Assert", ".", "assertEquals", "(", "\"", "STR", "\"", ",", "customValue", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 19.201920550239766, "bleu-max": 35.73880113629119, "bleu-min": 14.273819597399108, "bleu-avg": 21.185786080412857, "code-bleu": 4.011058237367745, "code-bleu-max": 18.774538786925753, "code-bleu-min": 2.925737343195113, "code-bleu-avg": 6.692262864036218, "edit-sim": 60, "edit-sim-max": 71, "edit-sim-min": 42, "edit-sim-avg": 57.5, "rouge-p": 50.0, "rouge-p-max": 66.66666666666666, "rouge-p-min": 37.5, "rouge-p-avg": 50.48809523809524, "rouge-r": 57.14285714285714, "rouge-r-max": 71.42857142857143, "rouge-r-min": 42.857142857142854, "rouge-r-avg": 55.71428571428571, "rouge-f": 53.33333283555556, "rouge-f-max": 66.6666661688889, "rouge-f-min": 39.999999502222224, "rouge-f-avg": 52.76448991473552, "num-seq": 10}, "time": 0.6310544013977051, "misc": {}}
{"id": 136, "data_id": "csn-98610", "input_stids": [1, 32315, 632, 1439, 1250, 4564, 261, 262, 274, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 531, 1396, 531, 13198, 514, 32315, 32315, 531, 1253, 563, 273, 12168, 263, 1024, 261, 262, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 3902, 6, 397, 2658, 397, 315, 3902, 6, 262, 274, 1172, 3210, 5365, 261, 446, 269, 563, 262, 274, 1033, 14794, 273, 2270, 263, 12736, 261, 315, 3902, 6, 262, 274, 5452, 263, 25395, 261, 563, 262, 274, 5452, 263, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 5582, 2134, 261, 262, 288, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 289, 2], "score": -0.07467217743396759, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testHasNext", "(", ")", "{", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 26723, 1375, 707, 14382, 715, 269, 326, 1842, 1410, 7155, 603, 3637, 279, 1679, 1566, 358, 279, 1272, 471, 3929, 310, 518, 263, 13743, 296, 272, 279, 20570, 784, 3021, 364, 333, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 342, 342, 10371, 726, 294, 1788, 279, 667, 471, 1272, 514, 2658, 273, 315, 7766, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7766, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 342, 342, 4603, 294, 1000, 1679, 1272, 471, 4614, 518, 514, 1679, 653, 273, 315, 1679, 653, 315, 274, 514, 1679, 620, 273, 315, 1679, 620, 315, 274, 2270, 263, 26723, 261, 1679, 653, 269, 1679, 620, 262, 274, 514, 10295, 620, 273, 2270, 263, 12736, 261, 1679, 653, 262, 274, 342, 342, 5452, 294, 2073, 326, 1679, 1272, 353, 444, 8783, 5452, 263, 1815, 8867, 261, 1679, 620, 269, 10295, 620, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.24045591056346893, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "setCustom", "`", "method", "efficiently", ",", "the", "test", "should", "focus", "on", "setting", "a", "custom", "attribute", "to", "a", "property", "and", "verifying", "it", ".", "Here", "'", "s", "a", "concise", "statement", "for", "this", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "/", "/", "Arrange", ":", "Create", "a", "class", "and", "property", "String", "className", "=", "\"", "TestClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "TestProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "/", "/", "Act", ":", "Set", "custom", "property", "and", "retrieve", "it", "String", "customKey", "=", "\"", "customKey", "\"", ";", "String", "customValue", "=", "\"", "customValue", "\"", ";", "prop", ".", "setCustom", "(", "customKey", ",", "customValue", ")", ";", "String", "retrievedValue", "=", "prop", ".", "getCustom", "(", "customKey", ")", ";", "/", "/", "Assert", ":", "Check", "the", "custom", "property", "is", "set", "correctly", "Assert", ".", "assertEquals", "(", "customValue", ",", "retrievedValue", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 8005, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 8005, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 1679, 653, 315, 269, 315, 1679, 620, 315, 262, 274, 5452, 263, 1815, 8867, 261, 315, 1679, 620, 315, 269, 2270, 263, 12736, 261, 315, 1679, 653, 315, 262, 262, 274, 289, 2], "score": -0.27404487133026123, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "MyClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "MyProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "customKey", "\"", ",", "\"", "customValue", "\"", ")", ";", "Assert", ".", "assertEquals", "(", "\"", "customValue", "\"", ",", "prop", ".", "getCustom", "(", "\"", "customKey", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 7693, 326, 1375, 4564, 261, 262, 1375, 707, 4186, 8783, 635, 6932, 310, 326, 9805, 434, 622, 4520, 1245, 563, 263, 1220, 29876, 3324, 279, 16745, 4671, 11448, 1842, 3875, 358, 1954, 326, 707, 296, 272, 6885, 316, 10704, 310, 3059, 1686, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 5582, 2134, 261, 262, 288, 5452, 263, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2925402522087097, "weight": 1, "toks": ["<s>", "Ensure", "the", "`", "hasNext", "(", ")", "`", "method", "functions", "correctly", "by", "confirming", "the", "presence", "of", "at", "least", "one", "result", ".", "This", "involves", "a", "minimal", "yet", "effective", "test", "setup", "to", "validate", "the", "method", "'", "s", "behavior", "in", "traversing", "through", "results", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testHasNext", "(", ")", "{", "Assert", ".", "assertTrue", "(", "result", ".", "hasNext", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 7693, 326, 1375, 1842, 694, 3802, 1375, 707, 14382, 715, 2006, 281, 471, 11964, 1679, 1272, 1947, 316, 326, 2063, 1963, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 342, 342, 1788, 667, 471, 1272, 514, 2658, 273, 315, 8005, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 8005, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 342, 342, 1000, 471, 336, 1679, 1272, 514, 1679, 653, 273, 315, 498, 315, 274, 514, 1679, 620, 273, 315, 460, 315, 274, 2270, 263, 26723, 261, 1679, 653, 269, 1679, 620, 262, 274, 514, 14794, 273, 2270, 263, 12736, 261, 1679, 653, 262, 274, 342, 342, 5452, 1115, 25395, 261, 14794, 262, 274, 1815, 8867, 261, 1679, 620, 269, 14794, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.31085774302482605, "weight": 1, "toks": ["<s>", "Ensure", "the", "`", "testSetCustom", "`", "method", "efficiently", "accesses", "and", "validates", "custom", "property", "settings", "in", "the", "database", "schema", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "/", "/", "Create", "class", "and", "property", "String", "className", "=", "\"", "MyClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "MyProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "/", "/", "Set", "and", "get", "custom", "property", "String", "customKey", "=", "\"", "key", "\"", ";", "String", "customValue", "=", "\"", "value", "\"", ";", "prop", ".", "setCustom", "(", "customKey", ",", "customValue", ")", ";", "String", "currentValue", "=", "prop", ".", "getCustom", "(", "customKey", ")", ";", "/", "/", "Assertions", "assertNotNull", "(", "currentValue", ")", ";", "assertEquals", "(", "customValue", ",", "currentValue", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 11474, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3296, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 1679, 653, 315, 269, 315, 1679, 620, 315, 262, 274, 5452, 263, 1815, 8867, 261, 315, 1679, 620, 315, 269, 2270, 263, 12736, 261, 315, 1679, 653, 315, 262, 262, 274, 289, 2], "score": -0.34536707401275635, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "SampleClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "sampleProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "customKey", "\"", ",", "\"", "customValue", "\"", ")", ";", "Assert", ".", "assertEquals", "(", "\"", "customValue", "\"", ",", "prop", ".", "getCustom", "(", "\"", "customKey", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 7693, 326, 1842, 8214, 4271, 326, 14176, 434, 3637, 471, 17146, 1679, 1790, 263, 2], "score": -0.3570714592933655, "weight": 1, "toks": ["<s>", "Ensure", "the", "test", "properly", "checks", "the", "functionality", "of", "setting", "and", "retrieving", "custom", "properties", ".", "</s>"]}, {"tids": [1, 7693, 716, 1375, 2270, 263, 26723, 261, 315, 498, 315, 269, 315, 460, 315, 262, 1375, 8214, 9064, 279, 1679, 460, 471, 848, 506, 10295, 8783, 263, 2], "score": -0.38223907351493835, "weight": 1, "toks": ["<s>", "Ensure", "that", "`", "prop", ".", "setCustom", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", "`", "properly", "stores", "a", "custom", "value", "and", "can", "be", "retrieved", "correctly", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 5582, 2134, 261, 262, 288, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 289, 2], "score": -0.4176624119281769, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testHasNext", "(", ")", "{", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7128, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7128, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 7128, 315, 269, 315, 7128, 315, 262, 274, 5452, 263, 1815, 8867, 261, 315, 7128, 315, 269, 2270, 263, 12736, 261, 315, 7128, 315, 262, 262, 274, 289, 2], "score": -0.422925740480423, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "STR", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "STR", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "STR", "\"", ",", "\"", "STR", "\"", ")", ";", "Assert", ".", "assertEquals", "(", "\"", "STR", "\"", ",", "prop", ".", "getCustom", "(", "\"", "STR", "\"", ")", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 20.492938431708815, "bleu-max": 47.987820666906636, "bleu-min": 12.718249172769678, "bleu-avg": 25.677317231434763, "code-bleu": 3.0153626802038844, "code-bleu-max": 52.76897898205796, "code-bleu-min": 2.4057171951876652, "code-bleu-avg": 13.380524287834058, "edit-sim": 39, "edit-sim-max": 63, "edit-sim-min": 38, "edit-sim-avg": 46.5, "rouge-p": 37.5, "rouge-p-max": 75.0, "rouge-p-min": 30.0, "rouge-p-avg": 45.182539682539684, "rouge-r": 42.857142857142854, "rouge-r-max": 85.71428571428571, "rouge-r-min": 42.857142857142854, "rouge-r-avg": 52.857142857142854, "rouge-f": 39.999999502222224, "rouge-f-max": 79.99999950222222, "rouge-f-min": 35.29411716262976, "rouge-f-avg": 48.60083984036516, "num-seq": 10}, "time": 0.6662595272064209, "misc": {}}
{"id": 137, "data_id": "csn-98610", "input_stids": [1, 32315, 632, 1439, 531, 1253, 1024, 261, 262, 274, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 531, 1396, 531, 13198, 514, 531, 1253, 32315, 32315, 1815, 563, 263, 3911, 261, 315, 3902, 6, 262, 480, 446, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 3902, 6, 397, 2658, 397, 315, 3902, 6, 262, 274, 1172, 3210, 5365, 261, 446, 269, 563, 262, 274, 1033, 14794, 273, 2270, 263, 12736, 261, 315, 3902, 6, 262, 274, 5452, 263, 25395, 261, 563, 262, 274, 5452, 263, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 531, 1253, 1024, 273, 563, 263, 1024, 261, 262, 274, 2], "topk": [{"tids": [1, 5452, 263, 1815, 8867, 261, 315, 7128, 315, 269, 14794, 262, 274, 2], "score": -0.10714155435562134, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "\"", "STR", "\"", ",", "currentValue", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 25395, 261, 1024, 263, 3911, 261, 315, 7128, 315, 262, 262, 274, 2], "score": -0.1851041465997696, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "next", ".", "getProperty", "(", "\"", "STR", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 315, 7128, 315, 269, 14794, 262, 274, 2], "score": -0.20231002569198608, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "\"", "STR", "\"", ",", "currentValue", ")", ";", "</s>"]}, {"tids": [1, 7693, 1375, 1024, 1375, 707, 8783, 9023, 392, 1375, 531, 1253, 1375, 598, 326, 2665, 1272, 628, 326, 1375, 531, 13198, 1375, 263, 2], "score": -0.22702477872371674, "weight": 1, "toks": ["<s>", "Ensure", "`", "next", "`", "method", "correctly", "retrieves", "an", "`", "OResult", "`", "with", "the", "expected", "property", "from", "the", "`", "OResultSet", "`", ".", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 315, 7128, 315, 269, 14794, 262, 274, 2], "score": -0.24535499513149261, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "\"", "STR", "\"", ",", "currentValue", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 25395, 261, 1024, 263, 3911, 261, 315, 7128, 315, 262, 262, 274, 2], "score": -0.2878910005092621, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "next", ".", "getProperty", "(", "\"", "STR", "\"", ")", ")", ";", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 2134, 1305, 261, 262, 288, 531, 1253, 1024, 273, 563, 263, 1024, 261, 262, 274, 5452, 263, 25395, 261, 1024, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2957087457180023, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testNextMethod", "(", ")", "{", "OResult", "next", "=", "result", ".", "next", "(", ")", ";", "Assert", ".", "assertNotNull", "(", "next", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1375, 25395, 261, 1024, 262, 274, 1375, 2], "score": -0.29770979285240173, "weight": 1, "toks": ["<s>", "`", "assertNotNull", "(", "next", ")", ";", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2134, 1305, 261, 262, 288, 531, 1253, 1024, 273, 563, 263, 1024, 261, 262, 274, 25395, 261, 1024, 262, 274, 289, 2], "score": -0.312153697013855, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testNextMethod", "(", ")", "{", "OResult", "next", "=", "result", ".", "next", "(", ")", ";", "assertNotNull", "(", "next", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2134, 1305, 261, 262, 288, 531, 1253, 1024, 273, 563, 263, 1024, 261, 262, 274, 25395, 261, 1024, 262, 274, 289, 2], "score": -0.37097886204719543, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testNextMethod", "(", ")", "{", "OResult", "next", "=", "result", ".", "next", "(", ")", ";", "assertNotNull", "(", "next", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 15.576610447429978, "bleu-max": 100.0, "bleu-min": 13.638780478880111, "bleu-avg": 25.169193464376754, "code-bleu": 5.220059248534167, "code-bleu-max": 100.0, "code-bleu-min": 4.437659596835949, "code-bleu-avg": 15.734730227134065, "edit-sim": 54, "edit-sim-max": 100, "edit-sim-min": 42, "edit-sim-avg": 59.0, "rouge-p": 50.0, "rouge-p-max": 100.0, "rouge-p-min": 44.44444444444444, "rouge-p-avg": 55.0, "rouge-r": 83.33333333333334, "rouge-r-max": 100.0, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 81.66666666666667, "rouge-f": 62.499999531250005, "rouge-f-max": 99.9999995, "rouge-f-min": 53.33333285333334, "rouge-f-avg": 65.21428523805614, "num-seq": 10}, "time": 0.7513489723205566, "misc": {}}
{"id": 138, "data_id": "csn-98610", "input_stids": [1, 32315, 632, 1439, 531, 1253, 1024, 261, 262, 274, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 531, 1396, 531, 13198, 514, 531, 1253, 32315, 32315, 612, 273, 563, 263, 3911, 261, 315, 3902, 6, 262, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 3902, 6, 397, 2658, 397, 315, 3902, 6, 262, 274, 1172, 3210, 5365, 261, 446, 269, 563, 262, 274, 1033, 14794, 273, 2270, 263, 12736, 261, 315, 3902, 6, 262, 274, 5452, 263, 25395, 261, 563, 262, 274, 5452, 263, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 531, 1253, 1024, 273, 563, 263, 1024, 261, 262, 274, 5452, 263, 25395, 261, 1024, 262, 274, 2], "topk": [{"tids": [1, 2974, 23500, 1842, 326, 1375, 1024, 261, 262, 1375, 707, 269, 3387, 716, 326, 1375, 531, 13198, 1375, 353, 6737, 598, 622, 4520, 1245, 1409, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 2134, 1305, 261, 262, 288, 15158, 273, 315, 1842, 1966, 315, 274, 531, 4254, 2157, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 15158, 262, 274, 1319, 263, 752, 261, 262, 274, 775, 288, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 315, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 508, 315, 269, 531, 559, 263, 9469, 262, 274, 1319, 263, 1296, 261, 315, 2243, 1368, 7766, 444, 508, 273, 296, 1842, 296, 315, 262, 274, 531, 13198, 12168, 273, 1319, 263, 1296, 261, 315, 2027, 628, 7766, 315, 262, 274, 5452, 263, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 531, 1253, 563, 273, 12168, 263, 1024, 261, 262, 274, 5452, 263, 25395, 261, 563, 262, 274, 5452, 263, 1815, 8867, 261, 315, 1842, 315, 269, 563, 263, 3911, 261, 315, 508, 315, 262, 262, 274, 289, 3095, 288, 1319, 263, 1746, 261, 262, 274, 289, 289, 1375, 1375, 1375, 1220, 20570, 784, 1842, 11932, 716, 326, 1375, 1024, 261, 262, 1375, 707, 8783, 9023, 326, 2665, 501, 628, 326, 2063, 269, 6728, 3937, 716, 1915, 353, 279, 563, 471, 716, 326, 913, 353, 3434, 263, 2], "score": -0.13278380036354065, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "next", "(", ")", "`", "method", ",", "ensure", "that", "the", "`", "OResultSet", "`", "is", "populated", "with", "at", "least", "one", "record", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testNextMethod", "(", ")", "{", "dbName", "=", "\"", "testdb", "\"", ";", "ODatabaseSession", "db", "=", "new", "ODatabaseDocumentTx", "(", "dbName", ")", ";", "db", ".", "create", "(", ")", ";", "try", "{", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "Test", "\"", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "name", "\"", ",", "OType", ".", "STRING", ")", ";", "db", ".", "command", "(", "\"", "insert", "into", "Test", "set", "name", "=", "'", "test", "'", "\"", ")", ";", "OResultSet", "resultSet", "=", "db", ".", "command", "(", "\"", "select", "from", "Test", "\"", ")", ";", "Assert", ".", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "OResult", "result", "=", "resultSet", ".", "next", "(", ")", ";", "Assert", ".", "assertNotNull", "(", "result", ")", ";", "Assert", ".", "assertEquals", "(", "\"", "test", "\"", ",", "result", ".", "getProperty", "(", "\"", "name", "\"", ")", ")", ";", "}", "finally", "{", "db", ".", "close", "(", ")", ";", "}", "}", "`", "`", "`", "This", "concise", "test", "ensures", "that", "the", "`", "next", "(", ")", "`", "method", "correctly", "retrieves", "the", "expected", "data", "from", "the", "database", ",", "checking", "both", "that", "there", "is", "a", "result", "and", "that", "the", "content", "is", "correct", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2134, 1305, 261, 262, 288, 531, 1253, 1024, 273, 563, 263, 1024, 261, 262, 274, 5452, 263, 25395, 261, 1024, 262, 274, 289, 2], "score": -0.16554735600948334, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testNextMethod", "(", ")", "{", "OResult", "next", "=", "result", ".", "next", "(", ")", ";", "Assert", ".", "assertNotNull", "(", "next", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1396, 3802, 620, 694, 261, 262, 288, 514, 1679, 653, 273, 315, 1679, 653, 315, 274, 514, 1679, 620, 273, 315, 1679, 620, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 797, 315, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7766, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 1679, 653, 269, 1679, 620, 262, 274, 514, 10295, 3802, 620, 273, 2270, 263, 12736, 261, 1679, 653, 262, 274, 5452, 263, 1815, 8867, 261, 1679, 620, 269, 10295, 3802, 620, 262, 274, 289, 2], "score": -0.16926923394203186, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testPropertyCustomValueSet", "(", ")", "{", "String", "customKey", "=", "\"", "customKey", "\"", ";", "String", "customValue", "=", "\"", "customValue", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "TestClass", "\"", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "TestProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "customKey", ",", "customValue", ")", ";", "String", "retrievedCustomValue", "=", "prop", ".", "getCustom", "(", "customKey", ")", ";", "Assert", ".", "assertEquals", "(", "customValue", ",", "retrievedCustomValue", ")", ";", "}", "</s>"]}, {"tids": [1, 4554, 1410, 1045, 279, 20570, 784, 471, 31293, 1842, 3007, 333, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1396, 3802, 1499, 15737, 261, 262, 288, 342, 342, 10371, 726, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 8005, 797, 315, 262, 274, 531, 1396, 1272, 273, 4003, 263, 31318, 261, 315, 3399, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 342, 342, 4603, 1272, 263, 26723, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 514, 1679, 620, 273, 1272, 263, 12736, 261, 315, 498, 315, 262, 274, 342, 342, 5452, 1815, 8867, 261, 315, 460, 315, 269, 1679, 620, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2308730185031891, "weight": 1, "toks": ["<s>", "You", "should", "write", "a", "concise", "and", "precise", "test", "like", "this", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testPropertyCustomAttributeIsSet", "(", ")", "{", "/", "/", "Arrange", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "MyClass", "\"", ")", ";", "OProperty", "property", "=", "clazz", ".", "createProperty", "(", "\"", "myProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "/", "/", "Act", "property", ".", "setCustom", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "String", "customValue", "=", "property", ".", "getCustom", "(", "\"", "key", "\"", ")", ";", "/", "/", "Assert", "assertEquals", "(", "\"", "value", "\"", ",", "customValue", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 1024, 261, 262, 1375, 707, 487, 21043, 7694, 715, 487, 3323, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 2134, 1305, 261, 262, 288, 531, 13198, 12168, 273, 1319, 263, 1296, 261, 315, 2027, 628, 3433, 67, 1106, 315, 262, 274, 1815, 5510, 261, 12168, 263, 4564, 261, 262, 262, 274, 25395, 261, 12168, 263, 1024, 261, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 4271, 309, 326, 707, 848, 4985, 4614, 326, 1024, 563, 628, 326, 12168, 263, 2], "score": -0.23800262808799744, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "next", "(", ")", "`", "method", "as", "succinctly", "as", "possible", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testNextMethod", "(", ")", "{", "OResultSet", "resultSet", "=", "db", ".", "command", "(", "\"", "select", "from", "your_class", "\"", ")", ";", "assertTrue", "(", "resultSet", ".", "hasNext", "(", ")", ")", ";", "assertNotNull", "(", "resultSet", ".", "next", "(", ")", ")", ";", "}", "`", "`", "`", "This", "test", "checks", "if", "the", "method", "can", "successfully", "retrieve", "the", "next", "result", "from", "the", "resultSet", ".", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 26723, 1375, 471, 1375, 12736, 1375, 2590, 316, 1375, 531, 1396, 1375, 269, 326, 3751, 1842, 648, 848, 506, 20482, 471, 22397, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 14042, 3802, 261, 262, 288, 342, 342, 10939, 294, 9190, 471, 752, 1963, 269, 667, 269, 471, 1272, 531, 4254, 2519, 4188, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3778, 294, 1842, 1966, 315, 262, 274, 1319, 263, 752, 261, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 797, 315, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7766, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 342, 342, 4382, 294, 1000, 279, 1679, 1272, 514, 1679, 653, 273, 315, 1679, 653, 315, 274, 514, 1679, 620, 273, 315, 1679, 620, 315, 274, 2270, 263, 26723, 261, 1679, 653, 269, 1679, 620, 262, 274, 342, 342, 9067, 294, 2073, 326, 1679, 1272, 353, 444, 471, 3227, 16845, 514, 10295, 620, 273, 2270, 263, 12736, 261, 1679, 653, 262, 274, 5452, 263, 1815, 8867, 261, 1679, 620, 269, 10295, 620, 262, 274, 342, 342, 19968, 294, 3527, 326, 2063, 1319, 263, 1746, 261, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 648, 21195, 5774, 326, 14176, 434, 3637, 471, 1508, 8742, 279, 1679, 1566, 364, 392, 1375, 531, 1396, 1375, 791, 269, 24831, 326, 12359, 1440, 487, 2665, 2887, 19908, 5295, 578, 21610, 263, 2], "score": -0.2592267692089081, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "setCustom", "`", "and", "`", "getCustom", "`", "methods", "in", "`", "OProperty", "`", ",", "the", "following", "test", "case", "can", "be", "simplified", "and", "focused", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetAndGetCustom", "(", ")", "{", "/", "/", "Setup", ":", "Initialize", "and", "create", "schema", ",", "class", ",", "and", "property", "ODatabaseDocumentTx", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "memory", ":", "testdb", "\"", ")", ";", "db", ".", "create", "(", ")", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "TestClass", "\"", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "TestProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "/", "/", "Action", ":", "Set", "a", "custom", "property", "String", "customKey", "=", "\"", "customKey", "\"", ";", "String", "customValue", "=", "\"", "customValue", "\"", ";", "prop", ".", "setCustom", "(", "customKey", ",", "customValue", ")", ";", "/", "/", "Assertion", ":", "Check", "the", "custom", "property", "is", "set", "and", "retrievable", "String", "retrievedValue", "=", "prop", ".", "getCustom", "(", "customKey", ")", ";", "Assert", ".", "assertEquals", "(", "customValue", ",", "retrievedValue", ")", ";", "/", "/", "Cleanup", ":", "Close", "the", "database", "db", ".", "close", "(", ")", ";", "}", "`", "`", "`", "This", "test", "case", "specifically", "targets", "the", "functionality", "of", "setting", "and", "then", "getting", "a", "custom", "attribute", "for", "an", "`", "OProperty", "`", "instance", ",", "ensuring", "the", "capabilities", "work", "as", "expected", "without", "unnecessary", "operations", "or", "complexity", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2134, 1305, 261, 262, 288, 531, 1253, 563, 273, 5416, 261, 531, 1253, 263, 667, 262, 274, 1347, 261, 563, 263, 4564, 261, 262, 262, 263, 1508, 990, 261, 638, 262, 263, 1508, 990, 261, 629, 262, 274, 1347, 261, 563, 263, 1024, 261, 262, 262, 263, 1508, 990, 261, 394, 531, 1253, 3061, 261, 262, 262, 274, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 25395, 261, 563, 263, 1024, 261, 262, 262, 274, 1815, 8381, 261, 563, 263, 4564, 261, 262, 262, 274, 289, 2], "score": -0.2742355763912201, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testNextMethod", "(", ")", "{", "OResult", "result", "=", "mock", "(", "OResult", ".", "class", ")", ";", "when", "(", "result", ".", "hasNext", "(", ")", ")", ".", "thenReturn", "(", "true", ")", ".", "thenReturn", "(", "false", ")", ";", "when", "(", "result", ".", "next", "(", ")", ")", ".", "thenReturn", "(", "new", "OResultInternal", "(", ")", ")", ";", "assertTrue", "(", "result", ".", "hasNext", "(", ")", ")", ";", "assertNotNull", "(", "result", ".", "next", "(", ")", ")", ";", "assertFalse", "(", "result", ".", "hasNext", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2134, 261, 262, 288, 531, 1253, 563, 273, 5416, 261, 531, 1253, 263, 667, 262, 274, 1347, 261, 563, 263, 1024, 261, 262, 262, 263, 1508, 990, 261, 394, 531, 1253, 3061, 261, 262, 262, 274, 25395, 261, 563, 263, 1024, 261, 262, 262, 274, 289, 2], "score": -0.27799850702285767, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testNext", "(", ")", "{", "OResult", "result", "=", "mock", "(", "OResult", ".", "class", ")", ";", "when", "(", "result", ".", "next", "(", ")", ")", ".", "thenReturn", "(", "new", "OResultInternal", "(", ")", ")", ";", "assertNotNull", "(", "result", ".", "next", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 2134, 1305, 261, 262, 288, 531, 1253, 1024, 273, 563, 263, 1024, 261, 262, 274, 5452, 263, 25395, 261, 1024, 262, 274, 289, 2], "score": -0.29939016699790955, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testNextMethod", "(", ")", "{", "OResult", "next", "=", "result", ".", "next", "(", ")", ";", "Assert", ".", "assertNotNull", "(", "next", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1396, 3802, 620, 694, 261, 262, 288, 342, 342, 10371, 726, 514, 2658, 273, 315, 7766, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 1272, 273, 4003, 263, 31318, 261, 315, 7766, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 1272, 263, 26723, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 342, 342, 4603, 514, 1679, 620, 273, 1272, 263, 12736, 261, 315, 498, 315, 262, 274, 342, 342, 5452, 1815, 8867, 261, 315, 460, 315, 269, 1679, 620, 262, 274, 289, 2], "score": -0.29995080828666687, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testPropertyCustomValueSet", "(", ")", "{", "/", "/", "Arrange", "String", "className", "=", "\"", "TestClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "property", "=", "clazz", ".", "createProperty", "(", "\"", "TestProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "property", ".", "setCustom", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "/", "/", "Act", "String", "customValue", "=", "property", ".", "getCustom", "(", "\"", "key", "\"", ")", ";", "/", "/", "Assert", "assertEquals", "(", "\"", "value", "\"", ",", "customValue", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 79.92975447228272, "bleu-max": 79.92975447228272, "bleu-min": 22.95407032205458, "bleu-avg": 44.067180999344075, "code-bleu": 63.280597113554016, "code-bleu-max": 63.280597113554016, "code-bleu-min": 7.39336712306709, "code-bleu-avg": 31.095002135037856, "edit-sim": 87, "edit-sim-max": 87, "edit-sim-min": 63, "edit-sim-avg": 74.1, "rouge-p": 90.0, "rouge-p-max": 90.0, "rouge-p-min": 70.0, "rouge-p-avg": 77.7063492063492, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 55.55555555555556, "rouge-r-avg": 74.44444444444444, "rouge-f": 94.73684160664821, "rouge-f-max": 94.73684160664821, "rouge-f-min": 62.49999950781252, "rouge-f-avg": 75.6299444636841, "num-seq": 10}, "time": 0.7923409938812256, "misc": {}}
{"id": 139, "data_id": "csn-98610", "input_stids": [1, 32315, 411, 399, 405, 399, 3911, 261, 514, 508, 262, 274, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 531, 1396, 531, 13198, 514, 531, 1253, 32315, 32315, 612, 273, 563, 263, 3911, 261, 315, 3902, 6, 262, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 3902, 6, 397, 2658, 397, 315, 3902, 6, 262, 274, 1172, 3210, 5365, 261, 446, 269, 563, 262, 274, 1033, 14794, 273, 2270, 263, 12736, 261, 315, 3902, 6, 262, 274, 5452, 263, 25395, 261, 563, 262, 274, 5452, 263, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 531, 1253, 1024, 273, 563, 263, 1024, 261, 262, 274, 5452, 263, 25395, 261, 1024, 262, 274, 5452, 263, 1815, 8867, 261, 315, 3902, 6, 269, 1024, 263, 3911, 261, 315, 3902, 6, 262, 262, 274, 2], "topk": [{"tids": [1, 4554, 848, 16499, 326, 1842, 3021, 635, 7155, 310, 603, 326, 2922, 14176, 1846, 14302, 358, 1842, 263, 13743, 296, 272, 279, 9330, 264, 471, 1898, 2657, 1842, 364, 326, 707, 1375, 26723, 1375, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 11474, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 11474, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 11474, 653, 315, 269, 315, 11474, 620, 315, 262, 274, 514, 14794, 273, 2270, 263, 12736, 261, 315, 11474, 653, 315, 262, 274, 5452, 263, 1815, 8867, 261, 315, 11474, 620, 315, 269, 14794, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.07724635303020477, "weight": 1, "toks": ["<s>", "You", "can", "simplify", "the", "test", "statement", "by", "focusing", "on", "the", "core", "functionality", "you", "wish", "to", "test", ".", "Here", "'", "s", "a", "simpler", "and", "more", "direct", "test", "for", "the", "method", "`", "setCustom", "`", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "SampleClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "SampleProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "SampleKey", "\"", ",", "\"", "SampleValue", "\"", ")", ";", "String", "currentValue", "=", "prop", ".", "getCustom", "(", "\"", "SampleKey", "\"", ")", ";", "Assert", ".", "assertEquals", "(", "\"", "SampleValue", "\"", ",", "currentValue", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1396, 261, 262, 288, 514, 2665, 273, 315, 7128, 315, 274, 514, 5470, 273, 315, 7128, 315, 274, 531, 1253, 5416, 1253, 273, 7867, 11250, 263, 5416, 261, 531, 1253, 263, 667, 262, 274, 7867, 11250, 263, 1347, 261, 5416, 1253, 263, 3911, 261, 5470, 262, 262, 263, 1508, 990, 261, 2665, 262, 274, 514, 3214, 273, 5416, 1253, 263, 3911, 261, 5470, 262, 274, 5452, 263, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 289, 2], "score": -0.09585937112569809, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProperty", "(", ")", "{", "String", "expected", "=", "\"", "STR", "\"", ";", "String", "propertyName", "=", "\"", "STR", "\"", ";", "OResult", "mockResult", "=", "Mockito", ".", "mock", "(", "OResult", ".", "class", ")", ";", "Mockito", ".", "when", "(", "mockResult", ".", "getProperty", "(", "propertyName", ")", ")", ".", "thenReturn", "(", "expected", ")", ";", "String", "actual", "=", "mockResult", ".", "getProperty", "(", "propertyName", ")", ";", "Assert", ".", "assertEquals", "(", "expected", ",", "actual", ")", ";", "}", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 315, 7128, 315, 269, 14794, 262, 274, 2], "score": -0.2038772702217102, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "\"", "STR", "\"", ",", "currentValue", ")", ";", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 12736, 1375, 707, 603, 326, 1375, 531, 1396, 1375, 667, 269, 326, 1842, 1846, 2112, 1678, 731, 279, 2063, 471, 279, 667, 1963, 269, 3414, 279, 1272, 269, 22698, 279, 1679, 1566, 358, 518, 269, 471, 4271, 22613, 263, 1021, 20570, 784, 1842, 17504, 364, 1375, 12736, 1375, 21195, 1410, 3387, 716, 326, 1272, 8783, 9064, 471, 9023, 1679, 1677, 2887, 29876, 6282, 640, 9243, 18699, 1961, 263, 13743, 296, 272, 392, 16413, 1842, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 3802, 261, 262, 288, 342, 342, 10939, 514, 2658, 273, 315, 7766, 797, 315, 274, 514, 5470, 273, 315, 7766, 4658, 315, 274, 514, 1679, 653, 273, 315, 1679, 653, 315, 274, 514, 1679, 620, 273, 315, 1679, 620, 315, 274, 342, 342, 21837, 667, 471, 1272, 3470, 2063, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 5470, 269, 531, 559, 263, 9469, 262, 274, 342, 342, 13274, 471, 8742, 1679, 1272, 2270, 263, 26723, 261, 1679, 653, 269, 1679, 620, 262, 274, 514, 10295, 620, 273, 2270, 263, 12736, 261, 1679, 653, 262, 274, 342, 342, 5452, 1115, 5452, 263, 1815, 8867, 261, 315, 6082, 1272, 460, 10295, 1552, 486, 845, 326, 2665, 460, 263, 315, 269, 1679, 620, 269, 10295, 620, 262, 274, 289, 1375, 1375, 1375, 1220, 707, 7155, 281, 5122, 603, 7769, 326, 1375, 26723, 1375, 471, 1375, 12736, 1375, 18699, 1961, 269, 302, 4758, 701, 1776, 716, 1375, 12736, 1375, 9023, 326, 5565, 460, 716, 1703, 444, 635, 1375, 26723, 1375, 263, 1220, 20186, 3324, 326, 17683, 434, 16249, 1776, 471, 7769, 326, 14176, 598, 16745, 3903, 23877, 263, 2], "score": -0.25016435980796814, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "getCustom", "`", "method", "on", "the", "`", "OProperty", "`", "class", ",", "the", "test", "you", "provided", "sets", "up", "a", "database", "and", "a", "class", "schema", ",", "creates", "a", "property", ",", "assigns", "a", "custom", "attribute", "to", "it", ",", "and", "checks", "retrieval", ".", "The", "concise", "test", "approach", "for", "`", "getCustom", "`", "specifically", "should", "ensure", "that", "the", "property", "correctly", "stores", "and", "retrieves", "custom", "attributes", "without", "involving", "unrelated", "functionalities", ".", "Here", "'", "s", "an", "optimal", "test", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetCustom", "(", ")", "{", "/", "/", "Setup", "String", "className", "=", "\"", "TestClass", "\"", ";", "String", "propertyName", "=", "\"", "TestProp", "\"", ";", "String", "customKey", "=", "\"", "customKey", "\"", ";", "String", "customValue", "=", "\"", "customValue", "\"", ";", "/", "/", "Creating", "class", "and", "property", "within", "database", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "propertyName", ",", "OType", ".", "STRING", ")", ";", "/", "/", "Setting", "and", "getting", "custom", "property", "prop", ".", "setCustom", "(", "customKey", ",", "customValue", ")", ";", "String", "retrievedValue", "=", "prop", ".", "getCustom", "(", "customKey", ")", ";", "/", "/", "Assertions", "Assert", ".", "assertEquals", "(", "\"", "Custom", "property", "value", "retrieved", "does", "not", "match", "the", "expected", "value", ".", "\"", ",", "customValue", ",", "retrievedValue", ")", ";", "}", "`", "`", "`", "This", "method", "focuses", "directly", "on", "testing", "the", "`", "setCustom", "`", "and", "`", "getCustom", "`", "functionalities", ",", "demonstrating", "that", "`", "getCustom", "`", "retrieves", "the", "exact", "value", "that", "was", "set", "by", "`", "setCustom", "`", ".", "This", "achieves", "the", "goal", "of", "isolating", "and", "testing", "the", "functionality", "with", "minimal", "external", "interactions", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1396, 261, 262, 288, 514, 30844, 273, 315, 460, 315, 274, 531, 1253, 5416, 1253, 273, 5416, 261, 531, 1253, 263, 667, 262, 274, 1347, 261, 5416, 1253, 263, 3911, 261, 315, 498, 315, 262, 262, 263, 1508, 990, 261, 30844, 262, 274, 514, 3214, 620, 273, 5416, 1253, 263, 3911, 261, 315, 498, 315, 262, 274, 1815, 8867, 261, 30844, 269, 3214, 620, 262, 274, 289, 2], "score": -0.29156923294067383, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProperty", "(", ")", "{", "String", "expectedValue", "=", "\"", "value", "\"", ";", "OResult", "mockResult", "=", "mock", "(", "OResult", ".", "class", ")", ";", "when", "(", "mockResult", ".", "getProperty", "(", "\"", "key", "\"", ")", ")", ".", "thenReturn", "(", "expectedValue", ")", ";", "String", "actualValue", "=", "mockResult", ".", "getProperty", "(", "\"", "key", "\"", ")", ";", "assertEquals", "(", "expectedValue", ",", "actualValue", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 1842, 707, 1375, 1842, 694, 3802, 261, 262, 1375, 23500, 4271, 326, 14176, 434, 3637, 471, 17146, 279, 1679, 1272, 3470, 392, 1375, 531, 1396, 1375, 733, 316, 279, 2063, 1963, 263, 1021, 1842, 17874, 635, 4979, 279, 667, 316, 326, 2063, 1963, 269, 6534, 279, 1272, 358, 716, 667, 269, 471, 3637, 279, 1679, 1566, 364, 716, 1272, 263, 2597, 1508, 11997, 279, 2063, 1296, 269, 9023, 326, 563, 269, 471, 26124, 716, 326, 563, 353, 486, 446, 471, 1914, 326, 2665, 501, 2511, 603, 326, 1679, 1272, 444, 13805, 263, 1021, 999, 434, 7820, 11932, 716, 3937, 326, 3637, 471, 22613, 1791, 28757, 1440, 487, 2665, 263, 2], "score": -0.29812324047088623, "weight": 1, "toks": ["<s>", "The", "test", "method", "`", "testSetCustom", "(", ")", "`", "effectively", "checks", "the", "functionality", "of", "setting", "and", "retrieving", "a", "custom", "property", "within", "an", "`", "OProperty", "`", "object", "in", "a", "database", "schema", ".", "The", "test", "begins", "by", "creating", "a", "class", "in", "the", "database", "schema", ",", "adding", "a", "property", "to", "that", "class", ",", "and", "setting", "a", "custom", "attribute", "for", "that", "property", ".", "It", "then", "executes", "a", "database", "command", ",", "retrieves", "the", "result", ",", "and", "asserts", "that", "the", "result", "is", "not", "null", "and", "contains", "the", "expected", "data", "based", "on", "the", "custom", "property", "set", "earlier", ".", "The", "use", "of", "assertions", "ensures", "that", "both", "the", "setting", "and", "retrieval", "mechanisms", "work", "as", "expected", ".", "</s>"]}, {"tids": [1, 14373, 1375, 2270, 263, 12736, 261, 315, 7128, 315, 262, 1375, 471, 1815, 326, 2106, 460, 263, 2], "score": -0.31106171011924744, "weight": 1, "toks": ["<s>", "Invoke", "`", "prop", ".", "getCustom", "(", "\"", "STR", "\"", ")", "`", "and", "assert", "the", "returned", "value", ".", "</s>"]}, {"tids": [1, 1021, 1842, 694, 3802, 261, 262, 707, 7434, 3637, 279, 1679, 1272, 434, 392, 531, 1396, 471, 17146, 518, 1450, 531, 13198, 263, 2], "score": -0.31763437390327454, "weight": 1, "toks": ["<s>", "The", "testSetCustom", "(", ")", "method", "tests", "setting", "a", "custom", "property", "of", "an", "OProperty", "and", "retrieving", "it", "using", "OResultSet", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1396, 261, 262, 288, 514, 2665, 273, 315, 460, 315, 274, 531, 1253, 563, 273, 5416, 261, 531, 1253, 263, 667, 262, 274, 1347, 261, 563, 263, 3911, 261, 315, 498, 315, 262, 262, 263, 1508, 990, 261, 2665, 262, 274, 514, 3214, 273, 563, 263, 3911, 261, 315, 498, 315, 262, 274, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 289, 2], "score": -0.32260414958000183, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProperty", "(", ")", "{", "String", "expected", "=", "\"", "value", "\"", ";", "OResult", "result", "=", "mock", "(", "OResult", ".", "class", ")", ";", "when", "(", "result", ".", "getProperty", "(", "\"", "key", "\"", ")", ")", ".", "thenReturn", "(", "expected", ")", ";", "String", "actual", "=", "result", ".", "getProperty", "(", "\"", "key", "\"", ")", ";", "assertEquals", "(", "expected", ",", "actual", ")", ";", "}", "</s>"]}, {"tids": [1, 1220, 1842, 648, 279, 12097, 358, 3929, 326, 14176, 434, 3637, 471, 8742, 279, 1679, 1272, 316, 279, 2063, 733, 1963, 3470, 392, 531, 10977, 2290, 2063, 263, 2597, 4692, 804, 2802, 5617, 358, 3875, 471, 268, 2091, 2588, 326, 2063, 1865, 471, 1839, 777, 7434, 854, 1086, 263, 1021, 1842, 261, 1375, 1842, 694, 3802, 1375, 262, 29876, 3324, 294, 404, 263, 21837, 279, 394, 667, 316, 326, 2063, 1963, 263, 576, 263, 21240, 279, 1272, 358, 333, 667, 471, 3637, 279, 1679, 1566, 603, 333, 1272, 263, 890, 263, 3889, 8490, 279, 2063, 1296, 471, 6728, 326, 2106, 563, 263, 1059, 263, 5452, 310, 716, 326, 1679, 1566, 296, 272, 460, 353, 10295, 8783, 263, 1021, 1842, 353, 19788, 358, 3387, 716, 326, 14176, 6330, 487, 2665, 471, 716, 1915, 854, 1158, 1334, 4982, 326, 22613, 434, 326, 1679, 1566, 444, 603, 326, 2063, 1272, 263, 2], "score": -0.3332368731498718, "weight": 1, "toks": ["<s>", "This", "test", "case", "aims", "to", "verify", "the", "functionality", "of", "setting", "and", "getting", "a", "custom", "property", "in", "a", "database", "object", "schema", "within", "an", "OrientDB", "database", ".", "It", "uses", "JUnit", "annotations", "to", "setup", "and", "tear", "down", "the", "database", "before", "and", "after", "all", "tests", "are", "run", ".", "The", "test", "(", "`", "testSetCustom", "`", ")", "involves", ":", "1", ".", "Creating", "a", "new", "class", "in", "the", "database", "schema", ".", "2", ".", "Adding", "a", "property", "to", "this", "class", "and", "setting", "a", "custom", "attribute", "on", "this", "property", ".", "3", ".", "Executing", "a", "database", "command", "and", "checking", "the", "returned", "result", ".", "4", ".", "Asserting", "that", "the", "custom", "attribute", "'", "s", "value", "is", "retrieved", "correctly", ".", "The", "test", "is", "structured", "to", "ensure", "that", "the", "functionality", "works", "as", "expected", "and", "that", "there", "are", "no", "errors", "during", "the", "retrieval", "of", "the", "custom", "attribute", "set", "on", "the", "database", "property", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 14.987863873088369, "bleu-avg": 30.546935687094653, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 4.514743315560499, "code-bleu-avg": 19.048237070107135, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 46, "edit-sim-avg": 64.5, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 65.7063492063492, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 50.0, "rouge-r-avg": 70.0, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 49.99999950000001, "rouge-f-avg": 67.51307139789415, "num-seq": 10}, "time": 0.8105714321136475, "misc": {}}
{"id": 140, "data_id": "csn-98610", "input_stids": [1, 32315, 411, 399, 405, 399, 3911, 261, 514, 508, 262, 274, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 531, 1396, 531, 13198, 514, 531, 1253, 32315, 32315, 612, 273, 563, 263, 3911, 261, 315, 3902, 6, 262, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 3902, 6, 397, 2658, 397, 315, 3902, 6, 262, 274, 1172, 3210, 5365, 261, 446, 269, 563, 262, 274, 1033, 14794, 273, 2270, 263, 12736, 261, 315, 3902, 6, 262, 274, 5452, 263, 25395, 261, 563, 262, 274, 5452, 263, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 531, 1253, 1024, 273, 563, 263, 1024, 261, 262, 274, 5452, 263, 25395, 261, 1024, 262, 274, 5452, 263, 1815, 8867, 261, 315, 3902, 6, 269, 1024, 263, 3911, 261, 315, 3902, 6, 262, 262, 274, 5452, 263, 1815, 8867, 261, 315, 3902, 6, 269, 14794, 262, 274, 2], "topk": [{"tids": [1, 5452, 263, 1815, 8867, 261, 315, 7128, 315, 269, 14794, 262, 274, 2], "score": -0.1862204670906067, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "\"", "STR", "\"", ",", "currentValue", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1396, 261, 262, 288, 514, 30844, 273, 315, 460, 315, 274, 531, 1253, 5416, 1253, 273, 7867, 11250, 263, 5416, 261, 531, 1253, 263, 667, 262, 274, 7867, 11250, 263, 1347, 261, 5416, 1253, 263, 3911, 261, 315, 7128, 315, 262, 262, 263, 1508, 990, 261, 30844, 262, 274, 514, 3214, 620, 273, 5416, 1253, 263, 3911, 261, 315, 7128, 315, 262, 274, 5452, 263, 1815, 8867, 261, 30844, 269, 3214, 620, 262, 274, 289, 2], "score": -0.19076690077781677, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProperty", "(", ")", "{", "String", "expectedValue", "=", "\"", "value", "\"", ";", "OResult", "mockResult", "=", "Mockito", ".", "mock", "(", "OResult", ".", "class", ")", ";", "Mockito", ".", "when", "(", "mockResult", ".", "getProperty", "(", "\"", "STR", "\"", ")", ")", ".", "thenReturn", "(", "expectedValue", ")", ";", "String", "actualValue", "=", "mockResult", ".", "getProperty", "(", "\"", "STR", "\"", ")", ";", "Assert", ".", "assertEquals", "(", "expectedValue", ",", "actualValue", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1396, 261, 262, 288, 514, 612, 273, 563, 263, 3911, 261, 315, 7128, 315, 262, 274, 5452, 263, 1815, 8867, 261, 315, 7128, 315, 269, 612, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2735360860824585, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetProperty", "(", ")", "{", "String", "id", "=", "result", ".", "getProperty", "(", "\"", "STR", "\"", ")", ";", "Assert", ".", "assertEquals", "(", "\"", "STR", "\"", ",", "id", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 12736, 1375, 707, 434, 326, 1375, 531, 1396, 1375, 667, 269, 1846, 848, 16499, 3433, 1842, 648, 635, 7155, 310, 21195, 603, 326, 1272, 296, 272, 6885, 2887, 15387, 19908, 5295, 578, 5057, 3229, 18699, 1961, 622, 3647, 263, 13743, 225, 163, 227, 252, 272, 392, 15411, 471, 20570, 784, 1177, 434, 279, 1842, 707, 364, 1375, 12736, 1375, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 3802, 261, 262, 288, 342, 342, 10939, 531, 4254, 2157, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3778, 294, 1842, 2290, 315, 262, 274, 1319, 263, 752, 261, 262, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 7766, 797, 315, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 7766, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 1679, 653, 315, 269, 315, 1679, 620, 315, 262, 274, 342, 342, 8687, 514, 1679, 620, 273, 2270, 263, 12736, 261, 315, 1679, 653, 315, 262, 274, 342, 342, 5452, 5452, 263, 1815, 8867, 261, 315, 1679, 620, 315, 269, 1679, 620, 262, 274, 342, 342, 19968, 1319, 263, 3640, 261, 262, 274, 1319, 263, 1746, 261, 262, 274, 289, 1375, 1375, 1375, 468, 468, 468, 1312, 15854, 294, 300, 380, 380, 10939, 380, 380, 294, 10188, 3128, 326, 316, 300, 3778, 2063, 471, 1963, 269, 1508, 3414, 279, 667, 598, 279, 1272, 471, 1678, 279, 1679, 1566, 364, 716, 1272, 263, 300, 380, 380, 8687, 380, 380, 294, 20507, 326, 460, 434, 326, 1679, 1566, 1450, 326, 707, 1375, 12736, 1375, 263, 300, 380, 380, 5452, 380, 380, 294, 13074, 309, 326, 10295, 460, 1885, 326, 2665, 533, 263, 300, 380, 380, 19968, 380, 380, 294, 463, 16703, 326, 2063, 471, 13445, 326, 1459, 358, 2721, 731, 2703, 263, 1220, 15411, 1842, 353, 22397, 23457, 603, 18075, 326, 14176, 434, 1375, 12736, 1375, 269, 24831, 716, 518, 8783, 17675, 326, 1679, 1272, 460, 263, 2], "score": -0.2823442220687866, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "getCustom", "`", "method", "of", "the", "`", "OProperty", "`", "class", ",", "you", "can", "simplify", "your", "test", "case", "by", "focusing", "specifically", "on", "the", "property", "'", "s", "behavior", "without", "invoking", "unnecessary", "operations", "or", "handling", "multiple", "functionalities", "at", "once", ".", "Here", "\u2019", "s", "an", "optimized", "and", "concise", "version", "of", "a", "test", "method", "for", "`", "getCustom", "`", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetCustom", "(", ")", "{", "/", "/", "Setup", "ODatabaseSession", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "memory", ":", "testDB", "\"", ")", ";", "db", ".", "create", "(", ")", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "TestClass", "\"", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "TestProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "\"", "customKey", "\"", ",", "\"", "customValue", "\"", ")", ";", "/", "/", "Execution", "String", "customValue", "=", "prop", ".", "getCustom", "(", "\"", "customKey", "\"", ")", ";", "/", "/", "Assert", "Assert", ".", "assertEquals", "(", "\"", "customValue", "\"", ",", "customValue", ")", ";", "/", "/", "Cleanup", "db", ".", "drop", "(", ")", ";", "db", ".", "close", "(", ")", ";", "}", "`", "`", "`", "#", "#", "#", "Explanation", ":", "-", "*", "*", "Setup", "*", "*", ":", "Initializes", "the", "in", "-", "memory", "database", "and", "schema", ",", "then", "creates", "a", "class", "with", "a", "property", "and", "sets", "a", "custom", "attribute", "for", "that", "property", ".", "-", "*", "*", "Execution", "*", "*", ":", "Retrieves", "the", "value", "of", "the", "custom", "attribute", "using", "the", "method", "`", "getCustom", "`", ".", "-", "*", "*", "Assert", "*", "*", ":", "Checks", "if", "the", "retrieved", "value", "matches", "the", "expected", "string", ".", "-", "*", "*", "Cleanup", "*", "*", ":", "Drops", "the", "database", "and", "closes", "the", "connection", "to", "clean", "up", "resources", ".", "This", "optimized", "test", "is", "focused", "strictly", "on", "validating", "the", "functionality", "of", "`", "getCustom", "`", ",", "ensuring", "that", "it", "correctly", "fetches", "the", "custom", "property", "value", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1396, 261, 262, 288, 514, 460, 273, 733, 14655, 4709, 263, 3911, 261, 315, 508, 315, 262, 274, 25395, 261, 460, 262, 274, 289, 2], "score": -0.30384865403175354, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProperty", "(", ")", "{", "String", "value", "=", "objectUnderTest", ".", "getProperty", "(", "\"", "name", "\"", ")", ";", "assertNotNull", "(", "value", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 707, 3613, 1842, 316, 333, 819, 353, 1375, 26723, 1375, 434, 326, 1375, 531, 1396, 1375, 667, 263, 1021, 20579, 3323, 1842, 358, 5956, 2097, 14176, 29876, 3324, 3637, 279, 1679, 1566, 471, 1508, 17146, 518, 358, 3929, 716, 518, 711, 2118, 444, 8783, 263, 1220, 353, 23500, 20186, 2155, 3059, 326, 3751, 6317, 3470, 326, 1375, 1842, 694, 3802, 261, 262, 1375, 707, 294, 1375, 1375, 1375, 2252, 2270, 263, 26723, 261, 315, 498, 315, 269, 315, 460, 315, 262, 274, 514, 14794, 273, 2270, 263, 12736, 261, 315, 498, 315, 262, 274, 5452, 263, 1815, 8867, 261, 315, 460, 315, 269, 14794, 262, 274, 1375, 1375, 1375, 1220, 981, 1678, 279, 1679, 1566, 1375, 498, 1375, 598, 326, 460, 1375, 460, 1375, 471, 1508, 9023, 518, 358, 3387, 518, 711, 2118, 4041, 8783, 263, 1021, 999, 434, 1375, 5452, 263, 1815, 8867, 1375, 4271, 716, 326, 10295, 460, 1885, 326, 2665, 876, 269, 1915, 1637, 18075, 326, 14176, 434, 1375, 26723, 1375, 263, 2], "score": -0.3461701571941376, "weight": 1, "toks": ["<s>", "The", "method", "under", "test", "in", "this", "context", "is", "`", "setCustom", "`", "of", "the", "`", "OProperty", "`", "class", ".", "The", "shortest", "possible", "test", "to", "evaluate", "its", "functionality", "involves", "setting", "a", "custom", "attribute", "and", "then", "retrieving", "it", "to", "verify", "that", "it", "has", "been", "set", "correctly", ".", "This", "is", "effectively", "achieved", "through", "the", "following", "statements", "within", "the", "`", "testSetCustom", "(", ")", "`", "method", ":", "`", "`", "`", "java", "prop", ".", "setCustom", "(", "\"", "key", "\"", ",", "\"", "value", "\"", ")", ";", "String", "currentValue", "=", "prop", ".", "getCustom", "(", "\"", "key", "\"", ")", ";", "Assert", ".", "assertEquals", "(", "\"", "value", "\"", ",", "currentValue", ")", ";", "`", "`", "`", "This", "code", "sets", "a", "custom", "attribute", "`", "key", "`", "with", "the", "value", "`", "value", "`", "and", "then", "retrieves", "it", "to", "ensure", "it", "has", "been", "stored", "correctly", ".", "The", "use", "of", "`", "Assert", ".", "assertEquals", "`", "checks", "that", "the", "retrieved", "value", "matches", "the", "expected", "output", ",", "thereby", "validating", "the", "functionality", "of", "`", "setCustom", "`", ".", "</s>"]}, {"tids": [1, 5452, 263, 25395, 261, 2270, 262, 274, 2], "score": -0.3807717263698578, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "prop", ")", ";", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 26723, 1375, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 1679, 653, 273, 315, 1679, 653, 315, 274, 514, 1679, 620, 273, 315, 1679, 620, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 315, 11474, 797, 315, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 11474, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 1679, 653, 269, 1679, 620, 262, 274, 514, 10295, 620, 273, 2270, 263, 12736, 261, 1679, 653, 262, 274, 5452, 263, 1815, 8867, 261, 1679, 620, 269, 10295, 620, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.38826972246170044, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "setCustom", "`", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "customKey", "=", "\"", "customKey", "\"", ";", "String", "customValue", "=", "\"", "customValue", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "\"", "SampleClass", "\"", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "\"", "SampleProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "prop", ".", "setCustom", "(", "customKey", ",", "customValue", ")", ";", "String", "retrievedValue", "=", "prop", ".", "getCustom", "(", "customKey", ")", ";", "Assert", ".", "assertEquals", "(", "customValue", ",", "retrievedValue", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 315, 7128, 315, 269, 14794, 262, 274, 2], "score": -0.3934967815876007, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "\"", "STR", "\"", ",", "currentValue", ")", ";", "</s>"]}, {"tids": [1, 5452, 263, 1815, 8867, 261, 315, 7128, 315, 269, 14794, 262, 274, 2], "score": -0.3955669403076172, "weight": 1, "toks": ["<s>", "Assert", ".", "assertEquals", "(", "\"", "STR", "\"", ",", "currentValue", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 15.76001328943383, "bleu-max": 79.92975447228272, "bleu-min": 15.606147219382347, "bleu-avg": 29.691284938857073, "code-bleu": 3.3403306729132884, "code-bleu-max": 63.280597113554016, "code-bleu-min": 3.1630634477718376, "code-bleu-avg": 16.41305121389564, "edit-sim": 37, "edit-sim-max": 87, "edit-sim-min": 36, "edit-sim-avg": 56.2, "rouge-p": 50.0, "rouge-p-max": 100.0, "rouge-p-min": 50.0, "rouge-p-avg": 67.26984126984127, "rouge-r": 40.0, "rouge-r-max": 90.0, "rouge-r-min": 40.0, "rouge-r-avg": 55.0, "rouge-f": 44.44444395061729, "rouge-f-max": 94.73684160664821, "rouge-f-min": 44.44444395061729, "rouge-f-avg": 60.24664553457175, "num-seq": 10}, "time": 0.866276741027832, "misc": {}}
{"id": 141, "data_id": "csn-98610", "input_stids": [1, 32315, 411, 399, 405, 399, 3911, 261, 514, 508, 262, 274, 32315, 531, 18144, 1396, 3406, 3210, 4709, 514, 531, 797, 531, 1396, 531, 13198, 514, 531, 1253, 32315, 32315, 612, 273, 563, 263, 3911, 261, 315, 3902, 6, 262, 274, 32315, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3902, 6, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 1746, 261, 262, 274, 289, 32315, 1071, 514, 12736, 261, 727, 514, 277, 461, 262, 274, 32315, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 32315, 514, 2658, 273, 315, 3902, 6, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 315, 3902, 6, 269, 531, 559, 263, 9469, 262, 274, 2270, 263, 26723, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 531, 13198, 563, 273, 1319, 263, 1296, 261, 315, 3902, 6, 397, 2658, 397, 315, 3902, 6, 262, 274, 1172, 3210, 5365, 261, 446, 269, 563, 262, 274, 1033, 14794, 273, 2270, 263, 12736, 261, 315, 3902, 6, 262, 274, 5452, 263, 25395, 261, 563, 262, 274, 5452, 263, 1815, 5510, 261, 563, 263, 4564, 261, 262, 262, 274, 531, 1253, 1024, 273, 563, 263, 1024, 261, 262, 274, 5452, 263, 25395, 261, 1024, 262, 274, 5452, 263, 1815, 8867, 261, 315, 3902, 6, 269, 1024, 263, 3911, 261, 315, 3902, 6, 262, 262, 274, 5452, 263, 1815, 8867, 261, 315, 3902, 6, 269, 14794, 262, 274, 5452, 263, 1815, 8867, 261, 14794, 269, 1024, 263, 3911, 261, 315, 3902, 6, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1396, 261, 262, 288, 514, 2665, 273, 315, 460, 315, 274, 531, 1253, 5416, 1253, 273, 5416, 261, 531, 1253, 263, 667, 262, 274, 1347, 261, 5416, 1253, 263, 3911, 261, 315, 498, 315, 262, 262, 263, 1508, 990, 261, 2665, 262, 274, 514, 3214, 273, 5416, 1253, 263, 3911, 261, 315, 498, 315, 262, 274, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 289, 2], "score": -0.05463184788823128, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProperty", "(", ")", "{", "String", "expected", "=", "\"", "value", "\"", ";", "OResult", "mockResult", "=", "mock", "(", "OResult", ".", "class", ")", ";", "when", "(", "mockResult", ".", "getProperty", "(", "\"", "key", "\"", ")", ")", ".", "thenReturn", "(", "expected", ")", ";", "String", "actual", "=", "mockResult", ".", "getProperty", "(", "\"", "key", "\"", ")", ";", "assertEquals", "(", "expected", ",", "actual", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 531, 1396, 263, 26723, 1375, 707, 23500, 269, 326, 1842, 648, 4260, 358, 752, 279, 20886, 1625, 279, 1272, 434, 392, 531, 797, 733, 353, 4358, 635, 3637, 279, 1679, 1566, 471, 1508, 3929, 310, 716, 326, 1566, 353, 444, 8783, 263, 13743, 296, 272, 279, 25994, 329, 1177, 434, 3661, 4123, 279, 1842, 648, 3377, 2324, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 3802, 261, 262, 288, 514, 2658, 273, 315, 7766, 797, 315, 274, 514, 9994, 273, 315, 7766, 4658, 315, 274, 514, 1679, 653, 273, 315, 1679, 653, 315, 274, 514, 1679, 620, 273, 315, 1679, 620, 315, 274, 342, 342, 1788, 667, 471, 1272, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 2270, 273, 4003, 263, 31318, 261, 9994, 269, 531, 559, 263, 9469, 262, 274, 342, 342, 1000, 1679, 1566, 603, 1272, 2270, 263, 26723, 261, 1679, 653, 269, 1679, 620, 262, 274, 342, 342, 10708, 1679, 1566, 358, 3929, 514, 10295, 620, 273, 2270, 263, 12736, 261, 1679, 653, 262, 274, 342, 342, 5452, 1115, 25395, 261, 10295, 620, 262, 274, 1815, 8867, 261, 1679, 620, 269, 10295, 620, 262, 274, 289, 1375, 1375, 1375, 657, 333, 1842, 648, 294, 300, 432, 394, 667, 471, 1272, 854, 2522, 263, 300, 1021, 1375, 26723, 1375, 707, 353, 1399, 358, 444, 279, 1679, 498, 300, 460, 3082, 263, 300, 1021, 460, 353, 1508, 10295, 1450, 1375, 12736, 1375, 471, 13808, 1450, 7820, 263, 1220, 1842, 4271, 3937, 326, 3637, 471, 8742, 434, 1679, 1790, 603, 531, 797, 1790, 269, 24831, 716, 326, 14176, 6330, 487, 2665, 263, 2], "score": -0.19113369286060333, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "OProperty", ".", "setCustom", "`", "method", "effectively", ",", "the", "test", "case", "needs", "to", "create", "a", "situation", "where", "a", "property", "of", "an", "OClass", "object", "is", "modified", "by", "setting", "a", "custom", "attribute", "and", "then", "verifying", "that", "the", "attribute", "is", "set", "correctly", ".", "Here", "'", "s", "a", "refined", "version", "of", "how", "such", "a", "test", "case", "could", "look", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetCustom", "(", ")", "{", "String", "className", "=", "\"", "TestClass", "\"", ";", "String", "propName", "=", "\"", "TestProp", "\"", ";", "String", "customKey", "=", "\"", "customKey", "\"", ";", "String", "customValue", "=", "\"", "customValue", "\"", ";", "/", "/", "Create", "class", "and", "property", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "prop", "=", "clazz", ".", "createProperty", "(", "propName", ",", "OType", ".", "STRING", ")", ";", "/", "/", "Set", "custom", "attribute", "on", "property", "prop", ".", "setCustom", "(", "customKey", ",", "customValue", ")", ";", "/", "/", "Retrieve", "custom", "attribute", "to", "verify", "String", "retrievedValue", "=", "prop", ".", "getCustom", "(", "customKey", ")", ";", "/", "/", "Assertions", "assertNotNull", "(", "retrievedValue", ")", ";", "assertEquals", "(", "customValue", ",", "retrievedValue", ")", ";", "}", "`", "`", "`", "In", "this", "test", "case", ":", "-", "A", "new", "class", "and", "property", "are", "created", ".", "-", "The", "`", "setCustom", "`", "method", "is", "used", "to", "set", "a", "custom", "key", "-", "value", "pair", ".", "-", "The", "value", "is", "then", "retrieved", "using", "`", "getCustom", "`", "and", "verified", "using", "assertions", ".", "This", "test", "checks", "both", "the", "setting", "and", "getting", "of", "custom", "properties", "on", "OClass", "properties", ",", "ensuring", "that", "the", "functionality", "works", "as", "expected", ".", "</s>"]}, {"tids": [1, 5452, 263, 25395, 261, 1319, 262, 274, 2], "score": -0.20483936369419098, "weight": 1, "toks": ["<s>", "Assert", ".", "assertNotNull", "(", "db", ")", ";", "</s>"]}, {"tids": [1, 2597, 12001, 3007, 1846, 296, 283, 8374, 358, 3430, 279, 1842, 648, 10766, 1450, 5110, 269, 6826, 715, 364, 279, 667, 716, 16592, 87, 598, 392, 531, 10977, 2290, 2063, 263, 13743, 225, 163, 227, 252, 272, 279, 20570, 784, 3021, 358, 919, 326, 13115, 434, 333, 1842, 294, 1021, 1842, 1375, 1842, 694, 3802, 261, 262, 1375, 20761, 716, 1839, 3637, 279, 1679, 1272, 364, 392, 1375, 531, 1396, 1375, 733, 316, 279, 2063, 269, 326, 1272, 848, 19361, 5173, 4614, 326, 1679, 460, 471, 716, 518, 1885, 326, 460, 4041, 316, 326, 2063, 296, 272, 2106, 563, 444, 263, 2], "score": -0.24779941141605377, "weight": 1, "toks": ["<s>", "It", "seems", "like", "you", "'", "re", "trying", "to", "present", "a", "test", "case", "scenario", "using", "Java", ",", "particularly", "for", "a", "class", "that", "interacts", "with", "an", "OrientDB", "database", ".", "Here", "\u2019", "s", "a", "concise", "statement", "to", "state", "the", "purpose", "of", "this", "test", ":", "The", "test", "`", "testSetCustom", "(", ")", "`", "verifies", "that", "after", "setting", "a", "custom", "property", "for", "an", "`", "OProperty", "`", "object", "in", "a", "database", ",", "the", "property", "can", "accurately", "retrieve", "the", "custom", "value", "and", "that", "it", "matches", "the", "value", "stored", "in", "the", "database", "'", "s", "returned", "result", "set", ".", "</s>"]}, {"tids": [1, 1021, 3021, 8121, 279, 1842, 364, 3637, 471, 17146, 279, 1679, 1272, 316, 279, 2063, 1963, 1450, 531, 10977, 2290, 3318, 471, 2590, 263, 2597, 4271, 326, 14297, 471, 15782, 434, 326, 1272, 316, 3937, 326, 1963, 471, 279, 8156, 843, 4588, 263, 2], "score": -0.2648109197616577, "weight": 1, "toks": ["<s>", "The", "statement", "provides", "a", "test", "for", "setting", "and", "retrieving", "a", "custom", "property", "in", "a", "database", "schema", "using", "OrientDB", "classes", "and", "methods", ".", "It", "checks", "the", "consistency", "and", "existence", "of", "the", "property", "in", "both", "the", "schema", "and", "a", "resulting", "query", "execution", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 1396, 261, 262, 288, 514, 2665, 273, 315, 460, 315, 274, 531, 2519, 997, 273, 394, 531, 2519, 261, 262, 274, 997, 263, 652, 261, 315, 508, 315, 269, 2665, 262, 274, 1815, 8867, 261, 2665, 269, 997, 263, 652, 261, 315, 508, 315, 262, 262, 274, 289, 2], "score": -0.27416324615478516, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetProperty", "(", ")", "{", "String", "expected", "=", "\"", "value", "\"", ";", "ODocument", "doc", "=", "new", "ODocument", "(", ")", ";", "doc", ".", "field", "(", "\"", "name", "\"", ",", "expected", ")", ";", "assertEquals", "(", "expected", ",", "doc", ".", "field", "(", "\"", "name", "\"", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 967, 1396, 261, 262, 288, 514, 30844, 273, 315, 460, 315, 274, 531, 1396, 1272, 273, 394, 531, 1396, 261, 262, 274, 1272, 263, 26723, 261, 315, 498, 315, 269, 30844, 262, 274, 514, 3214, 620, 273, 1272, 263, 12736, 261, 315, 498, 315, 262, 274, 1815, 8867, 261, 30844, 269, 3214, 620, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.28912046551704407, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testGetProperty", "(", ")", "{", "String", "expectedValue", "=", "\"", "value", "\"", ";", "OProperty", "property", "=", "new", "OProperty", "(", ")", ";", "property", ".", "setCustom", "(", "\"", "key", "\"", ",", "expectedValue", ")", ";", "String", "actualValue", "=", "property", ".", "getCustom", "(", "\"", "key", "\"", ")", ";", "assertEquals", "(", "expectedValue", ",", "actualValue", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1000, 731, 3433, 3330, 471, 866, 1790, 598, 333, 20570, 784, 11240, 316, 3433, 1842, 648, 294, 1375, 1375, 1375, 2252, 632, 11672, 797, 1071, 760, 918, 1865, 797, 261, 262, 288, 1319, 273, 394, 531, 4254, 2519, 4188, 261, 315, 3778, 294, 1842, 315, 262, 274, 1319, 263, 752, 261, 262, 274, 289, 632, 7360, 797, 1071, 760, 918, 1839, 797, 261, 262, 288, 1319, 263, 3640, 261, 262, 274, 1319, 263, 1746, 261, 262, 274, 289, 632, 7766, 1071, 918, 1842, 694, 14042, 3802, 1396, 261, 262, 288, 514, 2658, 273, 315, 7766, 797, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 1272, 273, 4003, 263, 31318, 261, 315, 1842, 1396, 315, 269, 531, 559, 263, 9469, 262, 274, 1272, 263, 26723, 261, 315, 1679, 653, 315, 269, 315, 1679, 620, 315, 262, 274, 5452, 263, 1815, 8867, 261, 315, 1679, 620, 315, 269, 1272, 263, 12736, 261, 315, 1679, 653, 315, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.3008924722671509, "weight": 1, "toks": ["<s>", "Set", "up", "your", "environment", "and", "check", "properties", "with", "this", "concise", "assertion", "in", "your", "test", "case", ":", "`", "`", "`", "java", "@", "BeforeClass", "public", "static", "void", "beforeClass", "(", ")", "{", "db", "=", "new", "ODatabaseDocumentTx", "(", "\"", "memory", ":", "test", "\"", ")", ";", "db", ".", "create", "(", ")", ";", "}", "@", "AfterClass", "public", "static", "void", "afterClass", "(", ")", "{", "db", ".", "drop", "(", ")", ";", "db", ".", "close", "(", ")", ";", "}", "@", "Test", "public", "void", "testSetAndGetCustomProperty", "(", ")", "{", "String", "className", "=", "\"", "TestClass", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "property", "=", "clazz", ".", "createProperty", "(", "\"", "testProperty", "\"", ",", "OType", ".", "STRING", ")", ";", "property", ".", "setCustom", "(", "\"", "customKey", "\"", ",", "\"", "customValue", "\"", ")", ";", "Assert", ".", "assertEquals", "(", "\"", "customValue", "\"", ",", "property", ".", "getCustom", "(", "\"", "customKey", "\"", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 26723, 1375, 471, 1375, 12736, 1375, 2590, 434, 1375, 531, 1396, 1375, 667, 18172, 1230, 471, 23500, 269, 1846, 848, 752, 279, 4143, 1842, 707, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 14042, 3802, 1396, 261, 262, 288, 342, 342, 10939, 514, 2658, 273, 315, 7766, 315, 274, 531, 797, 4003, 273, 1319, 263, 11159, 261, 262, 263, 11088, 261, 262, 263, 752, 797, 261, 2658, 262, 274, 531, 1396, 1272, 273, 4003, 263, 31318, 261, 315, 7766, 4658, 315, 269, 531, 559, 263, 9469, 262, 274, 342, 342, 4382, 1272, 263, 26723, 261, 315, 1679, 653, 315, 269, 315, 1679, 620, 315, 262, 274, 342, 342, 9067, 514, 1679, 620, 3848, 2155, 273, 1272, 263, 12736, 261, 315, 1679, 653, 315, 262, 274, 5452, 263, 1815, 8867, 261, 315, 1679, 620, 315, 269, 1679, 620, 3848, 2155, 262, 274, 289, 1375, 1375, 1375, 1220, 2202, 2836, 1842, 20761, 3937, 326, 3637, 471, 8742, 434, 279, 1679, 1272, 603, 392, 1375, 531, 1396, 1375, 791, 269, 24831, 716, 326, 444, 460, 353, 19361, 5173, 10295, 263, 7693, 716, 326, 2063, 3875, 471, 28196, 854, 7681, 316, 3433, 1375, 632, 11672, 1375, 578, 1375, 632, 11672, 797, 1375, 471, 1375, 632, 7360, 1375, 578, 1375, 632, 7360, 797, 1375, 2590, 19629, 364, 2721, 7769, 3330, 263, 2], "score": -0.3521553874015808, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "setCustom", "`", "and", "`", "getCustom", "`", "methods", "of", "`", "OProperty", "`", "class", "minimally", "and", "effectively", ",", "you", "can", "create", "a", "simple", "test", "method", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetAndGetCustomProperty", "(", ")", "{", "/", "/", "Setup", "String", "className", "=", "\"", "Test", "\"", ";", "OClass", "clazz", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "createClass", "(", "className", ")", ";", "OProperty", "property", "=", "clazz", ".", "createProperty", "(", "\"", "TestProp", "\"", ",", "OType", ".", "STRING", ")", ";", "/", "/", "Action", "property", ".", "setCustom", "(", "\"", "customKey", "\"", ",", "\"", "customValue", "\"", ")", ";", "/", "/", "Assertion", "String", "customValueRetrieved", "=", "property", ".", "getCustom", "(", "\"", "customKey", "\"", ")", ";", "Assert", ".", "assertEquals", "(", "\"", "customValue", "\"", ",", "customValueRetrieved", ")", ";", "}", "`", "`", "`", "This", "single", "unit", "test", "verifies", "both", "the", "setting", "and", "getting", "of", "a", "custom", "property", "on", "an", "`", "OProperty", "`", "instance", ",", "ensuring", "that", "the", "set", "value", "is", "accurately", "retrieved", ".", "Ensure", "that", "the", "database", "setup", "and", "teardown", "are", "handled", "in", "your", "`", "@", "Before", "`", "or", "`", "@", "BeforeClass", "`", "and", "`", "@", "After", "`", "or", "`", "@", "AfterClass", "`", "methods", "respectively", "for", "clean", "testing", "environment", ".", "</s>"]}, {"tids": [1, 1021, 1024, 3021, 358, 3796, 1954, 326, 707, 3613, 1842, 23459, 4102, 506, 294, 1375, 1375, 1375, 2252, 1815, 8867, 261, 315, 13219, 1679, 460, 315, 269, 14794, 269, 2270, 263, 12736, 261, 315, 7128, 315, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.38192442059516907, "weight": 1, "toks": ["<s>", "The", "next", "statement", "to", "best", "validate", "the", "method", "under", "test", "quickly", "would", "be", ":", "`", "`", "`", "java", "assertEquals", "(", "\"", "Expected", "custom", "value", "\"", ",", "currentValue", ",", "prop", ".", "getCustom", "(", "\"", "STR", "\"", ")", ")", ";", "`", "`", "`", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 12.718249172769678, "bleu-max": 20.492938431708815, "bleu-min": 10.363232116621422, "bleu-avg": 14.997960426295387, "code-bleu": 4.6196814603821, "code-bleu-max": 22.615677328958327, "code-bleu-min": 4.386565964139243, "code-bleu-avg": 9.247271348665581, "edit-sim": 38, "edit-sim-max": 47, "edit-sim-min": 30, "edit-sim-avg": 39.3, "rouge-p": 33.33333333333333, "rouge-p-max": 42.857142857142854, "rouge-p-min": 27.27272727272727, "rouge-p-avg": 35.63203463203463, "rouge-r": 60.0, "rouge-r-max": 60.0, "rouge-r-min": 60.0, "rouge-r-avg": 60.0, "rouge-f": 42.85714239795918, "rouge-f-max": 49.9999995138889, "rouge-f-min": 37.4999995703125, "rouge-f-avg": 44.49725228290541, "num-seq": 10}, "time": 0.993462085723877, "misc": {}}
{"id": 142, "data_id": "csn-98920", "input_stids": [1, 26969, 3478, 8862, 31356, 498, 6306, 1384, 4407, 2151, 460, 6306, 32315, 32315, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 32315, 5932, 38, 2471, 38, 7008, 10658, 4103, 32315, 32315, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 32315, 2], "topk": [{"tids": [1, 2974, 1842, 326, 1375, 1842, 694, 3910, 10291, 261, 262, 1375, 707, 14382, 715, 269, 3387, 326, 707, 23934, 1375, 1384, 1375, 8783, 471, 4097, 1375, 22862, 4926, 261, 262, 1375, 598, 326, 2665, 1569, 2511, 603, 1375, 9686, 67, 9894, 26789, 67, 11271, 1375, 263, 8553, 716, 326, 707, 1678, 326, 2002, 10841, 4407, 19361, 5173, 316, 326, 2783, 263, 2], "score": -0.1500599980354309, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "testSetLeftSibling", "(", ")", "`", "method", "efficiently", ",", "ensure", "the", "method", "modifies", "`", "offset", "`", "correctly", "and", "calls", "`", "getBucketPointer", "(", ")", "`", "with", "the", "expected", "parameter", "based", "on", "`", "LEFT_SIBLING_OFFSET", "`", ".", "Verify", "that", "the", "method", "sets", "the", "left", "sibling", "pointer", "accurately", "in", "the", "bucket", ".", "</s>"]}, {"tids": [1, 657, 326, 1842, 1375, 1842, 694, 3910, 10291, 1375, 269, 1846, 1410, 3387, 716, 326, 1375, 15930, 10291, 1375, 707, 2255, 815, 8783, 635, 3637, 471, 17146, 326, 2002, 10841, 4407, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 9730, 7008, 10658, 4103, 4926, 2665, 4926, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 576, 262, 274, 2783, 263, 444, 3910, 10291, 261, 2665, 4926, 262, 274, 9730, 7008, 10658, 4103, 4926, 3214, 4926, 273, 2783, 263, 15930, 10291, 261, 262, 274, 1815, 8867, 261, 2665, 4926, 269, 3214, 4926, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.15556640923023224, "weight": 1, "toks": ["<s>", "In", "the", "test", "`", "testSetLeftSibling", "`", ",", "you", "should", "ensure", "that", "the", "`", "getLeftSibling", "`", "method", "operates", "correctly", "by", "setting", "and", "retrieving", "the", "left", "sibling", "pointer", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OBonsaiBucketPointer", "expectedPointer", "=", "new", "OBonsaiBucketPointer", "(", "1", ",", "2", ")", ";", "bucket", ".", "setLeftSibling", "(", "expectedPointer", ")", ";", "OBonsaiBucketPointer", "actualPointer", "=", "bucket", ".", "getLeftSibling", "(", ")", ";", "assertEquals", "(", "expectedPointer", ",", "actualPointer", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 7693, 716, 326, 1842, 364, 1375, 444, 3910, 10291, 261, 262, 1375, 23500, 4271, 326, 707, 296, 272, 7123, 358, 444, 471, 4614, 326, 2002, 10841, 316, 392, 1375, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 1375, 263, 11637, 1375, 15930, 10291, 261, 262, 1375, 358, 1954, 326, 3637, 353, 279, 20570, 784, 17504, 263, 2], "score": -0.24272342026233673, "weight": 1, "toks": ["<s>", "Ensure", "that", "the", "test", "for", "`", "setLeftSibling", "(", ")", "`", "effectively", "checks", "the", "method", "'", "s", "ability", "to", "set", "and", "retrieve", "the", "left", "sibling", "in", "an", "`", "OSBTreeBonsaiLeafBucket", "`", ".", "Using", "`", "getLeftSibling", "(", ")", "`", "to", "validate", "the", "setting", "is", "a", "concise", "approach", ".", "</s>"]}, {"tids": [1, 2974, 286, 280, 4966, 715, 2836, 1842, 326, 1375, 1842, 694, 3910, 10291, 1375, 707, 316, 326, 1375, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 1375, 667, 269, 326, 1842, 1410, 444, 279, 2002, 10841, 1450, 326, 707, 3613, 1842, 471, 1508, 1815, 716, 326, 707, 1375, 15930, 10291, 1375, 9023, 326, 1967, 460, 263, 1220, 11932, 716, 326, 7794, 707, 8783, 1678, 326, 2665, 460, 316, 326, 2619, 263, 13743, 353, 326, 20570, 784, 4995, 364, 326, 1842, 294, 404, 263, 1788, 392, 791, 434, 1375, 5932, 38, 2471, 38, 7008, 10658, 4103, 1375, 263, 576, 263, 1000, 279, 2002, 10841, 1450, 1375, 444, 3910, 10291, 1375, 263, 890, 263, 10708, 326, 2002, 10841, 598, 1375, 15930, 10291, 1375, 263, 1059, 263, 5452, 716, 326, 10295, 2002, 10841, 353, 326, 1967, 487, 326, 1245, 444, 263, 2], "score": -0.2560494840145111, "weight": 1, "toks": ["<s>", "To", "thoroughly", "unit", "test", "the", "`", "testSetLeftSibling", "`", "method", "in", "the", "`", "OSBTreeBonsaiLeafBucketTest", "`", "class", ",", "the", "test", "should", "set", "a", "left", "sibling", "using", "the", "method", "under", "test", "and", "then", "assert", "that", "the", "method", "`", "getLeftSibling", "`", "retrieves", "the", "same", "value", ".", "This", "ensures", "that", "the", "setter", "method", "correctly", "sets", "the", "expected", "value", "in", "the", "system", ".", "Here", "is", "the", "concise", "plan", "for", "the", "test", ":", "1", ".", "Create", "an", "instance", "of", "`", "OSBTreeBonsaiBucket", "`", ".", "2", ".", "Set", "a", "left", "sibling", "using", "`", "setLeftSibling", "`", ".", "3", ".", "Retrieve", "the", "left", "sibling", "with", "`", "getLeftSibling", "`", ".", "4", ".", "Assert", "that", "the", "retrieved", "left", "sibling", "is", "the", "same", "as", "the", "one", "set", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 3910, 10291, 261, 262, 288, 9730, 7008, 10658, 4103, 4926, 2665, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 2593, 269, 13438, 262, 274, 1347, 261, 2783, 263, 22862, 4926, 261, 1281, 1702, 261, 262, 262, 262, 263, 1508, 990, 261, 2665, 262, 274, 9730, 7008, 10658, 4103, 4926, 563, 273, 2783, 263, 15930, 10291, 261, 262, 274, 1815, 8867, 261, 2665, 269, 563, 262, 274, 289, 2], "score": -0.2679469883441925, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetLeftSibling", "(", ")", "{", "OBonsaiBucketPointer", "expected", "=", "new", "OBonsaiBucketPointer", "(", "12", ",", "34", ")", ";", "when", "(", "bucket", ".", "getBucketPointer", "(", "anyInt", "(", ")", ")", ")", ".", "thenReturn", "(", "expected", ")", ";", "OBonsaiBucketPointer", "result", "=", "bucket", ".", "getLeftSibling", "(", ")", ";", "assertEquals", "(", "expected", ",", "result", ")", ";", "}", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 444, 3910, 10291, 1375, 707, 269, 3387, 326, 707, 8783, 4533, 326, 2002, 10841, 4407, 364, 326, 1375, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 1375, 263, 13743, 296, 272, 279, 4143, 1842, 648, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 288, 9730, 7008, 10658, 4103, 4926, 2665, 4926, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 576, 262, 274, 2783, 263, 444, 3910, 10291, 261, 2665, 4926, 262, 274, 9730, 7008, 10658, 4103, 4926, 3214, 4926, 273, 2783, 263, 15930, 10291, 261, 262, 274, 1815, 8867, 261, 2665, 4926, 269, 3214, 4926, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2707102298736572, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "setLeftSibling", "`", "method", ",", "ensure", "the", "method", "correctly", "updates", "the", "left", "sibling", "pointer", "for", "the", "`", "OSBTreeBonsaiLeafBucket", "`", ".", "Here", "'", "s", "a", "simple", "test", "case", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "{", "OBonsaiBucketPointer", "expectedPointer", "=", "new", "OBonsaiBucketPointer", "(", "1", ",", "2", ")", ";", "bucket", ".", "setLeftSibling", "(", "expectedPointer", ")", ";", "OBonsaiBucketPointer", "actualPointer", "=", "bucket", ".", "getLeftSibling", "(", ")", ";", "assertEquals", "(", "expectedPointer", ",", "actualPointer", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 5452, 5962, 261, 15930, 10291, 261, 262, 262, 274, 2], "score": -0.2778497338294983, "weight": 1, "toks": ["<s>", "AssertNotNull", "(", "getLeftSibling", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 3910, 10291, 261, 262, 288, 9730, 7008, 10658, 4103, 4926, 2665, 4926, 273, 5416, 261, 9730, 7008, 10658, 4103, 4926, 263, 667, 262, 274, 1347, 261, 2783, 263, 22862, 4926, 261, 1281, 1702, 261, 262, 262, 262, 263, 1508, 990, 261, 2665, 4926, 262, 274, 1815, 8867, 261, 2665, 4926, 269, 2783, 263, 15930, 10291, 261, 262, 262, 274, 289, 2], "score": -0.2852574586868286, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetLeftSibling", "(", ")", "{", "OBonsaiBucketPointer", "expectedPointer", "=", "mock", "(", "OBonsaiBucketPointer", ".", "class", ")", ";", "when", "(", "bucket", ".", "getBucketPointer", "(", "anyInt", "(", ")", ")", ")", ".", "thenReturn", "(", "expectedPointer", ")", ";", "assertEquals", "(", "expectedPointer", ",", "bucket", ".", "getLeftSibling", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 657, 326, 2112, 1842, 707, 1375, 1842, 694, 3910, 10291, 1375, 269, 326, 14483, 3021, 358, 1842, 326, 1375, 15930, 10291, 261, 262, 1375, 445, 3377, 506, 358, 1815, 716, 326, 707, 1135, 326, 3434, 1375, 9730, 7008, 10658, 4103, 4926, 1375, 4656, 358, 326, 2002, 10841, 2783, 263, 4725, 21249, 2590, 471, 3695, 358, 3671, 578, 1707, 1375, 9686, 67, 9894, 26789, 67, 11271, 1375, 471, 3379, 2590, 854, 12313, 269, 326, 3021, 4825, 2324, 5943, 3007, 333, 294, 1375, 1375, 1375, 2252, 1815, 8867, 261, 2665, 3910, 10291, 4926, 269, 2783, 263, 15930, 10291, 261, 262, 262, 274, 1375, 1375, 1375, 1220, 4271, 2856, 326, 1375, 15930, 10291, 261, 262, 1375, 707, 1135, 326, 2665, 4407, 269, 23500, 7769, 326, 707, 3613, 326, 1842, 2269, 716, 326, 2002, 10841, 4407, 11096, 471, 22613, 854, 3434, 263, 2], "score": -0.2874387204647064, "weight": 1, "toks": ["<s>", "In", "the", "provided", "test", "method", "`", "testSetLeftSibling", "`", ",", "the", "immediate", "statement", "to", "test", "the", "`", "getLeftSibling", "(", ")", "`", "function", "could", "be", "to", "assert", "that", "the", "method", "returns", "the", "correct", "`", "OBonsaiBucketPointer", "`", "corresponding", "to", "the", "left", "sibling", "bucket", ".", "Assuming", "methods", "and", "structure", "to", "compute", "or", "store", "`", "LEFT_SIBLING_OFFSET", "`", "and", "validation", "methods", "are", "preset", ",", "the", "statement", "might", "look", "something", "like", "this", ":", "`", "`", "`", "java", "assertEquals", "(", "expectedLeftSiblingPointer", ",", "bucket", ".", "getLeftSibling", "(", ")", ")", ";", "`", "`", "`", "This", "checks", "whether", "the", "`", "getLeftSibling", "(", ")", "`", "method", "returns", "the", "expected", "pointer", ",", "effectively", "testing", "the", "method", "under", "the", "test", "condition", "that", "the", "left", "sibling", "pointer", "calculation", "and", "retrieval", "are", "correct", ".", "</s>"]}, {"tids": [1, 657, 1375, 1842, 694, 3910, 10291, 1375, 269, 1846, 1410, 752, 392, 791, 434, 1375, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 1375, 269, 444, 279, 2002, 10841, 1450, 326, 707, 1375, 444, 3910, 10291, 261, 262, 1375, 269, 471, 3929, 716, 1375, 15930, 10291, 261, 262, 1375, 1135, 326, 3434, 1375, 9730, 7008, 10658, 4103, 4926, 1375, 263, 1021, 1842, 1410, 506, 20570, 784, 471, 7155, 3704, 2357, 603, 326, 14176, 434, 3637, 471, 8742, 326, 2002, 10841, 263, 2], "score": -0.29321977496147156, "weight": 1, "toks": ["<s>", "In", "`", "testSetLeftSibling", "`", ",", "you", "should", "create", "an", "instance", "of", "`", "OSBTreeBonsaiLeafBucketTest", "`", ",", "set", "a", "left", "sibling", "using", "the", "method", "`", "setLeftSibling", "(", ")", "`", ",", "and", "verify", "that", "`", "getLeftSibling", "(", ")", "`", "returns", "the", "correct", "`", "OBonsaiBucketPointer", "`", ".", "The", "test", "should", "be", "concise", "and", "focus", "solely", "on", "the", "functionality", "of", "setting", "and", "getting", "the", "left", "sibling", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 18.190371142855735, "bleu-max": 18.337887025749254, "bleu-min": 12.718249172769678, "bleu-avg": 17.573314018043313, "code-bleu": 8.936975508689661, "code-bleu-max": 15.176060583118705, "code-bleu-min": 8.929807114234245, "code-bleu-avg": 10.762157683600805, "edit-sim": 45, "edit-sim-max": 48, "edit-sim-min": 41, "edit-sim-avg": 44.9, "rouge-p": 57.14285714285714, "rouge-p-max": 57.14285714285714, "rouge-p-min": 40.0, "rouge-p-avg": 53.999999999999986, "rouge-r": 50.0, "rouge-r-max": 50.0, "rouge-r-min": 50.0, "rouge-r-avg": 50.0, "rouge-f": 53.33333283555556, "rouge-f-max": 53.33333283555556, "rouge-f-min": 44.44444395061729, "rouge-f-avg": 51.77777727995063, "num-seq": 10}, "time": 0.953892707824707, "misc": {}}
{"id": 143, "data_id": "csn-98920", "input_stids": [1, 26969, 3478, 8862, 31356, 498, 6306, 1384, 4407, 2151, 460, 6306, 32315, 1071, 760, 531, 12242, 2864, 791, 261, 531, 1042, 1750, 819, 1750, 262, 288, 727, 531, 12242, 2864, 791, 273, 6937, 67, 21424, 263, 336, 261, 262, 274, 309, 261, 791, 480, 446, 262, 288, 327, 791, 274, 289, 509, 16939, 274, 309, 261, 819, 1750, 480, 446, 262, 288, 16939, 273, 819, 1750, 263, 2366, 1463, 4522, 261, 531, 5160, 1750, 263, 3690, 11129, 67, 8495, 67, 11219, 67, 4574, 262, 274, 289, 469, 288, 16939, 273, 531, 5160, 1750, 263, 3690, 11129, 67, 8495, 67, 11219, 67, 4574, 263, 2366, 1463, 4522, 261, 262, 274, 289, 727, 531, 12242, 2864, 5984, 273, 394, 531, 12242, 2864, 261, 16939, 380, 6250, 262, 274, 309, 261, 6937, 67, 21424, 263, 20995, 261, 446, 269, 5984, 262, 262, 288, 327, 5984, 274, 289, 327, 6937, 67, 21424, 263, 336, 261, 262, 274, 289, 32315, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 531, 12242, 2864, 32315, 5932, 38, 2471, 38, 7008, 10658, 4103, 32315, 1208, 261, 262, 274, 32315, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 32315, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 2], "topk": [{"tids": [1, 9190, 1613, 2864, 598, 805, 16939, 263, 2], "score": -0.2118511199951172, "weight": 1, "toks": ["<s>", "Initialize", "bufferPool", "with", "default", "bufferSize", ".", "</s>"]}, {"tids": [1, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 2], "score": -0.22322072088718414, "weight": 1, "toks": ["<s>", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 1613, 2864, 262, 274, 2], "score": -0.23285822570323944, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "bufferPool", ")", ";", "</s>"]}, {"tids": [1, 1613, 2864, 1410, 486, 506, 446, 1347, 819, 1750, 353, 486, 2112, 263, 2], "score": -0.24549207091331482, "weight": 1, "toks": ["<s>", "bufferPool", "should", "not", "be", "null", "when", "contextConfiguration", "is", "not", "provided", ".", "</s>"]}, {"tids": [1, 25395, 261, 1613, 2864, 262, 274, 2], "score": -0.2613176703453064, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "bufferPool", ")", ";", "</s>"]}, {"tids": [1, 1613, 2864, 1410, 486, 506, 446, 1347, 326, 819, 1750, 353, 446, 263, 2], "score": -0.26835697889328003, "weight": 1, "toks": ["<s>", "bufferPool", "should", "not", "be", "null", "when", "the", "contextConfiguration", "is", "null", ".", "</s>"]}, {"tids": [1, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 394, 531, 1042, 1750, 261, 262, 262, 274, 2], "score": -0.27347713708877563, "weight": 1, "toks": ["<s>", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "new", "OContextConfiguration", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1375, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 1375, 2], "score": -0.28094780445098877, "weight": 1, "toks": ["<s>", "`", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "`", "</s>"]}, {"tids": [1, 1815, 8867, 261, 446, 269, 1613, 2864, 263, 15930, 10291, 261, 262, 262, 274, 2], "score": -0.282125324010849, "weight": 1, "toks": ["<s>", "assertEquals", "(", "null", ",", "bufferPool", ".", "getLeftSibling", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1021, 707, 1375, 531, 12242, 2864, 263, 791, 261, 446, 262, 1375, 1410, 506, 18432, 358, 3387, 518, 848, 1640, 446, 4540, 471, 4859, 10275, 279, 1613, 2845, 598, 805, 1947, 263, 2], "score": -0.2864750027656555, "weight": 1, "toks": ["<s>", "The", "method", "`", "OByteBufferPool", ".", "instance", "(", "null", ")", "`", "should", "be", "tested", "to", "ensure", "it", "can", "handle", "null", "inputs", "and", "still", "instantiate", "a", "buffer", "pool", "with", "default", "settings", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 19.389954773246817, "bleu-max": 19.389954773246817, "bleu-min": 17.407765595569785, "bleu-avg": 18.23720401305868, "code-bleu": 27.82958955981572, "code-bleu-max": 27.82958955981572, "code-bleu-min": 11.020308842022994, "code-bleu-avg": 19.38411629122276, "edit-sim": 40, "edit-sim-max": 42, "edit-sim-min": 39, "edit-sim-avg": 40.3, "rouge-p": 55.55555555555556, "rouge-p-max": 62.5, "rouge-p-min": 45.45454545454545, "rouge-p-avg": 51.25721500721501, "rouge-r": 55.55555555555556, "rouge-r-max": 55.55555555555556, "rouge-r-min": 44.44444444444444, "rouge-r-avg": 52.222222222222214, "rouge-f": 55.55555505555557, "rouge-f-max": 58.82352891349482, "rouge-f-min": 47.05882303114187, "rouge-f-avg": 51.40522826147022, "num-seq": 10}, "time": 0.9071352481842041, "misc": {}}
{"id": 144, "data_id": "csn-98920", "input_stids": [1, 26969, 3478, 8862, 31356, 498, 6306, 1384, 4407, 2151, 460, 6306, 32315, 1071, 727, 531, 4926, 10533, 5368, 261, 1250, 2424, 262, 288, 531, 4926, 4407, 274, 4407, 273, 13857, 2864, 263, 7672, 261, 262, 274, 309, 261, 4407, 480, 446, 262, 288, 13857, 18834, 263, 15267, 14042, 261, 262, 274, 289, 469, 288, 4407, 273, 26673, 263, 10101, 261, 13387, 269, 300, 404, 262, 274, 289, 309, 261, 2424, 262, 288, 4407, 263, 2424, 261, 262, 274, 289, 727, 7400, 1613, 273, 4407, 263, 25945, 12242, 261, 262, 274, 1613, 263, 1754, 261, 374, 262, 274, 309, 261, 4235, 3649, 262, 288, 4407, 3233, 263, 1378, 261, 4407, 269, 2103, 4926, 261, 262, 262, 274, 289, 327, 4407, 274, 289, 32315, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 531, 12242, 2864, 531, 4926, 32315, 5932, 38, 2471, 38, 7008, 10658, 4103, 32315, 1815, 629, 274, 32315, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 32315, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 27761, 5368, 18188, 4926, 2047, 11244, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 727, 7400, 1613, 273, 4407, 263, 25945, 12242, 261, 262, 274, 1815, 8867, 261, 374, 269, 1613, 263, 1754, 261, 262, 262, 274, 1815, 5510, 261, 1613, 263, 7519, 261, 262, 405, 374, 262, 274, 289, 2], "score": -0.17076967656612396, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAcquireDirectClearsPointerIfRequested", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "final", "ByteBuffer", "buffer", "=", "pointer", ".", "getNativeByteBuffer", "(", ")", ";", "assertEquals", "(", "0", ",", "buffer", ".", "position", "(", ")", ")", ";", "assertTrue", "(", "buffer", ".", "capacity", "(", ")", ">", "0", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 1024, 3021, 358, 1842, 1375, 10533, 5368, 1375, 707, 23500, 471, 21043, 7694, 715, 4102, 506, 294, 1375, 1375, 1375, 2252, 25395, 261, 4407, 262, 274, 1375, 1375, 1375, 2], "score": -0.20785212516784668, "weight": 1, "toks": ["<s>", "The", "next", "statement", "to", "test", "`", "acquireDirect", "`", "method", "effectively", "and", "succinctly", "would", "be", ":", "`", "`", "`", "java", "assertNotNull", "(", "pointer", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 1842, 694, 3910, 10291, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 261, 262, 274, 1842, 694, 3910, 10291, 263, 1842, 694, 3910, 10291, 261, 262, 274, 2], "score": -0.22305220365524292, "weight": 1, "toks": ["<s>", "OSBTreeBonsaiLeafBucketTest", "testSetLeftSibling", "=", "new", "OSBTreeBonsaiLeafBucketTest", "(", ")", ";", "testSetLeftSibling", ".", "testSetLeftSibling", "(", ")", ";", "</s>"]}, {"tids": [1, 2974, 1842, 326, 1375, 10533, 5368, 1375, 707, 8214, 269, 732, 1410, 6932, 518, 4767, 815, 279, 394, 1375, 531, 4926, 1375, 471, 8214, 11643, 518, 1347, 326, 4407, 2845, 353, 1008, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 27761, 5368, 9434, 2864, 2520, 1921, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 342, 342, 4725, 21249, 296, 13857, 2864, 296, 353, 22458, 1008, 471, 4235, 3649, 353, 444, 358, 629, 531, 4926, 563, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 25395, 261, 563, 262, 274, 1815, 8867, 261, 374, 269, 563, 263, 25945, 12242, 261, 262, 263, 1754, 261, 262, 262, 274, 1815, 5510, 261, 563, 263, 25945, 12242, 261, 262, 263, 7519, 261, 262, 405, 273, 531, 12242, 2864, 263, 11549, 67, 4574, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2427690625190735, "weight": 1, "toks": ["<s>", "To", "test", "the", "`", "acquireDirect", "`", "method", "properly", ",", "we", "should", "confirm", "it", "allocates", "a", "new", "`", "OPointer", "`", "and", "properly", "initializes", "it", "when", "the", "pointer", "pool", "is", "empty", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testAcquireDirectWhenPoolIsEmpty", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "/", "/", "Assuming", "'", "pointersPool", "'", "is", "initially", "empty", "and", "TRACK", "is", "set", "to", "false", "OPointer", "result", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "assertNotNull", "(", "result", ")", ";", "assertEquals", "(", "0", ",", "result", ".", "getNativeByteBuffer", "(", ")", ".", "position", "(", ")", ")", ";", "assertTrue", "(", "result", ".", "getNativeByteBuffer", "(", ")", ".", "capacity", "(", ")", ">", "=", "OByteBufferPool", ".", "PAGE_SIZE", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 3796, 1842, 326, 1375, 10533, 5368, 1375, 707, 269, 3387, 518, 8783, 7372, 3937, 22456, 1347, 279, 4407, 353, 2319, 316, 326, 2845, 471, 1347, 279, 4407, 4260, 358, 506, 11977, 263, 3554, 3937, 326, 2424, 14176, 471, 326, 5338, 11803, 434, 326, 2713, 13857, 2845, 471, 11093, 12860, 309, 12008, 263, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 27761, 5368, 261, 262, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 342, 342, 4725, 21249, 326, 2845, 353, 22458, 1008, 471, 4235, 3649, 353, 638, 364, 1842, 263, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 25395, 261, 4407, 262, 274, 1815, 8867, 261, 374, 269, 4407, 263, 25945, 12242, 261, 262, 263, 1754, 261, 262, 262, 274, 1815, 5510, 261, 1613, 2864, 263, 4407, 3233, 263, 5724, 261, 4407, 262, 262, 274, 342, 342, 478, 8753, 7434, 848, 1815, 326, 15267, 329, 2845, 963, 269, 16054, 1613, 913, 5527, 263, 289, 1375, 1375, 1375, 2], "score": -0.24968256056308746, "weight": 1, "toks": ["<s>", "To", "best", "test", "the", "`", "acquireDirect", "`", "method", ",", "ensure", "it", "correctly", "handles", "both", "scenarios", "when", "a", "pointer", "is", "available", "in", "the", "pool", "and", "when", "a", "pointer", "needs", "to", "be", "allocated", ".", "Validate", "both", "the", "clear", "functionality", "and", "the", "proper", "management", "of", "the", "internal", "pointers", "pool", "and", "tracking", "mechanism", "if", "applicable", ".", "`", "`", "`", "java", "@", "Test", "public", "void", "testAcquireDirect", "(", ")", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "/", "/", "Assuming", "the", "pool", "is", "initially", "empty", "and", "TRACK", "is", "true", "for", "test", ".", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "assertNotNull", "(", "pointer", ")", ";", "assertEquals", "(", "0", ",", "pointer", ".", "getNativeByteBuffer", "(", ")", ".", "position", "(", ")", ")", ";", "assertTrue", "(", "bufferPool", ".", "pointerMapping", ".", "containsKey", "(", "pointer", ")", ")", ";", "/", "/", "Further", "tests", "can", "assert", "the", "decremented", "pool", "size", ",", "cleared", "buffer", "content", "etc", ".", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 27761, 5368, 18188, 1892, 18299, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 7400, 1613, 273, 4407, 263, 25945, 12242, 261, 262, 274, 1815, 8867, 261, 374, 269, 1613, 263, 1754, 261, 262, 262, 274, 1815, 5510, 261, 1613, 263, 4463, 261, 262, 405, 273, 1613, 263, 7519, 261, 262, 262, 274, 289, 2], "score": -0.2581949532032013, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAcquireDirectClearsBufferIfNeeded", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "ByteBuffer", "buffer", "=", "pointer", ".", "getNativeByteBuffer", "(", ")", ";", "assertEquals", "(", "0", ",", "buffer", ".", "position", "(", ")", ")", ";", "assertTrue", "(", "buffer", ".", "remaining", "(", ")", ">", "=", "buffer", ".", "capacity", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1375, 632, 7766, 1071, 918, 1842, 27761, 5368, 18188, 4926, 261, 262, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 7400, 1613, 273, 4407, 263, 25945, 12242, 261, 262, 274, 1815, 8867, 261, 374, 269, 1613, 263, 1754, 261, 262, 262, 274, 25395, 261, 4407, 262, 274, 289, 1375, 2], "score": -0.26134899258613586, "weight": 1, "toks": ["<s>", "`", "@", "Test", "public", "void", "testAcquireDirectClearsPointer", "(", ")", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "ByteBuffer", "buffer", "=", "pointer", ".", "getNativeByteBuffer", "(", ")", ";", "assertEquals", "(", "0", ",", "buffer", ".", "position", "(", ")", ")", ";", "assertNotNull", "(", "pointer", ")", ";", "}", "`", "</s>"]}, {"tids": [1, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 27761, 5368, 1190, 9094, 261, 262, 288, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 25395, 261, 4407, 262, 274, 1815, 8867, 261, 374, 269, 4407, 263, 25945, 12242, 261, 262, 263, 1754, 261, 262, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.2629789710044861, "weight": 1, "toks": ["<s>", "`", "`", "`", "java", "@", "Test", "public", "void", "testAcquireDirectWithClear", "(", ")", "{", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "assertNotNull", "(", "pointer", ")", ";", "assertEquals", "(", "0", ",", "pointer", ".", "getNativeByteBuffer", "(", ")", ".", "position", "(", ")", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 1021, 3021, 716, 7434, 326, 707, 1375, 10533, 5368, 1375, 487, 324, 17802, 715, 487, 3323, 353, 294, 1375, 1375, 1375, 2252, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 1375, 1375, 1375, 1220, 981, 13016, 5122, 7434, 326, 1375, 10533, 5368, 1375, 707, 635, 18709, 279, 4407, 598, 326, 1375, 2424, 1375, 1569, 444, 358, 1375, 638, 1375, 269, 24831, 518, 353, 316, 279, 923, 5695, 919, 358, 999, 7636, 1839, 1721, 22094, 263, 2], "score": -0.26442617177963257, "weight": 1, "toks": ["<s>", "The", "statement", "that", "tests", "the", "method", "`", "acquireDirect", "`", "as", "briefly", "as", "possible", "is", ":", "`", "`", "`", "java", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "`", "`", "`", "This", "code", "snippet", "directly", "tests", "the", "`", "acquireDirect", "`", "method", "by", "requesting", "a", "pointer", "with", "the", "`", "clear", "`", "parameter", "set", "to", "`", "true", "`", ",", "ensuring", "it", "is", "in", "a", "valid", "ready", "state", "to", "use", "immediately", "after", "acquisition", ".", "</s>"]}, {"tids": [1, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 2783, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 261, 4407, 262, 274, 2], "score": -0.2712129056453705, "weight": 1, "toks": ["<s>", "OSBTreeBonsaiLeafBucket", "bucket", "=", "new", "OSBTreeBonsaiLeafBucket", "(", "pointer", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 13.846974561477246, "bleu-max": 31.306698257051725, "bleu-min": 11.393517585913411, "bleu-avg": 17.19553643577518, "code-bleu": 10.757085848851727, "code-bleu-max": 25.59660982457128, "code-bleu-min": 6.222977881788716, "code-bleu-avg": 13.766316382466306, "edit-sim": 48, "edit-sim-max": 52, "edit-sim-min": 40, "edit-sim-avg": 46.8, "rouge-p": 75.0, "rouge-p-max": 80.0, "rouge-p-min": 54.54545454545454, "rouge-p-avg": 69.1948051948052, "rouge-r": 54.54545454545454, "rouge-r-max": 72.72727272727273, "rouge-r-min": 45.45454545454545, "rouge-r-avg": 57.27272727272727, "rouge-f": 63.157894249307475, "rouge-f-max": 76.19047569160999, "rouge-f-min": 54.54545404545455, "rouge-f-avg": 62.27082809450293, "num-seq": 10}, "time": 1.137249231338501, "misc": {}}
{"id": 145, "data_id": "csn-98920", "input_stids": [1, 26969, 3478, 8862, 31356, 498, 6306, 1384, 4407, 2151, 460, 6306, 32315, 1071, 531, 1649, 4926, 261, 727, 531, 4926, 4407, 269, 727, 531, 12242, 2864, 1613, 2864, 269, 727, 1525, 21223, 269, 727, 1525, 1363, 1016, 262, 288, 333, 263, 4407, 273, 4407, 274, 333, 263, 1613, 2864, 273, 1613, 2864, 274, 333, 263, 21223, 273, 21223, 274, 333, 263, 1363, 1016, 273, 1363, 1016, 274, 289, 32315, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 531, 12242, 2864, 531, 4926, 531, 1649, 4926, 32315, 5932, 38, 2471, 38, 7008, 10658, 4103, 32315, 1815, 629, 274, 32315, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 32315, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 2], "topk": [{"tids": [1, 1247, 4926, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 374, 262, 262, 274, 2], "score": -0.17291507124900818, "weight": 1, "toks": ["<s>", "cachePointer", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "0", ")", ")", ";", "</s>"]}, {"tids": [1, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 2], "score": -0.19235239923000336, "weight": 1, "toks": ["<s>", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "</s>"]}, {"tids": [1, 26969, 3478, 8862, 31356, 498, 6306, 1384, 4407, 2151, 460, 6306, 411, 5478, 405, 1071, 531, 1649, 4926, 261, 727, 531, 4926, 4407, 269, 727, 531, 12242, 2864, 1613, 2864, 269, 727, 1525, 21223, 269, 727, 1525, 1363, 1016, 262, 288, 333, 263, 4407, 273, 4407, 274, 333, 263, 1613, 2864, 273, 1613, 2864, 274, 333, 263, 21223, 273, 21223, 274, 333, 263, 1363, 1016, 273, 1363, 1016, 274, 289, 411, 5478, 405, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 531, 12242, 2864, 531, 4926, 531, 1649, 4926, 411, 5478, 405, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 5478, 405, 1815, 629, 274, 411, 5478, 405, 411, 5478, 405, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 411, 5478, 405, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 411, 5478, 405, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 2], "score": -0.23859348893165588, "weight": 1, "toks": ["<s>", "cacheEntry", "changes", "comparator", "isLeaf", "keySerializer", "offset", "pointer", "tree", "valueSerializer", "<", "sep", ">", "public", "OCachePointer", "(", "final", "OPointer", "pointer", ",", "final", "OByteBufferPool", "bufferPool", ",", "final", "long", "fileId", ",", "final", "long", "pageIndex", ")", "{", "this", ".", "pointer", "=", "pointer", ";", "this", ".", "bufferPool", "=", "bufferPool", ";", "this", ".", "fileId", "=", "fileId", ";", "this", ".", "pageIndex", "=", "pageIndex", ";", "}", "<", "sep", ">", "OSBTreeBonsaiLeafBucketTest", "OByteBufferPool", "OPointer", "OCachePointer", "<", "sep", ">", "OSBTreeBonsaiBucket", "<", "sep", ">", "assert", "false", ";", "<", "sep", ">", "<", "sep", ">", "public", "OBonsaiBucketPointer", "getLeftSibling", "(", ")", "{", "return", "getBucketPointer", "(", "offset", "+", "LEFT_SIBLING_OFFSET", ")", ";", "}", "<", "sep", ">", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "<", "sep", ">", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "</s>"]}, {"tids": [1, 1247, 4926, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 262, 262, 274, 2], "score": -0.24719220399856567, "weight": 1, "toks": ["<s>", "cachePointer", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ")", ")", ";", "</s>"]}, {"tids": [1, 9730, 7008, 10658, 4103, 4926, 2665, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 374, 269, 404, 262, 274, 1247, 4926, 263, 444, 3910, 10291, 261, 2665, 262, 274, 9730, 7008, 10658, 4103, 4926, 563, 273, 1247, 4926, 263, 15930, 10291, 261, 262, 274, 1815, 8867, 261, 2665, 269, 563, 262, 274, 2], "score": -0.2549762427806854, "weight": 1, "toks": ["<s>", "OBonsaiBucketPointer", "expected", "=", "new", "OBonsaiBucketPointer", "(", "0", ",", "1", ")", ";", "cachePointer", ".", "setLeftSibling", "(", "expected", ")", ";", "OBonsaiBucketPointer", "result", "=", "cachePointer", ".", "getLeftSibling", "(", ")", ";", "assertEquals", "(", "expected", ",", "result", ")", ";", "</s>"]}, {"tids": [1, 7766, 326, 707, 1375, 15930, 10291, 261, 262, 1375, 316, 326, 667, 1375, 5932, 38, 2471, 38, 7008, 10658, 4103, 1375, 263, 2], "score": -0.2601841688156128, "weight": 1, "toks": ["<s>", "Test", "the", "method", "`", "getLeftSibling", "(", ")", "`", "in", "the", "class", "`", "OSBTreeBonsaiBucket", "`", ".", "</s>"]}, {"tids": [1, 1247, 4926, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 262, 262, 274, 2], "score": -0.26160964369773865, "weight": 1, "toks": ["<s>", "cachePointer", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ")", ")", ";", "</s>"]}, {"tids": [1, 1160, 306, 308, 498, 273, 315, 1842, 653, 315, 263, 8425, 261, 262, 274, 2], "score": -0.2666516900062561, "weight": 1, "toks": ["<s>", "byte", "[", "]", "key", "=", "\"", "testKey", "\"", ".", "getBytes", "(", ")", ";", "</s>"]}, {"tids": [1, 9730, 7008, 10658, 4103, 4926, 2002, 10291, 4649, 273, 1247, 4926, 263, 15930, 10291, 261, 262, 274, 2], "score": -0.26718869805336, "weight": 1, "toks": ["<s>", "OBonsaiBucketPointer", "leftSiblingBefore", "=", "cachePointer", ".", "getLeftSibling", "(", ")", ";", "</s>"]}, {"tids": [1, 1788, 392, 9730, 7008, 10658, 4103, 4926, 791, 598, 279, 2553, 1384, 1865, 15387, 1375, 1842, 694, 3910, 10291, 1375, 263, 2], "score": -0.2931959629058838, "weight": 1, "toks": ["<s>", "Create", "an", "OBonsaiBucketPointer", "instance", "with", "a", "defined", "offset", "before", "invoking", "`", "testSetLeftSibling", "`", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 20.492938431708815, "bleu-max": 28.606242122742575, "bleu-min": 11.822491766244644, "bleu-avg": 19.923074473557456, "code-bleu": 5.432542107070393, "code-bleu-max": 19.65074535479063, "code-bleu-min": 4.53034626808147, "code-bleu-avg": 8.045767582517344, "edit-sim": 37, "edit-sim-max": 40, "edit-sim-min": 33, "edit-sim-avg": 37.2, "rouge-p": 50.0, "rouge-p-max": 50.0, "rouge-p-min": 36.36363636363637, "rouge-p-avg": 43.20779220779221, "rouge-r": 80.0, "rouge-r-max": 80.0, "rouge-r-min": 60.0, "rouge-r-avg": 76.0, "rouge-f": 61.53846106508877, "rouge-f-max": 61.53846106508877, "rouge-f-min": 49.9999995138889, "rouge-f-avg": 54.79487133489122, "num-seq": 10}, "time": 1.030663013458252, "misc": {}}
{"id": 146, "data_id": "csn-98920", "input_stids": [1, 26969, 3478, 8862, 31356, 498, 6306, 1384, 4407, 2151, 460, 6306, 32315, 1071, 918, 5504, 1957, 11110, 261, 262, 288, 2438, 6553, 54, 11367, 67, 7240, 67, 3079, 11102, 654, 263, 24593, 261, 333, 262, 274, 289, 32315, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 531, 12242, 2864, 531, 4926, 531, 1649, 4926, 32315, 5932, 38, 2471, 38, 7008, 10658, 4103, 32315, 21734, 273, 394, 23632, 2404, 411, 405, 261, 1613, 262, 274, 32315, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 32315, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 2], "topk": [{"tids": [1, 7693, 326, 1375, 5504, 1957, 11110, 261, 262, 1375, 707, 17071, 326, 14502, 1056, 487, 2665, 263, 2], "score": -0.17336593568325043, "weight": 1, "toks": ["<s>", "Ensure", "the", "`", "incrementReferrer", "(", ")", "`", "method", "increments", "the", "referrer", "count", "as", "expected", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 342, 342, 10939, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 342, 342, 7903, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 342, 342, 5452, 326, 2665, 4636, 578, 1686, 1815, 8867, 261, 404, 269, 1247, 4926, 263, 17404, 1380, 261, 262, 262, 274, 289, 2], "score": -0.18719801306724548, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "/", "/", "Setup", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "/", "/", "Execute", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "/", "/", "Assert", "the", "expected", "conditions", "or", "results", "assertEquals", "(", "1", ",", "cachePointer", ".", "getRefCount", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 25395, 261, 1247, 4926, 262, 274, 2], "score": -0.20074564218521118, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "cachePointer", ")", ";", "</s>"]}, {"tids": [1, 25395, 261, 1247, 4926, 262, 274, 2], "score": -0.21923919022083282, "weight": 1, "toks": ["<s>", "assertNotNull", "(", "cachePointer", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 10798, 1957, 11110, 261, 262, 288, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 394, 531, 4926, 261, 262, 269, 394, 531, 12242, 2864, 261, 446, 262, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 1815, 8867, 261, 404, 269, 1247, 4926, 263, 14502, 1380, 261, 262, 262, 274, 289, 2], "score": -0.2406894564628601, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testIncrementReferrer", "(", ")", "{", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "new", "OPointer", "(", ")", ",", "new", "OByteBufferPool", "(", "null", ")", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "assertEquals", "(", "1", ",", "cachePointer", ".", "referrerCount", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 10798, 1957, 11110, 261, 262, 1216, 1185, 288, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 1815, 8867, 261, 404, 269, 1247, 4926, 263, 17404, 11110, 1380, 261, 262, 262, 274, 289, 2], "score": -0.24535450339317322, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testIncrementReferrer", "(", ")", "throws", "Exception", "{", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "assertEquals", "(", "1", ",", "cachePointer", ".", "getReferrerCount", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 10798, 1957, 11110, 261, 262, 288, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 1815, 8867, 261, 404, 269, 1247, 4926, 263, 17404, 1380, 261, 262, 262, 274, 289, 2], "score": -0.2553325593471527, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testIncrementReferrer", "(", ")", "{", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "assertEquals", "(", "1", ",", "cachePointer", ".", "getRefCount", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 2783, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 261, 1247, 4926, 269, 404, 262, 274, 2783, 263, 444, 3910, 10291, 261, 17335, 262, 274, 1815, 8867, 261, 17335, 269, 2783, 263, 15930, 10291, 261, 262, 263, 8957, 1016, 261, 262, 262, 274, 289, 2], "score": -0.2664724290370941, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "OSBTreeBonsaiLeafBucketTest", "bucket", "=", "new", "OSBTreeBonsaiLeafBucketTest", "(", "cachePointer", ",", "1", ")", ";", "bucket", ".", "setLeftSibling", "(", "123", ")", ";", "assertEquals", "(", "123", ",", "bucket", ".", "getLeftSibling", "(", ")", ".", "getPageIndex", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 10798, 1957, 11110, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 1815, 8867, 261, 404, 269, 1247, 4926, 263, 17404, 1380, 261, 262, 262, 274, 289, 2], "score": -0.26736336946487427, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testIncrementReferrer", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "assertEquals", "(", "1", ",", "cachePointer", ".", "getRefCount", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 3910, 10291, 261, 262, 288, 9730, 7008, 10658, 4103, 4926, 563, 273, 2783, 263, 15930, 10291, 261, 262, 274, 1815, 8867, 261, 2665, 4926, 269, 563, 262, 274, 289, 2], "score": -0.27108654379844666, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetLeftSibling", "(", ")", "{", "OBonsaiBucketPointer", "result", "=", "bucket", ".", "getLeftSibling", "(", ")", ";", "assertEquals", "(", "expectedPointer", ",", "result", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 12.88606181077389, "bleu-max": 33.336759716888416, "bleu-min": 11.393517585913411, "bleu-avg": 15.186080219963642, "code-bleu": 12.190107629276822, "code-bleu-max": 24.88062171774641, "code-bleu-min": 7.056311215122049, "code-bleu-avg": 14.509310569856671, "edit-sim": 53, "edit-sim-max": 61, "edit-sim-min": 39, "edit-sim-avg": 50.8, "rouge-p": 75.0, "rouge-p-max": 80.0, "rouge-p-min": 66.66666666666666, "rouge-p-avg": 72.11904761904762, "rouge-r": 50.0, "rouge-r-max": 66.66666666666666, "rouge-r-min": 41.66666666666667, "rouge-r-avg": 51.66666666666667, "rouge-f": 59.99999952, "rouge-f-max": 72.72727223140495, "rouge-f-min": 52.63157848199447, "rouge-f-avg": 59.95488673425082, "num-seq": 10}, "time": 0.9570796489715576, "misc": {}}
{"id": 147, "data_id": "csn-98920", "input_stids": [1, 26969, 3478, 8862, 31356, 498, 6306, 1384, 4407, 2151, 460, 6306, 32315, 1071, 531, 27630, 2828, 261, 727, 1525, 21223, 269, 727, 1525, 1363, 1016, 269, 727, 531, 1649, 4926, 501, 4926, 269, 1250, 4832, 1649, 262, 288, 333, 263, 21223, 273, 21223, 274, 333, 263, 1363, 1016, 273, 1363, 1016, 274, 333, 263, 501, 4926, 273, 501, 4926, 274, 333, 263, 4832, 1649, 273, 4832, 1649, 274, 289, 32315, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 531, 12242, 2864, 531, 4926, 531, 1649, 4926, 531, 27630, 2828, 32315, 5932, 38, 2471, 38, 7008, 10658, 4103, 32315, 531, 1994, 2115, 1064, 766, 273, 2483, 2988, 261, 590, 269, 315, 3902, 6, 397, 277, 54, 350, 262, 274, 32315, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 32315, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 2], "topk": [{"tids": [1, 26969, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 404, 262, 262, 274, 2], "score": -0.14775416254997253, "weight": 1, "toks": ["<s>", "cacheEntry", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ",", "1", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 394, 531, 1649, 4926, 261, 394, 531, 4926, 261, 262, 269, 531, 12242, 2864, 263, 791, 261, 446, 262, 269, 374, 269, 374, 262, 269, 629, 262, 274, 26969, 263, 15930, 10291, 261, 262, 274, 342, 342, 2985, 3613, 1842, 289, 2], "score": -0.1714346557855606, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "new", "OCachePointer", "(", "new", "OPointer", "(", ")", ",", "OByteBufferPool", ".", "instance", "(", "null", ")", ",", "0", ",", "0", ")", ",", "false", ")", ";", "cacheEntry", ".", "getLeftSibling", "(", ")", ";", "/", "/", "Method", "under", "test", "}", "</s>"]}, {"tids": [1, 26969, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 262, 262, 274, 2], "score": -0.2348489910364151, "weight": 1, "toks": ["<s>", "cacheEntry", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ")", ")", ";", "</s>"]}, {"tids": [1, 1788, 279, 1842, 716, 20761, 326, 6885, 434, 1375, 444, 3910, 10291, 1375, 707, 316, 1375, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 1375, 667, 1450, 326, 819, 2112, 263, 2], "score": -0.24609319865703583, "weight": 1, "toks": ["<s>", "Create", "a", "test", "that", "verifies", "the", "behavior", "of", "`", "setLeftSibling", "`", "method", "in", "`", "OSBTreeBonsaiLeafBucketTest", "`", "class", "using", "the", "context", "provided", ".", "</s>"]}, {"tids": [1, 26969, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 262, 262, 274, 2], "score": -0.25350701808929443, "weight": 1, "toks": ["<s>", "cacheEntry", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 342, 342, 1788, 279, 394, 531, 27630, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 342, 342, 1000, 2002, 10841, 1450, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 2783, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 261, 26969, 262, 274, 9730, 7008, 10658, 4103, 4926, 2665, 3910, 10291, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 374, 269, 404, 262, 274, 2783, 263, 444, 3910, 10291, 261, 2665, 3910, 10291, 262, 274, 342, 342, 5452, 2002, 10841, 353, 444, 8783, 9730, 7008, 10658, 4103, 4926, 3214, 3910, 10291, 273, 2783, 263, 15930, 10291, 261, 262, 274, 1815, 8867, 261, 2665, 3910, 10291, 269, 3214, 3910, 10291, 262, 274, 289, 2], "score": -0.2586592435836792, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "/", "/", "Create", "a", "new", "OCacheEntry", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "/", "/", "Set", "left", "sibling", "using", "OSBTreeBonsaiLeafBucket", "OSBTreeBonsaiLeafBucket", "bucket", "=", "new", "OSBTreeBonsaiLeafBucket", "(", "cacheEntry", ")", ";", "OBonsaiBucketPointer", "expectedLeftSibling", "=", "new", "OBonsaiBucketPointer", "(", "0", ",", "1", ")", ";", "bucket", ".", "setLeftSibling", "(", "expectedLeftSibling", ")", ";", "/", "/", "Assert", "left", "sibling", "is", "set", "correctly", "OBonsaiBucketPointer", "actualLeftSibling", "=", "bucket", ".", "getLeftSibling", "(", ")", ";", "assertEquals", "(", "expectedLeftSibling", ",", "actualLeftSibling", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 27630, 2828, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 446, 269, 629, 262, 274, 25395, 261, 26969, 262, 274, 289, 2], "score": -0.259947270154953, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OCacheEntryImpl", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "null", ",", "false", ")", ";", "assertNotNull", "(", "cacheEntry", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 394, 531, 1649, 4926, 261, 394, 531, 4926, 261, 262, 269, 446, 269, 374, 269, 374, 262, 269, 629, 262, 274, 26969, 263, 22862, 261, 262, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 374, 269, 404, 262, 262, 274, 289, 2], "score": -0.2692911922931671, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "new", "OCachePointer", "(", "new", "OPointer", "(", ")", ",", "null", ",", "0", ",", "0", ")", ",", "false", ")", ";", "cacheEntry", ".", "getBucket", "(", ")", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "0", ",", "1", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 342, 342, 10371, 726, 9730, 7008, 10658, 4103, 4926, 2665, 4926, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 1728, 269, 4200, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 394, 531, 1649, 4926, 261, 394, 531, 4926, 261, 374, 269, 374, 262, 269, 446, 269, 374, 269, 374, 262, 269, 629, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 2783, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 261, 26969, 262, 274, 342, 342, 4603, 2783, 263, 444, 3910, 10291, 261, 2665, 4926, 262, 274, 342, 342, 5452, 1815, 8867, 261, 2665, 4926, 269, 2783, 263, 15930, 10291, 261, 262, 262, 274, 289, 2], "score": -0.30362755060195923, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "/", "/", "Arrange", "OBonsaiBucketPointer", "expectedPointer", "=", "new", "OBonsaiBucketPointer", "(", "10", ",", "20", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "new", "OCachePointer", "(", "new", "OPointer", "(", "0", ",", "0", ")", ",", "null", ",", "0", ",", "0", ")", ",", "false", ")", ";", "OSBTreeBonsaiLeafBucket", "bucket", "=", "new", "OSBTreeBonsaiLeafBucket", "(", "cacheEntry", ")", ";", "/", "/", "Act", "bucket", ".", "setLeftSibling", "(", "expectedPointer", ")", ";", "/", "/", "Assert", "assertEquals", "(", "expectedPointer", ",", "bucket", ".", "getLeftSibling", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 342, 342, 10939, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 394, 531, 1649, 4926, 261, 446, 269, 446, 269, 374, 269, 374, 262, 269, 629, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 2783, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 261, 26969, 262, 274, 9730, 7008, 10658, 4103, 4926, 2665, 4926, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 576, 262, 274, 342, 342, 4382, 2783, 263, 444, 3910, 10291, 261, 2665, 4926, 262, 274, 342, 342, 5452, 9730, 7008, 10658, 4103, 4926, 3214, 4926, 273, 2783, 263, 15930, 10291, 261, 262, 274, 1815, 8867, 261, 2665, 4926, 269, 3214, 4926, 262, 274, 289, 2], "score": -0.3198382258415222, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "/", "/", "Setup", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "new", "OCachePointer", "(", "null", ",", "null", ",", "0", ",", "0", ")", ",", "false", ")", ";", "OSBTreeBonsaiLeafBucketTest", "bucket", "=", "new", "OSBTreeBonsaiLeafBucketTest", "(", "cacheEntry", ")", ";", "OBonsaiBucketPointer", "expectedPointer", "=", "new", "OBonsaiBucketPointer", "(", "1", ",", "2", ")", ";", "/", "/", "Action", "bucket", ".", "setLeftSibling", "(", "expectedPointer", ")", ";", "/", "/", "Assert", "OBonsaiBucketPointer", "actualPointer", "=", "bucket", ".", "getLeftSibling", "(", ")", ";", "assertEquals", "(", "expectedPointer", ",", "actualPointer", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 20.492938431708815, "bleu-max": 23.356898886410004, "bleu-min": 11.822491766244644, "bleu-avg": 17.897444716530256, "code-bleu": 5.432542107070393, "code-bleu-max": 5.750747672461168, "code-bleu-min": 4.53034626808147, "code-bleu-avg": 5.159122896288972, "edit-sim": 33, "edit-sim-max": 37, "edit-sim-min": 30, "edit-sim-avg": 33.5, "rouge-p": 50.0, "rouge-p-max": 50.0, "rouge-p-min": 36.36363636363637, "rouge-p-avg": 43.63636363636364, "rouge-r": 80.0, "rouge-r-max": 80.0, "rouge-r-min": 80.0, "rouge-r-avg": 80.0, "rouge-f": 61.53846106508877, "rouge-f-max": 61.53846106508877, "rouge-f-min": 49.99999957031251, "rouge-f-avg": 56.282050827511206, "num-seq": 10}, "time": 0.9288537502288818, "misc": {}}
{"id": 148, "data_id": "csn-98920", "input_stids": [1, 26969, 3478, 8862, 31356, 498, 6306, 1384, 4407, 2151, 460, 6306, 32315, 918, 10533, 17075, 2531, 261, 262, 274, 32315, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 531, 12242, 2864, 531, 4926, 531, 1649, 4926, 531, 27630, 2828, 32315, 5932, 38, 2471, 38, 7008, 10658, 4103, 32315, 327, 7708, 274, 32315, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 32315, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 2], "topk": [{"tids": [1, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 2783, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 261, 26969, 262, 274, 2783, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 576, 262, 262, 274, 2], "score": -0.14009782671928406, "weight": 1, "toks": ["<s>", "OSBTreeBonsaiLeafBucketTest", "bucket", "=", "new", "OSBTreeBonsaiLeafBucketTest", "(", "cacheEntry", ")", ";", "bucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ",", "2", ")", ")", ";", "</s>"]}, {"tids": [1, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 2783, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 261, 26969, 262, 274, 2783, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 262, 262, 274, 2], "score": -0.16980206966400146, "weight": 1, "toks": ["<s>", "OSBTreeBonsaiLeafBucket", "bucket", "=", "new", "OSBTreeBonsaiLeafBucket", "(", "cacheEntry", ")", ";", "bucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ")", ")", ";", "</s>"]}, {"tids": [1, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 1842, 921, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 261, 26969, 269, 374, 262, 274, 1842, 921, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 262, 262, 274, 2], "score": -0.21175992488861084, "weight": 1, "toks": ["<s>", "OSBTreeBonsaiLeafBucketTest", "testObject", "=", "new", "OSBTreeBonsaiLeafBucketTest", "(", "cacheEntry", ",", "0", ")", ";", "testObject", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ")", ")", ";", "</s>"]}, {"tids": [1, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 2783, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 261, 26969, 262, 274, 2783, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 262, 262, 274, 26969, 263, 3992, 17075, 2531, 261, 262, 274, 2], "score": -0.23735006153583527, "weight": 1, "toks": ["<s>", "OSBTreeBonsaiLeafBucket", "bucket", "=", "new", "OSBTreeBonsaiLeafBucket", "(", "cacheEntry", ")", ";", "bucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ")", ")", ";", "cacheEntry", ".", "releaseExclusiveLock", "(", ")", ";", "</s>"]}, {"tids": [1, 26969, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 262, 262, 274, 2], "score": -0.23755298554897308, "weight": 1, "toks": ["<s>", "cacheEntry", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "123", ")", ")", ";", "</s>"]}, {"tids": [1, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 7839, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 261, 26969, 262, 274, 7839, 4103, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 262, 262, 274, 2], "score": -0.2398335337638855, "weight": 1, "toks": ["<s>", "OSBTreeBonsaiLeafBucket", "leafBucket", "=", "new", "OSBTreeBonsaiLeafBucket", "(", "cacheEntry", ")", ";", "leafBucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ")", ")", ";", "</s>"]}, {"tids": [1, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 2783, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 261, 26969, 262, 274, 2783, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 262, 262, 274, 26969, 263, 3992, 17075, 2531, 261, 262, 274, 1247, 4926, 263, 15267, 1957, 11110, 261, 262, 274, 2], "score": -0.24399618804454803, "weight": 1, "toks": ["<s>", "OSBTreeBonsaiLeafBucket", "bucket", "=", "new", "OSBTreeBonsaiLeafBucket", "(", "cacheEntry", ")", ";", "bucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ")", ")", ";", "cacheEntry", ".", "releaseExclusiveLock", "(", ")", ";", "cachePointer", ".", "decrementReferrer", "(", ")", ";", "</s>"]}, {"tids": [1, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 2783, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 261, 26969, 262, 274, 2783, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 262, 262, 274, 2], "score": -0.24776554107666016, "weight": 1, "toks": ["<s>", "OSBTreeBonsaiLeafBucket", "bucket", "=", "new", "OSBTreeBonsaiLeafBucket", "(", "cacheEntry", ")", ";", "bucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ")", ")", ";", "</s>"]}, {"tids": [1, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 2783, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 261, 26969, 262, 274, 9730, 7008, 10658, 4103, 4926, 2665, 4926, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 374, 269, 8038, 262, 274, 2783, 263, 444, 3910, 10291, 261, 2665, 4926, 262, 274, 9730, 7008, 10658, 4103, 4926, 3214, 4926, 273, 2783, 263, 15930, 10291, 261, 262, 274, 1815, 8867, 261, 2665, 4926, 269, 3214, 4926, 262, 274, 26969, 263, 3992, 17075, 2531, 261, 262, 274, 2], "score": -0.2518434226512909, "weight": 1, "toks": ["<s>", "OSBTreeBonsaiLeafBucket", "bucket", "=", "new", "OSBTreeBonsaiLeafBucket", "(", "cacheEntry", ")", ";", "OBonsaiBucketPointer", "expectedPointer", "=", "new", "OBonsaiBucketPointer", "(", "0", ",", "128", ")", ";", "bucket", ".", "setLeftSibling", "(", "expectedPointer", ")", ";", "OBonsaiBucketPointer", "actualPointer", "=", "bucket", ".", "getLeftSibling", "(", ")", ";", "assertEquals", "(", "expectedPointer", ",", "actualPointer", ")", ";", "cacheEntry", ".", "releaseExclusiveLock", "(", ")", ";", "</s>"]}, {"tids": [1, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 2783, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 261, 26969, 262, 274, 2783, 263, 444, 3910, 10291, 261, 2593, 25574, 262, 274, 9730, 7008, 10658, 4103, 4926, 563, 273, 2783, 263, 15930, 10291, 261, 262, 274, 1815, 8867, 261, 2593, 25574, 269, 563, 263, 8957, 1016, 261, 262, 262, 274, 2], "score": -0.2560822069644928, "weight": 1, "toks": ["<s>", "OSBTreeBonsaiLeafBucket", "bucket", "=", "new", "OSBTreeBonsaiLeafBucket", "(", "cacheEntry", ")", ";", "bucket", ".", "setLeftSibling", "(", "12345", ")", ";", "OBonsaiBucketPointer", "result", "=", "bucket", ".", "getLeftSibling", "(", ")", ";", "assertEquals", "(", "12345", ",", "result", ".", "getPageIndex", "(", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 3.533868983173573, "bleu-max": 13.613893429057791, "bleu-min": 2.4287335126119243, "bleu-avg": 6.62434186159507, "code-bleu": 7.252166153642787, "code-bleu-max": 14.699750587681754, "code-bleu-min": 4.2250370960251, "code-bleu-avg": 9.531958326504073, "edit-sim": 56, "edit-sim-max": 59, "edit-sim-min": 46, "edit-sim-avg": 55.2, "rouge-p": 87.5, "rouge-p-max": 90.0, "rouge-p-min": 80.0, "rouge-p-avg": 84.00649350649351, "rouge-r": 36.84210526315789, "rouge-r-max": 47.368421052631575, "rouge-r-min": 31.57894736842105, "rouge-r-avg": 40.526315789473685, "rouge-f": 51.85185143484225, "rouge-f-max": 62.06896506539834, "rouge-f-min": 46.15384576035503, "rouge-f-avg": 54.35975985506851, "num-seq": 10}, "time": 0.9328041076660156, "misc": {}}
{"id": 149, "data_id": "csn-98920", "input_stids": [1, 26969, 3478, 4407, 32315, 1071, 5932, 38, 2471, 38, 7008, 10658, 4103, 261, 531, 27630, 26969, 269, 509, 1363, 2335, 269, 1250, 31356, 269, 531, 5905, 6306, 411, 1475, 405, 498, 6306, 269, 531, 5905, 6306, 411, 776, 405, 460, 6306, 269, 5932, 38, 2471, 38, 7008, 10658, 2042, 411, 1475, 269, 776, 405, 2151, 262, 1216, 1860, 288, 2240, 261, 26969, 262, 274, 333, 263, 1384, 273, 1363, 2335, 274, 333, 263, 31356, 273, 31356, 274, 333, 263, 498, 6306, 273, 498, 6306, 274, 333, 263, 460, 6306, 273, 460, 6306, 274, 21089, 620, 261, 1384, 397, 478, 9719, 67, 2419, 9125, 67, 11271, 269, 4552, 67, 28888, 67, 4574, 67, 13718, 262, 274, 21089, 620, 261, 1384, 397, 11963, 67, 11271, 269, 374, 262, 274, 444, 3216, 620, 261, 1384, 397, 16993, 67, 11271, 269, 261, 1160, 262, 261, 31356, 692, 5380, 6799, 294, 374, 262, 262, 274, 444, 3708, 620, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 269, 300, 404, 262, 274, 444, 3708, 620, 261, 1384, 397, 13135, 67, 9894, 26789, 67, 11271, 269, 300, 404, 262, 274, 444, 3708, 620, 261, 1384, 397, 399, 9719, 67, 4574, 67, 11271, 269, 374, 262, 274, 444, 3216, 620, 261, 1384, 397, 5311, 67, 2123, 15154, 654, 67, 11271, 269, 498, 6306, 263, 2634, 261, 262, 262, 274, 444, 3216, 620, 261, 1384, 397, 5848, 67, 2123, 15154, 654, 67, 11271, 269, 460, 6306, 263, 2634, 261, 262, 262, 274, 333, 263, 2151, 273, 2151, 274, 289, 32315, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 531, 12242, 2864, 531, 4926, 531, 1649, 4926, 531, 27630, 2828, 5932, 38, 2471, 38, 7008, 10658, 4103, 32315, 5932, 38, 2471, 38, 7008, 10658, 4103, 32315, 531, 5905, 6306, 411, 2144, 405, 460, 6306, 273, 531, 4522, 6306, 263, 6937, 274, 32315, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 32315, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 2], "topk": [{"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 576, 262, 262, 274, 2], "score": -0.19976428151130676, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ",", "2", ")", ")", ";", "</s>"]}, {"tids": [1, 9730, 7008, 10658, 4103, 4926, 394, 10291, 4926, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 394, 10291, 4926, 262, 274, 2], "score": -0.21970224380493164, "weight": 1, "toks": ["<s>", "OBonsaiBucketPointer", "newSiblingPointer", "=", "new", "OBonsaiBucketPointer", "(", "1", ",", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "newSiblingPointer", ")", ";", "</s>"]}, {"tids": [1, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 576, 262, 262, 274, 2], "score": -0.23624920845031738, "weight": 1, "toks": ["<s>", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ",", "2", ")", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 404, 262, 262, 274, 2], "score": -0.24135006964206696, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ",", "1", ")", ")", ";", "</s>"]}, {"tids": [1, 9730, 7008, 10658, 4103, 4926, 2665, 4926, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 300, 404, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 2665, 4926, 262, 274, 1815, 8867, 261, 2665, 4926, 269, 2151, 4103, 263, 15930, 10291, 261, 262, 262, 274, 2], "score": -0.2504591643810272, "weight": 1, "toks": ["<s>", "OBonsaiBucketPointer", "expectedPointer", "=", "new", "OBonsaiBucketPointer", "(", "1", ",", "-", "1", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "expectedPointer", ")", ";", "assertEquals", "(", "expectedPointer", ",", "treeBucket", ".", "getLeftSibling", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 576, 262, 262, 274, 2], "score": -0.2551100254058838, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ",", "2", ")", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 576, 262, 262, 274, 2], "score": -0.26557743549346924, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ",", "2", ")", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 576, 262, 262, 274, 2], "score": -0.2746622860431671, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ",", "2", ")", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 404, 269, 576, 262, 262, 274, 2], "score": -0.2791507840156555, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "1", ",", "2", ")", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 394, 9730, 7008, 10658, 4103, 4926, 261, 374, 269, 300, 404, 262, 262, 274, 2], "score": -0.28316691517829895, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "new", "OBonsaiBucketPointer", "(", "0", ",", "-", "1", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 18.741919936332152, "bleu-max": 21.915535309542665, "bleu-min": 9.298523585897984, "bleu-avg": 16.83259654442939, "code-bleu": 4.531774035360797, "code-bleu-max": 11.762766500035676, "code-bleu-min": 1.4574013118527094, "code-bleu-avg": 4.74498616467581, "edit-sim": 58, "edit-sim-max": 61, "edit-sim-min": 35, "edit-sim-avg": 54.8, "rouge-p": 62.5, "rouge-p-max": 71.42857142857143, "rouge-p-min": 42.857142857142854, "rouge-p-avg": 60.42857142857142, "rouge-r": 38.46153846153847, "rouge-r-max": 53.84615384615385, "rouge-r-min": 23.076923076923077, "rouge-r-avg": 38.46153846153847, "rouge-f": 47.6190471473923, "rouge-f-max": 60.869564725897916, "rouge-f-min": 29.999999545000005, "rouge-f-avg": 46.7272524445725, "num-seq": 10}, "time": 0.7868504524230957, "misc": {}}
{"id": 150, "data_id": "csn-98920", "input_stids": [1, 26969, 3478, 4407, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 261, 1525, 1363, 1016, 269, 509, 1363, 2335, 262, 288, 333, 263, 1363, 1016, 273, 1363, 1016, 274, 333, 263, 1363, 2335, 273, 1363, 2335, 274, 289, 32315, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 531, 12242, 2864, 531, 4926, 531, 1649, 4926, 531, 27630, 2828, 5932, 38, 2471, 38, 7008, 10658, 4103, 9730, 7008, 10658, 4103, 4926, 32315, 32315, 531, 5905, 6306, 411, 2144, 405, 460, 6306, 273, 531, 4522, 6306, 263, 6937, 274, 32315, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 32315, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2], "topk": [{"tids": [1, 26969, 263, 444, 3910, 10291, 261, 293, 262, 274, 2], "score": -0.04891297593712807, "weight": 1, "toks": ["<s>", "cacheEntry", ".", "setLeftSibling", "(", "p", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 2], "score": -0.36378583312034607, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 2], "score": -0.3856964707374573, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 2], "score": -0.3895697295665741, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 2], "score": -0.40678340196609497, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 2], "score": -0.4106391370296478, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 2], "score": -0.4111441969871521, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "</s>"]}, {"tids": [1, 26969, 263, 2549, 4926, 261, 293, 262, 274, 2], "score": -0.4119871258735657, "weight": 1, "toks": ["<s>", "cacheEntry", ".", "changePointer", "(", "p", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 2], "score": -0.44185730814933777, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "</s>"]}, {"tids": [1, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 2], "score": -0.4438171684741974, "weight": 1, "toks": ["<s>", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 21.66685318206177, "bleu-avg": 58.638628840029085, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 6.3345134778396535, "code-bleu-avg": 48.22812823145033, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 74, "edit-sim-avg": 90.9, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 62.5, "rouge-p-avg": 77.91666666666667, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 83.33333333333334, "rouge-r-avg": 95.00000000000001, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 71.42857093877552, "rouge-f-avg": 85.2380947452381, "num-seq": 10}, "time": 0.5680434703826904, "misc": {}}
{"id": 151, "data_id": "csn-98920", "input_stids": [1, 26969, 3478, 4407, 32315, 1071, 918, 444, 3910, 10291, 261, 9730, 7008, 10658, 4103, 4926, 4407, 262, 1216, 1860, 288, 444, 4103, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 269, 4407, 262, 274, 289, 32315, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 531, 12242, 2864, 531, 4926, 531, 1649, 4926, 531, 27630, 2828, 5932, 38, 2471, 38, 7008, 10658, 4103, 9730, 7008, 10658, 4103, 4926, 32315, 32315, 327, 394, 9730, 7008, 10658, 2532, 4926, 261, 21223, 269, 1365, 4926, 262, 274, 32315, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 32315, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 1815, 8867, 261, 293, 269, 2151, 4103, 263, 15930, 10291, 261, 262, 262, 274, 289, 2], "score": -0.060639794915914536, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "assertEquals", "(", "p", ",", "treeBucket", ".", "getLeftSibling", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1815, 18163, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 262, 263, 21614, 774, 261, 293, 262, 274, 2], "score": -0.15603755414485931, "weight": 1, "toks": ["<s>", "assertThat", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ")", ".", "isEqualTo", "(", "p", ")", ";", "</s>"]}, {"tids": [1, 1815, 18163, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 353, 261, 293, 262, 262, 274, 2], "score": -0.21302559971809387, "weight": 1, "toks": ["<s>", "assertThat", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "is", "(", "p", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 18163, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 353, 261, 293, 262, 262, 274, 2], "score": -0.24977456033229828, "weight": 1, "toks": ["<s>", "assertThat", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "is", "(", "p", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 18163, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 353, 261, 293, 262, 262, 274, 2], "score": -0.25291943550109863, "weight": 1, "toks": ["<s>", "assertThat", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "is", "(", "p", ")", ")", ";", "</s>"]}, {"tids": [1, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 10295, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 9730, 7008, 10658, 4103, 4926, 2002, 10291, 273, 10295, 4103, 263, 15930, 10291, 261, 262, 274, 1815, 8867, 261, 293, 269, 2002, 10291, 262, 274, 2], "score": -0.2837141156196594, "weight": 1, "toks": ["<s>", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "retrievedBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "OBonsaiBucketPointer", "leftSibling", "=", "retrievedBucket", ".", "getLeftSibling", "(", ")", ";", "assertEquals", "(", "p", ",", "leftSibling", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 2151, 4103, 4709, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 261, 262, 274, 9730, 7008, 10658, 4103, 4926, 2665, 4926, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 4709, 263, 444, 3910, 10291, 261, 2665, 4926, 262, 274, 9730, 7008, 10658, 4103, 4926, 3214, 4926, 273, 2151, 4103, 4709, 263, 15930, 10291, 261, 262, 274, 1815, 8867, 261, 2665, 4926, 269, 3214, 4926, 262, 274, 289, 2], "score": -0.3151288330554962, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OSBTreeBonsaiLeafBucketTest", "treeBucketTest", "=", "new", "OSBTreeBonsaiLeafBucketTest", "(", ")", ";", "OBonsaiBucketPointer", "expectedPointer", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucketTest", ".", "setLeftSibling", "(", "expectedPointer", ")", ";", "OBonsaiBucketPointer", "actualPointer", "=", "treeBucketTest", ".", "getLeftSibling", "(", ")", ";", "assertEquals", "(", "expectedPointer", ",", "actualPointer", ")", ";", "}", "</s>"]}, {"tids": [1, 1815, 18163, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 353, 261, 293, 262, 262, 274, 2], "score": -0.31911271810531616, "weight": 1, "toks": ["<s>", "assertThat", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "is", "(", "p", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 8867, 261, 293, 269, 2151, 4103, 263, 15930, 10291, 261, 262, 262, 274, 2], "score": -0.3772682249546051, "weight": 1, "toks": ["<s>", "assertEquals", "(", "p", ",", "treeBucket", ".", "getLeftSibling", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1815, 18163, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 353, 261, 293, 262, 262, 274, 2], "score": -0.39625468850135803, "weight": 1, "toks": ["<s>", "assertThat", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "is", "(", "p", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 44.998536548568744, "bleu-max": 59.56403592718089, "bleu-min": 42.27791108934064, "bleu-avg": 48.92510422754995, "code-bleu": 37.24494138854962, "code-bleu-max": 47.717810229518605, "code-bleu-min": 35.492564105449496, "code-bleu-avg": 41.219212419453456, "edit-sim": 85, "edit-sim-max": 94, "edit-sim-min": 77, "edit-sim-avg": 83.5, "rouge-p": 87.5, "rouge-p-max": 88.88888888888889, "rouge-p-min": 75.0, "rouge-p-avg": 81.21031746031747, "rouge-r": 77.77777777777779, "rouge-r-max": 88.88888888888889, "rouge-r-min": 55.55555555555556, "rouge-r-avg": 71.11111111111111, "rouge-f": 82.35294067820071, "rouge-f-max": 88.8888883888889, "rouge-f-min": 66.66666618666667, "rouge-f-avg": 75.40849623732643, "num-seq": 10}, "time": 0.6805574893951416, "misc": {}}
{"id": 152, "data_id": "csn-98920", "input_stids": [1, 26969, 3478, 4407, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 531, 12242, 2864, 531, 4926, 531, 1649, 4926, 531, 27630, 2828, 5932, 38, 2471, 38, 7008, 10658, 4103, 9730, 7008, 10658, 4103, 4926, 32315, 32315, 327, 394, 9730, 7008, 10658, 2532, 4926, 261, 21223, 269, 1365, 4926, 262, 274, 32315, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 32315, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 289, 2], "score": -0.15150870382785797, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 342, 342, 10939, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 342, 342, 4382, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 342, 342, 5452, 5452, 263, 1815, 8867, 261, 293, 269, 2151, 4103, 263, 15930, 10291, 261, 262, 262, 274, 289, 2], "score": -0.16899548470973969, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "/", "/", "Setup", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "/", "/", "Action", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "/", "/", "Assert", "Assert", ".", "assertEquals", "(", "p", ",", "treeBucket", ".", "getLeftSibling", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 3910, 10291, 261, 262, 1216, 1185, 288, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 446, 269, 374, 269, 629, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 9730, 7008, 10658, 4103, 4926, 2665, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 2665, 262, 274, 9730, 7008, 10658, 4103, 4926, 3214, 273, 2151, 4103, 263, 15930, 10291, 261, 262, 274, 5452, 263, 1815, 8867, 261, 2665, 269, 3214, 262, 274, 289, 2], "score": -0.22692520916461945, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetLeftSibling", "(", ")", "throws", "Exception", "{", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "null", ",", "0", ",", "false", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "OBonsaiBucketPointer", "expected", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "expected", ")", ";", "OBonsaiBucketPointer", "actual", "=", "treeBucket", ".", "getLeftSibling", "(", ")", ";", "Assert", ".", "assertEquals", "(", "expected", ",", "actual", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 967, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 2665, 4926, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 2665, 4926, 262, 274, 9730, 7008, 10658, 4103, 4926, 3214, 4926, 273, 2151, 4103, 263, 15930, 10291, 261, 262, 274, 5452, 263, 1815, 8867, 261, 2665, 4926, 269, 3214, 4926, 262, 274, 289, 2], "score": -0.25780022144317627, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testGetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "expectedPointer", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "expectedPointer", ")", ";", "OBonsaiBucketPointer", "actualPointer", "=", "treeBucket", ".", "getLeftSibling", "(", ")", ";", "Assert", ".", "assertEquals", "(", "expectedPointer", ",", "actualPointer", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 289, 2], "score": -0.2591639459133148, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 289, 2], "score": -0.2803947627544403, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 289, 2], "score": -0.2919902503490448, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 289, 2], "score": -0.2980363070964813, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 289, 2], "score": -0.3092578947544098, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 289, 2], "score": -0.31214776635169983, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 27.160837865635102, "bleu-max": 27.160837865635102, "bleu-min": 10.363232116621422, "bleu-avg": 15.006330938010773, "code-bleu": 6.191306478405401, "code-bleu-max": 6.191306478405401, "code-bleu-min": 4.299098014535466, "code-bleu-avg": 4.8284237124058365, "edit-sim": 42, "edit-sim-max": 43, "edit-sim-min": 30, "edit-sim-avg": 35.3, "rouge-p": 50.0, "rouge-p-max": 50.0, "rouge-p-min": 21.428571428571427, "rouge-p-avg": 29.5934065934066, "rouge-r": 60.0, "rouge-r-max": 60.0, "rouge-r-min": 60.0, "rouge-r-avg": 60.0, "rouge-f": 54.54545404958678, "rouge-f-max": 54.54545404958678, "rouge-f-min": 31.57894698060942, "rouge-f-avg": 38.67586034753825, "num-seq": 10}, "time": 0.9596631526947021, "misc": {}}
{"id": 153, "data_id": "csn-98920", "input_stids": [1, 26969, 3478, 4407, 32315, 918, 3992, 17075, 2531, 261, 262, 274, 32315, 5932, 38, 2471, 38, 7008, 10658, 9858, 4103, 4709, 531, 12242, 2864, 531, 4926, 531, 1649, 4926, 531, 27630, 2828, 5932, 38, 2471, 38, 7008, 10658, 4103, 9730, 7008, 10658, 4103, 4926, 32315, 32315, 328, 20586, 87, 263, 15267, 261, 262, 274, 32315, 32315, 1071, 9730, 7008, 10658, 4103, 4926, 15930, 10291, 261, 262, 288, 327, 22862, 4926, 261, 1384, 397, 9686, 67, 9894, 26789, 67, 11271, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 32315, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 26969, 263, 3992, 17075, 2531, 261, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 26969, 263, 3992, 17075, 2531, 261, 262, 274, 289, 2], "score": -0.18836218118667603, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "cacheEntry", ".", "releaseExclusiveLock", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 26969, 263, 3992, 17075, 2531, 261, 262, 274, 289, 2], "score": -0.20366781949996948, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "cacheEntry", ".", "releaseExclusiveLock", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 26969, 263, 3992, 17075, 2531, 261, 262, 274, 289, 2], "score": -0.22182267904281616, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "cacheEntry", ".", "releaseExclusiveLock", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 26969, 263, 3992, 17075, 2531, 261, 262, 274, 289, 2], "score": -0.2222348153591156, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "cacheEntry", ".", "releaseExclusiveLock", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 26969, 263, 3992, 17075, 2531, 261, 262, 274, 289, 2], "score": -0.22726786136627197, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "cacheEntry", ".", "releaseExclusiveLock", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 4554, 4985, 18432, 326, 1375, 444, 3910, 10291, 1375, 707, 316, 1375, 5932, 38, 2471, 38, 7008, 10658, 4103, 1375, 263, 2], "score": -0.23007211089134216, "weight": 1, "toks": ["<s>", "You", "successfully", "tested", "the", "`", "setLeftSibling", "`", "method", "in", "`", "OSBTreeBonsaiBucket", "`", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 694, 3910, 10291, 261, 262, 1216, 1185, 288, 531, 12242, 2864, 1613, 2864, 273, 531, 12242, 2864, 263, 791, 261, 446, 262, 274, 531, 4926, 4407, 273, 1613, 2864, 263, 10533, 5368, 261, 638, 262, 274, 531, 1649, 4926, 1247, 4926, 273, 394, 531, 1649, 4926, 261, 4407, 269, 1613, 2864, 269, 374, 269, 374, 262, 274, 1247, 4926, 263, 5504, 1957, 11110, 261, 262, 274, 531, 27630, 26969, 273, 394, 531, 27630, 2828, 261, 374, 269, 374, 269, 1247, 4926, 269, 629, 262, 274, 26969, 263, 10533, 17075, 2531, 261, 262, 274, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 3407, 269, 531, 6106, 8424, 405, 2151, 4103, 273, 394, 5932, 38, 2471, 38, 7008, 10658, 4103, 411, 405, 261, 26969, 269, 374, 269, 638, 269, 531, 3708, 6306, 263, 6937, 269, 531, 2098, 6306, 263, 6937, 269, 446, 262, 274, 727, 9730, 7008, 10658, 4103, 4926, 293, 273, 394, 9730, 7008, 10658, 4103, 4926, 261, 17335, 269, 26730, 380, 576, 262, 274, 2151, 4103, 263, 444, 3910, 10291, 261, 293, 262, 274, 5452, 263, 1815, 8867, 261, 2151, 4103, 263, 15930, 10291, 261, 262, 269, 293, 262, 274, 26969, 263, 3992, 17075, 2531, 261, 262, 274, 289, 2], "score": -0.23069104552268982, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testSetLeftSibling", "(", ")", "throws", "Exception", "{", "OByteBufferPool", "bufferPool", "=", "OByteBufferPool", ".", "instance", "(", "null", ")", ";", "OPointer", "pointer", "=", "bufferPool", ".", "acquireDirect", "(", "true", ")", ";", "OCachePointer", "cachePointer", "=", "new", "OCachePointer", "(", "pointer", ",", "bufferPool", ",", "0", ",", "0", ")", ";", "cachePointer", ".", "incrementReferrer", "(", ")", ";", "OCacheEntry", "cacheEntry", "=", "new", "OCacheEntryImpl", "(", "0", ",", "0", ",", "cachePointer", ",", "false", ")", ";", "cacheEntry", ".", "acquireExclusiveLock", "(", ")", ";", "OSBTreeBonsaiBucket", "<", "Long", ",", "OIdentifiable", ">", "treeBucket", "=", "new", "OSBTreeBonsaiBucket", "<", ">", "(", "cacheEntry", ",", "0", ",", "true", ",", "OLongSerializer", ".", "INSTANCE", ",", "OLinkSerializer", ".", "INSTANCE", ",", "null", ")", ";", "final", "OBonsaiBucketPointer", "p", "=", "new", "OBonsaiBucketPointer", "(", "123", ",", "8192", "*", "2", ")", ";", "treeBucket", ".", "setLeftSibling", "(", "p", ")", ";", "Assert", ".", "assertEquals", "(", "treeBucket", ".", "getLeftSibling", "(", ")", ",", "p", ")", ";", "cacheEntry", ".", "releaseExclusiveLock", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 26969, 263, 3992, 17075, 2531, 261, 262, 274, 2], "score": -0.23072461783885956, "weight": 1, "toks": ["<s>", "cacheEntry", ".", "releaseExclusiveLock", "(", ")", ";", "</s>"]}, {"tids": [1, 1220, 2836, 1842, 4271, 326, 14176, 434, 3637, 471, 8742, 326, 2002, 10841, 316, 279, 1375, 5932, 38, 2471, 38, 7008, 10658, 4103, 1375, 294, 404, 263, 10188, 3128, 1613, 2845, 471, 1721, 4138, 279, 2657, 4407, 263, 576, 263, 678, 7506, 326, 4407, 316, 279, 1247, 4407, 471, 17071, 2097, 14502, 1056, 263, 890, 263, 10210, 279, 1247, 1241, 471, 1721, 4138, 392, 12060, 2176, 603, 518, 263, 1059, 263, 10188, 3128, 279, 1375, 5932, 38, 2471, 38, 7008, 10658, 4103, 1375, 598, 1269, 24782, 471, 2887, 279, 8862, 263, 1381, 263, 11511, 471, 1508, 9023, 326, 2002, 10841, 434, 326, 2783, 269, 1815, 310, 716, 2898, 854, 3959, 263, 1666, 263, 4275, 73, 3304, 326, 12060, 2176, 603, 326, 1247, 1241, 1839, 326, 11240, 263, 2], "score": -0.2492714375257492, "weight": 1, "toks": ["<s>", "This", "unit", "test", "checks", "the", "functionality", "of", "setting", "and", "getting", "the", "left", "sibling", "in", "a", "`", "OSBTreeBonsaiBucket", "`", ":", "1", ".", "Initializes", "buffer", "pool", "and", "acquires", "a", "direct", "pointer", ".", "2", ".", "Wraps", "the", "pointer", "in", "a", "cache", "pointer", "and", "increments", "its", "referrer", "count", ".", "3", ".", "Creates", "a", "cache", "entry", "and", "acquires", "an", "exclusive", "lock", "on", "it", ".", "4", ".", "Initializes", "a", "`", "OSBTreeBonsaiBucket", "`", "with", "specified", "serializers", "and", "without", "a", "comparator", ".", "5", ".", "Sets", "and", "then", "retrieves", "the", "left", "sibling", "of", "the", "bucket", ",", "asserting", "that", "they", "are", "equal", ".", "6", ".", "Releases", "the", "exclusive", "lock", "on", "the", "cache", "entry", "after", "the", "assertion", ".", "</s>"]}, {"tids": [1, 1220, 1842, 279, 12097, 358, 1954, 716, 326, 1375, 444, 3910, 10291, 261, 262, 1375, 707, 8214, 1678, 471, 9023, 326, 2002, 10841, 434, 279, 1375, 5932, 38, 2471, 38, 7008, 10658, 4103, 1375, 733, 1450, 279, 1375, 9730, 7008, 10658, 4103, 4926, 1375, 263, 1021, 1842, 13040, 4259, 6075, 294, 404, 263, 28822, 279, 1613, 2845, 471, 752, 279, 4407, 261, 1375, 531, 4926, 1375, 262, 263, 576, 263, 1788, 279, 1247, 4407, 261, 1375, 531, 1649, 4926, 1375, 262, 598, 326, 7243, 20598, 4407, 263, 890, 263, 17883, 326, 14502, 3895, 434, 326, 1247, 4407, 263, 1059, 263, 1788, 279, 1247, 1241, 261, 1375, 531, 27630, 1375, 262, 471, 10533, 392, 12060, 2176, 603, 518, 263, 1381, 263, 26492, 279, 1375, 5932, 38, 2471, 38, 7008, 10658, 4103, 1375, 1450, 326, 1247, 1241, 263, 1666, 263, 1788, 279, 1375, 9730, 7008, 10658, 4103, 4926, 1375, 471, 444, 518, 487, 326, 2002, 10841, 434, 326, 2151, 2783, 263, 2371, 263, 5452, 716, 326, 10295, 2002, 10841, 1885, 326, 4407, 444, 263, 1725, 263, 10819, 326, 12060, 2176, 15770, 603, 326, 1247, 1241, 263, 1220, 1842, 11932, 326, 444, 471, 336, 18699, 1961, 1440, 487, 12613, 364, 30632, 326, 2002, 10841, 4407, 316, 279, 605, 300, 4902, 2783, 3695, 263, 2], "score": -0.26818394660949707, "weight": 1, "toks": ["<s>", "This", "test", "aims", "to", "validate", "that", "the", "`", "setLeftSibling", "(", ")", "`", "method", "properly", "sets", "and", "retrieves", "the", "left", "sibling", "of", "a", "`", "OSBTreeBonsaiBucket", "`", "object", "using", "a", "`", "OBonsaiBucketPointer", "`", ".", "The", "test", "follows", "these", "steps", ":", "1", ".", "Acquire", "a", "buffer", "pool", "and", "create", "a", "pointer", "(", "`", "OPointer", "`", ")", ".", "2", ".", "Create", "a", "cache", "pointer", "(", "`", "OCachePointer", "`", ")", "with", "the", "previously", "acquired", "pointer", ".", "3", ".", "Increment", "the", "referrer", "counter", "of", "the", "cache", "pointer", ".", "4", ".", "Create", "a", "cache", "entry", "(", "`", "OCacheEntry", "`", ")", "and", "acquire", "an", "exclusive", "lock", "on", "it", ".", "5", ".", "Instantiate", "a", "`", "OSBTreeBonsaiBucket", "`", "using", "the", "cache", "entry", ".", "6", ".", "Create", "a", "`", "OBonsaiBucketPointer", "`", "and", "set", "it", "as", "the", "left", "sibling", "of", "the", "tree", "bucket", ".", "7", ".", "Assert", "that", "the", "retrieved", "left", "sibling", "matches", "the", "pointer", "set", ".", "8", ".", "Release", "the", "exclusive", "lock", "held", "on", "the", "cache", "entry", ".", "This", "test", "ensures", "the", "set", "and", "get", "functionalities", "work", "as", "intended", "for", "managing", "the", "left", "sibling", "pointer", "in", "a", "B", "-", "Tree", "bucket", "structure", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 18.219579170624282, "bleu-max": 27.160837865635102, "bleu-min": 5.955840366736178, "bleu-avg": 15.881354107352323, "code-bleu": 22.615677328958327, "code-bleu-max": 23.127084392946653, "code-bleu-min": 3.964826197388243, "code-bleu-avg": 11.949389233239282, "edit-sim": 40, "edit-sim-max": 44, "edit-sim-min": 24, "edit-sim-avg": 35.3, "rouge-p": 42.857142857142854, "rouge-p-max": 50.0, "rouge-p-min": 16.666666666666664, "rouge-p-avg": 33.96708683473389, "rouge-r": 60.0, "rouge-r-max": 60.0, "rouge-r-min": 60.0, "rouge-r-avg": 60.0, "rouge-f": 49.9999995138889, "rouge-f-max": 54.54545404958678, "rouge-f-min": 26.086956181474484, "rouge-f-avg": 41.73881062573523, "num-seq": 10}, "time": 1.3582069873809814, "misc": {}}
{"id": 154, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 32315, 4869, 350, 5013, 23102, 1891, 4709, 32315, 531, 4254, 2519, 4188, 32315, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.24612967669963837, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.25136077404022217, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 1788, 279, 4143, 1842, 648, 364, 326, 1375, 1842, 986, 11710, 16776, 12922, 1375, 707, 263, 2], "score": -0.33560290932655334, "weight": 1, "toks": ["<s>", "Create", "a", "simple", "test", "case", "for", "the", "`", "testAddTwoSavedDocuments", "`", "method", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.34025323390960693, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 288, 289, 2], "score": -0.36307546496391296, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "{", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 288, 289, 2], "score": -0.3646060824394226, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "{", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.40657326579093933, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 7693, 326, 1375, 4869, 350, 5013, 23102, 1891, 4709, 1375, 11643, 8214, 263, 2], "score": -0.417924165725708, "weight": 1, "toks": ["<s>", "Ensure", "the", "`", "ORidBagAtomicUpdateTest", "`", "initializes", "properly", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 288, 289, 2], "score": -0.4273507595062256, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "{", "}", "</s>"]}, {"tids": [1, 632, 1842, 1410, 527, 2795, 5198, 7429, 358, 326, 2063, 471, 3929, 326, 1056, 263, 2], "score": -0.43419066071510315, "weight": 1, "toks": ["<s>", "@", "test", "should", "add", "two", "saved", "documents", "to", "the", "database", "and", "verify", "the", "count", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 12.210041329719926, "bleu-max": 14.849150426194676, "bleu-min": 11.757893526154534, "bleu-avg": 13.124023889083514, "code-bleu": 10.108906571011778, "code-bleu-max": 22.20032094870385, "code-bleu-min": 10.108906571011778, "code-bleu-avg": 12.070055778063853, "edit-sim": 36, "edit-sim-max": 38, "edit-sim-min": 35, "edit-sim-avg": 36.5, "rouge-p": 57.14285714285714, "rouge-p-max": 62.5, "rouge-p-min": 40.0, "rouge-p-avg": 51.22402597402597, "rouge-r": 44.44444444444444, "rouge-r-max": 55.55555555555556, "rouge-r-min": 44.44444444444444, "rouge-r-avg": 47.77777777777778, "rouge-f": 49.99999950781251, "rouge-f-max": 58.82352891349482, "rouge-f-min": 42.10526265927979, "rouge-f-avg": 49.21052581868253, "num-seq": 10}, "time": 0.8818044662475586, "misc": {}}
{"id": 155, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 32315, 531, 4254, 2519, 4188, 32315, 327, 394, 531, 1380, 1064, 261, 1056, 262, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2], "topk": [{"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.2432003915309906, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.33509430289268494, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 7693, 326, 2063, 353, 8214, 10191, 1865, 23936, 326, 1300, 434, 2186, 316, 279, 2855, 263, 2], "score": -0.34159669280052185, "weight": 1, "toks": ["<s>", "Ensure", "the", "database", "is", "properly", "opened", "before", "querying", "the", "number", "of", "elements", "in", "a", "cluster", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.36607396602630615, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 2974, 14382, 715, 1842, 326, 1375, 1056, 3629, 3471, 1375, 707, 269, 999, 326, 3751, 16745, 1842, 648, 316, 3433, 2836, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1380, 3629, 3471, 261, 262, 288, 342, 342, 10371, 726, 294, 1000, 731, 326, 2063, 471, 527, 2186, 358, 326, 2855, 509, 30560, 273, 2063, 263, 4829, 3629, 548, 261, 262, 274, 2063, 263, 1923, 261, 394, 531, 2519, 261, 262, 262, 274, 342, 342, 4725, 21249, 531, 2519, 353, 326, 618, 4041, 2063, 263, 1923, 261, 394, 531, 2519, 261, 262, 262, 274, 342, 342, 4603, 294, 968, 326, 1300, 434, 2186, 316, 326, 2855, 1525, 1056, 273, 2063, 263, 1056, 3629, 3471, 261, 30560, 262, 274, 342, 342, 5452, 294, 8553, 326, 2665, 1056, 1815, 8867, 261, 576, 269, 1056, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.374307781457901, "weight": 1, "toks": ["<s>", "To", "efficiently", "test", "the", "`", "countClusterElements", "`", "method", ",", "use", "the", "following", "minimal", "test", "case", "in", "your", "unit", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testCountClusterElements", "(", ")", "{", "/", "/", "Arrange", ":", "Set", "up", "the", "database", "and", "add", "elements", "to", "the", "cluster", "int", "clusterId", "=", "database", ".", "getDefaultClusterId", "(", ")", ";", "database", ".", "save", "(", "new", "ODocument", "(", ")", ")", ";", "/", "/", "Assuming", "ODocument", "is", "the", "type", "stored", "database", ".", "save", "(", "new", "ODocument", "(", ")", ")", ";", "/", "/", "Act", ":", "Get", "the", "number", "of", "elements", "in", "the", "cluster", "long", "count", "=", "database", ".", "countClusterElements", "(", "clusterId", ")", ";", "/", "/", "Assert", ":", "Verify", "the", "expected", "count", "assertEquals", "(", "2", ",", "count", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 1056, 3629, 3471, 1375, 707, 269, 326, 1842, 1410, 4356, 518, 471, 1815, 326, 2665, 6885, 263, 13743, 353, 279, 20570, 784, 4031, 358, 11458, 4123, 279, 1842, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 1380, 3629, 3471, 261, 262, 288, 342, 342, 10371, 726, 509, 30560, 273, 2063, 263, 4829, 3629, 548, 261, 262, 274, 1525, 2665, 1380, 273, 342, 342, 444, 326, 2665, 1056, 2511, 603, 3433, 3875, 274, 342, 342, 4603, 1525, 3214, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 30560, 262, 274, 342, 342, 5452, 1815, 8867, 261, 2665, 1380, 269, 3214, 1380, 269, 315, 1021, 1056, 434, 2186, 1410, 845, 326, 2665, 460, 263, 315, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 707, 4271, 309, 326, 3214, 1056, 434, 2855, 2186, 1885, 326, 2665, 1056, 269, 1492, 1846, 1410, 4426, 2511, 603, 326, 2923, 4636, 471, 501, 3875, 316, 3433, 1842, 3330, 263, 2], "score": -0.4027671217918396, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "countClusterElements", "`", "method", ",", "the", "test", "should", "invoke", "it", "and", "assert", "the", "expected", "behavior", ".", "Here", "is", "a", "concise", "way", "to", "compose", "such", "a", "test", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testCountClusterElements", "(", ")", "{", "/", "/", "Arrange", "int", "clusterId", "=", "database", ".", "getDefaultClusterId", "(", ")", ";", "long", "expectedCount", "=", "/", "/", "set", "the", "expected", "count", "based", "on", "your", "setup", ";", "/", "/", "Act", "long", "actualCount", "=", "database", ".", "countClusterElements", "(", "clusterId", ")", ";", "/", "/", "Assert", "assertEquals", "(", "expectedCount", ",", "actualCount", ",", "\"", "The", "count", "of", "elements", "should", "match", "the", "expected", "value", ".", "\"", ")", ";", "}", "`", "`", "`", "This", "test", "method", "checks", "if", "the", "actual", "count", "of", "cluster", "elements", "matches", "the", "expected", "count", ",", "which", "you", "should", "define", "based", "on", "the", "specific", "conditions", "and", "data", "setup", "in", "your", "test", "environment", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.4218684732913971, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1380, 3629, 3471, 261, 262, 288, 1525, 2172, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 289, 2], "score": -0.4257975220680237, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCountClusterElements", "(", ")", "{", "long", "initialCount", "=", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.4475944936275482, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 1380, 3629, 3471, 261, 262, 2], "score": -0.4483979642391205, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testCountClusterElements", "(", ")", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 28.606242122742575, "bleu-max": 28.606242122742575, "bleu-min": 15.320778812009204, "bleu-avg": 21.707656291721587, "code-bleu": 19.65074535479063, "code-bleu-max": 19.65074535479063, "code-bleu-min": 4.655352427122125, "code-bleu-avg": 9.434471721210715, "edit-sim": 43, "edit-sim-max": 43, "edit-sim-min": 33, "edit-sim-avg": 38.4, "rouge-p": 42.857142857142854, "rouge-p-max": 50.0, "rouge-p-min": 30.0, "rouge-p-avg": 39.02380952380952, "rouge-r": 60.0, "rouge-r-max": 80.0, "rouge-r-min": 60.0, "rouge-r-avg": 64.0, "rouge-f": 49.9999995138889, "rouge-f-max": 61.53846106508877, "rouge-f-min": 39.99999955555556, "rouge-f-avg": 48.28937682080651, "num-seq": 10}, "time": 0.7416555881500244, "misc": {}}
{"id": 156, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 632, 1439, 1071, 531, 4254, 411, 531, 2115, 405, 2376, 261, 262, 288, 866, 3678, 4496, 261, 262, 274, 2713, 263, 2376, 261, 262, 274, 327, 333, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 32315, 32315, 327, 394, 531, 1380, 1064, 261, 1056, 262, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 2], "topk": [{"tids": [1, 1436, 2795, 7429, 471, 3294, 326, 2492, 263, 2], "score": -0.16345568001270294, "weight": 1, "toks": ["<s>", "Add", "two", "documents", "and", "commit", "the", "transaction", ".", "</s>"]}, {"tids": [1, 2063, 263, 1923, 261, 394, 531, 2519, 261, 262, 262, 274, 2063, 263, 1923, 261, 394, 531, 2519, 261, 262, 262, 274, 2], "score": -0.28521350026130676, "weight": 1, "toks": ["<s>", "database", ".", "save", "(", "new", "ODocument", "(", ")", ")", ";", "database", ".", "save", "(", "new", "ODocument", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1021, 20579, 3323, 1842, 364, 326, 1375, 2376, 261, 262, 1375, 707, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 8149, 261, 262, 288, 2063, 263, 2376, 261, 262, 274, 289, 1375, 1375, 1375, 2], "score": -0.289308100938797, "weight": 1, "toks": ["<s>", "The", "shortest", "possible", "test", "for", "the", "`", "begin", "(", ")", "`", "method", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testBegin", "(", ")", "{", "database", ".", "begin", "(", ")", ";", "}", "`", "`", "`", "</s>"]}, {"tids": [1, 2063, 263, 1923, 261, 394, 531, 2519, 261, 262, 262, 274, 2063, 263, 1923, 261, 394, 531, 2519, 261, 262, 262, 274, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.29378068447113037, "weight": 1, "toks": ["<s>", "database", ".", "save", "(", "new", "ODocument", "(", ")", ")", ";", "database", ".", "save", "(", "new", "ODocument", "(", ")", ")", ";", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 7693, 716, 3937, 7429, 854, 3096, 471, 21591, 8783, 316, 326, 3853, 1056, 263, 2], "score": -0.3611622154712677, "weight": 1, "toks": ["<s>", "Ensure", "that", "both", "documents", "are", "added", "and", "reflected", "correctly", "in", "the", "records", "count", ".", "</s>"]}, {"tids": [1, 2063, 263, 1923, 261, 394, 531, 2519, 261, 262, 262, 274, 2], "score": -0.36910900473594666, "weight": 1, "toks": ["<s>", "database", ".", "save", "(", "new", "ODocument", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 288, 1525, 2172, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 342, 342, 3356, 358, 527, 7429, 2063, 263, 3294, 261, 262, 274, 1525, 394, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 1815, 8867, 261, 2172, 1380, 397, 576, 269, 394, 1380, 262, 274, 289, 2], "score": -0.3751327097415924, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "{", "long", "initialCount", "=", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ";", "database", ".", "begin", "(", ")", ";", "/", "/", "Code", "to", "add", "documents", "database", ".", "commit", "(", ")", ";", "long", "newCount", "=", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ";", "assertEquals", "(", "initialCount", "+", "2", ",", "newCount", ")", ";", "}", "</s>"]}, {"tids": [1, 1021, 707, 1375, 1842, 986, 11710, 16776, 12922, 261, 262, 1375, 1410, 11247, 598, 12392, 2795, 7429, 1368, 326, 2063, 269, 471, 1508, 1815, 310, 326, 10929, 316, 3853, 1056, 1603, 2492, 263, 1220, 903, 1954, 716, 326, 1375, 2376, 261, 262, 1375, 707, 8783, 2542, 279, 2492, 15632, 1668, 5295, 263, 2], "score": -0.3815893232822418, "weight": 1, "toks": ["<s>", "The", "method", "`", "testAddTwoSavedDocuments", "(", ")", "`", "should", "proceed", "with", "saving", "two", "documents", "into", "the", "database", ",", "and", "then", "asserting", "the", "increase", "in", "records", "count", "post", "transaction", ".", "This", "will", "validate", "that", "the", "`", "begin", "(", ")", "`", "method", "correctly", "starts", "a", "transaction", "allowing", "document", "operations", ".", "</s>"]}, {"tids": [1, 2063, 263, 1923, 261, 394, 531, 2519, 261, 262, 262, 274, 2], "score": -0.3850223124027252, "weight": 1, "toks": ["<s>", "database", ".", "save", "(", "new", "ODocument", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.3874223232269287, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 34.92671028290049, "bleu-max": 34.92671028290049, "bleu-min": 19.01821839976893, "bleu-avg": 28.057489977134786, "code-bleu": 58.84455382833009, "code-bleu-max": 58.84455382833009, "code-bleu-min": 16.28855535637932, "code-bleu-avg": 37.42484320968636, "edit-sim": 47, "edit-sim-max": 49, "edit-sim-min": 38, "edit-sim-avg": 44.8, "rouge-p": 71.42857142857143, "rouge-p-max": 71.42857142857143, "rouge-p-min": 50.0, "rouge-p-avg": 62.67857142857143, "rouge-r": 71.42857142857143, "rouge-r-max": 71.42857142857143, "rouge-r-min": 71.42857142857143, "rouge-r-avg": 71.42857142857143, "rouge-f": 71.42857092857143, "rouge-f-max": 71.42857092857143, "rouge-f-min": 58.823528927335644, "rouge-f-avg": 66.526610148483, "num-seq": 10}, "time": 0.7949855327606201, "misc": {}}
{"id": 157, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 1071, 531, 2519, 261, 262, 288, 3875, 261, 262, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 640, 13227, 531, 2519, 32315, 32315, 1163, 263, 12325, 261, 315, 3902, 6, 269, 2478, 263, 1723, 261, 262, 262, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 2], "topk": [{"tids": [1, 1365, 1759, 263, 1923, 261, 262, 274, 531, 2519, 1151, 1759, 273, 394, 531, 2519, 261, 262, 274, 1151, 1759, 263, 1923, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 1151, 315, 269, 1151, 1759, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 1525, 3526, 6499, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 1815, 8867, 261, 3853, 1380, 397, 576, 269, 3526, 6499, 1380, 262, 274, 2], "score": -0.17280152440071106, "weight": 1, "toks": ["<s>", "rootDoc", ".", "save", "(", ")", ";", "ODocument", "childDoc", "=", "new", "ODocument", "(", ")", ";", "childDoc", ".", "save", "(", ")", ";", "rootDoc", ".", "field", "(", "\"", "child", "\"", ",", "childDoc", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "long", "updatedRecordsCount", "=", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ";", "assertEquals", "(", "recordsCount", "+", "2", ",", "updatedRecordsCount", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.27977439761161804, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 288, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 262, 274, 531, 2519, 997, 22, 273, 394, 531, 2519, 261, 262, 274, 289, 2], "score": -0.29347163438796997, "weight": 1, "toks": ["<s>", "public", "void", "testAddTwoSavedDocuments", "(", ")", "{", "ODocument", "doc1", "=", "new", "ODocument", "(", ")", ";", "ODocument", "doc2", "=", "new", "ODocument", "(", ")", ";", "}", "</s>"]}, {"tids": [1, 1365, 1759, 263, 1923, 261, 262, 274, 531, 2519, 8459, 1759, 273, 394, 531, 2519, 261, 262, 274, 8459, 1759, 263, 1923, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 8459, 1759, 315, 269, 8459, 1759, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 1525, 394, 6499, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 1815, 8867, 261, 394, 6499, 1380, 269, 3853, 1380, 397, 576, 262, 274, 2], "score": -0.29409584403038025, "weight": 1, "toks": ["<s>", "rootDoc", ".", "save", "(", ")", ";", "ODocument", "linkedDoc", "=", "new", "ODocument", "(", ")", ";", "linkedDoc", ".", "save", "(", ")", ";", "rootDoc", ".", "field", "(", "\"", "linkedDoc", "\"", ",", "linkedDoc", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "long", "newRecordsCount", "=", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ";", "assertEquals", "(", "newRecordsCount", ",", "recordsCount", "+", "2", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.31657499074935913, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 1365, 1759, 263, 1923, 261, 262, 274, 531, 2519, 1151, 1759, 273, 394, 531, 2519, 261, 262, 274, 1151, 1759, 263, 1923, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 1151, 315, 269, 1151, 1759, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 1525, 394, 6499, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 1815, 8867, 261, 394, 6499, 1380, 269, 3853, 1380, 397, 576, 262, 274, 2], "score": -0.40764233469963074, "weight": 1, "toks": ["<s>", "rootDoc", ".", "save", "(", ")", ";", "ODocument", "childDoc", "=", "new", "ODocument", "(", ")", ";", "childDoc", ".", "save", "(", ")", ";", "rootDoc", ".", "field", "(", "\"", "child", "\"", ",", "childDoc", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "long", "newRecordsCount", "=", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ";", "assertEquals", "(", "newRecordsCount", ",", "recordsCount", "+", "2", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 262, 274, 997, 21, 263, 652, 261, 315, 508, 315, 269, 315, 997, 21, 315, 262, 274, 997, 21, 263, 1923, 261, 262, 274, 531, 2519, 997, 22, 273, 394, 531, 2519, 261, 262, 274, 997, 22, 263, 652, 261, 315, 508, 315, 269, 315, 997, 22, 315, 262, 274, 997, 22, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 1525, 394, 6499, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 1815, 8867, 261, 3853, 1380, 397, 576, 269, 394, 6499, 1380, 262, 274, 2], "score": -0.43608567118644714, "weight": 1, "toks": ["<s>", "ODocument", "doc1", "=", "new", "ODocument", "(", ")", ";", "doc1", ".", "field", "(", "\"", "name", "\"", ",", "\"", "doc1", "\"", ")", ";", "doc1", ".", "save", "(", ")", ";", "ODocument", "doc2", "=", "new", "ODocument", "(", ")", ";", "doc2", ".", "field", "(", "\"", "name", "\"", ",", "\"", "doc2", "\"", ")", ";", "doc2", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "long", "newRecordsCount", "=", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ";", "assertEquals", "(", "recordsCount", "+", "2", ",", "newRecordsCount", ")", ";", "</s>"]}, {"tids": [1, 1365, 1759, 263, 1923, 261, 262, 274, 2], "score": -0.4535262882709503, "weight": 1, "toks": ["<s>", "rootDoc", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 1365, 1759, 263, 1923, 261, 262, 274, 531, 2519, 3746, 1759, 273, 394, 531, 2519, 261, 262, 274, 3746, 1759, 263, 1923, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 8459, 1759, 315, 269, 3746, 1759, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 1525, 3526, 6499, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 1815, 8867, 261, 3526, 6499, 1380, 269, 3853, 1380, 397, 576, 262, 274, 2], "score": -0.45461246371269226, "weight": 1, "toks": ["<s>", "rootDoc", ".", "save", "(", ")", ";", "ODocument", "relatedDoc", "=", "new", "ODocument", "(", ")", ";", "relatedDoc", ".", "save", "(", ")", ";", "rootDoc", ".", "field", "(", "\"", "linkedDoc", "\"", ",", "relatedDoc", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "long", "updatedRecordsCount", "=", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ";", "assertEquals", "(", "updatedRecordsCount", ",", "recordsCount", "+", "2", ")", ";", "</s>"]}, {"tids": [1, 1788, 279, 394, 1375, 531, 2519, 1375, 791, 471, 527, 518, 358, 326, 2063, 263, 2], "score": -0.48425188660621643, "weight": 1, "toks": ["<s>", "Create", "a", "new", "`", "ODocument", "`", "instance", "and", "add", "it", "to", "the", "database", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 19.070828081828378, "bleu-max": 21.911212464749457, "bleu-min": 10.363232116621422, "bleu-avg": 17.26943722947148, "code-bleu": 2.871542854751236, "code-bleu-max": 7.827392283010829, "code-bleu-min": 2.599758867279429, "code-bleu-avg": 3.3507850765450016, "edit-sim": 31, "edit-sim-max": 37, "edit-sim-min": 26, "edit-sim-avg": 31.3, "rouge-p": 42.857142857142854, "rouge-p-max": 50.0, "rouge-p-min": 23.076923076923077, "rouge-p-avg": 37.472527472527474, "rouge-r": 42.857142857142854, "rouge-r-max": 42.857142857142854, "rouge-r-min": 42.857142857142854, "rouge-r-avg": 42.85714285714285, "rouge-f": 42.857142357142855, "rouge-f-max": 46.153845656804734, "rouge-f-min": 29.999999545000005, "rouge-f-avg": 39.47252698271222, "num-seq": 10}, "time": 0.8966348171234131, "misc": {}}
{"id": 158, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 1071, 4869, 350, 5013, 261, 262, 288, 1208, 261, 262, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 640, 13227, 531, 2519, 4869, 350, 5013, 32315, 32315, 4498, 411, 531, 6106, 8424, 405, 1831, 2360, 273, 13189, 263, 1831, 3198, 261, 262, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 2], "topk": [{"tids": [1, 1815, 18163, 261, 10911, 5013, 263, 963, 261, 262, 269, 353, 261, 374, 262, 262, 274, 2], "score": -0.2127183973789215, "weight": 1, "toks": ["<s>", "assertThat", "(", "ridBag", ".", "size", "(", ")", ",", "is", "(", "0", ")", ")", ";", "</s>"]}, {"tids": [1, 320, 5457, 1151, 1759, 273, 394, 531, 2519, 261, 262, 274, 2], "score": -0.22996124625205994, "weight": 1, "toks": ["<s>", "odocument", "childDoc", "=", "new", "ODocument", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 288, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 262, 274, 531, 2519, 997, 22, 273, 394, 531, 2519, 261, 262, 274, 10911, 5013, 263, 527, 261, 997, 21, 262, 274, 10911, 5013, 263, 527, 261, 997, 22, 262, 274, 1815, 8867, 261, 576, 269, 10911, 5013, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.2767973840236664, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "{", "ORidBag", "ridBag", "=", "new", "ORidBag", "(", ")", ";", "ODocument", "doc1", "=", "new", "ODocument", "(", ")", ";", "ODocument", "doc2", "=", "new", "ODocument", "(", ")", ";", "ridBag", ".", "add", "(", "doc1", ")", ";", "ridBag", ".", "add", "(", "doc2", ")", ";", "assertEquals", "(", "2", ",", "ridBag", ".", "size", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 1436, 392, 531, 2519, 358, 326, 4869, 350, 5013, 471, 1923, 518, 358, 3929, 326, 13189, 4533, 8783, 263, 2], "score": -0.29866552352905273, "weight": 1, "toks": ["<s>", "Add", "an", "ODocument", "to", "the", "ORidBag", "and", "save", "it", "to", "verify", "the", "bag", "updates", "correctly", ".", "</s>"]}, {"tids": [1, 9190, 1375, 4869, 350, 5013, 1375, 598, 2795, 5198, 7429, 471, 3929, 3675, 2719, 263, 2], "score": -0.3038753569126129, "weight": 1, "toks": ["<s>", "Initialize", "`", "ORidBag", "`", "with", "two", "saved", "documents", "and", "verify", "their", "addition", ".", "</s>"]}, {"tids": [1, 1436, 1375, 1365, 1759, 263, 1923, 261, 262, 274, 1375, 471, 1375, 10911, 5013, 263, 527, 261, 1365, 1759, 262, 274, 1375, 263, 2], "score": -0.35181981325149536, "weight": 1, "toks": ["<s>", "Add", "`", "rootDoc", ".", "save", "(", ")", ";", "`", "and", "`", "ridBag", ".", "add", "(", "rootDoc", ")", ";", "`", ".", "</s>"]}, {"tids": [1, 7693, 326, 1375, 4869, 350, 5013, 1375, 11643, 8783, 471, 848, 912, 7429, 263, 2], "score": -0.38524526357650757, "weight": 1, "toks": ["<s>", "Ensure", "the", "`", "ORidBag", "`", "initializes", "correctly", "and", "can", "contain", "documents", ".", "</s>"]}, {"tids": [1, 5452, 263, 1815, 5510, 261, 10911, 5013, 263, 2709, 261, 262, 262, 274, 2], "score": -0.38723379373550415, "weight": 1, "toks": ["<s>", "Assert", ".", "assertTrue", "(", "ridBag", ".", "isEmpty", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 1365, 1759, 263, 652, 261, 315, 10911, 5013, 315, 269, 10911, 5013, 262, 274, 2], "score": -0.38992148637771606, "weight": 1, "toks": ["<s>", "rootDoc", ".", "field", "(", "\"", "ridBag", "\"", ",", "ridBag", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 1365, 1759, 262, 274, 2], "score": -0.39659279584884644, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "rootDoc", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 22.5882112206306, "bleu-max": 24.370348190300824, "bleu-min": 22.5882112206306, "bleu-avg": 23.417456757207965, "code-bleu": 4.527532058013306, "code-bleu-max": 4.781187671482845, "code-bleu-min": 4.527532058013306, "code-bleu-avg": 4.6326329414127825, "edit-sim": 38, "edit-sim-max": 51, "edit-sim-min": 37, "edit-sim-avg": 42.1, "rouge-p": 83.33333333333334, "rouge-p-max": 83.33333333333334, "rouge-p-min": 75.0, "rouge-p-avg": 78.33333333333334, "rouge-r": 62.5, "rouge-r-max": 75.0, "rouge-r-min": 62.5, "rouge-r-avg": 70.0, "rouge-f": 71.42857093877552, "rouge-f-max": 74.9999995, "rouge-f-min": 71.42857093877552, "rouge-f-avg": 73.57142807551023, "num-seq": 10}, "time": 0.5779287815093994, "misc": {}}
{"id": 159, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 1071, 531, 2519, 652, 261, 727, 514, 277, 7287, 269, 1033, 277, 16107, 262, 288, 327, 652, 261, 277, 7287, 269, 277, 16107, 269, 531, 6517, 9661, 263, 8984, 67, 10564, 67, 8552, 262, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 640, 13227, 531, 2519, 4869, 350, 5013, 32315, 32315, 1250, 1392, 273, 629, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 3902, 6, 269, 10911, 5013, 262, 274, 2], "topk": [{"tids": [1, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 262, 274, 10911, 5013, 263, 527, 261, 997, 21, 262, 274, 997, 21, 263, 1923, 261, 262, 274, 2], "score": -0.24015186727046967, "weight": 1, "toks": ["<s>", "ODocument", "doc1", "=", "new", "ODocument", "(", ")", ";", "ridBag", ".", "add", "(", "doc1", ")", ";", "doc1", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 8459, 1759, 273, 394, 531, 2519, 261, 262, 274, 2], "score": -0.34588783979415894, "weight": 1, "toks": ["<s>", "ODocument", "linkedDoc", "=", "new", "ODocument", "(", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 262, 274, 997, 21, 263, 1923, 261, 262, 274, 10911, 5013, 263, 527, 261, 997, 21, 262, 274, 2], "score": -0.4028104245662689, "weight": 1, "toks": ["<s>", "ODocument", "doc1", "=", "new", "ODocument", "(", ")", ";", "doc1", ".", "save", "(", ")", ";", "ridBag", ".", "add", "(", "doc1", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 262, 274, 997, 21, 263, 652, 261, 315, 508, 315, 269, 315, 3521, 21, 315, 262, 274, 997, 21, 263, 1923, 261, 262, 274, 10911, 5013, 263, 527, 261, 997, 21, 262, 274, 2], "score": -0.41149306297302246, "weight": 1, "toks": ["<s>", "ODocument", "doc1", "=", "new", "ODocument", "(", ")", ";", "doc1", ".", "field", "(", "\"", "name", "\"", ",", "\"", "Doc1", "\"", ")", ";", "doc1", ".", "save", "(", ")", ";", "ridBag", ".", "add", "(", "doc1", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 262, 274, 997, 21, 263, 652, 261, 315, 508, 315, 269, 315, 3521, 21, 315, 262, 274, 997, 21, 263, 1923, 261, 262, 274, 10911, 5013, 263, 527, 261, 997, 21, 262, 274, 2], "score": -0.430097371339798, "weight": 1, "toks": ["<s>", "ODocument", "doc1", "=", "new", "ODocument", "(", ")", ";", "doc1", ".", "field", "(", "\"", "name", "\"", ",", "\"", "Doc1", "\"", ")", ";", "doc1", ".", "save", "(", ")", ";", "ridBag", ".", "add", "(", "doc1", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 262, 274, 2], "score": -0.4405171275138855, "weight": 1, "toks": ["<s>", "ODocument", "doc1", "=", "new", "ODocument", "(", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 262, 274, 997, 21, 263, 1923, 261, 262, 274, 2], "score": -0.4422387182712555, "weight": 1, "toks": ["<s>", "ODocument", "doc1", "=", "new", "ODocument", "(", ")", ";", "doc1", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 997, 13786, 273, 394, 531, 2519, 261, 262, 274, 2], "score": -0.4498233199119568, "weight": 1, "toks": ["<s>", "ODocument", "docToAdd", "=", "new", "ODocument", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 288, 2063, 263, 2376, 261, 262, 274, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 262, 274, 531, 2519, 997, 22, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 10911, 5013, 263, 527, 261, 997, 21, 262, 274, 10911, 5013, 263, 527, 261, 997, 22, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 10911, 5013, 315, 269, 10911, 5013, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 1815, 8867, 261, 576, 269, 10911, 5013, 263, 963, 261, 262, 262, 274, 289, 2], "score": -0.4550212323665619, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "{", "database", ".", "begin", "(", ")", ";", "ODocument", "doc1", "=", "new", "ODocument", "(", ")", ";", "ODocument", "doc2", "=", "new", "ODocument", "(", ")", ";", "ORidBag", "ridBag", "=", "new", "ORidBag", "(", ")", ";", "ridBag", ".", "add", "(", "doc1", ")", ";", "ridBag", ".", "add", "(", "doc2", ")", ";", "ODocument", "rootDoc", "=", "new", "ODocument", "(", ")", ";", "rootDoc", ".", "field", "(", "\"", "ridBag", "\"", ",", "ridBag", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "assertEquals", "(", "2", ",", "ridBag", ".", "size", "(", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 531, 2519, 997, 21, 273, 394, 531, 2519, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 7128, 315, 262, 263, 527, 261, 997, 21, 262, 274, 2], "score": -0.45641186833381653, "weight": 1, "toks": ["<s>", "ODocument", "doc1", "=", "new", "ODocument", "(", ")", ";", "rootDoc", ".", "field", "(", "\"", "STR", "\"", ")", ".", "add", "(", "doc1", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 21.911212464749457, "bleu-max": 31.194930360587502, "bleu-min": 13.083737883508872, "bleu-avg": 20.29703708049903, "code-bleu": 3.1438483914162414, "code-bleu-max": 26.30048109872637, "code-bleu-min": 2.871542854751236, "code-bleu-avg": 6.405367069160566, "edit-sim": 51, "edit-sim-max": 61, "edit-sim-min": 35, "edit-sim-avg": 46.7, "rouge-p": 50.0, "rouge-p-max": 55.55555555555556, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 44.30555555555556, "rouge-r": 42.857142857142854, "rouge-r-max": 71.42857142857143, "rouge-r-min": 42.857142857142854, "rouge-r-avg": 49.999999999999986, "rouge-f": 46.153845656804734, "rouge-f-max": 62.49999950781252, "rouge-f-min": 39.999999502222224, "rouge-f-avg": 46.18522218162134, "num-seq": 10}, "time": 0.6845812797546387, "misc": {}}
{"id": 160, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 1071, 531, 2519, 261, 262, 288, 3875, 261, 262, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 640, 13227, 531, 2519, 4869, 350, 5013, 531, 2519, 32315, 32315, 1250, 1392, 273, 629, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 3902, 6, 269, 10911, 5013, 262, 274, 531, 2519, 997, 3335, 273, 394, 531, 2519, 261, 262, 274, 2], "topk": [{"tids": [1, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 2], "score": -0.17544475197792053, "weight": 1, "toks": ["<s>", "ODocument", "docTwo", "=", "new", "ODocument", "(", ")", ";", "</s>"]}, {"tids": [1, 997, 3335, 263, 652, 261, 315, 508, 315, 269, 315, 4319, 6942, 315, 262, 274, 2], "score": -0.20237691700458527, "weight": 1, "toks": ["<s>", "docOne", ".", "field", "(", "\"", "name", "\"", ",", "\"", "Document", "One", "\"", ")", ";", "</s>"]}, {"tids": [1, 997, 3335, 263, 1923, 261, 262, 274, 2], "score": -0.2778818607330322, "weight": 1, "toks": ["<s>", "docOne", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 997, 3335, 263, 652, 261, 315, 7128, 315, 269, 315, 460, 21, 315, 262, 274, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.30788329243659973, "weight": 1, "toks": ["<s>", "docOne", ".", "field", "(", "\"", "STR", "\"", ",", "\"", "value1", "\"", ")", ";", "ridBag", ".", "add", "(", "docOne", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 2], "score": -0.3724663555622101, "weight": 1, "toks": ["<s>", "ODocument", "docTwo", "=", "new", "ODocument", "(", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 1815, 8867, 261, 576, 269, 10911, 5013, 263, 963, 261, 262, 262, 274, 2], "score": -0.39676135778427124, "weight": 1, "toks": ["<s>", "ODocument", "docTwo", "=", "new", "ODocument", "(", ")", ";", "ridBag", ".", "add", "(", "docOne", ")", ";", "ridBag", ".", "add", "(", "docTwo", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "assertEquals", "(", "2", ",", "ridBag", ".", "size", "(", ")", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 2], "score": -0.42357730865478516, "weight": 1, "toks": ["<s>", "ODocument", "docTwo", "=", "new", "ODocument", "(", ")", ";", "</s>"]}, {"tids": [1, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 2], "score": -0.43129807710647583, "weight": 1, "toks": ["<s>", "ODocument", "docTwo", "=", "new", "ODocument", "(", ")", ";", "</s>"]}, {"tids": [1, 997, 3335, 263, 652, 261, 315, 508, 315, 269, 315, 4319, 6942, 315, 262, 274, 1365, 1759, 263, 652, 261, 315, 3746, 1759, 315, 269, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 2063, 263, 1923, 261, 1365, 1759, 262, 274, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.45745643973350525, "weight": 1, "toks": ["<s>", "docOne", ".", "field", "(", "\"", "name", "\"", ",", "\"", "Document", "One", "\"", ")", ";", "rootDoc", ".", "field", "(", "\"", "relatedDoc", "\"", ",", "docOne", ")", ";", "ridBag", ".", "add", "(", "docOne", ")", ";", "database", ".", "save", "(", "rootDoc", ")", ";", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 997, 3335, 263, 1923, 261, 262, 274, 2], "score": -0.46363532543182373, "weight": 1, "toks": ["<s>", "docOne", ".", "save", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 11.017167600428477, "bleu-max": 20.44531015372686, "bleu-min": 8.786478718713314, "bleu-avg": 11.297057138019326, "code-bleu": 1.8434382108978582, "code-bleu-max": 17.191846504039702, "code-bleu-min": 1.694378782005216, "code-bleu-avg": 4.006592419714072, "edit-sim": 37, "edit-sim-max": 48, "edit-sim-min": 30, "edit-sim-avg": 39.0, "rouge-p": 57.14285714285714, "rouge-p-max": 66.66666666666666, "rouge-p-min": 42.857142857142854, "rouge-p-avg": 52.77777777777777, "rouge-r": 50.0, "rouge-r-max": 50.0, "rouge-r-min": 37.5, "rouge-r-avg": 48.75, "rouge-f": 53.33333283555556, "rouge-f-max": 57.14285665306124, "rouge-f-min": 39.999999502222224, "rouge-f-avg": 50.46778661750422, "num-seq": 10}, "time": 0.6176788806915283, "misc": {}}
{"id": 161, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 632, 1439, 1071, 531, 2519, 1923, 261, 727, 514, 277, 29215, 262, 288, 327, 261, 531, 2519, 262, 1923, 261, 277, 29215, 269, 629, 262, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 640, 13227, 531, 2519, 4869, 350, 5013, 531, 2519, 32315, 32315, 727, 514, 1797, 273, 514, 263, 740, 261, 315, 3902, 6, 269, 333, 263, 508, 269, 16581, 262, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 3902, 6, 269, 10911, 5013, 262, 274, 531, 2519, 997, 3335, 273, 394, 531, 2519, 261, 262, 274, 997, 3335, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "topk": [{"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 2], "score": -0.026017069816589355, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "</s>"]}, {"tids": [1, 1365, 1759, 263, 1923, 261, 262, 274, 2], "score": -0.2248709350824356, "weight": 1, "toks": ["<s>", "rootDoc", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 2], "score": -0.2278556376695633, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 2], "score": -0.24526290595531464, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 2], "score": -0.28067702054977417, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "</s>"]}, {"tids": [1, 1375, 1842, 986, 11710, 16776, 12922, 1375, 1410, 11247, 598, 6534, 326, 2205, 1668, 471, 3929, 310, 263, 2], "score": -0.2971588373184204, "weight": 1, "toks": ["<s>", "`", "testAddTwoSavedDocuments", "`", "should", "proceed", "with", "adding", "the", "second", "document", "and", "verifying", ".", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 2], "score": -0.29717111587524414, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 2], "score": -0.3237414062023163, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "</s>"]}, {"tids": [1, 1021, 1842, 1410, 3929, 716, 6534, 2795, 5198, 7429, 358, 326, 4869, 350, 5013, 4533, 326, 1056, 434, 2855, 2186, 21419, 263, 2], "score": -0.3246375322341919, "weight": 1, "toks": ["<s>", "The", "test", "should", "verify", "that", "adding", "two", "saved", "documents", "to", "the", "ORidBag", "updates", "the", "count", "of", "cluster", "elements", "appropriately", ".", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 2], "score": -0.34014368057250977, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 11.374853510120092, "bleu-max": 100.0, "bleu-min": 10.052686727030013, "bleu-avg": 20.057757007565307, "code-bleu": 20.10220425311228, "code-bleu-max": 100.0, "code-bleu-min": 19.99794915640818, "code-bleu-avg": 28.090537427834782, "edit-sim": 30, "edit-sim-max": 100, "edit-sim-min": 28, "edit-sim-avg": 37.2, "rouge-p": 37.5, "rouge-p-max": 100.0, "rouge-p-min": 30.0, "rouge-p-avg": 43.5, "rouge-r": 42.857142857142854, "rouge-r-max": 100.0, "rouge-r-min": 42.857142857142854, "rouge-r-avg": 49.999999999999986, "rouge-f": 39.999999502222224, "rouge-f-max": 99.9999995, "rouge-f-min": 35.29411716262976, "rouge-f-avg": 46.39215636741484, "num-seq": 10}, "time": 0.9788565635681152, "misc": {}}
{"id": 162, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 1071, 531, 2519, 261, 262, 288, 3875, 261, 262, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 640, 13227, 531, 2519, 4869, 350, 5013, 531, 2519, 531, 2519, 32315, 32315, 727, 514, 1797, 273, 514, 263, 740, 261, 315, 3902, 6, 269, 333, 263, 508, 269, 16581, 262, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 3902, 6, 269, 10911, 5013, 262, 274, 531, 2519, 997, 3335, 273, 394, 531, 2519, 261, 262, 274, 997, 3335, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 2], "topk": [{"tids": [1, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "score": -0.004352899268269539, "weight": 1, "toks": ["<s>", "docTwo", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "score": -0.25744426250457764, "weight": 1, "toks": ["<s>", "docTwo", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "score": -0.26512420177459717, "weight": 1, "toks": ["<s>", "docTwo", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "score": -0.28503596782684326, "weight": 1, "toks": ["<s>", "docTwo", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "score": -0.29749903082847595, "weight": 1, "toks": ["<s>", "docTwo", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "score": -0.30911293625831604, "weight": 1, "toks": ["<s>", "docTwo", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "score": -0.3101751208305359, "weight": 1, "toks": ["<s>", "docTwo", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "score": -0.31026336550712585, "weight": 1, "toks": ["<s>", "docTwo", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "score": -0.310914009809494, "weight": 1, "toks": ["<s>", "docTwo", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "score": -0.33961302042007446, "weight": 1, "toks": ["<s>", "docTwo", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 76.19214560301415, "bleu-avg": 85.77466428448514, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 65.76775519086557, "code-bleu-avg": 88.3162316662915, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 91, "edit-sim-avg": 97.2, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 80.0, "rouge-p-avg": 88.13888888888889, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 87.5, "rouge-r-avg": 91.25, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 87.4999995, "rouge-f-avg": 89.55065309556156, "num-seq": 10}, "time": 0.8685038089752197, "misc": {}}
{"id": 163, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 632, 1439, 1071, 531, 2519, 1923, 261, 727, 514, 277, 29215, 262, 288, 327, 261, 531, 2519, 262, 1923, 261, 277, 29215, 269, 629, 262, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 640, 13227, 531, 2519, 4869, 350, 5013, 531, 2519, 531, 2519, 32315, 32315, 727, 514, 1797, 273, 514, 263, 740, 261, 315, 3902, 6, 269, 333, 263, 508, 269, 16581, 262, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 3902, 6, 269, 10911, 5013, 262, 274, 531, 2519, 997, 3335, 273, 394, 531, 2519, 261, 262, 274, 997, 3335, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "topk": [{"tids": [1, 1220, 1842, 1410, 1815, 716, 2795, 7429, 1240, 2118, 3096, 8783, 263, 2], "score": -0.17896799743175507, "weight": 1, "toks": ["<s>", "This", "test", "should", "assert", "that", "two", "documents", "have", "been", "added", "correctly", ".", "</s>"]}, {"tids": [1, 1788, 279, 1842, 358, 3929, 326, 6885, 1347, 2795, 7429, 854, 3096, 358, 279, 2855, 263, 2], "score": -0.28729790449142456, "weight": 1, "toks": ["<s>", "Create", "a", "test", "to", "verify", "the", "behavior", "when", "two", "documents", "are", "added", "to", "a", "cluster", ".", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.34989479184150696, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "ridBag", ".", "add", "(", "docTwo", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 2], "score": -0.37034085392951965, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "ridBag", ".", "add", "(", "docTwo", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "score": -0.4394266903400421, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "ridBag", ".", "add", "(", "docTwo", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 2], "score": -0.44112709164619446, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "ridBag", ".", "add", "(", "docTwo", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 1375, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 1375, 2], "score": -0.45378318428993225, "weight": 1, "toks": ["<s>", "`", "ridBag", ".", "add", "(", "docOne", ")", ";", "ridBag", ".", "add", "(", "docTwo", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "`", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.4664650559425354, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "ridBag", ".", "add", "(", "docTwo", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "score": -0.4772356152534485, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docOne", ")", ";", "ridBag", ".", "add", "(", "docTwo", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 288, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 10911, 5013, 315, 269, 10911, 5013, 262, 274, 531, 2519, 997, 3335, 273, 394, 531, 2519, 261, 262, 274, 997, 3335, 263, 1923, 261, 262, 274, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 997, 11710, 263, 1923, 261, 262, 274, 289, 2], "score": -0.48732030391693115, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "{", "long", "recordsCount", "=", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ";", "database", ".", "begin", "(", ")", ";", "ODocument", "rootDoc", "=", "new", "ODocument", "(", ")", ";", "ORidBag", "ridBag", "=", "new", "ORidBag", "(", ")", ";", "rootDoc", ".", "field", "(", "\"", "ridBag", "\"", ",", "ridBag", ")", ";", "ODocument", "docOne", "=", "new", "ODocument", "(", ")", ";", "docOne", ".", "save", "(", ")", ";", "ODocument", "docTwo", "=", "new", "ODocument", "(", ")", ";", "docTwo", ".", "save", "(", ")", ";", "}", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 11.044795567078944, "bleu-max": 27.48254571080018, "bleu-min": 9.760993379048989, "bleu-avg": 19.49658606846034, "code-bleu": 3.8001591012813885, "code-bleu-max": 5.665920836331589, "code-bleu-min": 3.674552282256903, "code-bleu-avg": 4.682778579809684, "edit-sim": 28, "edit-sim-max": 48, "edit-sim-min": 27, "edit-sim-avg": 37.7, "rouge-p": 37.5, "rouge-p-max": 60.0, "rouge-p-min": 30.0, "rouge-p-avg": 44.57142857142857, "rouge-r": 50.0, "rouge-r-max": 50.0, "rouge-r-min": 50.0, "rouge-r-avg": 50.0, "rouge-f": 42.85714236734694, "rouge-f-max": 54.54545404958678, "rouge-f-min": 37.49999953125, "rouge-f-avg": 46.48726224630076, "num-seq": 10}, "time": 0.826228141784668, "misc": {}}
{"id": 164, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 1071, 918, 527, 261, 531, 6106, 8424, 3390, 8424, 262, 288, 7152, 263, 527, 261, 3390, 8424, 262, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 640, 13227, 531, 2519, 4869, 350, 5013, 531, 2519, 531, 2519, 32315, 32315, 1384, 1011, 1024, 5579, 1782, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 3902, 6, 269, 10911, 5013, 262, 274, 531, 2519, 997, 3335, 273, 394, 531, 2519, 261, 262, 274, 997, 3335, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 2], "topk": [{"tids": [1, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "score": -0.0039186859503388405, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docTwo", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "score": -0.3393648564815521, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docTwo", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "score": -0.5063865184783936, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docTwo", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "score": -0.5109468698501587, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docTwo", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "score": -0.5439982414245605, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docTwo", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "score": -0.5764517188072205, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docTwo", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "score": -0.5873216986656189, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docTwo", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "score": -0.5975742936134338, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docTwo", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "score": -0.6002838611602783, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docTwo", ")", ";", "</s>"]}, {"tids": [1, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "score": -0.6023826599121094, "weight": 1, "toks": ["<s>", "ridBag", ".", "add", "(", "docTwo", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 100, "xmatch-top3": 100, "xmatch-top5": 100, "xmatch-top10": 100, "xmatch-top100": 100, "bleu": 100.0, "bleu-max": 100.0, "bleu-min": 11.42205734428228, "bleu-avg": 21.49277432510396, "code-bleu": 100.0, "code-bleu-max": 100.0, "code-bleu-min": 4.620504878827553, "code-bleu-avg": 14.287310425008792, "edit-sim": 100, "edit-sim-max": 100, "edit-sim-min": 27, "edit-sim-avg": 36.2, "rouge-p": 100.0, "rouge-p-max": 100.0, "rouge-p-min": 33.33333333333333, "rouge-p-avg": 43.77777777777777, "rouge-r": 100.0, "rouge-r-max": 100.0, "rouge-r-min": 66.66666666666666, "rouge-r-avg": 69.99999999999997, "rouge-f": 99.9999995, "rouge-f-max": 99.9999995, "rouge-f-min": 44.444444000000004, "rouge-f-avg": 53.11111064783334, "num-seq": 10}, "time": 1.0137178897857666, "misc": {}}
{"id": 165, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 1071, 918, 527, 261, 531, 6106, 8424, 3390, 8424, 262, 288, 7152, 263, 527, 261, 3390, 8424, 262, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 640, 13227, 531, 2519, 4869, 350, 5013, 531, 2519, 531, 2519, 32315, 32315, 327, 5242, 9516, 13290, 261, 341, 3335, 269, 341, 11710, 262, 692, 300, 404, 294, 404, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 3902, 6, 269, 10911, 5013, 262, 274, 531, 2519, 997, 3335, 273, 394, 531, 2519, 261, 262, 274, 997, 3335, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 2], "topk": [{"tids": [1, 14373, 326, 1375, 527, 1375, 707, 364, 1375, 4869, 350, 5013, 1375, 471, 3929, 326, 1056, 10929, 263, 2], "score": -0.23078112304210663, "weight": 1, "toks": ["<s>", "Invoke", "the", "`", "add", "`", "method", "for", "`", "ORidBag", "`", "and", "verify", "the", "count", "increase", ".", "</s>"]}, {"tids": [1, 1365, 1759, 263, 1923, 261, 262, 274, 2], "score": -0.2328292280435562, "weight": 1, "toks": ["<s>", "rootDoc", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 1365, 1759, 263, 1923, 261, 262, 274, 2], "score": -0.30963438749313354, "weight": 1, "toks": ["<s>", "rootDoc", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 1365, 1759, 263, 1923, 261, 262, 274, 2], "score": -0.3516257107257843, "weight": 1, "toks": ["<s>", "rootDoc", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.35360187292099, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 1365, 1759, 263, 1923, 261, 262, 274, 2], "score": -0.39190375804901123, "weight": 1, "toks": ["<s>", "rootDoc", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 1220, 1842, 648, 269, 1375, 1842, 986, 11710, 16776, 12922, 1375, 269, 20761, 326, 695, 301, 2656, 2719, 434, 2795, 7429, 1368, 392, 4869, 350, 5013, 3470, 279, 2063, 263, 13743, 296, 272, 279, 20570, 784, 898, 2378, 434, 6075, 294, 404, 263, 380, 380, 3603, 5947, 471, 10939, 380, 380, 294, 6066, 773, 279, 2492, 316, 326, 2063, 1339, 263, 576, 263, 380, 380, 4319, 18199, 471, 7074, 380, 380, 294, 10210, 2795, 3884, 434, 1375, 531, 2519, 1375, 471, 14649, 3937, 1368, 326, 2063, 2855, 263, 890, 263, 380, 380, 21240, 358, 4869, 350, 5013, 380, 380, 294, 15605, 3937, 7429, 358, 392, 1375, 4869, 350, 5013, 1375, 3627, 598, 279, 1365, 1668, 263, 1021, 1842, 1508, 11199, 4259, 4209, 358, 2621, 309, 518, 848, 527, 7429, 358, 326, 4869, 350, 5013, 2887, 8296, 269, 22106, 27967, 24917, 2063, 5295, 3007, 8435, 279, 2492, 269, 15729, 7429, 269, 471, 21920, 501, 12597, 3470, 279, 1668, 261, 1375, 4869, 350, 5013, 1375, 316, 333, 648, 262, 263, 1220, 353, 279, 2836, 300, 1842, 358, 3387, 716, 4259, 5295, 1440, 487, 12613, 316, 326, 2063, 3875, 1399, 263, 2], "score": -0.4032965302467346, "weight": 1, "toks": ["<s>", "This", "test", "case", ",", "`", "testAddTwoSavedDocuments", "`", ",", "verifies", "the", "seamless", "addition", "of", "two", "documents", "into", "an", "ORidBag", "within", "a", "database", ".", "Here", "'", "s", "a", "concise", "breakdown", "of", "steps", ":", "1", ".", "*", "*", "Start", "Transaction", "and", "Setup", "*", "*", ":", "Opens", "a", "transaction", "in", "the", "database", "session", ".", "2", ".", "*", "*", "Document", "Creation", "and", "Save", "*", "*", ":", "Creates", "two", "instances", "of", "`", "ODocument", "`", "and", "saves", "both", "into", "the", "database", "cluster", ".", "3", ".", "*", "*", "Adding", "to", "ORidBag", "*", "*", ":", "Adds", "both", "documents", "to", "an", "`", "ORidBag", "`", "associated", "with", "a", "root", "document", ".", "The", "test", "then", "performs", "these", "actions", "to", "see", "if", "it", "can", "add", "documents", "to", "the", "ORidBag", "without", "issues", ",", "encapsulating", "typical", "database", "operations", "like", "beginning", "a", "transaction", ",", "storing", "documents", ",", "and", "modifying", "data", "structures", "within", "a", "document", "(", "`", "ORidBag", "`", "in", "this", "case", ")", ".", "This", "is", "a", "unit", "-", "test", "to", "ensure", "that", "these", "operations", "work", "as", "intended", "in", "the", "database", "setup", "used", ".", "</s>"]}, {"tids": [1, 14373, 1375, 1365, 1759, 263, 1923, 261, 262, 1375, 358, 3898, 3478, 263, 2], "score": -0.41602417826652527, "weight": 1, "toks": ["<s>", "Invoke", "`", "rootDoc", ".", "save", "(", ")", "`", "to", "persist", "changes", ".", "</s>"]}, {"tids": [1, 1365, 1759, 263, 1923, 261, 262, 274, 2], "score": -0.42258700728416443, "weight": 1, "toks": ["<s>", "rootDoc", ".", "save", "(", ")", ";", "</s>"]}, {"tids": [1, 1365, 1759, 263, 1923, 261, 262, 274, 2], "score": -0.4305141866207123, "weight": 1, "toks": ["<s>", "rootDoc", ".", "save", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 56.668405171367596, "bleu-max": 56.668405171367596, "bleu-min": 6.987629333927319, "bleu-avg": 24.638707478353073, "code-bleu": 39.46698152099015, "code-bleu-max": 39.46698152099015, "code-bleu-min": 1.2539806008586427, "code-bleu-avg": 18.51964949694861, "edit-sim": 68, "edit-sim-max": 69, "edit-sim-min": 31, "edit-sim-avg": 47.2, "rouge-p": 50.0, "rouge-p-max": 80.0, "rouge-p-min": 37.5, "rouge-p-avg": 50.40476190476191, "rouge-r": 62.5, "rouge-r-max": 62.5, "rouge-r-min": 37.5, "rouge-r-avg": 50.0, "rouge-f": 55.5555550617284, "rouge-f-max": 61.53846106508877, "rouge-f-min": 37.4999995, "rouge-f-avg": 48.91880292980788, "num-seq": 10}, "time": 0.9016108512878418, "misc": {}}
{"id": 166, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 632, 1439, 1071, 531, 2519, 1923, 261, 727, 514, 277, 29215, 262, 288, 327, 261, 531, 2519, 262, 1923, 261, 277, 29215, 269, 629, 262, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 640, 13227, 531, 2519, 4869, 350, 5013, 531, 2519, 531, 2519, 32315, 32315, 1384, 1011, 1024, 5579, 1782, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 3902, 6, 269, 10911, 5013, 262, 274, 531, 2519, 997, 3335, 273, 394, 531, 2519, 261, 262, 274, 997, 3335, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 1365, 1759, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "topk": [{"tids": [1, 1815, 1248, 8867, 261, 3853, 1380, 269, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2], "score": -0.09449553489685059, "weight": 1, "toks": ["<s>", "assertNotEquals", "(", "recordsCount", ",", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 288, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 7128, 315, 269, 10911, 5013, 262, 274, 531, 2519, 997, 3335, 273, 394, 531, 2519, 261, 262, 274, 997, 3335, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 1365, 1759, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 289, 2], "score": -0.29793059825897217, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "{", "long", "recordsCount", "=", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ";", "database", ".", "begin", "(", ")", ";", "ODocument", "rootDoc", "=", "new", "ODocument", "(", ")", ";", "ORidBag", "ridBag", "=", "new", "ORidBag", "(", ")", ";", "rootDoc", ".", "field", "(", "\"", "STR", "\"", ",", "ridBag", ")", ";", "ODocument", "docOne", "=", "new", "ODocument", "(", ")", ";", "docOne", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "ODocument", "docTwo", "=", "new", "ODocument", "(", ")", ";", "docTwo", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "ridBag", ".", "add", "(", "docOne", ")", ";", "ridBag", ".", "add", "(", "docTwo", ")", ";", "rootDoc", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "}", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.3008330464363098, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.3077702224254608, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 1021, 1024, 3021, 1410, 1508, 1815, 309, 326, 2186, 732, 3096, 358, 326, 10911, 5013, 316, 1375, 1365, 1759, 1375, 18721, 3134, 2665, 12884, 294, 1375, 1375, 1375, 2252, 1815, 8867, 261, 576, 269, 1365, 1759, 263, 652, 261, 315, 7128, 315, 262, 263, 963, 261, 262, 262, 274, 1375, 1375, 1375, 2], "score": -0.3323023319244385, "weight": 1, "toks": ["<s>", "The", "next", "statement", "should", "then", "assert", "if", "the", "elements", "we", "added", "to", "the", "ridBag", "in", "`", "rootDoc", "`", "meet", "our", "expected", "outcome", ":", "`", "`", "`", "java", "assertEquals", "(", "2", ",", "rootDoc", ".", "field", "(", "\"", "STR", "\"", ")", ".", "size", "(", ")", ")", ";", "`", "`", "`", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.3374271094799042, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.35133710503578186, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.37749987840652466, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.3825022876262665, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}, {"tids": [1, 2063, 263, 3294, 261, 262, 274, 2], "score": -0.4049015939235687, "weight": 1, "toks": ["<s>", "database", ".", "commit", "(", ")", ";", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 13.888095170058957, "bleu-max": 48.54917717073234, "bleu-min": 12.273799381729997, "bleu-avg": 18.33156504379194, "code-bleu": 22.863998001228673, "code-bleu-max": 50.27109160515383, "code-bleu-min": 5.761659892994374, "code-bleu-avg": 23.87699437162302, "edit-sim": 35, "edit-sim-max": 75, "edit-sim-min": 30, "edit-sim-avg": 38.3, "rouge-p": 50.0, "rouge-p-max": 80.0, "rouge-p-min": 36.36363636363637, "rouge-p-avg": 48.36652236652237, "rouge-r": 80.0, "rouge-r-max": 80.0, "rouge-r-min": 60.0, "rouge-r-avg": 78.0, "rouge-f": 61.53846106508877, "rouge-f-max": 79.99999950000002, "rouge-f-min": 49.9999995138889, "rouge-f-avg": 58.99633653060077, "num-seq": 10}, "time": 0.9566645622253418, "misc": {}}
{"id": 167, "data_id": "csn-98945", "input_stids": [1, 7546, 4525, 2063, 5541, 7152, 3245, 6340, 32315, 632, 1439, 1071, 531, 4254, 411, 531, 2115, 405, 8006, 261, 262, 1216, 531, 3342, 503, 288, 866, 3678, 4496, 261, 262, 274, 2713, 263, 8006, 261, 262, 274, 327, 333, 274, 289, 32315, 4869, 350, 5013, 23102, 1891, 4709, 1525, 640, 13227, 531, 2519, 4869, 350, 5013, 531, 2519, 531, 2519, 32315, 32315, 727, 514, 1797, 273, 514, 263, 740, 261, 315, 3902, 6, 269, 333, 263, 508, 269, 16581, 262, 274, 32315, 632, 11672, 1071, 918, 24292, 261, 262, 1216, 1185, 288, 2063, 263, 14196, 12105, 261, 394, 531, 12105, 18060, 688, 4600, 261, 262, 262, 274, 289, 632, 11672, 1071, 918, 1865, 1305, 261, 262, 288, 1760, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 5469, 7614, 273, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 2366, 1463, 4522, 261, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 300, 404, 262, 274, 289, 632, 11672, 1071, 918, 1865, 797, 261, 262, 288, 727, 514, 15158, 273, 333, 263, 2900, 261, 262, 263, 8590, 261, 262, 274, 727, 514, 2502, 559, 273, 13840, 559, 261, 262, 274, 727, 514, 1361, 2853, 273, 2332, 263, 3911, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 273, 394, 531, 4254, 2519, 4188, 261, 2502, 559, 397, 315, 3902, 6, 397, 1361, 2853, 397, 315, 3902, 6, 397, 15158, 262, 274, 309, 261, 2063, 263, 1704, 261, 262, 262, 288, 2063, 263, 1696, 261, 315, 3902, 6, 269, 315, 3902, 6, 262, 274, 2063, 263, 3640, 261, 262, 274, 289, 2063, 263, 752, 261, 262, 274, 289, 632, 7360, 1071, 918, 1839, 1305, 261, 262, 288, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 3375, 22235, 7660, 67, 4296, 67, 14541, 26557, 38, 673, 5233, 45, 67, 23840, 263, 5524, 261, 1760, 7614, 262, 274, 531, 5160, 1750, 263, 534, 734, 67, 38, 1781, 67, 14541, 26557, 38, 673, 5233, 45, 67, 4296, 67, 3375, 22235, 7660, 67, 23840, 263, 5524, 261, 5469, 7614, 262, 274, 289, 632, 7360, 1071, 918, 1839, 797, 261, 262, 1216, 1185, 288, 2063, 263, 3640, 261, 262, 274, 289, 32315, 632, 1439, 1071, 1525, 1056, 3629, 3471, 261, 509, 277, 3935, 3629, 548, 262, 288, 866, 3678, 4496, 261, 262, 274, 327, 2713, 263, 1056, 3629, 3471, 261, 277, 3935, 3629, 548, 262, 274, 289, 32315, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 32315, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 3902, 6, 269, 10911, 5013, 262, 274, 531, 2519, 997, 3335, 273, 394, 531, 2519, 261, 262, 274, 997, 3335, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 997, 11710, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 1365, 1759, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2063, 263, 8006, 261, 262, 274, 2], "topk": [{"tids": [1, 1021, 2202, 1842, 3021, 716, 3377, 3929, 326, 707, 3613, 1842, 23500, 353, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 288, 1525, 3853, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1365, 1759, 273, 394, 531, 2519, 261, 262, 274, 4869, 350, 5013, 10911, 5013, 273, 394, 4869, 350, 5013, 261, 262, 274, 1365, 1759, 263, 652, 261, 315, 10911, 5013, 315, 269, 10911, 5013, 262, 274, 531, 2519, 997, 3335, 273, 394, 531, 2519, 261, 262, 274, 531, 2519, 997, 11710, 273, 394, 531, 2519, 261, 262, 274, 997, 3335, 263, 1923, 261, 262, 274, 997, 11710, 263, 1923, 261, 262, 274, 10911, 5013, 263, 527, 261, 997, 3335, 262, 274, 10911, 5013, 263, 527, 261, 997, 11710, 262, 274, 1365, 1759, 263, 1923, 261, 262, 274, 2063, 263, 8006, 261, 262, 274, 1815, 8867, 261, 3853, 1380, 269, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 4271, 2856, 326, 1375, 8006, 1375, 707, 8214, 15436, 281, 3478, 7165, 316, 279, 2492, 269, 24831, 716, 326, 1300, 434, 3853, 1865, 471, 1839, 326, 2492, 22632, 326, 1967, 263, 2], "score": -0.18348583579063416, "weight": 1, "toks": ["<s>", "The", "single", "test", "statement", "that", "could", "verify", "the", "method", "under", "test", "effectively", "is", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "{", "long", "recordsCount", "=", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ";", "database", ".", "begin", "(", ")", ";", "ODocument", "rootDoc", "=", "new", "ODocument", "(", ")", ";", "ORidBag", "ridBag", "=", "new", "ORidBag", "(", ")", ";", "rootDoc", ".", "field", "(", "\"", "ridBag", "\"", ",", "ridBag", ")", ";", "ODocument", "docOne", "=", "new", "ODocument", "(", ")", ";", "ODocument", "docTwo", "=", "new", "ODocument", "(", ")", ";", "docOne", ".", "save", "(", ")", ";", "docTwo", ".", "save", "(", ")", ";", "ridBag", ".", "add", "(", "docOne", ")", ";", "ridBag", ".", "add", "(", "docTwo", ")", ";", "rootDoc", ".", "save", "(", ")", ";", "database", ".", "rollback", "(", ")", ";", "assertEquals", "(", "recordsCount", ",", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "}", "`", "`", "`", "This", "test", "checks", "whether", "the", "`", "rollback", "`", "method", "properly", "undoes", "changes", "made", "in", "a", "transaction", ",", "ensuring", "that", "the", "number", "of", "records", "before", "and", "after", "the", "transaction", "remains", "the", "same", ".", "</s>"]}, {"tids": [1, 1220, 1842, 4271, 326, 8006, 14176, 316, 279, 2063, 2492, 29876, 6282, 326, 2719, 434, 2795, 5198, 7429, 358, 392, 531, 2519, 296, 272, 4869, 350, 5013, 263, 1021, 2492, 353, 28693, 1473, 269, 1427, 326, 3478, 1410, 486, 3898, 269, 471, 1410, 3929, 716, 326, 8006, 23500, 15436, 281, 326, 2719, 434, 7429, 263, 2], "score": -0.21983686089515686, "weight": 1, "toks": ["<s>", "This", "test", "checks", "the", "rollback", "functionality", "in", "a", "database", "transaction", "involving", "the", "addition", "of", "two", "saved", "documents", "to", "an", "ODocument", "'", "s", "ORidBag", ".", "The", "transaction", "is", "rolled", "back", ",", "so", "the", "changes", "should", "not", "persist", ",", "and", "should", "verify", "that", "the", "rollback", "effectively", "undoes", "the", "addition", "of", "documents", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.2572805881500244, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.3351537883281708, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.34711316227912903, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 2974, 23500, 1842, 326, 1375, 8006, 261, 262, 1375, 707, 3470, 326, 981, 13016, 2112, 269, 333, 2836, 1842, 1410, 279, 381, 358, 3387, 716, 1281, 3478, 7165, 4982, 279, 2492, 854, 486, 14249, 3647, 279, 8006, 353, 27183, 263, 24907, 543, 353, 279, 20570, 784, 3454, 294, 1375, 1375, 1375, 2252, 632, 7766, 1071, 918, 1842, 12703, 2083, 7919, 261, 262, 288, 1525, 2172, 2115, 1380, 273, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 274, 2063, 263, 2376, 261, 262, 274, 531, 2519, 1668, 273, 394, 531, 2519, 261, 262, 274, 1668, 263, 1923, 261, 2063, 263, 21206, 461, 5132, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 1815, 1248, 8867, 261, 2172, 2115, 1380, 269, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 2063, 263, 8006, 261, 262, 274, 1815, 8867, 261, 2172, 2115, 1380, 269, 2063, 263, 1056, 3629, 3471, 261, 2063, 263, 4829, 3629, 548, 261, 262, 262, 262, 274, 289, 1375, 1375, 1375, 1220, 1842, 648, 11932, 716, 294, 404, 263, 1021, 1409, 1056, 1865, 471, 1839, 326, 8006, 854, 3959, 269, 6932, 310, 716, 326, 2492, 3478, 261, 3007, 1409, 2719, 262, 854, 486, 14249, 263, 576, 263, 17776, 3470, 326, 2492, 261, 3096, 1668, 262, 13418, 326, 2063, 18917, 269, 11193, 392, 2695, 2492, 263, 2], "score": -0.3534736931324005, "weight": 1, "toks": ["<s>", "To", "effectively", "test", "the", "`", "rollback", "(", ")", "`", "method", "within", "the", "code", "snippet", "provided", ",", "this", "unit", "test", "should", "aim", "to", "ensure", "that", "any", "changes", "made", "during", "a", "transaction", "are", "not", "persisted", "once", "a", "rollback", "is", "initiated", ".", "Below", "is", "a", "concise", "example", ":", "`", "`", "`", "java", "@", "Test", "public", "void", "testRollbackFunctionality", "(", ")", "{", "long", "initialRecordCount", "=", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ";", "database", ".", "begin", "(", ")", ";", "ODocument", "document", "=", "new", "ODocument", "(", ")", ";", "document", ".", "save", "(", "database", ".", "getClusterNameById", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "assertNotEquals", "(", "initialRecordCount", ",", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "database", ".", "rollback", "(", ")", ";", "assertEquals", "(", "initialRecordCount", ",", "database", ".", "countClusterElements", "(", "database", ".", "getDefaultClusterId", "(", ")", ")", ")", ";", "}", "`", "`", "`", "This", "test", "case", "ensures", "that", ":", "1", ".", "The", "record", "count", "before", "and", "after", "the", "rollback", "are", "equal", ",", "confirming", "that", "the", "transaction", "changes", "(", "like", "record", "addition", ")", "are", "not", "persisted", ".", "2", ".", "Changes", "within", "the", "transaction", "(", "added", "document", ")", "affect", "the", "database", "temporarily", ",", "indicating", "an", "active", "transaction", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.36167213320732117, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 1021, 707, 1375, 1842, 986, 11710, 16776, 12922, 261, 262, 1375, 353, 7769, 326, 1207, 434, 6534, 2795, 531, 2519, 3884, 358, 392, 4869, 350, 5013, 471, 24831, 3675, 9756, 471, 8006, 14176, 6330, 487, 2665, 316, 392, 531, 4254, 2519, 4188, 2063, 263, 2], "score": -0.40216392278671265, "weight": 1, "toks": ["<s>", "The", "method", "`", "testAddTwoSavedDocuments", "(", ")", "`", "is", "testing", "the", "process", "of", "adding", "two", "ODocument", "instances", "to", "an", "ORidBag", "and", "ensuring", "their", "persistence", "and", "rollback", "functionality", "works", "as", "expected", "in", "an", "ODatabaseDocumentTx", "database", ".", "</s>"]}, {"tids": [1, 632, 7766, 1071, 918, 1842, 986, 11710, 16776, 12922, 261, 262, 2], "score": -0.43972453474998474, "weight": 1, "toks": ["<s>", "@", "Test", "public", "void", "testAddTwoSavedDocuments", "(", ")", "</s>"]}, {"tids": [1, 7693, 716, 6534, 2795, 7429, 358, 392, 4869, 350, 5013, 471, 21793, 1473, 326, 2492, 8783, 15436, 281, 326, 3478, 263, 2], "score": -0.4707024097442627, "weight": 1, "toks": ["<s>", "Ensure", "that", "adding", "two", "documents", "to", "an", "ORidBag", "and", "rolling", "back", "the", "transaction", "correctly", "undoes", "the", "changes", ".", "</s>"]}], "topk_insn": [], "metrics": {"xmatch": 0, "xmatch-top3": 0, "xmatch-top5": 0, "xmatch-top10": 0, "xmatch-top100": 0, "bleu": 12.289268567188152, "bleu-max": 62.93321993912831, "bleu-min": 6.910763571692688, "bleu-avg": 19.228076336123326, "code-bleu": 6.536625538826526, "code-bleu-max": 67.76300230972925, "code-bleu-min": 1.4616339048277305, "code-bleu-avg": 14.901071267226456, "edit-sim": 46, "edit-sim-max": 81, "edit-sim-min": 38, "edit-sim-avg": 50.2, "rouge-p": 85.71428571428571, "rouge-p-max": 87.5, "rouge-p-min": 50.0, "rouge-p-avg": 75.12987012987011, "rouge-r": 60.0, "rouge-r-max": 80.0, "rouge-r-min": 40.0, "rouge-r-avg": 59.0, "rouge-f": 70.58823480968859, "rouge-f-max": 77.77777728395063, "rouge-f-min": 44.44444395061729, "rouge-f-avg": 65.78898176899868, "num-seq": 10}, "time": 0.9949393272399902, "misc": {}}
